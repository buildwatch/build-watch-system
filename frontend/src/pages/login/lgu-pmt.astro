---
import Layout from "../../layouts/Layout.astro";
---
<Layout title="Build Watch Portal | Login">
  <div class="min-h-screen w-full flex items-center justify-center bg-gradient-to-br from-blue-800 via-blue-600 to-white font-[Montserrat]">
    <!-- Left Side - Welcome Content -->
    <div class="hidden lg:flex lg:w-1/2 bg-gradient-to-br from-blue-800 to-blue-600 text-white p-12 flex-col justify-center items-center rounded-r-3xl shadow-xl min-h-[600px] animate-slide-in-left">
      <div class="max-w-md animate-fade-in-up" style="animation-delay: 0.2s;">
        <img src="/top-logo.png" alt="Build Watch Logo" class="h-32 w-auto mb-8 drop-shadow-lg animate-fade-in-up" style="animation-delay: 0.4s;" />
        <h1 class="text-4xl font-extrabold mb-6 animate-fade-in-up" style="animation-delay: 0.6s;">Build Watch Portal</h1>
        <p class="text-xl mb-8 text-white/90 animate-fade-in-up" style="animation-delay: 0.8s;">
          Unified Access Portal for All User Types
        </p>
        <ul class="space-y-4 text-white/80 animate-fade-in-up" style="animation-delay: 1s;">
          <li class="flex items-center gap-3 animate-slide-in-left" style="animation-delay: 1.2s;">
            <span class="w-2 h-2 bg-white rounded-full inline-block flex-shrink-0"></span>
            <span>Single sign-on for all user types</span>
          </li>
          <li class="flex items-center gap-3 animate-slide-in-left" style="animation-delay: 1.4s;">
            <span class="w-2 h-2 bg-white rounded-full inline-block flex-shrink-0"></span>
            <span>Role-based dashboard access</span>
          </li>
          <li class="flex items-center gap-3 animate-slide-in-left" style="animation-delay: 1.6s;">
            <span class="w-2 h-2 bg-white rounded-full inline-block flex-shrink-0"></span>
            <span>Secure authentication system</span>
          </li>
        </ul>
      </div>
    </div>
    
    <!-- Right Side - Login Form -->
    <div class="w-full lg:w-1/2 flex items-center justify-center p-4 sm:p-6 bg-transparent animate-slide-in-right">
      <div class="w-full max-w-md rounded-[32px] shadow-2xl border border-white/30 p-8 sm:p-10 flex flex-col items-center animate-fade-in-up"
        style="background: rgba(255, 255, 255, 0.05); backdrop-filter: blur(60px) saturate(200%) brightness(110%); box-shadow: 0 30px 60px 0 rgba(0, 0, 0, 0.2), 0 0 0 1px rgba(255, 255, 255, 0.15), inset 0 1px 0 rgba(255, 255, 255, 0.2); animation-delay: 0.3s;">
        <div class="flex flex-col items-center w-full">
          <img src="/login-logo.png" alt="Build Watch Logo" class="h-32 w-auto mb-6 animate-fade-in-up" style="animation-delay: 0.5s;" />
          <h2 class="text-3xl font-extrabold text-[#fff] mb-3 tracking-wide animate-fade-in-up" style="animation-delay: 0.7s;">LOGIN</h2>
          <p class="text-base text-white/90 mb-8 text-center animate-fade-in-up" style="animation-delay: 0.9s;">
            Please enter your credentials to access your account.<br/>Thank you
          </p>
          <hr class="w-full border-t border-white/30 mb-8 animate-fade-in-up" style="animation-delay: 1.1s;" />
          
          <form id="loginForm" class="w-full flex flex-col gap-6 animate-fade-in-up" style="animation-delay: 1.3s;">
            <div id="errorMessage" class="hidden bg-red-500/20 border border-red-500/50 text-red-200 px-4 py-3 rounded-lg text-sm font-medium"></div>
            
            <div class="animate-fade-in-up" style="animation-delay: 1.4s;">
              <label for="username" class="block text-sm font-bold text-[#fff] mb-2">Username (Email)</label>
              <input 
                type="email" 
                id="username" 
                name="username" 
                required 
                class="w-full px-4 py-3 rounded-xl bg-white/90 text-blue-600 font-semibold border-2 border-transparent focus:ring-2 focus:ring-blue-600 focus:border-blue-600 placeholder:text-blue-600/60 transition-all duration-200" 
                placeholder="Enter your email address" 
              />
            </div>
            
            <div class="animate-fade-in-up" style="animation-delay: 1.5s;">
              <label for="password" class="block text-sm font-bold text-[#fff] mb-2">Password</label>
              <div class="relative">
                <input 
                  type="password" 
                  id="password" 
                  name="password" 
                  required 
                  class="w-full px-4 py-3 pr-12 rounded-xl bg-white/90 text-blue-600 font-semibold border-2 border-transparent focus:ring-2 focus:ring-blue-600 focus:border-blue-600 placeholder:text-blue-600/60 transition-all duration-200" 
                  placeholder="Enter your password" 
                />
                <button 
                  type="button" 
                  id="passwordToggle" 
                  class="absolute right-3 top-1/2 transform -translate-y-1/2 text-blue-600 hover:text-blue-800 transition-colors duration-200 focus:outline-none p-1 rounded"
                >
                  <svg id="eyeIcon" class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                  </svg>
                  <svg id="eyeSlashIcon" class="w-5 h-5 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>
                  </svg>
                </button>
              </div>
            </div>
            
            <div class="flex items-center justify-between mt-2 animate-fade-in-up" style="animation-delay: 1.6s;">
              <div class="flex items-center gap-2">
                <input type="checkbox" id="remember" name="remember" class="h-4 w-4 text-blue-600 focus:ring-blue-600 border-gray-300 rounded" />
                <label for="remember" class="text-sm text-white whitespace-nowrap">Remember Me</label>
              </div>
              <a href="#" class="text-sm text-white/80 hover:text-white underline transition-colors duration-200 whitespace-nowrap">Forgot Password?</a>
            </div>
            
            <button 
              type="submit" 
              id="loginBtn" 
              class="w-full mt-6 py-3.5 rounded-xl bg-blue-600 text-white font-extrabold text-lg shadow-lg hover:bg-blue-800 transition-all duration-300 transform hover:scale-[1.02] animate-fade-in-up" 
              style="animation-delay: 1.7s;"
            >
              LOG IN
            </button>
          </form>
          
          <!-- Back to Public Pages Button -->
          <div class="w-full mt-8 pt-6 border-t border-white/20 animate-fade-in-up" style="animation-delay: 1.8s;">
            <a 
              href="/home" 
              class="group flex items-center justify-center gap-3 w-full px-4 py-3 rounded-xl bg-white/10 backdrop-blur-sm text-white font-medium text-sm hover:bg-white/20 transition-all duration-300 border border-white/20 hover:border-white/40 hover:shadow-lg hover:shadow-white/10 transform hover:scale-[1.02]"
            >
              <svg class="w-4 h-4 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
              </svg>
              <span>Back to Public Pages</span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const loginForm = document.getElementById('loginForm');
      const loginBtn = document.getElementById('loginBtn');
      const errorMessage = document.getElementById('errorMessage');
      const passwordToggle = document.getElementById('passwordToggle');
      const passwordInput = document.getElementById('password');
      const eyeIcon = document.getElementById('eyeIcon');
      const eyeSlashIcon = document.getElementById('eyeSlashIcon');
      
      // Password visibility toggle functionality
      passwordToggle.addEventListener('click', function() {
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);
        
        // Toggle icon visibility
        if (type === 'text') {
          eyeIcon.classList.add('hidden');
          eyeSlashIcon.classList.remove('hidden');
        } else {
          eyeIcon.classList.remove('hidden');
          eyeSlashIcon.classList.add('hidden');
        }
      });
      
      loginForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const username = document.getElementById('username').value.trim();
        const password = document.getElementById('password').value;
        
        // Basic validation
        if (!username || !password) {
          errorMessage.textContent = 'Please fill in all required fields.';
          errorMessage.classList.remove('hidden');
          return;
        }
        
        // Show loading state
        loginBtn.disabled = true;
        loginBtn.textContent = 'Logging in...';
        errorMessage.classList.add('hidden');
        
        try {
          const response = await fetch('http://localhost:3000/api/auth/login', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ username, password })
          });
          
          const data = await response.json();
          
          if (response.ok && data.success) {
            // Store token and user data
            localStorage.setItem('token', data.token);
            localStorage.setItem('user', JSON.stringify(data.user));
            // Set token as cookie for SSR (expires in 1 day, secure if https)
            document.cookie = `token=${data.token}; Path=/; SameSite=Lax; Max-Age=86400`;
            // Show success toast (login page path)
            let waited = false;
            const sleep = (ms)=>new Promise(r=>setTimeout(r,ms));
            try {
              const toast = document.createElement('div');
              toast.id = 'login-success-toast-inline';
              toast.className = 'fixed top-5 right-5 z-[9999]';
              toast.innerHTML = `
                <div class="group min-w-[280px] max-w-[360px] bg-white/95 backdrop-blur-xl border border-emerald-200/60 shadow-2xl rounded-2xl overflow-hidden animate-[toastIn_.5s_ease]">
                  <div class="px-5 py-4 flex items-start gap-3">
                    <div class="w-9 h-9 rounded-xl bg-gradient-to-br from-emerald-500 to-teal-600 text-white flex items-center justify-center shadow-md">✓</div>
                    <div class="flex-1">
                      <div class="text-emerald-800 font-bold">Welcome back</div>
                      <div class="text-emerald-700/80 text-sm">${data.user?.name || data.user?.username || 'User'} successfully signed in</div>
                    </div>
                    <button aria-label="Close" class="text-emerald-700/60 hover:text-emerald-800" onclick="this.closest('#login-success-toast-inline')?.remove()">✕</button>
                  </div>
                  <div class="h-1 bg-emerald-200/60"><div class="h-full bg-gradient-to-r from-emerald-500 to-teal-600 animate-[bar_2s_linear]"></div></div>
                </div>
                <style>@keyframes toastIn{from{opacity:0;transform:translateY(-10px)}to{opacity:1;transform:translateY(0)}}@keyframes bar{from{width:100%}to{width:0}}</style>
              `;
              document.body.appendChild(toast);
              await sleep(2000);
              toast.remove();
              waited = true;
            } catch(e) {}
            
            // Redirect based on user role and subRole after toast fully displays
            if(!waited){ await sleep(2000); }
            redirectToDashboard(data.user);
          } else {
            // Show error message
            errorMessage.textContent = data.error || 'Login failed. Please check your credentials.';
            errorMessage.classList.remove('hidden');
          }
        } catch (error) {
          console.error('Login error:', error);
          errorMessage.textContent = 'An error occurred during login. Please try again.';
          errorMessage.classList.remove('hidden');
        } finally {
          // Reset button state
          loginBtn.disabled = false;
          loginBtn.textContent = 'LOG IN';
        }
      });
    });

    // Function to redirect to appropriate dashboard based on role and subRole
    function redirectToDashboard(user) {
      const { role, subRole } = user;
      
      // Special handling for SYS.AD role with different subRoles
      if (role === 'SYS.AD') {
        if (subRole === 'EXECUTIVE') {
          window.location.href = '/dashboard/executive-viewer/ExecutiveDashboard';
          return;
        } else {
          // Default System Admin dashboard
          window.location.href = '/dashboard/sysadmin/SysAdminDashboard';
          return;
        }
      }

      // Special handling for LGU-PMT role with different subRoles
      if (role === 'LGU-PMT') {
        if (subRole && typeof subRole === 'string' && subRole.toLowerCase() === 'mpmec') {
          window.location.href = '/dashboard/lgu-pmt-mpmec/MPMECDashboard';
          return;
        } else if (subRole && typeof subRole === 'string' && subRole.toLowerCase().includes('secretariat')) {
          window.location.href = '/dashboard/lgu-pmt-mpmec-secretariat/SECRETARIATDashboard';
          return;
        } else {
          // Default LGU-PMT dashboard (for other sub-roles)
          window.location.href = '/dashboard/lgu-pmt-mpmec/MPMECDashboard';
          return;
        }
      }

      // Dashboard routes for other roles
      const dashboardRoutes = {
        'EIU': '/dashboard/eiu/EIUDashboard',
        'EMS': '/dashboard/ems/EMSDashboard',
        'LGU-IU': '/dashboard/iu-implementing-office/ImplementingOfficeDashboard',
        'IU': '/dashboard/iu-implementing-office/ImplementingOfficeDashboard'
      };

      const route = dashboardRoutes[role];
      if (route) {
        window.location.href = route;
      } else {
        // Default fallback
        window.location.href = '/dashboard/lgu-pmt-mpmec/MPMECDashboard';
      }
    }
  </script>

  <style>
    @keyframes slideInLeft {
      from {
        opacity: 0;
        transform: translateX(-100px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    @keyframes slideInRight {
      from {
        opacity: 0;
        transform: translateX(100px);
      }
      to {
        opacity: 1;
        transform: translateX(0);
      }
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(30px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .animate-slide-in-left {
      animation: slideInLeft 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    }

    .animate-slide-in-right {
      animation: slideInRight 1s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    }

    .animate-fade-in-up {
      animation: fadeInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
      opacity: 0;
    }

    .animate-pulse-slow {
      animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
    }
  </style>
</Layout> 