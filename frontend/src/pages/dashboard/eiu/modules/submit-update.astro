---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import EIULayout from '../../../../components/EIULayout.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let projects = [];
let selectedProject = null;
let projectMilestones = [];
let projectUpdates = [];
let loading = true;
let error = '';

// Try to fetch submit update data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch EIU projects
    const projectsRes = await fetch(`${API_URL}/eiu/projects`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        projects = data.projects;
      }
    }
  }
} catch (err) {
  console.error('Error fetching submit update data:', err);
  error = 'Failed to fetch submit update data.';
}

loading = false;
---

<Layout title="Submit Update | EIU Dashboard">
  <style>
    /* Timeline Styles */
    .timeline-milestone {
      position: absolute;
      height: 100%;
      border-radius: 4px;
      cursor: pointer;
      transition: all 0.3s ease;
      border: 2px solid white;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .timeline-milestone.completed {
      background: linear-gradient(45deg, #10b981, #059669);
    }
    
    .timeline-milestone.in_progress {
      background: linear-gradient(45deg, #3b82f6, #2563eb);
    }
    
    .timeline-milestone.pending {
      background: linear-gradient(45deg, #f59e0b, #d97706);
    }
    
    .timeline-milestone.delayed {
      background: linear-gradient(45deg, #ef4444, #dc2626);
    }
    
    .timeline-milestone:hover {
      transform: scale(1.05);
      box-shadow: 0 4px 8px rgba(0,0,0,0.2);
      z-index: 10;
    }
    
    .timeline-popup {
      position: fixed;
      background: white;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 12px;
      box-shadow: 0 10px 25px rgba(0,0,0,0.15);
      z-index: 1000;
      max-width: 250px;
      opacity: 0;
      transform: translateY(10px);
      transition: all 0.3s ease;
      pointer-events: none;
    }
    
    .timeline-popup.show {
      opacity: 1;
      transform: translateY(0);
      pointer-events: auto;
    }
    
    .timeline-popup::after {
      content: '';
      position: absolute;
      top: 100%;
      left: 50%;
      transform: translateX(-50%);
      border: 6px solid transparent;
      border-top-color: white;
    }
  </style>
  <EIULayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header Section -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Submit Update</h1>
          <p class="text-gray-600">Submit comprehensive project updates for timeline, budget, and physical divisions</p>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="refreshData()" class="px-4 py-2 bg-[#EB3C3C] text-white rounded-lg hover:bg-[#D63333] transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Refresh
          </button>
        </div>
      </div>

      <!-- Project Selection -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Select Project</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {projects.map(project => {
            const overallProgress = parseFloat(project.overallProgress) || 0;
            
            // Determine project status based on the three main statuses
            const projectStatus = project.status || 'pending';
            let statusText, statusClass;
            
            if (projectStatus.toLowerCase() === 'completed') {
              statusText = 'COMPLETE';
              statusClass = 'bg-green-100 text-green-700';
            } else if (project.approvedBySecretariat === true) {
              statusText = 'ONGOING';
              statusClass = 'bg-blue-100 text-blue-700';
            } else {
              statusText = 'PENDING';
              statusClass = 'bg-yellow-100 text-yellow-700';
            }
            
            return (
              <div class={`border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer project-card ${selectedProject && selectedProject.id === project.id ? 'border-[#EB3C3C] bg-blue-50 shadow-lg' : ''}`} data-project-id={project.id} onclick="selectProject('{project.id}')">
                <div class="flex items-start justify-between mb-3">
                  <div class="flex-1">
                    <h4 class="font-semibold text-gray-800 mb-1">{project.name}</h4>
                    <p class="text-sm text-gray-600">{project.projectCode}</p>
                  </div>
                  <div class="flex flex-col items-end gap-1">
                    <span class={`px-2 py-1 text-xs font-medium rounded-full ${statusClass}`}>
                      {statusText}
                    </span>
                  </div>
                </div>
                
                <div class="mb-3">
                  <div class="flex items-center justify-between mb-1">
                    <span class="text-sm text-gray-600">Progress</span>
                    <span class="text-sm font-medium text-gray-800">{overallProgress.toFixed(2)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class={`h-2 rounded-full ${
                      project.workflowStatus === 'completed' ? 'bg-green-500' : 'bg-[#EB3C3C]'
                    }`} style={`width: ${overallProgress}%`}></div>
                  </div>
                </div>
                
                <div class="grid grid-cols-3 gap-2 text-xs">
                  <div class="text-center">
                    <div class="w-full bg-gray-200 rounded-full h-1 mb-1">
                      <div class="bg-blue-500 h-1 rounded-full" style={`width: ${project.timelineProgress || 0}%`}></div>
                    </div>
                    <span class="text-gray-600">Timeline {(project.timelineProgress || 0).toFixed(2)}%</span>
                  </div>
                  <div class="text-center">
                    <div class="w-full bg-gray-200 rounded-full h-1 mb-1">
                      <div class="bg-green-500 h-1 rounded-full" style={`width: ${project.budgetProgress || 0}%`}></div>
                    </div>
                    <span class="text-gray-600">Budget {(project.budgetProgress || 0).toFixed(2)}%</span>
                  </div>
                  <div class="text-center">
                    <div class="w-full bg-gray-200 rounded-full h-1 mb-1">
                      <div class="bg-purple-500 h-1 rounded-full" style={`width: ${project.physicalProgress || 0}%`}></div>
                    </div>
                    <span class="text-gray-600">Physical {(project.physicalProgress || 0).toFixed(2)}%</span>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#EB3C3C]"></div>
          <span class="ml-3 text-gray-600">Loading submit update form...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12">
          <p class="text-red-600 mb-4">{error}</p>
          <button onclick="loadSubmitUpdate()" class="px-4 py-2 bg-[#EB3C3C] text-white rounded-lg hover:bg-[#D63333] transition-all">
            Try Again
          </button>
        </div>
      ) : projects.length === 0 ? (
        <div class="text-center py-12">
          <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">No Projects Assigned</h3>
          <p class="text-gray-600 mb-6">You don't have any projects assigned to you yet. Projects will appear here once they are assigned by the system administrator.</p>
          <button onclick="window.location.href='/dashboard/eiu/modules/profile'" class="px-6 py-3 bg-[#EB3C3C] text-white rounded-lg hover:bg-[#D63333] transition-colors flex items-center gap-2 mx-auto">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            View Profile
          </button>
        </div>
      ) : (
        <!-- Selected Project Info - Will be created dynamically -->
        <div id="selectedProjectInfoContainer"></div>

        <!-- Horizontal Timeline Section -->
        <div id="horizontalTimelineSection" class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8" style="display: none;">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-800">Project Timeline</h3>
            <button onclick="refreshProjectTimeline()" class="px-3 py-1 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-1">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Refresh
            </button>
          </div>
          
          <!-- Timeline Container -->
          <div id="projectTimelineContainer" class="relative">
            <div class="timeline-container h-12 bg-gray-100 rounded-lg relative overflow-hidden mb-2">
              <div class="timeline-track absolute inset-0 bg-gradient-to-r from-gray-200 to-gray-300"></div>
              <div class="timeline-grid absolute inset-0 flex">
                {Array.from({length: 12}, (_, i) => (
                  <div class="timeline-grid-line flex-1 border-r border-dashed border-gray-400"></div>
                ))}
              </div>
              <div class="timeline-milestones absolute inset-0"></div>
            </div>
            <div class="flex justify-between text-xs text-gray-500">
              <span id="timelineStartDate">Start Date</span>
              <span id="timelineEndDate">End Date</span>
            </div>
          </div>
          
          <!-- Timeline Legend -->
          <div class="mt-4 flex items-center gap-4 text-sm">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-green-500 rounded"></div>
              <span>Completed</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-blue-500 rounded"></div>
              <span>In Progress</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-yellow-500 rounded"></div>
              <span>Pending</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 bg-red-500 rounded"></div>
              <span>Delayed</span>
            </div>
          </div>
        </div>

        <!-- Pending Approval Message -->
        <div id="pendingMessage" class="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-8" style="display: none;">
          <div class="flex items-center gap-3">
            <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <div>
              <h3 class="text-lg font-semibold text-yellow-800">Project Pending Approval</h3>
              <p class="text-yellow-700">This project is currently pending Secretariat approval. You cannot submit updates until the project is approved and status changes to "ONGOING".</p>
            </div>
          </div>
        </div>

        <!-- Milestones Section -->
        <div id="milestonesSection" class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8" style="display: none;">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Project Milestones</h3>
          <div id="milestonesContainer">
            <!-- Milestones will be displayed here -->
          </div>
        </div>

        <!-- Submission History -->
        <div id="updatesHistory" class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8" style="display: none;">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-800">Submission History</h3>
            <button onclick="refreshSubmissionHistory()" class="px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-1">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Refresh
            </button>
          </div>
          
          <!-- History Summary -->
          <div id="historySummary" class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 text-center">
              <div class="text-2xl font-bold text-blue-600" id="totalSubmissions">0</div>
              <p class="text-sm text-blue-700">Total Submissions</p>
            </div>
            <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 text-center">
              <div class="text-2xl font-bold text-yellow-600" id="pendingReviews">0</div>
              <p class="text-sm text-yellow-700">Pending Review</p>
            </div>
            <div class="bg-green-50 border border-green-200 rounded-lg p-4 text-center">
              <div class="text-2xl font-bold text-green-600" id="approvedUpdates">0</div>
              <p class="text-sm text-green-700">Approved</p>
            </div>
            <div class="bg-red-50 border border-red-200 rounded-lg p-4 text-center">
              <div class="text-2xl font-bold text-red-600" id="rejectedUpdates">0</div>
              <p class="text-sm text-red-700">Rejected</p>
            </div>
          </div>
          
          <!-- Updates List -->
          <div id="updatesContainer" class="space-y-4">
            <!-- Updates will be displayed here -->
          </div>
          
          <!-- Empty State -->
          <div id="emptyHistory" class="text-center py-8" style="display: none;">
            <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <h4 class="text-lg font-semibold text-gray-800 mb-2">No Submissions Yet</h4>
            <p class="text-gray-600">Submit your first milestone update to see it appear here.</p>
          </div>
        </div>




      )}
    </section>
  </EIULayout>
</Layout>

<script>
  // API Configuration
  const API_URL = 'http://localhost:3000/api';
  
  // Global variables
  let projects = [];
  let selectedProject = null; // Start with no selected project
  let projectMilestones = [];
  let projectUpdates = [];
  let globalUploadedFiles = [];

  // Initialize the page
  async function initializePage() {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // Fetch user data for authentication
        const userRes = await fetch(`${API_URL}/auth/profile`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (userRes.ok) {
          const userDataResponse = await userRes.json();
          if (userDataResponse.success && userDataResponse.user) {
            // User data loaded
          }
        }

        // Fetch EIU projects
        const projectsRes = await fetch(`${API_URL}/eiu/projects`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (projectsRes.ok) {
          const data = await projectsRes.json();
          if (data.success) {
            projects = data.projects;
            setupProjectCards();
            
            // Ensure selectedProjectInfo is hidden initially
            const selectedProjectInfo = document.getElementById('selectedProjectInfo');
            if (selectedProjectInfo) {
              selectedProjectInfo.style.display = 'none';
              console.log('Ensured selectedProjectInfo is hidden initially');
            }
            
            // DO NOT auto-select project - let user click to select
            console.log('Projects loaded, waiting for user to select one');
          }
        }
      }
    } catch (error) {
      console.error('Error fetching submit update data:', error);
    }
  }

  // Initialize the page when the script loads
  initializePage();

  // Setup project card click handlers
  function setupProjectCards() {
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach(card => {
      card.addEventListener('click', function() {
        const projectId = this.getAttribute('data-project-id');
        selectProject(projectId);
      });
    });
  }

  // Select project
  async function selectProject(projectId) {
    try {
      console.log('User clicked project:', projectId);
      
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      selectedProject = projects.find(p => p.id === projectId);
      if (!selectedProject) {
        console.error('Project not found:', projectId);
        return;
      }

      console.log('Project selected:', selectedProject.name);

      // Update UI to show selected project info
      updateSelectedProjectUI();
      
      // Load project details
      await loadProjectDetails(projectId);
      
      // Show/hide sections based on project status
      const pendingMessage = document.getElementById('pendingMessage');
      const milestonesSection = document.getElementById('milestonesSection');
      const updatesHistory = document.getElementById('updatesHistory');
      
      // Determine project status
      const projectStatus = selectedProject.status || 'pending';
      const isApproved = selectedProject.approvedBySecretariat === true;
      
      if (projectStatus.toLowerCase() === 'pending' || !isApproved) {
        // Project is pending approval - EIU cannot submit updates
        if (pendingMessage) pendingMessage.style.display = 'block';
        if (milestonesSection) milestonesSection.style.display = 'none';
        if (updatesHistory) updatesHistory.style.display = 'none';
      } else if (projectStatus.toLowerCase() === 'completed') {
        // Project is completed - show history only
        if (pendingMessage) pendingMessage.style.display = 'none';
        if (milestonesSection) milestonesSection.style.display = 'none';
        if (updatesHistory) updatesHistory.style.display = 'block';
        loadSubmissionHistory();
      } else {
        // Project is ongoing (approved) - EIU can submit updates
        if (pendingMessage) pendingMessage.style.display = 'none';
        if (milestonesSection) milestonesSection.style.display = 'block';
        if (updatesHistory) updatesHistory.style.display = 'block';
        loadSubmissionHistory();
      }
      
    } catch (error) {
      console.error('Error selecting project:', error);
    }
  }

  // Update selected project UI - SIMPLE WORKING VERSION
  function updateSelectedProjectUI() {
    if (!selectedProject) return;

    // Get progress values directly from the project data
    const overallProgress = selectedProject.overallProgress || 0;
    const timelineProgress = selectedProject.timelineProgress || 0;
    const budgetProgress = selectedProject.budgetProgress || 0;
    const physicalProgress = selectedProject.physicalProgress || 0;

    console.log('Project progress data:', {
      overall: overallProgress,
      timeline: timelineProgress,
      budget: budgetProgress,
      physical: physicalProgress
    });

    // Create a simple, working HTML string with the actual values
    const projectInfoHTML = `
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <div class="flex items-center justify-between mb-4">
          <div>
            <h3 class="text-lg font-semibold text-gray-800">${selectedProject.name}</h3>
            <p class="text-sm text-gray-600">${selectedProject.projectCode}</p>
          </div>
          <span class="px-3 py-1 text-sm font-medium rounded-full ${
            selectedProject.status?.toLowerCase() === 'completed' ? 'bg-green-100 text-green-700' :
            selectedProject.approvedBySecretariat === true ? 'bg-blue-100 text-blue-700' :
            'bg-yellow-100 text-yellow-700'
          }">${
            selectedProject.status?.toLowerCase() === 'completed' ? 'COMPLETE' :
            selectedProject.approvedBySecretariat === true ? 'ONGOING' :
            'PENDING'
          }</span>
        </div>
        
                  <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600" style="min-height: 2rem; display: flex; align-items: center; justify-content: center;">${overallProgress.toFixed(2)}%</div>
              <p class="text-sm text-gray-600">Overall Progress</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
                <div class="bg-blue-500 h-2 rounded-full" style="width: ${overallProgress}%"></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600" style="min-height: 2rem; display: flex; align-items: center; justify-content: center;">${timelineProgress.toFixed(2)}%</div>
              <p class="text-sm text-gray-600">Timeline</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
                <div class="bg-green-500 h-2 rounded-full" style="width: ${timelineProgress}%"></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-purple-600" style="min-height: 2rem; display: flex; align-items: center; justify-content: center;">${budgetProgress.toFixed(2)}%</div>
              <p class="text-sm text-gray-600">Budget</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
                <div class="bg-purple-500 h-2 rounded-full" style="width: ${budgetProgress}%"></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-orange-600" style="min-height: 2rem; display: flex; align-items: center; justify-content: center;">${physicalProgress.toFixed(2)}%</div>
              <p class="text-sm text-gray-600">Physical</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
                <div class="bg-orange-500 h-2 rounded-full" style="width: ${physicalProgress}%"></div>
              </div>
            </div>
          </div>
      </div>
    `;

    // Insert the HTML directly
    const container = document.getElementById('selectedProjectInfoContainer');
    if (container) {
      container.innerHTML = projectInfoHTML;
      console.log('✅ Project info displayed with actual progress values');
    }
  }

  // Load project details (milestones, updates, etc.)
  async function loadProjectDetails(projectId) {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      // Load milestones
      const milestonesRes = await fetch(`${API_URL}/projects/${projectId}/milestones`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (milestonesRes.ok) {
        const milestonesData = await milestonesRes.json();
        if (milestonesData.success) {
          projectMilestones = milestonesData.milestones;
          displayMilestones();
        }
      } else {
        console.error('Failed to load milestones:', milestonesRes.status);
      }

      // Load updates
      const updatesRes = await fetch(`${API_URL}/projects/${projectId}/updates`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (updatesRes.ok) {
        const updatesData = await updatesRes.json();
        if (updatesData.success) {
          projectUpdates = updatesData.updates;
          displayUpdates();
        }
      } else {
        console.error('Failed to load updates:', updatesRes.status);
      }
      
      // Load horizontal timeline for the selected project (non-blocking)
      if (selectedProject && selectedProject.id) {
        console.log('Scheduling horizontal timeline load for project:', selectedProject.id);
        
        // Try loading timeline multiple times to ensure it appears
        setTimeout(() => {
          try {
            loadProjectTimeline();
          } catch (error) {
            console.error('Timeline loading failed (non-critical):', error);
          }
        }, 1000);
        
        // Backup timeline load attempt
        setTimeout(() => {
          try {
            loadProjectTimeline();
          } catch (error) {
            console.error('Backup timeline loading failed:', error);
          }
        }, 2000);
      }
    } catch (error) {
      console.error('Error loading project details:', error);
    }
  }

      // Display milestones
    function displayMilestones() {
      const container = document.getElementById('milestonesContainer');
      
      if (!projectMilestones || projectMilestones.length === 0) {
        container.innerHTML = '<p class="text-gray-500">No milestones found for this project.</p>';
        return;
      }

      // Debug: Check if projects data is available
      console.log('DisplayMilestones - Projects data:', projects);
      console.log('DisplayMilestones - Selected project:', selectedProject);
      console.log('DisplayMilestones - Project milestones:', projectMilestones);

      // Filter milestones based on new status system
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Set to start of day for accurate comparison
      
      // Categorize milestones based on new status system and project workflow
      const pendingMilestones = projectMilestones.filter(milestone => {
        const dueDate = new Date(milestone.dueDate);
        dueDate.setHours(0, 0, 0, 0);
        const isOverdue = dueDate < today;
        
        // Check if milestone is overdue and should be marked as delayed
        if (isOverdue && milestone.status !== 'completed' && milestone.status !== 'under_approval' && milestone.status !== 'revision_request') {
          // Auto-update milestone status to delayed if overdue
          updateMilestoneStatus(milestone.id, 'delayed');
          milestone.status = 'delayed';
        }
        
        // Check if project is under Secretariat review - if so, milestone should not be available for submission
        // Use selectedProject since milestones belong to the currently selected project
        const project = selectedProject || projects.find(p => p.id === milestone.projectId);
        console.log(`Milestone ${milestone.id} (${milestone.title}) - Project:`, project);
        console.log(`Milestone ${milestone.id} - Project workflow status:`, project?.workflowStatus);
        
        if (project && (project.workflowStatus === 'compiled_for_secretariat' || project.workflowStatus === 'iu_approved')) {
          console.log(`Milestone ${milestone.id} - EXCLUDED from pending (under Secretariat review)`);
          return false; // Milestone is under Secretariat review, not available for submission
        }
        
        const isPending = milestone.status === 'pending' || milestone.status === 'not_started';
        console.log(`Milestone ${milestone.id} - Status: ${milestone.status}, IsPending: ${isPending}`);
        return isPending;
      });

      const underApprovalMilestones = projectMilestones.filter(milestone => {
        // Check if milestone is under approval or if project is under Secretariat review
        // Use selectedProject since milestones belong to the currently selected project
        const project = selectedProject || projects.find(p => p.id === milestone.projectId);
        const isUnderSecretariatReview = project && (project.workflowStatus === 'compiled_for_secretariat' || project.workflowStatus === 'iu_approved');
        
        console.log(`Milestone ${milestone.id} - Under approval check:`, {
          milestoneStatus: milestone.status,
          isUnderSecretariatReview: isUnderSecretariatReview,
          projectWorkflowStatus: project?.workflowStatus
        });
        
        return milestone.status === 'under_approval' || isUnderSecretariatReview;
      });

      const delayedMilestones = projectMilestones.filter(milestone => 
        milestone.status === 'delayed'
      );

      const revisionRequestMilestones = projectMilestones.filter(milestone => 
        milestone.status === 'revision_request'
      );

      const completedMilestones = projectMilestones.filter(milestone => 
        milestone.status === 'completed'
      );

      let milestonesHTML = '';

      console.log('Milestone categories:', {
        pending: pendingMilestones.length,
        underApproval: underApprovalMilestones.length,
        delayed: delayedMilestones.length,
        revisionRequest: revisionRequestMilestones.length,
        completed: completedMilestones.length
      });
      
      console.log('Pending milestones:', pendingMilestones);
      console.log('Under approval milestones:', underApprovalMilestones);

      // Show pending milestones (can be updated) - but only if project is not under Secretariat review
      if (pendingMilestones.length > 0 && selectedProject && selectedProject.workflowStatus !== 'compiled_for_secretariat' && selectedProject.workflowStatus !== 'iu_approved') {
        milestonesHTML += '<h4 class="text-lg font-bold text-blue-800 mb-6 flex items-center gap-2"><svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path></svg>Pending Milestones (Ready for Update)</h4>';
        milestonesHTML += pendingMilestones.map((milestone, index) => {
          const dueDate = new Date(milestone.dueDate);
          dueDate.setHours(0, 0, 0, 0);
          const isOverdue = dueDate < today;
          
          const statusColor = milestone.status === 'in_progress' ? 'bg-yellow-100 text-yellow-700' : 
                             milestone.status === 'completed' ? 'bg-green-100 text-green-700' : 
                             isOverdue ? 'bg-red-100 text-red-700' :
                             'bg-gray-100 text-gray-700';
          const statusText = milestone.status === 'in_progress' ? 'In Progress' : 
                           milestone.status === 'completed' ? 'Completed' : 
                           isOverdue ? 'Overdue' :
                           'Pending';
          
          return `
            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 mb-6 overflow-hidden">
              <div class="flex items-center justify-between p-6 bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-blue-100 cursor-pointer" onclick="toggleMilestoneCard('milestone-${milestone.id}')">
                <div class="flex items-center gap-4">
                  <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-bold text-gray-800 text-lg">${milestone.title}</h4>
                    <div class="flex items-center gap-3 mt-2">
                      <span class="px-3 py-1 text-xs font-medium rounded-full ${statusColor}">${statusText}</span>
                      <span class="text-sm text-gray-600">Weight: ${milestone.weight}%</span>
                      <span class="text-sm ${isOverdue ? 'text-red-600 font-medium' : 'text-gray-500'}">Due: ${milestone.dueDate}${isOverdue ? ' (OVERDUE)' : ''}</span>
                    </div>
                  </div>
                </div>
                <div class="flex items-center gap-3">
                  <div class="text-right">
                    <div class="text-lg font-bold text-blue-600">${milestone.weight}%</div>
                    <div class="text-xs text-gray-500">Weight</div>
                  </div>
                  <svg id="milestone-${milestone.id}-icon" class="w-6 h-6 text-gray-400 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </div>
              </div>
              
              <div id="milestone-${milestone.id}-content" class="milestone-content" style="display: none;">
                <div class="p-6 space-y-6">
                  <!-- Milestone Overview -->
                  <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl">
                    <div class="text-center">
                      <div class="text-2xl font-bold text-blue-600">${milestone.weight}%</div>
                      <div class="text-sm text-gray-600">Weight</div>
                    </div>
                    <div class="text-center">
                      <div class="text-lg font-semibold text-gray-800">₱${(milestone.plannedBudget || 0).toLocaleString()}</div>
                      <div class="text-sm text-gray-600">Planned Budget</div>
                    </div>
                    <div class="text-center">
                      <div class="text-lg font-semibold ${isOverdue ? 'text-red-600' : 'text-gray-800'}">${milestone.dueDate}</div>
                      <div class="text-sm ${isOverdue ? 'text-red-600 font-medium' : 'text-gray-600'}">Due Date${isOverdue ? ' (OVERDUE)' : ''}</div>
                    </div>
                  </div>
                  
                  <div class="text-sm text-gray-600 leading-relaxed">${milestone.description || 'No description available'}</div>
                  
                  <!-- Milestone Update Form -->
                  <div class="border-t border-gray-200 pt-6">
                    <h5 class="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                      <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                      </svg>
                      Submit Milestone Update
                    </h5>
                    
                    <div class="space-y-6">
                      <!-- Three Divisions Section -->
                      <div class="space-y-6">
                        <!-- Timeline Division -->
                        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                          <h6 class="text-sm font-semibold text-blue-800 mb-3 flex items-center gap-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            Timeline Division
                          </h6>
                          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                            <div>
                              <label class="block text-xs font-medium text-blue-700 mb-1">Weight (%)</label>
                              <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.timelineWeight || '0.00'}%</div>
                            </div>
                            <div>
                              <label class="block text-xs font-medium text-blue-700 mb-1">Start Date</label>
                              <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.timelineStartDate || 'Not set'}</div>
                            </div>
                            <div>
                              <label class="block text-xs font-medium text-blue-700 mb-1">End Date</label>
                              <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.timelineEndDate || 'Not set'}</div>
                            </div>
                          </div>
                          <div>
                            <label class="block text-xs font-medium text-blue-700 mb-1">Description</label>
                            <textarea id="milestone-${milestone.id}-timeline-description" rows="2" class="w-full px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors" placeholder="Timeline activities and deliverables...">${milestone.timelineDescription || ''}</textarea>
                          </div>
                        </div>
                        
                        <!-- Budget Division -->
                        <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                          <h6 class="text-sm font-semibold text-green-800 mb-3 flex items-center gap-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                            </svg>
                            Budget Division
                          </h6>
                          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                            <div>
                              <label class="block text-xs font-medium text-green-700 mb-1">Weight (%)</label>
                              <div class="w-full px-3 py-2 text-sm bg-green-100 border border-green-300 rounded-lg text-green-800 font-medium">${milestone.budgetWeight || '0.00'}%</div>
                            </div>
                            <div>
                              <label class="block text-xs font-medium text-green-700 mb-1">Used Budget (₱)</label>
                              <input type="number" id="milestone-${milestone.id}-budget-amount" min="0" step="0.01" class="w-full px-3 py-2 text-sm border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors" placeholder="0.00" value="${milestone.budgetAmount || ''}">
                            </div>
                          </div>
                          <div>
                            <label class="block text-xs font-medium text-green-700 mb-1">Breakdown Description</label>
                            <textarea id="milestone-${milestone.id}-budget-breakdown" rows="2" class="w-full px-3 py-2 text-sm border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors" placeholder="Budget allocation breakdown...">${milestone.budgetBreakdown || ''}</textarea>
                          </div>
                        </div>
                        
                        <!-- Physical Division -->
                        <div class="bg-orange-50 border border-orange-200 rounded-lg p-4">
                          <h6 class="text-sm font-semibold text-orange-800 mb-3 flex items-center gap-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                            Physical Division
                          </h6>
                          <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                            <div>
                              <label class="block text-xs font-medium text-orange-700 mb-1">Weight (%)</label>
                              <div class="w-full px-3 py-2 text-sm bg-orange-100 border border-orange-300 rounded-lg text-orange-800 font-medium">${milestone.physicalWeight || '0.00'}%</div>
                            </div>
                            <div>
                              <label class="block text-xs font-medium text-orange-700 mb-1">Proof Types Required</label>
                              <div class="w-full px-3 py-2 text-sm bg-orange-100 border border-orange-300 rounded-lg text-orange-800 font-medium">${milestone.physicalProofTypes || 'Photo, Video, Document'}</div>
                            </div>
                          </div>
                          
                          <!-- Dynamic Proof Type Upload Sections -->
                          <div class="space-y-4">
                            ${generateProofTypeUploadSections(milestone)}
                          </div>
                          
                          <div class="mt-3">
                            <label class="block text-xs font-medium text-orange-700 mb-1">Description</label>
                            <textarea id="milestone-${milestone.id}-physical-description" rows="2" class="w-full px-3 py-2 text-sm border border-orange-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-colors" placeholder="Physical progress requirements...">${milestone.physicalDescription || ''}</textarea>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Additional Notes -->
                      <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Additional Notes</label>
                        <textarea id="milestone-${milestone.id}-notes" rows="3" class="w-full px-4 py-3 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors" placeholder="Any additional information or comments...">${milestone.notes || ''}</textarea>
                      </div>
                      
                      <!-- Progress Display (Read-only) -->
                      <div class="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4">
                        <div class="flex items-center justify-between mb-2">
                          <span class="text-sm font-medium text-gray-700">Current Progress:</span>
                          <span class="text-sm font-semibold text-blue-600">${milestone.progress || 0}% (Awarded by SECRETARIAT)</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-3">
                          <div class="bg-gradient-to-r from-blue-500 to-indigo-600 h-3 rounded-full transition-all duration-300" style="width: ${milestone.progress || 0}%"></div>
                        </div>
                        <p class="text-xs text-gray-500 mt-2">Progress percentage is determined by SECRETARIAT based on submitted documentation and reports.</p>
                      </div>
                      
                      <!-- Per-Milestone Submit Button -->
                      <div class="flex justify-end">
                        <button onclick="submitMilestoneUpdate('${milestone.id}')" class="px-6 py-3 bg-[#EB3C3C] text-white rounded-lg hover:bg-[#D63333] transition-colors flex items-center gap-2">
                          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                          </svg>
                          Submit This Milestone to IO for Review
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `;
        }).join('');
      }

      // Show under approval milestones (locked - waiting for Secretariat verdict)
      if (underApprovalMilestones.length > 0) {
        milestonesHTML += '<h4 class="text-lg font-bold text-yellow-800 mb-6 flex items-center gap-2"><svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>Under Secretariat Review (Locked)</h4>';
        milestonesHTML += underApprovalMilestones.map((milestone, index) => {
          const project = projects.find(p => p.id === milestone.projectId);
          const isUnderSecretariatReview = project && (project.workflowStatus === 'compiled_for_secretariat' || project.workflowStatus === 'iu_approved');
          
          // Determine the appropriate status message based on project workflow
          let statusMessage = '';
          let statusColor = 'bg-yellow-100 text-yellow-700';
          let statusText = 'Under Review';
          
          if (project) {
            if (project.workflowStatus === 'validated_by_secretariat') {
              statusMessage = 'This milestone has been approved by the Secretariat. All divisions have been validated and the project is now complete.';
              statusColor = 'bg-green-100 text-green-700';
              statusText = 'Approved';
            } else if (project.workflowStatus === 'revision_requested') {
              statusMessage = 'The Secretariat has requested revisions for this milestone. Please wait for the Implementing Office to provide specific revision requirements before making changes.';
              statusColor = 'bg-orange-100 text-orange-700';
              statusText = 'Revision Requested';
            } else if (project.workflowStatus === 'rejected') {
              statusMessage = 'This milestone has been rejected by the Secretariat. Please wait for the Implementing Office to provide feedback on the rejection.';
              statusColor = 'bg-red-100 text-red-700';
              statusText = 'Rejected';
            } else {
              statusMessage = 'This milestone is currently under Secretariat review and cannot be updated. Please wait for the Secretariat\'s final verdict (approve/reject/revision) before making any changes.';
            }
          } else {
            statusMessage = 'This milestone is under Secretariat approval and cannot be updated. Please wait for the Secretariat\'s verdict (approve/reject) before making any changes.';
          }
          
          return `
            <div class="bg-white rounded-xl shadow-sm border border-yellow-200 mb-4 opacity-75">
              <div class="flex items-center justify-between p-4 bg-gradient-to-r from-yellow-50 to-orange-50 border-b border-yellow-100">
                <div class="flex items-center gap-4">
                  <div class="w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-semibold text-gray-800 text-lg">${milestone.title}</h4>
                    <div class="flex items-center gap-3 mt-1">
                      <span class="px-3 py-1 text-xs font-medium rounded-full ${statusColor}">${statusText}</span>
                      <span class="text-sm text-gray-500">Weight: ${milestone.weight}%</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-yellow-50 rounded-lg mb-4">
                  <div class="text-center">
                    <div class="text-2xl font-bold text-yellow-600">${milestone.weight}%</div>
                    <div class="text-sm text-gray-600">Weight</div>
                  </div>
                  <div class="text-center">
                    <div class="text-lg font-semibold text-gray-800">₱${(milestone.plannedBudget || 0).toLocaleString()}</div>
                    <div class="text-sm text-gray-600">Planned Budget</div>
                  </div>
                  <div class="text-center">
                    <div class="text-lg font-semibold text-gray-800">${milestone.dueDate}</div>
                    <div class="text-sm text-gray-600">Due Date</div>
                  </div>
                </div>
                
                <div class="text-sm text-gray-600 leading-relaxed mb-4">${milestone.description || 'No description available'}</div>
                
                <!-- Locked Milestone Form -->
                <div class="bg-yellow-100 border border-yellow-200 rounded-lg p-4">
                  <div class="flex items-center gap-3">
                    <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <div>
                      <p class="text-sm text-yellow-700 font-medium">${statusMessage}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `;
        }).join('');
      }

      // Show delayed milestones (locked - overdue)
      if (delayedMilestones.length > 0) {
        milestonesHTML += '<h4 class="text-lg font-bold text-red-800 mb-6 flex items-center gap-2"><svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path></svg>Delayed Milestones (Locked - Overdue)</h4>';
        milestonesHTML += delayedMilestones.map((milestone, index) => `
          <div class="bg-white rounded-xl shadow-sm border border-red-200 mb-4 opacity-75">
            <div class="flex items-center justify-between p-4 bg-gradient-to-r from-red-50 to-pink-50 border-b border-red-100">
              <div class="flex items-center gap-4">
                <div class="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                  </svg>
                </div>
                <div>
                  <h4 class="font-semibold text-gray-800 text-lg">${milestone.title}</h4>
                  <div class="flex items-center gap-3 mt-1">
                    <span class="px-3 py-1 text-xs font-medium rounded-full bg-red-100 text-red-700">Delayed</span>
                    <span class="text-sm text-gray-500">Weight: ${milestone.weight}%</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="p-6">
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-red-50 rounded-lg mb-4">
                <div class="text-center">
                  <div class="text-2xl font-bold text-red-600">${milestone.weight}%</div>
                  <div class="text-sm text-gray-600">Weight</div>
                </div>
                <div class="text-center">
                  <div class="text-lg font-semibold text-gray-800">₱${(milestone.plannedBudget || 0).toLocaleString()}</div>
                  <div class="text-sm text-gray-600">Planned Budget</div>
                </div>
                <div class="text-center">
                  <div class="text-lg font-semibold text-red-600">${milestone.dueDate}</div>
                  <div class="text-sm text-red-600 font-medium">OVERDUE</div>
                </div>
              </div>
              
              <div class="text-sm text-gray-600 leading-relaxed mb-4">${milestone.description || 'No description available'}</div>
              
              <!-- Locked Milestone Form -->
              <div class="bg-red-100 border border-red-200 rounded-lg p-4">
                <div class="flex items-center gap-3">
                  <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                  </svg>
                  <div>
                    <p class="text-sm text-red-700 font-medium">This milestone is overdue and has been automatically marked as delayed.</p>
                    <p class="text-xs text-red-600 mt-1">Please contact the project manager to extend the due date or mark as completed.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `).join('');
      }

             // Show revision request milestones (can be resubmitted)
       if (revisionRequestMilestones.length > 0) {
         milestonesHTML += '<h4 class="text-lg font-bold text-orange-800 mb-6 flex items-center gap-2"><svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>Revision Request (Resubmit Required)</h4>';
         milestonesHTML += revisionRequestMilestones.map((milestone, index) => {
           const dueDate = new Date(milestone.dueDate);
           dueDate.setHours(0, 0, 0, 0);
           const isOverdue = dueDate < today;
           
           return `
             <div class="bg-white rounded-2xl shadow-lg border border-orange-200 mb-6 overflow-hidden">
               <div class="flex items-center justify-between p-6 bg-gradient-to-r from-orange-50 to-red-50 border-b border-orange-100 cursor-pointer" onclick="toggleMilestoneCard('milestone-${milestone.id}')">
                 <div class="flex items-center gap-4">
                   <div class="w-12 h-12 bg-gradient-to-br from-orange-500 to-red-600 rounded-xl flex items-center justify-center shadow-lg">
                     <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                       <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                     </svg>
                   </div>
                   <div>
                     <h4 class="font-bold text-gray-800 text-lg">${milestone.title}</h4>
                     <div class="flex items-center gap-3 mt-2">
                       <span class="px-3 py-1 text-xs font-medium rounded-full bg-orange-100 text-orange-700">Revision Request</span>
                       <span class="text-sm text-gray-600">Weight: ${milestone.weight}%</span>
                       <span class="text-sm ${isOverdue ? 'text-red-600 font-medium' : 'text-gray-500'}">Due: ${milestone.dueDate}${isOverdue ? ' (OVERDUE)' : ''}</span>
                     </div>
                   </div>
                 </div>
                 <div class="flex items-center gap-3">
                   <div class="text-right">
                     <div class="text-lg font-bold text-orange-600">${milestone.weight}%</div>
                     <div class="text-xs text-gray-500">Weight</div>
                   </div>
                   <svg id="milestone-${milestone.id}-icon" class="w-6 h-6 text-gray-400 transform transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                   </svg>
                 </div>
               </div>
               
               <div id="milestone-${milestone.id}-content" class="milestone-content" style="display: none;">
                 <div class="p-6 space-y-6">
                   <!-- Revision Request Notice -->
                   <div class="bg-orange-100 border border-orange-200 rounded-lg p-4">
                     <div class="flex items-center gap-3">
                       <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                       </svg>
                       <div>
                         <p class="text-sm text-orange-700 font-medium">This milestone was rejected by the Secretariat and requires revision.</p>
                         <p class="text-xs text-orange-600 mt-1">Please review the feedback and resubmit with the required changes.</p>
                       </div>
                     </div>
                   </div>
                   
                   <!-- Secretariat Feedback -->
                   <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                     <h6 class="text-sm font-semibold text-red-800 mb-2">Secretariat Feedback:</h6>
                     <p class="text-sm text-red-700">${milestone.secretariatFeedback || 'No specific feedback provided. Please review your submission and ensure all requirements are met.'}</p>
                   </div>
                   
                   <!-- Same form as pending milestones but with revision context -->
                   <div class="border-t border-gray-200 pt-6">
                     <h5 class="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                       <svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                       </svg>
                       Resubmit Milestone Update
                     </h5>
                     
                     <!-- Include the same form structure as pending milestones -->
                     <div class="space-y-6">
                       <!-- Three Divisions Section -->
                       <div class="space-y-6">
                         <!-- Timeline Division -->
                         <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                           <h6 class="text-sm font-semibold text-blue-800 mb-3 flex items-center gap-2">
                             <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                             </svg>
                             Timeline Division
                           </h6>
                           <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                             <div>
                               <label class="block text-xs font-medium text-blue-700 mb-1">Weight (%)</label>
                               <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.timelineWeight || '0.00'}%</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-blue-700 mb-1">Start Date</label>
                               <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.timelineStartDate || 'Not set'}</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-blue-700 mb-1">End Date</label>
                               <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.timelineEndDate || 'Not set'}</div>
                             </div>
                           </div>
                           <div>
                             <label class="block text-xs font-medium text-blue-700 mb-1">Description</label>
                             <textarea id="milestone-${milestone.id}-timeline-description" rows="2" class="w-full px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors" placeholder="Timeline activities and deliverables...">${milestone.timelineDescription || ''}</textarea>
                           </div>
                         </div>
                         
                         <!-- Budget Division -->
                         <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                           <h6 class="text-sm font-semibold text-green-800 mb-3 flex items-center gap-2">
                             <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                             </svg>
                             Budget Division
                           </h6>
                           <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                             <div>
                               <label class="block text-xs font-medium text-green-700 mb-1">Weight (%)</label>
                               <div class="w-full px-3 py-2 text-sm bg-green-100 border border-green-300 rounded-lg text-green-800 font-medium">${milestone.budgetWeight || '0.00'}%</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-green-700 mb-1">Used Budget (₱)</label>
                               <input type="number" id="milestone-${milestone.id}-budget-amount" min="0" step="0.01" class="w-full px-3 py-2 text-sm border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors" placeholder="0.00" value="${milestone.budgetAmount || ''}">
                             </div>
                           </div>
                           <div>
                             <label class="block text-xs font-medium text-green-700 mb-1">Breakdown Description</label>
                             <textarea id="milestone-${milestone.id}-budget-breakdown" rows="2" class="w-full px-3 py-2 text-sm border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors" placeholder="Budget allocation breakdown...">${milestone.budgetBreakdown || ''}</textarea>
                           </div>
                         </div>
                         
                         <!-- Physical Division -->
                         <div class="bg-orange-50 border border-orange-200 rounded-lg p-4">
                           <h6 class="text-sm font-semibold text-orange-800 mb-3 flex items-center gap-2">
                             <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                               <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                             </svg>
                             Physical Division
                           </h6>
                           <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                             <div>
                               <label class="block text-xs font-medium text-orange-700 mb-1">Weight (%)</label>
                               <div class="w-full px-3 py-2 text-sm bg-orange-100 border border-orange-300 rounded-lg text-orange-800 font-medium">${milestone.physicalWeight || '0.00'}%</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-orange-700 mb-1">Proof Types Required</label>
                               <div class="w-full px-3 py-2 text-sm bg-orange-100 border border-orange-300 rounded-lg text-orange-800 font-medium">${milestone.physicalProofTypes || 'Photo, Video, Document'}</div>
                             </div>
                           </div>
                           
                           <!-- Dynamic Proof Type Upload Sections -->
                           <div class="space-y-4">
                             ${generateProofTypeUploadSections(milestone)}
                           </div>
                           
                           <div class="mt-3">
                             <label class="block text-xs font-medium text-orange-700 mb-1">Description</label>
                             <textarea id="milestone-${milestone.id}-physical-description" rows="2" class="w-full px-3 py-2 text-sm border border-orange-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-colors" placeholder="Physical progress requirements...">${milestone.physicalDescription || ''}</textarea>
                           </div>
                         </div>
                       </div>
                       
                       <!-- Additional Notes -->
                       <div>
                         <label class="block text-sm font-medium text-gray-700 mb-2">Additional Notes</label>
                         <textarea id="milestone-${milestone.id}-notes" rows="3" class="w-full px-4 py-3 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-colors" placeholder="Any additional information or comments...">${milestone.notes || ''}</textarea>
                       </div>
                       
                       <!-- Progress Display (Read-only) -->
                       <div class="bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200 rounded-lg p-4">
                         <div class="flex items-center justify-between mb-2">
                           <span class="text-sm font-medium text-gray-700">Current Progress:</span>
                           <span class="text-sm font-semibold text-orange-600">${milestone.progress || 0}% (Awarded by SECRETARIAT)</span>
                         </div>
                         <div class="w-full bg-gray-200 rounded-full h-3">
                           <div class="bg-gradient-to-r from-orange-500 to-red-600 h-3 rounded-full transition-all duration-300" style="width: ${milestone.progress || 0}%"></div>
                         </div>
                         <p class="text-xs text-gray-500 mt-2">Progress percentage is determined by SECRETARIAT based on submitted documentation and reports.</p>
                       </div>
                       
                       <!-- Resubmit Button -->
                       <div class="flex justify-end">
                         <button onclick="submitMilestoneUpdate('${milestone.id}')" class="px-6 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors flex items-center gap-2">
                           <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                             <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                           </svg>
                           Resubmit This Milestone
                         </button>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>
             </div>
           `;
         }).join('');
       }

    // Show completed milestones (read-only)
    if (completedMilestones.length > 0) {
      milestonesHTML += '<h4 class="text-lg font-bold text-green-800 mb-6 flex items-center gap-2"><svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>Completed Milestones</h4>';
      milestonesHTML += completedMilestones.map((milestone, index) => `
        <div class="bg-white rounded-xl shadow-sm border border-green-200 mb-4">
          <div class="flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-emerald-50 border-b border-green-100">
            <div class="flex items-center gap-4">
              <div class="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-800 text-lg">${milestone.title}</h4>
                <div class="flex items-center gap-3 mt-1">
                  <span class="px-3 py-1 text-xs font-medium rounded-full bg-green-100 text-green-700">Completed</span>
                  <span class="text-sm text-gray-500">Weight: ${milestone.weight}%</span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-green-50 rounded-lg mb-4">
              <div class="text-center">
                <div class="text-2xl font-bold text-green-600">${milestone.weight}%</div>
                <div class="text-sm text-gray-600">Weight</div>
              </div>
              <div class="text-center">
                <div class="text-lg font-semibold text-gray-800">₱${(milestone.plannedBudget || 0).toLocaleString()}</div>
                <div class="text-sm text-gray-600">Planned Budget</div>
              </div>
              <div class="text-center">
                <div class="text-lg font-semibold text-gray-800">${milestone.dueDate}</div>
                <div class="text-sm text-gray-600">Due Date</div>
              </div>
            </div>
            
            <div class="text-sm text-gray-600 leading-relaxed mb-4">${milestone.description || 'No description available'}</div>
            
            <!-- Completed Milestone Info -->
            <div class="bg-green-100 border border-green-200 rounded-lg p-4">
              <div class="flex items-center gap-3">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <div>
                  <p class="text-sm text-green-700 font-medium">This milestone has been completed successfully.</p>
                  <p class="text-xs text-green-600 mt-1">Progress: ${milestone.progress || 0}% | Status: ${milestone.status}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      `).join('');
    }

    // Show summary - ensure all values are numbers
    const totalWeight = projectMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const totalBudget = projectMilestones.reduce((sum, m) => sum + parseFloat(m.plannedBudget || 0), 0);
    const completedWeight = completedMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const pendingWeight = pendingMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const underApprovalWeight = underApprovalMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const delayedWeight = delayedMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const revisionRequestWeight = revisionRequestMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);

    milestonesHTML += `
      <div class="mt-8 p-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl border border-blue-200">
        <h4 class="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
          <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
          Milestone Summary
        </h4>
        <div class="grid grid-cols-2 md:grid-cols-5 gap-4">
          <div class="text-center p-4 bg-white rounded-lg shadow-sm">
            <div class="text-2xl font-bold text-blue-600 mb-1">${pendingMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Pending</div>
            <div class="text-xs text-gray-500">${pendingWeight.toFixed(1)}% weight</div>
          </div>
          <div class="text-center p-4 bg-white rounded-lg shadow-sm">
            <div class="text-2xl font-bold text-yellow-600 mb-1">${underApprovalMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Under Approval</div>
            <div class="text-xs text-gray-500">${underApprovalWeight.toFixed(1)}% weight</div>
          </div>
          <div class="text-center p-4 bg-white rounded-lg shadow-sm">
            <div class="text-2xl font-bold text-red-600 mb-1">${delayedMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Delayed</div>
            <div class="text-xs text-gray-500">${delayedWeight.toFixed(1)}% weight</div>
          </div>
          <div class="text-center p-4 bg-white rounded-lg shadow-sm">
            <div class="text-2xl font-bold text-orange-600 mb-1">${revisionRequestMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Revision</div>
            <div class="text-xs text-gray-500">${revisionRequestWeight.toFixed(1)}% weight</div>
          </div>
          <div class="text-center p-4 bg-white rounded-lg shadow-sm">
            <div class="text-2xl font-bold text-green-600 mb-1">${completedMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Completed</div>
            <div class="text-xs text-gray-500">${completedWeight.toFixed(1)}% weight</div>
          </div>
        </div>
        
        <div class="mt-4 p-4 bg-white rounded-lg shadow-sm">
          <div class="text-center">
            <div class="text-lg font-bold text-purple-600 mb-1">₱${totalBudget.toLocaleString()}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Total Budget</div>
            <div class="text-xs text-gray-500">${totalWeight.toFixed(1)}% total weight</div>
          </div>
        </div>
      </div>
    `;

    container.innerHTML = milestonesHTML;
    document.getElementById('milestonesSection').style.display = 'block';
    
    // Update progress bars based on milestone data
    updateProgressBarsFromMilestones();
    
    // Add event listeners to milestone inputs to update progress bars in real-time
    const allUpdatableMilestones = [...pendingMilestones, ...revisionRequestMilestones];
    
    allUpdatableMilestones.forEach(milestone => {
      const budgetInput = document.getElementById(`milestone-${milestone.id}-budget-amount`);
      const budgetBreakdownTextarea = document.getElementById(`milestone-${milestone.id}-budget-breakdown`);
      const timelineDescriptionTextarea = document.getElementById(`milestone-${milestone.id}-timeline-description`);
      const physicalDescriptionTextarea = document.getElementById(`milestone-${milestone.id}-physical-description`);
      const notesTextarea = document.getElementById(`milestone-${milestone.id}-notes`);

      // Add event listeners for editable fields
      if (budgetInput) {
        budgetInput.addEventListener('input', updateProgressBarsFromMilestones);
      }
      if (budgetBreakdownTextarea) {
        budgetBreakdownTextarea.addEventListener('input', updateProgressBarsFromMilestones);
      }
      if (timelineDescriptionTextarea) {
        timelineDescriptionTextarea.addEventListener('input', updateProgressBarsFromMilestones);
      }
      if (physicalDescriptionTextarea) {
        physicalDescriptionTextarea.addEventListener('input', updateProgressBarsFromMilestones);
      }
      if (notesTextarea) {
        notesTextarea.addEventListener('input', updateProgressBarsFromMilestones);
      }

      // Add event listeners for proof type file uploads
      const proofTypes = milestone.physicalProofTypes ? milestone.physicalProofTypes.split(',').map(type => type.trim()) : ['Photo', 'Video', 'Document'];
      proofTypes.forEach(proofType => {
        const proofTypeLower = proofType.toLowerCase();
        const fileInput = document.getElementById(`milestone-${milestone.id}-${proofTypeLower}-files`);
        if (fileInput) {
          fileInput.addEventListener('change', function(e) {
            const files = Array.from(e.target.files);
            files.forEach(file => {
              if (file.size > 10 * 1024 * 1024) { // 10MB limit
                alert('File size must be less than 10MB');
                return;
              }
              globalUploadedFiles.push(file);
              displayFile(file, `milestone-${milestone.id}-${proofTypeLower}-file-list`);
            });
          });
        }
      });
    });
  }

  // Display updates
  function displayUpdates() {
    const container = document.getElementById('updatesContainer');
    if (!projectUpdates || projectUpdates.length === 0) {
      container.innerHTML = '<p class="text-gray-500">No updates found for this project.</p>';
      return;
    }

    const updatesHTML = projectUpdates.map(update => `
      <div class="border border-gray-200 rounded-lg p-4 mb-3">
        <div class="flex items-center justify-between mb-2">
          <h4 class="font-semibold text-gray-800">${update.updateType} Update</h4>
          <span class="px-2 py-1 text-xs font-medium rounded-full ${
            update.status === 'secretariat_approved' ? 'bg-green-100 text-green-700' :
            update.status === 'iu_approved' ? 'bg-blue-100 text-blue-700' :
            update.status === 'submitted' ? 'bg-yellow-100 text-yellow-700' :
            'bg-gray-100 text-gray-700'
          }">${update.status.replace('_', ' ')}</span>
        </div>
        <p class="text-sm text-gray-600 mb-2">Progress: ${update.claimedProgress}%</p>
        <p class="text-sm text-gray-600">${update.remarks || 'No remarks'}</p>
        <p class="text-xs text-gray-500 mt-2">Submitted: ${new Date(update.createdAt).toLocaleDateString()}</p>
      </div>
    `).join('');

    container.innerHTML = updatesHTML;
    document.getElementById('updatesHistory').style.display = 'block';
  }



  // Submit individual milestone update with confirmation
  async function submitMilestoneUpdate(milestoneId) {
    try {
      if (!selectedProject) {
        alert('Please select a project first');
        return;
      }

      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      // Find the milestone
      const milestone = projectMilestones.find(m => m.id === milestoneId);
      if (!milestone) {
        alert('Milestone not found');
        return;
      }

      // Check if milestone can be updated
      if (!canUpdateMilestone(milestone)) {
        alert(`This milestone cannot be updated. Current status: ${milestone.status}`);
        return;
      }

      // Show confirmation dialog
      const isRevision = milestone.status === 'revision_request';
      const confirmMessage = isRevision 
        ? `Are you sure you want to resubmit this milestone update to the Implementing Office for review?\n\nMilestone: ${milestone.title}\n\nThis is a revision submission. Once submitted, this milestone cannot be edited until the Secretariat gives a verdict (approve or reject).`
        : `Are you sure you want to submit this milestone update to the Implementing Office for review?\n\nMilestone: ${milestone.title}\n\nOnce submitted, this milestone cannot be edited until the Secretariat gives a verdict (approve or reject).`;
      
      const confirmSubmit = confirm(confirmMessage);
      
      if (!confirmSubmit) {
        return;
      }

      // Collect milestone update data with three divisions (only editable fields)
      const timelineDescription = document.getElementById(`milestone-${milestoneId}-timeline-description`)?.value;
      const budgetAmount = document.getElementById(`milestone-${milestoneId}-budget-amount`)?.value;
      const budgetBreakdown = document.getElementById(`milestone-${milestoneId}-budget-breakdown`)?.value;
      const physicalDescription = document.getElementById(`milestone-${milestoneId}-physical-description`)?.value;
      const notes = document.getElementById(`milestone-${milestoneId}-notes`)?.value;

      // Collect uploaded files from proof type sections
      const uploadedFiles = [];
      const proofTypes = milestone.physicalProofTypes ? milestone.physicalProofTypes.split(',').map(type => type.trim()) : ['Photo', 'Video', 'Document'];
      proofTypes.forEach(proofType => {
        const proofTypeLower = proofType.toLowerCase();
        const fileInput = document.getElementById(`milestone-${milestoneId}-${proofTypeLower}-files`);
        if (fileInput && fileInput.files) {
          uploadedFiles.push(...Array.from(fileInput.files));
        }
      });

      console.log(`Milestone ${milestoneId} update data:`, {
        timelineDescription, budgetAmount, budgetBreakdown, 
        physicalDescription, notes, filesCount: uploadedFiles.length
      });
      console.log('Budget amount raw value:', budgetAmount);
      console.log('Budget amount parsed:', parseFloat(budgetAmount));

      // Create milestone update object with three divisions
      const milestoneUpdate = {
        milestoneId: milestoneId,
        timeline: {
          description: timelineDescription || ''
        },
        budget: {
          amount: parseFloat(budgetAmount) || 0,
          breakdown: budgetBreakdown || ''
        },
        physical: {
          description: physicalDescription || ''
        },
        notes: notes || '',
        uploadedFiles: Array.from(uploadedFiles).map(f => ({
          name: f.name,
          size: f.size,
          type: f.type
        }))
      };

      console.log('Submitting milestone update:', milestoneUpdate);

      // Submit the update to implementing office for review
      const response = await fetch(`${API_URL}/eiu/submit-milestone-update`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          projectId: selectedProject.id,
          milestoneUpdate: milestoneUpdate
        })
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          const successMessage = isRevision
            ? `Milestone revision submitted successfully!\n\nMilestone: ${milestone.title}\nStatus: Resubmitted to Implementing Office for Review\n\nYou will receive a notification once the Secretariat reviews your resubmission.`
            : `Milestone update submitted successfully!\n\nMilestone: ${milestone.title}\nStatus: Submitted to Implementing Office for Review\n\nYou will receive a notification once the Secretariat reviews your submission.`;
          
          alert(successMessage);
          
          // Refresh project details and submission history
          await loadProjectDetails(selectedProject.id);
          await loadSubmissionHistory();
          
          // Disable the form for this milestone until Secretariat verdict
          disableMilestoneForm(milestoneId);
        } else {
          alert(`Error: ${result.message || 'Failed to submit milestone update'}`);
        }
      } else {
        const errorData = await response.json();
        alert(`Error: ${errorData.message || 'Failed to submit milestone update'}`);
      }
    } catch (error) {
      console.error('Error submitting milestone update:', error);
      alert('An error occurred while submitting the milestone update. Please try again.');
    }
  }

  // Disable milestone form after submission
  function disableMilestoneForm(milestoneId) {
    const formElements = [
      `milestone-${milestoneId}-timeline-description`,
      `milestone-${milestoneId}-budget-amount`,
      `milestone-${milestoneId}-budget-breakdown`,
      `milestone-${milestoneId}-physical-description`,
      `milestone-${milestoneId}-notes`
    ];

    // Add proof type file inputs
    const proofTypes = ['photo', 'video', 'document'];
    proofTypes.forEach(proofType => {
      formElements.push(`milestone-${milestoneId}-${proofType}-files`);
    });

    formElements.forEach(elementId => {
      const element = document.getElementById(elementId);
      if (element) {
        element.disabled = true;
        element.classList.add('opacity-50', 'cursor-not-allowed');
      }
    });

    // Disable submit button
    const submitButton = document.querySelector(`button[onclick="submitMilestoneUpdate('${milestoneId}')"]`);
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.classList.add('opacity-50', 'cursor-not-allowed');
      submitButton.textContent = 'Submitted - Awaiting Review';
    }
  }

  // Update progress bars based on milestone data
  function updateProgressBarsFromMilestones() {
    try {
      if (!projectMilestones || projectMilestones.length === 0) return;

    // Calculate progress based on the new 33.33% equal distribution system
    let timelineProgress = 0;
    let budgetProgress = 0;
    let physicalProgress = 0;

    projectMilestones.forEach(milestone => {
      const weight = parseFloat(milestone.weight || 0);
      const progress = parseFloat(milestone.progress || 0); // This is awarded by SECRETARIAT
      
      // Timeline Progress: Based on milestone completion status
      if (milestone.status === 'completed') {
        timelineProgress += weight; // Full weight for completed milestones
      } else if (milestone.status === 'in_progress') {
        timelineProgress += weight * 0.5; // 50% weight for in-progress milestones
      }
      // No contribution for not_started or delayed milestones
      
      // Budget Progress: Based on SECRETARIAT-awarded progress for budget utilization
      budgetProgress += (weight * progress) / 100;
      
      // Physical Progress: Based on SECRETARIAT-awarded progress for physical accomplishment
      physicalProgress += (weight * progress) / 100;
    });

    // Calculate overall progress: Equal 33.33% contribution from each category
    const timelineContribution = (timelineProgress / 100) * 33.33;
    const budgetContribution = (budgetProgress / 100) * 33.33;
    const physicalContribution = (physicalProgress / 100) * 33.33;
    
    const overallProgress = timelineContribution + budgetContribution + physicalContribution;

    // Update progress bars with null checks
    const elements = {
      'overallProgressText': overallProgress.toFixed(2) + '%',
      'timelineProgressText': timelineProgress.toFixed(2) + '%',
      'budgetProgressText': budgetProgress.toFixed(2) + '%',
      'physicalProgressText': physicalProgress.toFixed(2) + '%'
    };
    
    Object.entries(elements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      } else {
        console.warn(`Progress text element not found: ${id}`);
      }
    });
    
    const bars = {
      'overallProgressBar': Math.max(overallProgress, 0) + '%',
      'timelineProgressBar': Math.max(timelineProgress, 0) + '%',
      'budgetProgressBar': Math.max(budgetProgress, 0) + '%',
      'physicalProgressBar': Math.max(physicalProgress, 0) + '%'
    };
    
    Object.entries(bars).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.style.width = value;
      } else {
        console.warn(`Progress bar element not found: ${id}`);
      }
    });
    } catch (error) {
      console.error('Error updating progress bars from milestones:', error);
      // Don't let this error crash the application
    }
  }

  // Display file in file list
  function displayFile(file, containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;

    const fileItem = document.createElement('div');
    fileItem.className = 'flex items-center justify-between p-2 bg-gray-50 rounded border';
    fileItem.innerHTML = `
      <div class="flex items-center gap-2">
        <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <span class="text-sm text-gray-700">${file.name}</span>
        <span class="text-xs text-gray-500">(${(file.size / 1024 / 1024).toFixed(2)} MB)</span>
      </div>
      <button onclick="removeFile(this, '${file.name}')" class="text-red-500 hover:text-red-700">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(fileItem);
  }

  // Remove file from list
  function removeFile(button, fileName) {
    const fileItem = button.closest('div');
    fileItem.remove();
    
    // Remove from globalUploadedFiles array
    const index = globalUploadedFiles.findIndex(f => f.name === fileName);
    if (index > -1) {
      globalUploadedFiles.splice(index, 1);
    }
  }

  // Refresh data
  async function refreshData() {
    await initializePage();
  }

  // Load submit update
  async function loadSubmitUpdate() {
    await initializePage();
  }



  // Toggle milestone card visibility
  function toggleMilestoneCard(milestoneId) {
    const content = document.getElementById(`${milestoneId}-content`);
    const icon = document.getElementById(`${milestoneId}-icon`);
    
    if (content.style.display === 'none') {
      // Expand
      content.style.display = 'block';
      icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>';
    } else {
      // Collapse
      content.style.display = 'none';
      icon.innerHTML = '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>';
    }
  }

  // Check if all required DOM elements exist
  function checkDOMElements() {
    const requiredElements = [
      'selectedProjectInfo',
      'selectedProjectName',
      'selectedProjectCode',
      'projectWorkflowStatus',
      'overallProgressText',
      'timelineProgressText',
      'budgetProgressText',
      'physicalProgressText',
      'overallProgressBar',
      'timelineProgressBar',
      'budgetProgressBar',
      'physicalProgressBar'
    ];
    
    console.log('=== CHECKING DOM ELEMENTS ===');
    requiredElements.forEach(id => {
      const element = document.getElementById(id);
      console.log(`${id}: ${element ? 'FOUND' : 'NOT FOUND'}`);
    });
  }

  // Nuclear option: Force recreate progress elements
  function forceRecreateProgressElements() {
    console.log('=== NUCLEAR OPTION: FORCE RECREATE ===');
    
    if (selectedProject) {
      // Get progress values
      const overallProgress = parseFloat(selectedProject.overallProgress) || 0;
      const timelineProgress = parseFloat(selectedProject.timelineProgress) || 0;
      const budgetProgress = parseFloat(selectedProject.budgetProgress) || 0;
      const physicalProgress = parseFloat(selectedProject.physicalProgress) || 0;
      
      // COMPLETELY RECREATE the entire selectedProjectInfo section
      const selectedProjectInfo = document.getElementById('selectedProjectInfo');
      if (selectedProjectInfo) {
        // Remove the entire section
        selectedProjectInfo.remove();
        
        // Create a completely new section
        const newSection = document.createElement('div');
        newSection.id = 'selectedProjectInfo';
        newSection.className = 'bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8';
        newSection.style.display = 'block';
        
        newSection.innerHTML = `
          <div class="flex items-center justify-between mb-4">
            <div>
              <h3 class="text-lg font-semibold text-gray-800" id="selectedProjectName">${selectedProject.name}</h3>
              <p class="text-sm text-gray-600" id="selectedProjectCode">${selectedProject.projectCode}</p>
            </div>
            <span id="projectWorkflowStatus" class="px-3 py-1 text-sm font-medium rounded-full bg-gray-100 text-gray-700">${selectedProject.workflowStatus.replace('_', ' ').toUpperCase()}</span>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4" id="progressContainer">
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600" id="overallProgressText">${overallProgress.toFixed(1)}%</div>
              <p class="text-sm text-gray-600">Overall Progress</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div class="bg-blue-500 h-2 rounded-full transition-all duration-300 ease-out" id="overallProgressBar" style="width: ${Math.max(overallProgress, 0)}%; min-width: 0; max-width: 100%; flex-shrink: 0;"></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600" id="timelineProgressText">${timelineProgress.toFixed(1)}%</div>
              <p class="text-sm text-gray-600">Timeline</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div class="bg-green-500 h-2 rounded-full transition-all duration-300 ease-out" id="timelineProgressBar" style="width: ${Math.max(timelineProgress, 0)}%; min-width: 0; max-width: 100%; flex-shrink: 0;"></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-purple-600" id="budgetProgressText">${budgetProgress.toFixed(1)}%</div>
              <p class="text-sm text-gray-600">Budget</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div class="bg-purple-500 h-2 rounded-full transition-all duration-300 ease-out" id="budgetProgressBar" style="width: ${Math.max(budgetProgress, 0)}%; min-width: 0; max-width: 100%; flex-shrink: 0;"></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-orange-600" id="physicalProgressText">${physicalProgress.toFixed(1)}%</div>
              <p class="text-sm text-gray-600">Physical</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div class="bg-orange-500 h-2 rounded-full transition-all duration-300 ease-out" id="physicalProgressBar" style="width: ${Math.max(physicalProgress, 0)}%; min-width: 0; max-width: 100%; flex-shrink: 0;"></div>
              </div>
            </div>
          </div>
        `;
        
        // Insert the new section before the draft message
        const draftMessage = document.getElementById('draftMessage');
        if (draftMessage) {
          draftMessage.parentNode.insertBefore(newSection, draftMessage);
        } else {
          // Fallback: append to the end
          document.querySelector('section').appendChild(newSection);
        }
        
        console.log('Nuclear option completed - completely recreated selectedProjectInfo section');
        console.log('New section created with progress values:', { overall: overallProgress, timeline: timelineProgress, budget: budgetProgress, physical: physicalProgress });
      }
    } else {
      console.log('No project selected for nuclear option');
    }
  }

  // Debug function to manually trigger UI update
  function debugUpdateUI() {
    console.log('=== DEBUG UPDATE UI ===');
    console.log('Projects:', projects);
    console.log('Selected Project:', selectedProject);
    
    // Check DOM elements first
    checkDOMElements();
    
    // Check for duplicate project cards
    const projectCards = document.querySelectorAll('.project-card');
    console.log('Number of project cards found:', projectCards.length);
    projectCards.forEach((card, index) => {
      const projectId = card.getAttribute('data-project-id');
      const projectName = card.querySelector('h4')?.textContent;
      console.log(`Project card ${index + 1}: ID=${projectId}, Name=${projectName}`);
    });
    
    // Check if selectedProjectInfo is visible
    const selectedProjectInfo = document.getElementById('selectedProjectInfo');
    console.log('selectedProjectInfo display:', selectedProjectInfo ? selectedProjectInfo.style.display : 'NOT FOUND');
    
    if (projects.length === 1 && !selectedProject) {
      console.log('Auto-selecting project via debug function');
      selectProject(projects[0].id);
    } else if (selectedProject) {
      console.log('Forcing UI update for selected project');
      updateSelectedProjectUI();
      
      // Force update by directly setting values
      const overallProgress = parseFloat(selectedProject.overallProgress) || 0;
      const timelineProgress = parseFloat(selectedProject.timelineProgress) || 0;
      const budgetProgress = parseFloat(selectedProject.budgetProgress) || 0;
      const physicalProgress = parseFloat(selectedProject.physicalProgress) || 0;
      
      // Direct DOM manipulation as fallback
      const elements = {
        'overallProgressText': overallProgress.toFixed(1) + '%',
        'timelineProgressText': timelineProgress.toFixed(1) + '%',
        'budgetProgressText': budgetProgress.toFixed(1) + '%',
        'physicalProgressText': physicalProgress.toFixed(1) + '%'
      };
      
      Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
          element.textContent = value;
          console.log(`Directly set ${id} to: ${value}`);
        } else {
          console.error(`Element ${id} not found for direct update`);
        }
      });
      
      // Force progress bar updates
      const bars = {
        'overallProgressBar': overallProgress,
        'timelineProgressBar': timelineProgress,
        'budgetProgressBar': budgetProgress,
        'physicalProgressBar': physicalProgress
      };
      
      Object.entries(bars).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
          element.style.width = Math.max(value, 0) + '%';
          console.log(`Directly set ${id} width to: ${Math.max(value, 0)}%`);
        } else {
          console.error(`Element ${id} not found for direct update`);
        }
      });
    } else {
      console.log('No projects available or multiple projects');
    }
    
    // Try nuclear option as last resort
    setTimeout(() => {
      console.log('Trying nuclear option...');
      forceRecreateProgressElements();
    }, 1000);
  }

  // Load submission history for the selected project
  async function loadSubmissionHistory() {
    if (!selectedProject) return;
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_URL}/project-updates/project/${selectedProject.id}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          projectUpdates = data.updates || [];
          displaySubmissionHistory();
        }
      }
    } catch (error) {
      console.error('Error loading submission history:', error);
    }
  }

  // Display submission history
  function displaySubmissionHistory() {
    const container = document.getElementById('updatesContainer');
    const emptyHistory = document.getElementById('emptyHistory');
    
    if (!container) return;
    
    // Update summary statistics
    const totalSubmissions = projectUpdates.length;
    const pendingReviews = projectUpdates.filter(u => u.status === 'submitted').length;
    const approvedUpdates = projectUpdates.filter(u => u.status === 'secretariat_approved').length;
    const rejectedUpdates = projectUpdates.filter(u => u.status === 'rejected').length;
    
    document.getElementById('totalSubmissions').textContent = totalSubmissions;
    document.getElementById('pendingReviews').textContent = pendingReviews;
    document.getElementById('approvedUpdates').textContent = approvedUpdates;
    document.getElementById('rejectedUpdates').textContent = rejectedUpdates;
    
    if (projectUpdates.length === 0) {
      container.style.display = 'none';
      emptyHistory.style.display = 'block';
      return;
    }
    
    container.style.display = 'block';
    emptyHistory.style.display = 'none';
    
    // Sort updates by date (newest first)
    const sortedUpdates = [...projectUpdates].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    container.innerHTML = sortedUpdates.map(update => {
      const statusColors = {
        'submitted': 'bg-yellow-100 text-yellow-800',
        'iu_approved': 'bg-blue-100 text-blue-800',
        'secretariat_approved': 'bg-green-100 text-green-800',
        'rejected': 'bg-red-100 text-red-800',
        'compiled_for_secretariat': 'bg-purple-100 text-purple-800'
      };
      
      const statusText = {
        'submitted': 'Pending Review',
        'iu_approved': 'IU Approved',
        'secretariat_approved': 'Approved',
        'rejected': 'Rejected',
        'compiled_for_secretariat': 'Compiled for Secretariat'
      };
      
      const date = new Date(update.createdAt).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
      return `
        <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
          <div class="flex items-center justify-between mb-3">
            <div class="flex items-center gap-3">
              <div class="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-800">${update.title || 'Milestone Update'}</h4>
                <p class="text-sm text-gray-600">Submitted on ${date}</p>
              </div>
            </div>
            <span class="px-3 py-1 text-xs font-medium rounded-full ${statusColors[update.status] || 'bg-gray-100 text-gray-800'}">
              ${statusText[update.status] || update.status}
            </span>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
            <div>
              <span class="text-gray-600">Type:</span>
              <span class="font-medium ml-1">${update.updateType.replace('_', ' ').toUpperCase()}</span>
            </div>
            <div>
              <span class="text-gray-600">Progress:</span>
              <span class="font-medium ml-1">${update.currentProgress || 0}%</span>
            </div>
            <div>
              <span class="text-gray-600">Budget Used:</span>
              <span class="font-medium ml-1">₱${(update.budgetUsed || 0).toLocaleString()}</span>
            </div>
          </div>
          
          ${update.remarks ? `
            <div class="mt-3 p-3 bg-gray-50 rounded-lg">
              <p class="text-sm text-gray-700"><strong>Remarks:</strong> ${update.remarks}</p>
            </div>
          ` : ''}
          
          ${update.secretariatReviewRemarks ? `
            <div class="mt-3 p-3 bg-blue-50 rounded-lg">
              <p class="text-sm text-blue-700"><strong>Review Comments:</strong> ${update.secretariatReviewRemarks}</p>
            </div>
          ` : ''}
        </div>
      `;
    }).join('');
  }

  // Refresh submission history
  function refreshSubmissionHistory() {
    loadSubmissionHistory();
  }

  // ===== HORIZONTAL TIMELINE FUNCTIONS =====
  
  // Load timeline for the selected project
  async function loadProjectTimeline() {
    if (!selectedProject) {
      console.log('No project selected for timeline');
      return;
    }
    
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('No token available for timeline');
        return;
      }
      
      console.log('Loading timeline for project:', selectedProject.id);
      
      const response = await fetch(`${API_URL}/projects/${selectedProject.id}/milestones`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.milestones && data.milestones.length > 0) {
          console.log('Timeline milestones loaded:', data.milestones.length);
          renderProjectTimeline(selectedProject, data.milestones);
        } else {
          console.log('No milestones found for project timeline');
          hideTimelineSection();
        }
      } else {
        console.error('Failed to load milestones for timeline:', response.status);
        hideTimelineSection();
      }
    } catch (error) {
      console.error('Error loading project timeline:', error);
      hideTimelineSection();
    }
  }
  
  // Render timeline for a project
  function renderProjectTimeline(project, milestones) {
    try {
      const timelineSection = document.getElementById('horizontalTimelineSection');
      const timelineContainer = document.getElementById('projectTimelineContainer');
      const startDateSpan = document.getElementById('timelineStartDate');
      const endDateSpan = document.getElementById('timelineEndDate');
      
      if (!timelineSection || !timelineContainer || !startDateSpan || !endDateSpan) {
        console.error('Timeline elements not found, hiding timeline section');
        hideTimelineSection();
        return;
      }
    
    // Show timeline section
    timelineSection.style.display = 'block';
    
    // Update date labels
    if (project.startDate) {
      startDateSpan.textContent = new Date(project.startDate).toLocaleDateString();
    }
    if (project.endDate) {
      endDateSpan.textContent = new Date(project.endDate).toLocaleDateString();
    }
    
    // Get timeline container
    const milestonesContainer = timelineContainer.querySelector('.timeline-milestones');
    if (!milestonesContainer) {
      console.error('Timeline milestones container not found');
      return;
    }
    
    console.log('Timeline container found:', milestonesContainer);
    console.log('Project dates:', { start: project.startDate, end: project.endDate });
    console.log('Milestones data:', milestones);
    
    // Clear existing milestones
    milestonesContainer.innerHTML = '';
    
    if (!project.startDate || !project.endDate) {
      console.log('Project missing start or end date');
      return;
    }
    
    const projectStart = new Date(project.startDate);
    const projectEnd = new Date(project.endDate);
    const totalDuration = projectEnd - projectStart;
    
    console.log('Rendering timeline with milestones:', milestones.length);
    
    milestones.forEach(milestone => {
      // Use milestone due date as the timeline position
      if (milestone.dueDate) {
        const milestoneDate = new Date(milestone.dueDate);
        const position = ((milestoneDate - projectStart) / totalDuration) * 100;
        
        // Ensure position is within bounds
        const clampedPosition = Math.max(0, Math.min(100, position));
        
        console.log(`Creating milestone: ${milestone.title}, position: ${clampedPosition}%, status: ${milestone.status}`);
        
        const milestoneElement = document.createElement('div');
        milestoneElement.className = `timeline-milestone ${milestone.status || 'pending'}`;
        milestoneElement.style.left = `${clampedPosition}%`;
        milestoneElement.style.width = '12px'; // Slightly wider for better visibility
        milestoneElement.style.height = '100%'; // Ensure full height
        milestoneElement.style.marginLeft = '-6px'; // Center the marker
        milestoneElement.style.position = 'absolute'; // Ensure absolute positioning
        milestoneElement.style.top = '0'; // Align to top
        milestoneElement.setAttribute('data-milestone', JSON.stringify(milestone));
        
        // Add hover popup
        milestoneElement.addEventListener('mouseenter', (e) => showTimelinePopup(e, milestone));
        milestoneElement.addEventListener('mouseleave', hideTimelinePopup);
        
        milestonesContainer.appendChild(milestoneElement);
        console.log(`Milestone element added to DOM:`, milestoneElement);
      } else {
        console.warn(`Milestone ${milestone.title} has no due date`);
      }
    });
    } catch (error) {
      console.error('Error rendering project timeline:', error);
      hideTimelineSection();
    }
  }
  
  // Show timeline popup
  function showTimelinePopup(event, milestone) {
    const popup = document.createElement('div');
    popup.className = 'timeline-popup';
    popup.innerHTML = `
      <div class="font-semibold text-gray-800 mb-2">${milestone.title}</div>
      <div class="text-sm text-gray-600 mb-1">${milestone.description || 'No description'}</div>
      <div class="text-xs text-gray-500">
        <div>Due Date: ${milestone.dueDate ? new Date(milestone.dueDate).toLocaleDateString() : 'Not set'}</div>
        <div>Status: ${milestone.status ? milestone.status.replace('_', ' ').charAt(0).toUpperCase() + milestone.status.replace('_', ' ').slice(1) : 'Pending'}</div>
        <div>Weight: ${milestone.weight || 0}%</div>
        <div>Budget: ₱${parseFloat(milestone.plannedBudget || 0).toLocaleString()}</div>
      </div>
    `;
    
    document.body.appendChild(popup);
    
    const rect = event.target.getBoundingClientRect();
    popup.style.left = `${rect.left + rect.width / 2 - popup.offsetWidth / 2}px`;
    popup.style.top = `${rect.top - popup.offsetHeight - 10}px`;
    
    setTimeout(() => popup.classList.add('show'), 10);
  }
  
  // Hide timeline popup
  function hideTimelinePopup() {
    const popup = document.querySelector('.timeline-popup');
    if (popup) {
      popup.classList.remove('show');
      setTimeout(() => popup.remove(), 300);
    }
  }
  
  // Hide timeline section
  function hideTimelineSection() {
    const timelineSection = document.getElementById('horizontalTimelineSection');
    if (timelineSection) {
      timelineSection.style.display = 'none';
    }
  }
  
  // Refresh project timeline
  function refreshProjectTimeline() {
    if (selectedProject) {
      loadProjectTimeline();
    }
  }

  // Update milestone status automatically (for overdue detection)
  async function updateMilestoneStatus(milestoneId, newStatus) {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      const response = await fetch(`${API_URL}/milestones/${milestoneId}/status`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (response.ok) {
        console.log(`Milestone ${milestoneId} status updated to ${newStatus}`);
      } else {
        console.error('Failed to update milestone status:', response.status);
      }
    } catch (error) {
      console.error('Error updating milestone status:', error);
    }
  }

  // Check if milestone can be updated based on status
  function canUpdateMilestone(milestone) {
    const status = milestone.status;
    return status === 'pending' || status === 'not_started' || status === 'revision_request';
  }

  // Check if milestone is locked (cannot be updated)
  function isMilestoneLocked(milestone) {
    const status = milestone.status;
    return status === 'under_approval' || status === 'delayed' || status === 'completed';
  }

  // Generate proof type upload sections based on milestone requirements
  function generateProofTypeUploadSections(milestone) {
    const proofTypes = milestone.physicalProofTypes ? milestone.physicalProofTypes.split(',').map(type => type.trim()) : ['Photo', 'Video', 'Document'];
    
    return proofTypes.map(proofType => {
      const proofTypeLower = proofType.toLowerCase();
      const acceptTypes = proofTypeLower === 'photo' ? 'image/*' : 
                         proofTypeLower === 'video' ? 'video/*' : 
                         '.pdf,.doc,.docx,.xls,.xlsx';
      
      return `
        <div class="bg-white border border-orange-200 rounded-lg p-3">
          <label class="block text-xs font-medium text-orange-700 mb-2">${proofType} Upload</label>
          <div class="border-2 border-dashed border-orange-300 rounded-lg p-4 text-center hover:border-orange-400 transition-colors">
            <input type="file" id="milestone-${milestone.id}-${proofTypeLower}-files" multiple class="hidden" accept="${acceptTypes}">
            <label for="milestone-${milestone.id}-${proofTypeLower}-files" class="cursor-pointer">
              <div class="text-orange-500">
                <svg class="mx-auto h-8 w-8 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                <p class="text-sm font-medium">Upload ${proofType} files</p>
                <p class="text-xs text-orange-400 mt-1">Max 10MB each</p>
              </div>
            </label>
          </div>
          <div id="milestone-${milestone.id}-${proofTypeLower}-file-list" class="mt-2 space-y-1"></div>
        </div>
      `;
    }).join('');
  }

  // Make functions globally available
  window.selectProject = selectProject;
  window.submitMilestoneUpdate = submitMilestoneUpdate;
  window.refreshData = refreshData;
  window.loadSubmitUpdate = loadSubmitUpdate;
  window.toggleMilestoneCard = toggleMilestoneCard;
  window.displayFile = displayFile;
  window.removeFile = removeFile;
  window.debugUpdateUI = debugUpdateUI;
  window.checkDOMElements = checkDOMElements;
  window.forceRecreateProgressElements = forceRecreateProgressElements;
  window.refreshSubmissionHistory = refreshSubmissionHistory;
  window.refreshProjectTimeline = refreshProjectTimeline;
  window.updateMilestoneStatus = updateMilestoneStatus;
  window.canUpdateMilestone = canUpdateMilestone;
  window.isMilestoneLocked = isMilestoneLocked;
</script> 
</script> 
</script> 