---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import EIULayout from '../../../../components/EIULayout.astro';
import ProjectCard from '../../../../components/ProjectCard.astro';
import ProjectDetailsModal from '../../../../components/ProjectDetailsModal.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let projects = [];
let selectedProject = null;
let projectMilestones = [];
let projectUpdates = [];
let loading = true;
let error = '';

// Try to fetch submit update data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch EIU projects
    const projectsRes = await fetch(`${API_URL}/eiu/projects`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        projects = data.projects;
      }
    }
  }
} catch (err) {
  console.error('Error fetching submit update data:', err);
  error = 'Failed to fetch submit update data.';
}

loading = false;
---

<Layout title="Submit Update | EIU Dashboard">
  <style>
    /* Modern Timeline Styles */
    .timeline-section-container {
      overflow-x: auto;
      scrollbar-width: thin;
      scrollbar-color: #10b981 #f3f4f6;
    }
    
    .timeline-section-container::-webkit-scrollbar {
      height: 8px;
    }
    
    .timeline-section-container::-webkit-scrollbar-track {
      background: #f3f4f6;
      border-radius: 4px;
    }
    
    .timeline-section-container::-webkit-scrollbar-thumb {
      background: #10b981;
      border-radius: 4px;
    }
    
    .timeline-section-container::-webkit-scrollbar-thumb:hover {
      background: #059669;
    }

    .timeline-milestone {
      position: absolute;
      width: 32px;
      height: 32px;
      border-radius: 50%;
      cursor: pointer;
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      top: 50%;
      transform: translateY(-50%) translateX(-50%);
      z-index: 15;
      display: block;
      background: linear-gradient(135deg, #ef4444, #dc2626); /* Enhanced gradient fallback */
      border: 4px solid white;
      box-shadow: 0 6px 20px rgba(0,0,0,0.15), 0 0 0 3px rgba(239, 68, 68, 0.2);
    }
    

    
    .timeline-milestone.completed {
      background: linear-gradient(135deg, #10b981, #059669);
      box-shadow: 0 6px 20px rgba(16, 185, 129, 0.3), 0 0 0 3px rgba(16, 185, 129, 0.2);
      border: 4px solid white;
    }
    
    .timeline-milestone.ongoing {
      background: linear-gradient(135deg, #3b82f6, #2563eb);
      box-shadow: 0 6px 20px rgba(59, 130, 246, 0.3), 0 0 0 3px rgba(59, 130, 246, 0.2);
      animation: pulse-ongoing 2s infinite;
      border: 4px solid white;
    }
    
    .timeline-milestone.pending {
      background: linear-gradient(135deg, #f59e0b, #d97706);
      border: 4px solid white;
      box-shadow: 0 6px 20px rgba(245, 158, 11, 0.3), 0 0 0 3px rgba(245, 158, 11, 0.2);
    }
    
    .timeline-milestone.delayed {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4), 0 0 0 3px rgba(239, 68, 68, 0.3);
      animation: pulse-delayed 1.5s infinite;
      border: 4px solid white;
    }
    
    @keyframes pulse-delayed {
      0%, 100% {
        transform: scale(1);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.5);
      }
      50% {
        transform: scale(1.1);
        box-shadow: 0 6px 20px rgba(239, 68, 68, 0.7);
      }
    }
    
    @keyframes pulse-ongoing {
      0%, 100% {
        transform: scale(1);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
      }
      50% {
        transform: scale(1.05);
        box-shadow: 0 6px 16px rgba(59, 130, 246, 0.6);
      }
    }
    
    @keyframes progress-ring {
      from {
        stroke-dasharray: 0 100;
      }
      to {
        stroke-dasharray: var(--progress, 0) 100;
      }
    }
    
    @keyframes blink-ring {
      0%, 100% {
        opacity: 1;
      }
      50% {
        opacity: 0.3;
      }
    }
    
    .timeline-milestone:hover {
      transform: translateY(-50%) translateX(-50%) scale(1.4);
      z-index: 20;
      box-shadow: 0 12px 30px rgba(0,0,0,0.3), 0 0 0 4px rgba(16, 185, 129, 0.3);
      border: 4px solid #10b981;
    }
    
    .timeline-milestone.delayed:hover {
      animation: none;
      box-shadow: 0 12px 30px rgba(239, 68, 68, 0.4), 0 0 0 4px rgba(239, 68, 68, 0.4);
      border: 4px solid #ef4444;
    }
    
    /* Modern Hover Card/Tooltip */
    .timeline-tooltip {
      position: fixed;
      background: white;
      border: 1px solid rgba(0,0,0,0.1);
      border-radius: 12px;
      padding: 16px;
      box-shadow: 0 20px 25px -5px rgba(0,0,0,0.1), 0 10px 10px -5px rgba(0,0,0,0.04);
      z-index: 1000;
      min-width: 280px;
      max-width: 350px;
      opacity: 0;
      transform: translateY(10px) scale(0.95);
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      pointer-events: none;
      backdrop-filter: blur(10px);
      background: rgba(255, 255, 255, 0.95);
    }
    
    .timeline-tooltip.show {
      opacity: 1;
      transform: translateY(0) scale(1);
      pointer-events: auto;
    }
    
    .timeline-tooltip::after {
      content: '';
      position: absolute;
      top: 100%;
      left: 50%;
      transform: translateX(-50%);
      border: 8px solid transparent;
      border-top-color: rgba(255, 255, 255, 0.95);
    }
    
    .timeline-tooltip.top::after {
      top: auto;
      bottom: 100%;
      border-top-color: transparent;
      border-bottom-color: rgba(255, 255, 255, 0.95);
    }
    
    .status-badge {
      display: inline-flex;
      align-items: center;
      padding: 4px 8px;
      border-radius: 6px;
      font-size: 12px;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.025em;
    }
    
    .status-badge.completed {
      background: rgba(16, 185, 129, 0.1);
      color: #059669;
    }
    
    .status-badge.ongoing {
      background: rgba(59, 130, 246, 0.1);
      color: #2563eb;
    }
    
    .status-badge.pending {
      background: rgba(245, 158, 11, 0.1);
      color: #d97706;
    }
    
    .status-badge.delayed {
      background: rgba(239, 68, 68, 0.1);
      color: #dc2626;
      animation: pulse-badge 2s infinite;
    }
    
    @keyframes pulse-badge {
      0%, 100% {
        background: rgba(239, 68, 68, 0.1);
      }
      50% {
        background: rgba(239, 68, 68, 0.2);
      }
    }
    
    .division-progress {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 6px 0;
      border-bottom: 1px solid rgba(0,0,0,0.05);
    }
    
    .division-progress:last-child {
      border-bottom: none;
    }
    
    .division-icon {
      width: 16px;
      height: 16px;
      border-radius: 4px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 10px;
      font-weight: bold;
      color: white;
    }
    
    .division-icon.timeline {
      background: #3b82f6;
    }
    
    .division-icon.budget {
      background: #8b5cf6;
    }
    
    .division-icon.physical {
      background: #f97316;
    }
    
    /* Modal animations */
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
    
    @keyframes scaleIn {
      from { 
        opacity: 0; 
        transform: scale(0.9) translateY(20px); 
      }
      to { 
        opacity: 1; 
        transform: scale(1) translateY(0); 
      }
    }
    
    /* Modern Drawer/Modal Styles */
    .timeline-drawer {
      position: fixed;
      top: 0;
      right: -500px;
      width: 500px;
      height: 100vh;
      background: white;
      box-shadow: -10px 0 30px rgba(0,0,0,0.3);
      transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      z-index: 1000;
      overflow-y: auto;
    }
    
    .timeline-drawer.open {
      right: 0;
    }
    
    .timeline-drawer-backdrop {
      position: fixed;
      inset: 0;
      background: rgba(0,0,0,0.5);
      backdrop-filter: blur(4px);
      opacity: 0;
      transition: all 0.3s ease;
      z-index: 999;
    }
    
    .timeline-drawer-backdrop.open {
      opacity: 1;
    }
    
    .progress-circle {
      width: 60px;
      height: 60px;
      border-radius: 50%;
      background: conic-gradient(from 0deg, #10b981 0deg, #10b981 var(--progress, 0deg), #e5e7eb var(--progress, 0deg));
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      color: #374151;
      position: relative;
    }
    
    .progress-circle::before {
      content: '';
      position: absolute;
      width: 45px;
      height: 45px;
      border-radius: 50%;
      background: white;
    }
    
    .progress-circle span {
      position: relative;
      z-index: 1;
      font-size: 14px;
    }
    
    .timeline-progress-bar {
      position: absolute;
      top: 0;
      left: 0;
      height: 100%;
      background: linear-gradient(90deg, #3b82f6, #1d4ed8);
      border-radius: 4px;
      transition: width 1s ease-in-out;
      z-index: 1;
    }
    
    .progress-indicator {
      position: absolute;
      top: 50%;
      width: 20px;
      height: 20px;
      background: linear-gradient(135deg, #1d4ed8, #3b82f6);
      border-radius: 50%;
      border: 2px solid white;
      box-shadow: 0 2px 8px rgba(0,0,0,0.3);
      z-index: 3;
      transition: left 1s ease-in-out, transform 0.2s ease;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      transform: translateY(-50%) translateX(-50%);
    }
    
    .progress-indicator:hover {
      transform: translateY(-50%) translateX(-50%) scale(1.2);
      box-shadow: 0 4px 12px rgba(0,0,0,0.4);
    }

    /* Icon Container Styles - EIU Theme with Hover Effects */
    .icon-container {
      @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
      position: relative;
      overflow: hidden;
    }
    
    .icon-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.5s ease-out;
      z-index: 1;
    }
    
    .icon-container > * {
      position: relative;
      z-index: 2;
    }
    
    .icon-container:hover::before {
      left: 100%;
    }
    
    .icon-container:hover {
      @apply transform scale-110 rotate-3;
    }
    
    .icon-container-small {
      @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
      position: relative;
      overflow: hidden;
    }
    
    .icon-container-small::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.5s ease-out;
      z-index: 1;
    }
    
    .icon-container-small > * {
      position: relative;
      z-index: 2;
    }
    
    .icon-container-small:hover::before {
      left: 100%;
    }
    
    .icon-container-small:hover {
      @apply transform scale-110 rotate-3;
    }
    
    /* Modern Profile Card Styles - EIU Theme */
    .profile-card {
      @apply bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 ease-out hover:shadow-2xl hover:border-emerald-500/20 hover:-translate-y-2;
      position: relative;
      overflow: hidden;
    }
    
    .profile-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(16, 185, 129, 0.08), transparent);
      transition: left 0.6s ease-out;
      z-index: 1;
    }
    
    .profile-card > * {
      position: relative;
      z-index: 2;
    }
    
    .profile-card:hover::before {
      left: 100%;
    }
    
    /* Modern Button Styles - EIU Theme */
    .btn-primary {
      @apply bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/25 border border-emerald-500/20;
      position: relative;
      overflow: hidden;
    }
    
    .btn-primary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.5s ease-out;
      z-index: 1;
    }
    
    .btn-primary > * {
      position: relative;
      z-index: 2;
    }
    
    .btn-primary:hover::before {
      left: 100%;
    }
    
    .btn-secondary {
      @apply bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl border border-gray-600 hover:border-gray-800;
      position: relative;
      overflow: hidden;
    }
    
    .btn-secondary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.5s ease-out;
      z-index: 1;
    }
    
    .btn-secondary > * {
      position: relative;
      z-index: 2;
    }
    
    .btn-secondary:hover::before {
      left: 100%;
    }
    
    .btn-success {
      @apply bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/25 border border-emerald-500/20;
      position: relative;
      overflow: hidden;
    }
    
    .btn-success::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.5s ease-out;
      z-index: 1;
    }
    
    .btn-success > * {
      position: relative;
      z-index: 2;
    }
    
    .btn-success:hover::before {
      left: 100%;
    }
    
    /* Small Button Variants */
    .btn-sm {
      @apply px-4 py-2 text-sm;
    }
    
    /* Summary Card Hover Effects */
    .summary-card {
      cursor: pointer;
    }
    
    .summary-card:hover {
      transform: translateY(-2px);
    }

    /* Collapsible Section Styles */
    .section-content {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.5s ease-out, opacity 0.3s ease-out;
      opacity: 0;
    }
    
    .section-content.expanded {
      max-height: 5000px;
      opacity: 1;
      transition: max-height 0.5s ease-in, opacity 0.3s ease-in;
    }
    
    .toggle-chevron svg {
      transition: transform 0.3s ease;
    }
    
    .toggle-chevron.rotated svg {
      transform: rotate(180deg);
    }

    /* Individual Milestone Cards use the same section-content styles */

    /* Enhanced Form Styling */
    .form-section {
      background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(248,250,252,0.9) 100%);
      backdrop-filter: blur(10px);
      border: 1px solid rgba(229, 231, 235, 0.5);
      border-radius: 1rem;
      padding: 1.5rem;
      margin-bottom: 1rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    }

    /* Enhanced Milestone Cards */
    .milestone-card {
      background: white;
      border: 1px solid #e5e7eb;
      border-radius: 1rem;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      margin-bottom: 1.5rem;
      overflow: hidden;
      transition: all 0.3s ease;
    }

    .milestone-card:hover {
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      transform: translateY(-2px);
    }

    .milestone-header {
      background: linear-gradient(135deg, #dbeafe 0%, #e0e7ff 100%);
      border-bottom: 1px solid #c7d2fe;
      padding: 1.5rem;
      cursor: pointer;
      transition: background 0.3s ease;
    }

    .milestone-header:hover {
      background: linear-gradient(135deg, #c7d2fe 0%, #ddd6fe 100%);
    }

    /* Smooth scroll behavior */
    html {
      scroll-behavior: smooth;
    }

    /* Enhanced Milestone Toggle Animation */
    .section-content {
      max-height: 0;
      overflow: hidden;
      opacity: 0;
      transition: max-height 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s ease;
      transform: translateY(-10px);
    }
    
    .section-content.expanded {
      max-height: 6000px;
      opacity: 1;
      transform: translateY(0);
      transition: max-height 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s ease, transform 0.3s ease;
    }

    /* Icon rotation animation */
    .milestone-icon {
      transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .milestone-icon.rotated {
      transform: rotate(180deg);
    }

    /* Enhanced chevron rotation for main sections */
    .toggle-chevron svg {
      transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    }

    .toggle-chevron.rotated svg {
      transform: rotate(180deg);
    }

    /* 360-degree rotation effect for milestone cards */
    .milestone-icon.expanded {
      transform: rotate(180deg);
    }

    /* Enhanced hover effects for milestone cards */
    .milestone-card-header {
      position: relative;
      overflow: hidden;
    }

    .milestone-card-header::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(16, 185, 129, 0.1), transparent);
      transition: left 0.6s ease-out;
      z-index: 1;
    }

    .milestone-card-header:hover::before {
      left: 100%;
    }

    .milestone-card-header > * {
      position: relative;
      z-index: 2;
    }

    /* Custom blinking animation for pending counter */
    @keyframes blink-red {
      0%, 50% { 
        background: linear-gradient(to right, #ef4444, #dc2626);
        box-shadow: 0 4px 12px rgba(239, 68, 68, 0.4);
      }
      51%, 100% { 
        background: linear-gradient(to right, #fca5a5, #ef4444);
        box-shadow: 0 6px 20px rgba(239, 68, 68, 0.6);
      }
    }

    .blink-red {
      animation: blink-red 1.5s infinite;
    }

    /* Enhanced Button Styles - EIU Theme */
    .btn-primary {
      @apply bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/25 border border-emerald-500/20;
      position: relative;
      overflow: hidden;
    }
    
    .btn-primary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.5s ease-out;
      z-index: 1;
    }
    
    .btn-primary > * {
      position: relative;
      z-index: 2;
    }
    
    .btn-primary:hover::before {
      left: 100%;
    }

    .btn-secondary {
      @apply bg-gradient-to-r from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 text-gray-700 hover:text-gray-800 font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-lg border border-gray-200;
      position: relative;
      overflow: hidden;
    }
    
    .btn-secondary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s ease-out;
      z-index: 1;
    }
    
    .btn-secondary > * {
      position: relative;
      z-index: 2;
    }
    
    .btn-secondary:hover::before {
      left: 100%;
    }

    .btn-success {
      @apply bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-green-500/25 border border-green-500/20;
      position: relative;
      overflow: hidden;
    }
    
    .btn-success::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.5s ease-out;
      z-index: 1;
    }
    
    .btn-success > * {
      position: relative;
      z-index: 2;
    }
    
    .btn-success:hover::before {
      left: 100%;
    }

    /* Small Button Variants */
    .btn-sm {
      @apply px-4 py-2 text-sm;
    }

    /* Icon Container Styles - Matching Standard */
    .icon-container {
      @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
      position: relative;
      overflow: hidden;
    }
    
    .icon-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: left 0.5s ease-out;
      z-index: 1;
    }
    
    .icon-container > * {
      position: relative;
      z-index: 2;
    }
    
    .icon-container:hover::before {
      left: 100%;
    }
    
    .icon-container:hover {
      @apply transform scale-110 rotate-3;
    }

    /* Countdown indicator animations */
    @keyframes blink-urgent {
      0%, 50% { 
        background: linear-gradient(to right, #dc2626, #991b1b);
        color: white;
        transform: scale(1);
      }
      51%, 100% { 
        background: linear-gradient(to right, #fca5a5, #dc2626);
        color: white;
        transform: scale(1.05);
      }
    }

    @keyframes blink-warning {
      0%, 50% { 
        background: linear-gradient(to right, #d97706, #92400e);
        color: white;
        transform: scale(1);
      }
      51%, 100% { 
        background: linear-gradient(to right, #fcd34d, #d97706);
        color: white;
        transform: scale(1.05);
      }
    }

    @keyframes pulse-gentle {
      0%, 100% { 
        transform: scale(1);
        opacity: 1;
      }
      50% {
        transform: scale(1.02);
        opacity: 0.9;
      }
    }

    /* Dashboard Progress Bar Animation */
    .dashboard-progress-bar-fill {
      transform-origin: left;
      animation: fillDashboardProgress 2s ease-out forwards;
    }
    
    @keyframes fillDashboardProgress {
      from {
        width: 0%;
      }
      to {
        width: var(--dashboard-progress-width);
      }
    }

    .countdown-urgent {
      animation: blink-urgent 1s infinite;
    }

    .countdown-warning {
      animation: blink-warning 1.2s infinite;
    }

    .countdown-normal {
      animation: pulse-gentle 2s infinite;
    }

    /* Tab Button Styles - EIU Theme */
    .tab-button {
      position: relative;
      overflow: hidden;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      border: none;
      outline: none;
      cursor: pointer;
      background: transparent;
      color: #6b7280;
    }
    
    .tab-button::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transition: left 0.5s;
      z-index: 1;
    }
    
    .tab-button > * {
      position: relative;
      z-index: 2;
    }
    
    .tab-button:hover::before {
      left: 100%;
    }
    
    .tab-button.active {
      background: linear-gradient(135deg, #10b981, #059669);
      color: white;
      font-weight: 600;
      box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
    }
    
    .tab-button:not(.active):hover {
      background: #f3f4f6;
      color: #374151;
      transform: translateY(-1px);
    }

    /* Force collapsed state */
    .section-content:not(.expanded) {
      max-height: 0 !important;
      opacity: 0 !important;
      transform: translateY(-10px) !important;
      overflow: hidden !important;
    }

    /* Force expanded state */
    .section-content.expanded {
      max-height: 6000px !important;
      opacity: 1 !important;
      transform: translateY(0) !important;
    }

    /* Responsive improvements */
    @media (max-width: 768px) {
      .section-content.expanded {
        max-height: 8000px !important;
      }
    }
  </style>
  <EIULayout>
    <!-- Page Header - EIU Theme -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-black">Submit Update</h1>
              <p class="text-sm text-gray-600">External Implementing Unit - Project Milestone Management</p>
            </div>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Active Projects</p>
            <p class="text-xs text-black font-semibold" id="headerProjectCount">{projects.length} Projects Available</p>
          </div>
          <div class="w-4 h-4 bg-emerald-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <main class="bg-gradient-to-br from-gray-50 to-white min-h-screen px-8 py-8">
      <!-- Action Buttons -->
      <div class="flex items-center justify-end gap-3 mb-8">
        <button onclick="exportData()" class="btn-success btn-sm inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Export Data
        </button>
        <button onclick="refreshData()" class="btn-primary btn-sm inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          Refresh Data
        </button>
      </div>

      <!-- Enhanced Summary Cards - EIU Theme -->
      <div class="space-y-6 mb-8">
        <!-- Top Row: Primary Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Assigned Projects - EIU primary color theme -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('assigned')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Assigned Projects</p>
                <p class="text-2xl font-bold text-black" id="assignedProjects">{projects.length}</p>
                <p class="text-xs text-emerald-600 mt-1">Total assignments</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Pending Milestones - Professional Light Gold -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('pending')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Pending Milestones</p>
                <p class="text-2xl font-bold text-black" id="pendingMilestones">0</p>
                <p class="text-xs text-amber-600 mt-1">Awaiting submission</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Under Review - Professional Light Blue -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('review')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Under Review</p>
                <p class="text-2xl font-bold text-black" id="underReview">0</p>
                <p class="text-xs text-blue-600 mt-1">Secretariat review</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Completed Milestones - Professional Light Green -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('completed')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Completed Milestones</p>
                <p class="text-2xl font-bold text-black" id="completedMilestones">0</p>
                <p class="text-xs text-green-600 mt-1">Successfully finished</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-green-500 to-green-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>

        <!-- Bottom Row: Status Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Delayed Projects - Professional Light Red -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('delayed')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Delayed</p>
                <p class="text-2xl font-bold text-black" id="delayedMilestones">0</p>
                <p class="text-xs text-red-600 mt-1">Behind schedule</p>
                <p class="text-xs text-gray-500 mt-1">Delayed Milestones: <span id="delayedMilestonesCount">0</span></p>
              </div>
              <div class="icon-container bg-gradient-to-br from-red-500 to-red-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Revision Requests - Professional Orange/Amber -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('revision')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Revision Requests</p>
                <p class="text-2xl font-bold text-black" id="revisionRequests">0</p>
                <p class="text-xs text-orange-600 mt-1">Needs resubmission</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-orange-500 to-orange-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Total Budget Assigned - EIU primary color theme -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('budget')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Total Budget Assigned (₱)</p>
                <p class="text-2xl font-bold text-black" id="totalBudgetAssigned">0</p>
                <p class="text-xs text-emerald-600 mt-1">Allocated budget</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Budget Utilized - Professional Light Green -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('utilized')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Budget Utilized (%)</p>
                <p class="text-2xl font-bold text-black" id="budgetUtilized">0</p>
                <p class="text-xs text-green-600 mt-1">Utilization rate</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-green-500 to-green-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Project Selection & Content Section -->
      <div class="profile-card p-8 mb-8">
        <!-- Enhanced Filters Section -->
        <div class="mb-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-bold text-black">Filters & Project Selection</h3>
          </div>
          
          <div class="bg-gradient-to-br from-gray-50 to-gray-100/50 rounded-2xl p-6 border border-gray-200">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Search Projects</label>
                <div class="relative">
                  <input 
                    type="text" 
                    id="searchInput" 
                    placeholder="Search by project name..." 
                    class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                  >
                  <svg class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Status</label>
                <select 
                  id="statusFilter" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                >
                  <option value="">All Status</option>
                  <option value="pending">Pending</option>
                  <option value="ongoing">Ongoing</option>
                  <option value="complete">Complete</option>
                </select>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Priority</label>
                <select 
                  id="priorityFilter" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                >
                  <option value="">All Priorities</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </select>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Sort By</label>
                <select 
                  id="sortFilter" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                >
                  <option value="name">Project Name</option>
                  <option value="date">Due Date</option>
                  <option value="progress">Progress</option>
                  <option value="priority">Priority</option>
                </select>
              </div>
            </div>
            
            <div class="flex flex-wrap items-center gap-3 mt-6">
              <button onclick="applyFilters()" class="btn-primary inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                </svg>
                Apply Filters
              </button>
              <button onclick="clearFilters()" class="btn-secondary inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Clear Filters
              </button>
            </div>
          </div>
        </div>

        <!-- Project Selection Section -->
        <div class="mb-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
            <h3 class="text-xl font-bold text-black">Select Project for Updates</h3>
          </div>
          
          <div class="bg-gradient-to-br from-emerald-50 to-gray-50 rounded-2xl p-6 border border-emerald-200">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="projectsGrid">
              {projects.map(project => (
                <div class={`project-card-wrapper ${selectedProject && selectedProject.id === project.id ? 'ring-2 ring-emerald-500 rounded-2xl' : ''}`} data-project-id={project.id}>
                  <ProjectCard 
                    project={project}
                    userTheme="eiu"
                    onClick="selectProjectForUpdate"
                    showModal={false}
                  />
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#EB3C3C]"></div>
          <span class="ml-3 text-gray-600">Loading submit update form...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12">
          <p class="text-red-600 mb-4">{error}</p>
          <button onclick="loadSubmitUpdate()" class="px-4 py-2 bg-[#EB3C3C] text-white rounded-lg hover:bg-[#D63333] transition-all">
            Try Again
          </button>
        </div>
      ) : projects.length === 0 ? (
        <div class="text-center py-12">
          <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">No Projects Assigned</h3>
          <p class="text-gray-600 mb-6">You don't have any projects assigned to you yet. Projects will appear here once they are assigned by the system administrator.</p>
          <button onclick="window.location.href='/dashboard/eiu/modules/profile'" class="px-6 py-3 bg-[#EB3C3C] text-white rounded-lg hover:bg-[#D63333] transition-colors flex items-center gap-2 mx-auto">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
            View Profile
          </button>
        </div>
      ) : (
        <!-- Main Project Content Section - Enhanced Structure -->
        <div id="projectContentSection" class="profile-card p-8 mb-8" style="display: none;">
          <div class="flex items-center gap-3 mb-8">
            <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
              </svg>
            </div>
            <h3 class="text-xl font-bold text-black">Project Management Dashboard</h3>
          </div>

          <!-- Project Progress Overview -->
          <div id="selectedProjectInfoContainer" class="mb-8"></div>

          <!-- Pending Approval Message -->
          <div id="pendingMessage" class="bg-gradient-to-r from-yellow-50 to-amber-50 border border-yellow-200 rounded-xl p-6 mb-8" style="display: none;">
            <div class="flex items-center gap-4">
              <div class="icon-container-small bg-gradient-to-br from-yellow-500 to-amber-600">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h4 class="text-lg font-semibold text-yellow-800 mb-2">Project Pending Approval</h4>
                <p class="text-yellow-700">This project is currently pending Secretariat approval. You cannot submit updates until the project is approved and status changes to "ONGOING".</p>
              </div>
            </div>
          </div>

          <!-- Collapsible Sections Container -->
          <div class="space-y-6">
            <!-- Project Timeline Section - Collapsible -->
            <div class="profile-card border border-emerald-200">
              <div class="bg-gradient-to-r from-emerald-50 to-gray-50 px-6 py-4 border-b border-emerald-200 cursor-pointer hover:from-emerald-100 hover:to-gray-100 transition-all duration-300 group" 
                   onclick="toggleProjectSection('timeline')">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-4">
                    <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600 group-hover:from-emerald-600 group-hover:to-emerald-700">
                      <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                    </div>
                    <div>
                      <h4 class="text-lg font-bold text-black group-hover:text-emerald-800 transition-colors duration-300">Project Timeline</h4>
                      <p class="text-sm text-gray-600">Visual timeline representation of project milestones</p>
                    </div>
                  </div>
                  <div class="flex items-center gap-3">
                    <button onclick="event.stopPropagation(); refreshProjectTimeline()" class="btn-success btn-sm inline-flex items-center gap-1">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                      </svg>
                      Refresh
                    </button>
                    <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600 toggle-chevron hover:from-emerald-600 hover:to-emerald-700 hover:scale-110 hover:rotate-3 transition-all duration-300 border-2 border-emerald-400 hover:border-emerald-300 rounded-xl" data-section="timeline">
                      <svg class="w-4 h-4 text-white transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
              
                                  <div id="timelineSection" class="section-content">
                <div class="p-6">
                  <!-- Modern Timeline Container -->
                  <div id="modernTimelineContainer" class="relative">
                    <!-- Timeline Loading State -->
                    <div id="timelineLoading" class="flex items-center justify-center py-12">
                      <div class="flex items-center gap-3">
                        <div class="animate-spin rounded-full h-6 w-6 border-2 border-emerald-500 border-t-transparent"></div>
                        <span class="text-gray-600 font-medium">Loading timeline...</span>
                      </div>
                    </div>
                    
                    <!-- Modern Timeline Track -->
                    <div id="modernTimeline" class="hidden">
                                              <!-- Project Dates Header -->
                        <div class="flex justify-between items-start mb-6">
                          <div class="flex flex-col space-y-2 text-sm text-gray-600">
                            <div>
                              <span class="font-semibold">Start:</span>
                              <span id="timelineStartDate" class="ml-1">Loading...</span>
                            </div>
                            <div>
                              <span class="font-semibold">Actual:</span>
                              <span id="timelineActualDate" class="ml-1">Loading...</span>
                            </div>
                          </div>
                          <div class="text-center">
                            <div id="projectNameDisplay" class="text-lg font-bold text-gray-900 mb-1">Loading...</div>
                            <div id="projectProgressDisplay" class="text-sm font-semibold text-emerald-600">0.0%</div>
                          </div>
                          <div class="flex flex-col space-y-2 text-sm text-gray-600">
                            <div>
                              <span class="font-semibold">Target:</span>
                              <span id="timelineTargetDate" class="ml-1">Loading...</span>
                            </div>
                            <div>
                              <span class="font-semibold">Days:</span>
                              <span id="timelineExpectedDays" class="ml-1">Loading...</span>
                            </div>
                          </div>
                        </div>
                      
                      <!-- Timeline SVG Container -->
                      <div class="timeline-section-container relative bg-gradient-to-r from-gray-50 to-emerald-50 rounded-2xl p-8 border border-gray-200">
                        <!-- Date Ruler (Above Timeline) -->
                        <div class="relative mb-4">
                          <!-- Date Markers Container -->
                          <div id="dateRuler" class="relative" style="min-height: 32px;">
                            <!-- Dynamic date markers will be inserted here -->
                          </div>
                          
                          <!-- Date Ruler Line (same length as main timeline) -->
                          <div class="absolute bottom-0 left-8 right-8 h-px bg-gradient-to-r from-gray-300 via-emerald-300 to-gray-300"></div>
                        </div>
                        
                        <div class="relative h-20">
                          <!-- Connecting Line Background -->
                          <div class="absolute top-1/2 left-8 right-8 h-1 bg-gray-200 rounded-full transform -translate-y-1/2"></div>
                          
                          <!-- Animated Progress Line -->
                          <div id="progressLine" class="absolute top-1/2 left-8 h-1 bg-gradient-to-r from-emerald-400 to-blue-500 rounded-full transform -translate-y-1/2 transition-all duration-1000 ease-out" style="width: 0%"></div>
                          
                          <!-- Timeline Milestones Container -->
                          <div id="timelineMilestonesContainer" class="absolute inset-0">
                            <!-- Milestone dots will be inserted here -->
                          </div>
                          
                          <!-- Vertical Connectors Container -->
                          <div id="verticalConnectors" class="absolute inset-0 pointer-events-none">
                            <!-- Dynamic vertical connectors will be generated here -->
                          </div>
                        </div>
                        
                        <!-- Enhanced Ruler-Style Percentage Indicators (5% intervals) -->
                        <div class="relative mt-6">
                          <!-- Ruler Line -->
                          <div class="absolute top-0 left-8 right-8 h-px bg-gradient-to-r from-gray-300 via-emerald-300 to-gray-300"></div>
                          
                          <!-- Percentage Markers Container (Dynamic 5% intervals) -->
                          <div id="percentageRuler" class="relative" style="min-height: 32px;">
                            <!-- Percentage markers will be generated dynamically -->
                          </div>
                        </div>
                        
                        <!-- Dynamic Milestone Position Indicators -->
                        <div id="milestonePercentageIndicators" class="relative mt-4" style="min-height: 24px;">
                          <!-- Dynamic percentage indicators for milestones will be inserted here -->
                        </div>
                      </div>
                      
                      <!-- Timeline Legend -->
                      <div class="mt-6 flex items-center justify-center gap-6 text-sm bg-white p-4 rounded-xl border border-gray-100 shadow-sm">
                        <div class="flex items-center gap-2">
                          <div class="w-4 h-4 bg-green-500 rounded-full shadow-sm"></div>
                          <span class="font-medium text-gray-700">Completed</span>
                        </div>
                        <div class="flex items-center gap-2">
                          <div class="w-4 h-4 bg-blue-500 rounded-full shadow-sm animate-pulse"></div>
                          <span class="font-medium text-gray-700">Ongoing</span>
                        </div>
                        <div class="flex items-center gap-2">
                          <div class="w-4 h-4 bg-yellow-500 rounded-full border-2 border-yellow-600 bg-transparent shadow-sm"></div>
                          <span class="font-medium text-gray-700">Pending</span>
                        </div>
                        <div class="flex items-center gap-2">
                          <div class="w-4 h-4 bg-red-500 rounded-full shadow-sm animate-pulse"></div>
                          <span class="font-medium text-gray-700">Delayed</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Milestone Summary Section - Collapsible -->
            <div class="profile-card border border-emerald-200">
              <div class="bg-gradient-to-r from-emerald-50 to-gray-50 px-6 py-4 border-b border-emerald-200 cursor-pointer hover:from-emerald-100 hover:to-gray-100 transition-all duration-300 group" 
                   onclick="toggleProjectSection('summary')">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-4">
                    <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600 group-hover:from-emerald-600 group-hover:to-emerald-700">
                      <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                      </svg>
                    </div>
                    <div>
                      <h4 class="text-lg font-bold text-black group-hover:text-emerald-800 transition-colors duration-300">Milestone Summary</h4>
                      <p class="text-sm text-gray-600">Overview of milestone status and budget allocation</p>
                    </div>
                  </div>
                  <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600 toggle-chevron hover:from-emerald-600 hover:to-emerald-700 hover:scale-110 hover:rotate-3 transition-all duration-300 border-2 border-emerald-400 hover:border-emerald-300 rounded-xl" data-section="summary">
                    <svg class="w-4 h-4 text-white transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </div>
              
              <div id="summarySection" class="section-content">
                <div class="p-6">
                  <div id="milestoneSummaryContainer">
                    <!-- Milestone summary cards will be displayed here -->
                  </div>
                </div>
              </div>
            </div>

            <!-- Project Milestones Section - Collapsible -->
            <div class="profile-card border border-emerald-200">
              <div class="bg-gradient-to-r from-emerald-50 to-gray-50 px-6 py-4 border-b border-emerald-200 cursor-pointer hover:from-emerald-100 hover:to-gray-100 transition-all duration-300 group" 
                   onclick="toggleProjectSection('milestones')">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-4">
                    <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600 group-hover:from-emerald-600 group-hover:to-emerald-700">
                      <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                      </svg>
                    </div>
                    <div>
                      <div class="flex items-center gap-3">
                        <h4 class="text-lg font-bold text-black group-hover:text-emerald-800 transition-colors duration-300">Project Milestones</h4>
                        <span id="pendingMilestonesCounter" class="bg-gradient-to-r from-red-500 to-red-600 text-white text-xs font-bold px-2 py-1 rounded-full shadow-lg transition-all duration-300 hover:scale-110 hover:shadow-xl blink-red" style="display: none;">0</span>
                      </div>
                      <p class="text-sm text-gray-600">Submit updates for timeline, budget, and physical divisions</p>
                    </div>
                  </div>
                  <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600 toggle-chevron hover:from-emerald-600 hover:to-emerald-700 hover:scale-110 hover:rotate-3 transition-all duration-300 border-2 border-emerald-400 hover:border-emerald-300 rounded-xl" data-section="milestones">
                    <svg class="w-4 h-4 text-white transition-transform duration-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                </div>
              </div>
              
              <div id="milestonesSection" class="section-content">
                <div class="p-6">
                  <div id="milestonesContainer">
                    <!-- Milestones will be displayed here -->
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Enhanced Submission History -->
        <div id="updatesHistory" class="profile-card border border-emerald-200 p-6 mb-8">
          <div class="flex items-center justify-between mb-6">
            <div class="flex items-center gap-4 group">
              <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600 group-hover:from-emerald-600 group-hover:to-emerald-700">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-black group-hover:text-emerald-800 transition-colors duration-300">Submission History & Analytics</h3>
                <p class="text-sm text-gray-600">Track your milestone submissions and performance metrics</p>
              </div>
            </div>
            <div class="flex items-center gap-3">
              <button onclick="exportSubmissionReport()" class="btn-success btn-sm inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Export Report
              </button>
              <button onclick="refreshSubmissionHistory()" class="btn-primary btn-sm inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Refresh Data
              </button>
              <button id="toggleSubmissionHistory" class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 transition-all duration-200 cursor-pointer ml-2">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <!-- Collapsible Content -->
          <div id="submissionHistoryContent">
            <!-- Enhanced History Summary -->
          <div id="historySummary" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
            <!-- Total Submissions Card -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Total Submissions</p>
                  <p class="text-2xl font-bold text-black" id="totalSubmissions">0</p>
                  <p class="text-xs text-emerald-600 mt-1">Milestone updates</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <!-- Pending Review Card -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Pending Review</p>
                  <p class="text-2xl font-bold text-black" id="pendingReviews">0</p>
                  <p class="text-xs text-amber-600 mt-1">Awaiting decision</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <!-- Approved Updates Card -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Approved</p>
                  <p class="text-2xl font-bold text-black" id="approvedUpdates">0</p>
                  <p class="text-xs text-green-600 mt-1">Successfully finished</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-green-500 to-emerald-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <!-- Rejected Updates Card -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Rejected</p>
                  <p class="text-2xl font-bold text-black" id="rejectedUpdates">0</p>
                  <p class="text-xs text-red-600 mt-1">Needs revision</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-red-500 to-red-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Analytics Charts -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
            <!-- Budget Trend Chart -->
            <div class="profile-card p-6">
              <div class="flex items-center gap-3 mb-4">
                <div class="icon-container-small bg-gradient-to-br from-green-500 to-emerald-600">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
                  </svg>
                </div>
                <h4 class="text-lg font-bold text-black">Budget Utilization Trend</h4>
              </div>
              <div id="budgetTrendChart" class="h-48 flex items-center justify-center bg-gradient-to-br from-green-50 to-emerald-50 rounded-xl border border-green-200">
                <div class="text-center">
                  <svg class="w-12 h-12 text-green-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
                  </svg>
                  <p class="text-green-600 text-sm font-medium">Budget trend will appear after submissions</p>
                </div>
              </div>
            </div>
            
            <!-- Progress Curve Chart -->
            <div class="profile-card p-6">
              <div class="flex items-center gap-3 mb-4">
                <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                </div>
                <h4 class="text-lg font-bold text-black">Progress Completion Curve</h4>
              </div>
              <div id="progressCurveChart" class="h-48 flex items-center justify-center bg-gradient-to-br from-emerald-50 to-green-50 rounded-xl border border-emerald-200">
                <div class="text-center">
                  <svg class="w-12 h-12 text-emerald-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                  <p class="text-emerald-600 text-sm font-medium">Progress curve will appear after submissions</p>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Timeline View Toggle -->
          <div class="flex items-center justify-between mb-6">
            <div class="flex items-center gap-3">
              <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h4 class="text-lg font-bold text-black">Submission Timeline</h4>
            </div>
            <div class="flex items-center bg-gray-100 rounded-xl p-1">
              <button onclick="toggleTimelineView('list')" id="listViewBtn" class="tab-button active inline-flex items-center gap-2 px-4 py-2 text-sm font-semibold rounded-lg transition-all duration-300">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                </svg>
                List View
              </button>
              <button onclick="toggleTimelineView('timeline')" id="timelineViewBtn" class="tab-button inline-flex items-center gap-2 px-4 py-2 text-sm font-semibold rounded-lg transition-all duration-300">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                Timeline View
              </button>
            </div>
          </div>
          
          <!-- Chronological Timeline View -->
          <div id="timelineView" class="hidden">
            <div class="relative">
              <div class="absolute left-8 top-0 bottom-0 w-1 bg-gradient-to-b from-emerald-200 via-emerald-300 to-emerald-400 rounded-full"></div>
              <div id="timelineContainer" class="space-y-8 pl-4">
                <!-- Timeline items will be inserted here -->
              </div>
            </div>
          </div>
          
          <!-- Updates List View -->
          <div id="updatesContainer" class="space-y-4">
            <!-- Updates will be displayed here -->
          </div>
          
          <!-- Empty State -->
          <div id="emptyHistory" class="text-center py-12" style="display: none;">
            <div class="icon-container bg-gradient-to-br from-emerald-100 to-emerald-200 mx-auto mb-6">
              <svg class="w-12 h-12 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <h4 class="text-xl font-bold text-black mb-3">No Submissions Yet</h4>
            <p class="text-gray-600 mb-8 max-w-md mx-auto">Submit your first milestone update to see detailed analytics, trends, and submission history appear here.</p>
            <div class="flex items-center justify-center gap-6 text-sm text-gray-500">
              <div class="flex items-center gap-2 px-3 py-2 bg-emerald-50 rounded-lg border border-emerald-200">
                <svg class="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
                </svg>
                <span class="text-emerald-700 font-medium">Budget Trends</span>
              </div>
              <div class="flex items-center gap-2 px-3 py-2 bg-emerald-50 rounded-lg border border-emerald-200">
                <svg class="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                <span class="text-emerald-700 font-medium">Progress Analytics</span>
              </div>
              <div class="flex items-center gap-2 px-3 py-2 bg-emerald-50 rounded-lg border border-emerald-200">
                <svg class="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <span class="text-emerald-700 font-medium">Export Reports</span>
              </div>
            </div>
          </div>
          
          </div> <!-- End of submissionHistoryContent -->
        </div>




      )}
    </main>

    <!-- Project Details Modal -->
    <ProjectDetailsModal userTheme="eiu" />
  </EIULayout>
</Layout>

<script>
  // API Configuration
  const API_URL = 'http://localhost:3000/api';
  
  // Global variables
  let projects = [];
  let selectedProject = null; // Start with no selected project
  let projectMilestones = [];
  let projectUpdates = [];
  let globalUploadedFiles = [];

  // Initialize the page
  async function initializePage() {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // Fetch user data for authentication
        const userRes = await fetch(`${API_URL}/auth/profile`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (userRes.ok) {
          const userDataResponse = await userRes.json();
          if (userDataResponse.success && userDataResponse.user) {
            // User data loaded
          }
        }

        // Fetch EIU projects
        const projectsRes = await fetch(`${API_URL}/eiu/projects`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (projectsRes.ok) {
          const data = await projectsRes.json();
          if (data.success) {
            projects = data.projects;
            // Project card click handlers are handled by the ProjectCard component
            
            // Ensure selectedProjectInfo is hidden initially
            const selectedProjectInfo = document.getElementById('selectedProjectInfo');
            if (selectedProjectInfo) {
              selectedProjectInfo.style.display = 'none';
              console.log('Ensured selectedProjectInfo is hidden initially');
            }
            
            // DO NOT auto-select project - let user click to select
            console.log('Projects loaded, waiting for user to select one');
          }
        }
      }
    } catch (error) {
      console.error('Error fetching submit update data:', error);
    }
  }

  // Initialize the page when the script loads
  initializePage();

  // Project card click handlers are now handled by the ProjectCard component itself
  // via the onClick prop, so no additional setup needed

  // Function to handle project selection for updates
  window.selectProjectForUpdate = function(projectId) {
    selectProject(projectId);
  };

  // Update project card selection visual state
  function updateProjectCardSelection(selectedProjectId) {
    const projectCardWrappers = document.querySelectorAll('.project-card-wrapper');
    projectCardWrappers.forEach(wrapper => {
      const projectId = wrapper.getAttribute('data-project-id');
      if (projectId === selectedProjectId) {
        wrapper.classList.add('ring-2', 'ring-emerald-500', 'rounded-2xl');
      } else {
        wrapper.classList.remove('ring-2', 'ring-emerald-500', 'rounded-2xl');
      }
    });
  }

  // Select project
  async function selectProject(projectId) {
    try {
      console.log('User clicked project:', projectId);
      
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      selectedProject = projects.find(p => p.id === projectId);
      if (!selectedProject) {
        console.error('Project not found:', projectId);
        return;
      }

      console.log('Project selected:', selectedProject.name);

      // Update UI to show selected project info
      updateSelectedProjectUI();
      
      // Update visual selection
      updateProjectCardSelection(projectId);
      
      // Show the main project content section
      const projectContentSection = document.getElementById('projectContentSection');
      if (projectContentSection) {
        projectContentSection.style.display = 'block';
        
        // Auto-scroll to the content section with smooth animation
        setTimeout(() => {
          projectContentSection.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start' 
          });
        }, 300);
      }
      
      // Load project details
      await loadProjectDetails(projectId);
      
      // Show/hide sections based on project status
      const pendingMessage = document.getElementById('pendingMessage');
      const updatesHistory = document.getElementById('updatesHistory');
      
      // Determine project status
      const projectStatus = selectedProject.status || 'pending';
      const isApproved = selectedProject.approvedBySecretariat === true;
      
      if (projectStatus.toLowerCase() === 'pending' || !isApproved) {
        // Project is pending approval - EIU cannot submit updates
        if (pendingMessage) pendingMessage.style.display = 'block';
        // Keep sections available but collapsed
      } else if (projectStatus.toLowerCase() === 'completed') {
        // Project is completed - show history only
        if (pendingMessage) pendingMessage.style.display = 'none';
        if (updatesHistory) updatesHistory.style.display = 'block';
        loadSubmissionHistory();
      } else {
        // Project is ongoing (approved) - EIU can submit updates
        if (pendingMessage) pendingMessage.style.display = 'none';
        if (updatesHistory) updatesHistory.style.display = 'block';
        loadSubmissionHistory();
        
        // Keep milestones section collapsed by default - user can expand manually
      }
      
    } catch (error) {
      console.error('Error selecting project:', error);
    }
  }

  // Update selected project UI - SIMPLE WORKING VERSION
  function updateSelectedProjectUI() {
    if (!selectedProject) return;

    // Get progress values directly from the project data
    const overallProgress = selectedProject.overallProgress || 0;
    const timelineProgress = selectedProject.timelineProgress || 0;
    const budgetProgress = selectedProject.budgetProgress || 0;
    const physicalProgress = selectedProject.physicalProgress || 0;

    console.log('Project progress data:', {
      overall: overallProgress,
      timeline: timelineProgress,
      budget: budgetProgress,
      physical: physicalProgress
    });

    // Create a simple, working HTML string with the actual values
    const projectInfoHTML = `
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center gap-4">
            <div>
              <h3 class="text-lg font-semibold text-gray-800">${selectedProject.name}</h3>
              <p class="text-sm text-gray-600">${selectedProject.projectCode}</p>
            </div>
            <button 
              onclick="viewProjectDetails('${selectedProject.id}')" 
              class="inline-flex items-center gap-2 px-4 py-2.5 text-sm font-semibold text-white bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 rounded-xl transition-all duration-200 shadow-sm hover:shadow-lg transform hover:scale-105"
            >
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
              </svg>
              View
            </button>
          </div>
          <span id="projectStatusBadge" class="px-3 py-1 text-sm font-medium rounded-full bg-blue-100 text-blue-700">LOADING...</span>
        </div>
        
                  <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600" style="min-height: 2rem; display: flex; align-items: center; justify-content: center;">${overallProgress.toFixed(2)}%</div>
              <p class="text-sm text-gray-600">Overall Progress</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div 
                  class="h-2 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                  style="width: 0%"
                  data-progress="${overallProgress}"
                  data-progress-color="${overallProgress >= 0 && overallProgress <= 25 ? 'bg-red-500' : overallProgress >= 26 && overallProgress <= 50 ? 'bg-yellow-500' : overallProgress >= 51 && overallProgress <= 75 ? 'bg-blue-500' : overallProgress >= 76 && overallProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                ></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600" style="min-height: 2rem; display: flex; align-items: center; justify-content: center;">${timelineProgress.toFixed(2)}%</div>
              <p class="text-sm text-gray-600">Timeline</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div 
                  class="h-2 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                  style="width: 0%"
                  data-progress="${timelineProgress}"
                  data-progress-color="${timelineProgress >= 0 && timelineProgress <= 25 ? 'bg-red-500' : timelineProgress >= 26 && timelineProgress <= 50 ? 'bg-yellow-500' : timelineProgress >= 51 && timelineProgress <= 75 ? 'bg-blue-500' : timelineProgress >= 76 && timelineProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                ></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-purple-600" style="min-height: 2rem; display: flex; align-items: center; justify-content: center;">${budgetProgress.toFixed(2)}%</div>
              <p class="text-sm text-gray-600">Budget</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div 
                  class="h-2 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                  style="width: 0%"
                  data-progress="${budgetProgress}"
                  data-progress-color="${budgetProgress >= 0 && budgetProgress <= 25 ? 'bg-red-500' : budgetProgress >= 26 && budgetProgress <= 50 ? 'bg-yellow-500' : budgetProgress >= 51 && budgetProgress <= 75 ? 'bg-blue-500' : budgetProgress >= 76 && budgetProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                ></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-orange-600" style="min-height: 2rem; display: flex; align-items: center; justify-content: center;">${physicalProgress.toFixed(2)}%</div>
              <p class="text-sm text-gray-600">Physical</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div 
                  class="h-2 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                  style="width: 0%"
                  data-progress="${physicalProgress}"
                  data-progress-color="${physicalProgress >= 0 && physicalProgress <= 25 ? 'bg-red-500' : physicalProgress >= 26 && physicalProgress <= 50 ? 'bg-yellow-500' : physicalProgress >= 51 && physicalProgress <= 75 ? 'bg-blue-500' : physicalProgress >= 76 && physicalProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                ></div>
              </div>
            </div>
          </div>
      </div>
    `;

    // Insert the HTML directly
    const container = document.getElementById('selectedProjectInfoContainer');
    if (container) {
      container.innerHTML = projectInfoHTML;
      console.log('✅ Project info displayed with actual progress values');
      
      // Trigger dashboard progress bar animation after content is inserted
      setTimeout(() => {
        animateDashboardProgressBars();
      }, 200);
      
      // Update the project status badge after HTML is inserted
      updateProjectStatusBadge();
    }
  }
  
  // Function to update project status badge with delayed detection
  function updateProjectStatusBadge() {
    if (!selectedProject) return;
    
    // Start with the project's base status
    let actualStatus = selectedProject.status || 'pending';
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    // Check both selectedProject.milestones and projectMilestones (loaded separately)
    const milestonesToCheck = selectedProject.milestones || projectMilestones || [];
    const hasValidMilestones = Array.isArray(milestonesToCheck) && milestonesToCheck.length > 0;
    
    console.log('🔍 Status detection for badge (ProjectCard logic):', {
      projectName: selectedProject.name,
      baseStatus: actualStatus,
      milestonesCount: milestonesToCheck.length,
      hasValidMilestones: hasValidMilestones,
      milestones: milestonesToCheck.map(m => ({
        title: m.title,
        status: m.status,
        dueDate: m.dueDate || m.deadline || m.targetDate || m.completionDate
      }))
    });
    
    // Apply ProjectCard logic: Check for delayed milestones regardless of current status
    // BUT exclude completed projects from delay detection
    if (actualStatus !== 'completed' && actualStatus !== 'complete' && hasValidMilestones) {
      const hasDelayedMilestones = milestonesToCheck.some(milestone => {
        const dueDate = milestone.dueDate || milestone.deadline || milestone.targetDate || milestone.completionDate;
        const status = milestone.status || 'pending';
        
        if (dueDate && status !== 'completed' && status !== 'under_approval' && status !== 'revision_request') {
          const milestoneDate = new Date(dueDate);
          milestoneDate.setHours(0, 0, 0, 0);
          const isOverdue = milestoneDate < today;
          const isPending = status === 'pending';
          const result = isOverdue && isPending;
          
          console.log('🔍 Milestone delay check:', {
            title: milestone.title,
            dueDate: dueDate,
            status: status,
            isOverdue: isOverdue,
            isPending: isPending,
            isDelayed: result
          });
          
          return result;
        }
        return false;
      });
      
      console.log('🔍 Delayed milestone detection result:', {
        hasDelayedMilestones: hasDelayedMilestones,
        willChangeStatus: hasDelayedMilestones
      });
      
      if (hasDelayedMilestones) {
        actualStatus = 'delayed';
        console.log('✅ Status changed to DELAYED due to overdue milestones');
      }
    } else {
      console.log('⚠️ Skipping delay detection:', {
        reason: actualStatus === 'completed' || actualStatus === 'complete' ? 'Project completed' : 'No valid milestones',
        actualStatus: actualStatus,
        hasValidMilestones: hasValidMilestones
      });
    }
    
    // Get status colors based on proper project status lifecycle
    const getStatusClass = (status) => {
      switch(status?.toLowerCase()) {
        case 'completed':
        case 'complete':
          return 'bg-green-100 text-green-700'; // All milestones validated
        case 'ongoing':
        case 'secretariat_approved':
          return 'bg-blue-100 text-blue-700'; // Approved by Secretariat and can be updated by EIU
        case 'delayed':
          return 'bg-red-100 text-red-700 animate-pulse'; // If even one milestone is delayed
        case 'pending':
        case 'submitted':
          return 'bg-yellow-100 text-yellow-700'; // Not yet approved by Secretariat
        default:
          return 'bg-gray-100 text-gray-700';
      }
    };
    
    const statusText = actualStatus === 'secretariat_approved' ? 'ONGOING' : 
                       actualStatus === 'delayed' ? 'DELAYED' :
                       actualStatus === 'ongoing' ? 'ONGOING' :
                       actualStatus === 'completed' ? 'COMPLETED' :
                       actualStatus === 'pending' ? 'PENDING' :
                       actualStatus.replace('_', ' ').toUpperCase();
    
    console.log('🔍 Final status for badge:', {
      actualStatus: actualStatus,
      statusText: statusText,
      statusClass: getStatusClass(actualStatus)
    });
    
    // Update the project status badge
    const projectStatusBadge = document.getElementById('projectStatusBadge');
    if (projectStatusBadge) {
      projectStatusBadge.className = `px-3 py-1 text-sm font-medium rounded-full ${getStatusClass(actualStatus)}`;
      projectStatusBadge.textContent = statusText;
      console.log('✅ Updated project status badge to:', statusText);
    }
  }

  // Load project details (milestones, updates, etc.)
  async function loadProjectDetails(projectId) {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      // Load milestones with cache-busting
      const timestamp = Date.now();
      const milestonesRes = await fetch(`${API_URL}/projects/${projectId}/milestones?_t=${timestamp}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (milestonesRes.ok) {
        const milestonesData = await milestonesRes.json();
        if (milestonesData.success) {
          projectMilestones = milestonesData.milestones;
          console.log('✅ Milestones loaded:', projectMilestones.length, 'milestones');
          console.log('📋 Milestone data:', projectMilestones.map(m => ({
            title: m.title,
            status: m.status,
            dueDate: m.dueDate || m.deadline || m.targetDate || m.completionDate
          })));
          
          // Update the project UI again now that we have milestone data
          updateSelectedProjectUI();
          
          // Add small delay to ensure DOM is updated, then update status badge
          setTimeout(() => {
            updateProjectStatusBadge();
          }, 100);
          
          displayMilestones();
        }
      } else {
        console.error('Failed to load milestones:', milestonesRes.status);
      }

      // Load updates
      const updatesRes = await fetch(`${API_URL}/projects/${projectId}/updates`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (updatesRes.ok) {
        const updatesData = await updatesRes.json();
        if (updatesData.success) {
          projectUpdates = updatesData.updates;
          displayUpdates();
        }
      } else {
        console.error('Failed to load updates:', updatesRes.status);
      }
      
      // Load horizontal timeline for the selected project (non-blocking)
      if (selectedProject && selectedProject.id) {
        console.log('Scheduling horizontal timeline load for project:', selectedProject.id);
        
        // Try loading timeline multiple times to ensure it appears
        setTimeout(() => {
          try {
            loadModernTimeline();
          } catch (error) {
            console.error('Modern timeline loading failed (non-critical):', error);
          }
        }, 1000);
        
        // Backup timeline load attempt
        setTimeout(() => {
          try {
            loadModernTimeline();
          } catch (error) {
            console.error('Backup modern timeline loading failed:', error);
          }
        }, 2000);
      }
    } catch (error) {
      console.error('Error loading project details:', error);
    }
  }

      // Display milestones
    function displayMilestones() {
      console.log('🎯 displayMilestones called');
      const container = document.getElementById('milestonesContainer');
      console.log('📦 Container found:', container);
      
      if (!projectMilestones || projectMilestones.length === 0) {
        console.log('❌ No milestones found');
        if (container) {
          container.innerHTML = '<p class="text-gray-500">No milestones found for this project.</p>';
        }
        return;
      }
      
      console.log('✅ Milestones found:', projectMilestones.length);

      // Debug: Check if projects data is available
      console.log('DisplayMilestones - Projects data:', projects);
      console.log('DisplayMilestones - Selected project:', selectedProject);
      console.log('DisplayMilestones - Project milestones:', projectMilestones);

      // Filter milestones based on new status system
      const today = new Date();
      today.setHours(0, 0, 0, 0); // Set to start of day for accurate comparison
      
      // Categorize milestones based on new status system and project workflow
      const pendingMilestones = projectMilestones.filter(milestone => {
        const dueDate = new Date(milestone.dueDate);
        dueDate.setHours(0, 0, 0, 0);
        const isOverdue = dueDate < today;
        
        // Check if milestone is overdue and should be marked as delayed
        if (isOverdue && milestone.status !== 'completed' && milestone.status !== 'under_approval' && milestone.status !== 'revision_request') {
          // Auto-update milestone status to delayed if overdue
          updateMilestoneStatus(milestone.id, 'delayed');
          milestone.status = 'delayed';
        }
        
        // Check if milestone has been submitted for approval
        const hasBeenSubmitted = milestone.status === 'under_approval' || 
                                milestone.timelineStatus === 'approved' || 
                                milestone.timelineStatus === 'rejected' || 
                                milestone.budgetStatus === 'approved' || 
                                milestone.budgetStatus === 'rejected' || 
                                milestone.physicalStatus === 'approved' || 
                                milestone.physicalStatus === 'rejected';
        
        // Use selectedProject since milestones belong to the currently selected project
        const project = selectedProject || projects.find(p => p.id === milestone.projectId);
        console.log(`Milestone ${milestone.id} (${milestone.title}) - Project:`, project);
        console.log(`Milestone ${milestone.id} - Project workflow status:`, project?.workflowStatus);
        console.log(`Milestone ${milestone.id} - Has been submitted:`, hasBeenSubmitted);
        
        // Only exclude from pending if milestone has actually been submitted
        if (hasBeenSubmitted) {
          console.log(`Milestone ${milestone.id} - EXCLUDED from pending (has been submitted)`);
          return false;
        }
        
        const isPending = milestone.status === 'pending' || milestone.status === 'not_started';
        console.log(`Milestone ${milestone.id} - Status: ${milestone.status}, IsPending: ${isPending}`);
        return isPending;
      });

      const underApprovalMilestones = projectMilestones.filter(milestone => {
        // Check if milestone has been submitted for approval
        const hasBeenSubmitted = milestone.status === 'under_approval' || 
                                milestone.timelineStatus === 'approved' || 
                                milestone.timelineStatus === 'rejected' || 
                                milestone.budgetStatus === 'approved' || 
                                milestone.budgetStatus === 'rejected' || 
                                milestone.physicalStatus === 'approved' || 
                                milestone.physicalStatus === 'rejected';
        
        // Exclude milestones that need resubmission - they should go to revision section
        const needsResubmission = milestone.status === 'revision_request' || 
                                 milestone.timelineStatus === 'rejected' || 
                                 milestone.budgetStatus === 'rejected' || 
                                 milestone.physicalStatus === 'rejected';
        
        console.log(`Milestone ${milestone.id} - Under approval check:`, {
          milestoneStatus: milestone.status,
          hasBeenSubmitted: hasBeenSubmitted,
          needsResubmission: needsResubmission
        });
        
        return hasBeenSubmitted && !needsResubmission;
      });

      const delayedMilestones = projectMilestones.filter(milestone => 
        milestone.status === 'delayed'
      );

      const revisionRequestMilestones = projectMilestones.filter(milestone => {
        const needsResubmission = milestone.status === 'revision_request' || 
                                 milestone.timelineStatus === 'rejected' || 
                                 milestone.budgetStatus === 'rejected' || 
                                 milestone.physicalStatus === 'rejected';
        
        return needsResubmission;
      });

      const completedMilestones = projectMilestones.filter(milestone => 
        milestone.status === 'completed'
      );

      let milestonesHTML = '';

      console.log('Milestone categories:', {
        pending: pendingMilestones.length,
        underApproval: underApprovalMilestones.length,
        delayed: delayedMilestones.length,
        revisionRequest: revisionRequestMilestones.length,
        completed: completedMilestones.length
      });
      
      console.log('Pending milestones:', pendingMilestones);
      console.log('Under approval milestones:', underApprovalMilestones);

      // Show pending milestones (can be updated)
      if (pendingMilestones.length > 0) {
        milestonesHTML += `
          <div class="mb-8">
            <div class="flex items-center gap-3 mb-6">
              <div class="icon-container-small bg-gradient-to-br from-blue-500 to-indigo-600">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
              </div>
              <h4 class="text-xl font-bold text-blue-800">Pending Milestones (Ready for Update)</h4>
            </div>
            <div class="space-y-4">
        `;
        
        milestonesHTML += pendingMilestones.map((milestone, index) => {
          const dueDate = new Date(milestone.dueDate);
          dueDate.setHours(0, 0, 0, 0);
          const isOverdue = dueDate < today;
          
          // Calculate days remaining
          const timeDiff = dueDate.getTime() - today.getTime();
          const daysRemaining = Math.ceil(timeDiff / (1000 * 3600 * 24));
          
          // Determine countdown styling based on urgency
          let countdownClass = '';
          let countdownText = '';
          let countdownIcon = '⚠️';
          
          if (isOverdue) {
            countdownClass = 'countdown-urgent bg-red-600 text-white';
            countdownText = `${Math.abs(daysRemaining)} days overdue`;
            countdownIcon = '🚨';
          } else if (daysRemaining <= 3) {
            countdownClass = 'countdown-urgent bg-red-500 text-white';
            countdownText = `${daysRemaining} days left`;
            countdownIcon = '⚠️';
          } else if (daysRemaining <= 7) {
            countdownClass = 'countdown-warning bg-orange-500 text-white';
            countdownText = `${daysRemaining} days left`;
            countdownIcon = '⏰';
          } else {
            countdownClass = 'countdown-normal bg-blue-500 text-white';
            countdownText = `${daysRemaining} days left`;
            countdownIcon = '📅';
          }
          
          const statusColor = milestone.status === 'in_progress' ? 'bg-yellow-100 text-yellow-700' : 
                             milestone.status === 'completed' ? 'bg-green-100 text-green-700' : 
                             isOverdue ? 'bg-red-100 text-red-700' :
                             'bg-gradient-to-r from-amber-100 to-yellow-100 text-amber-800 border border-amber-200';
          const statusText = milestone.status === 'in_progress' ? 'In Progress' : 
                           milestone.status === 'completed' ? 'Completed' : 
                           isOverdue ? 'Overdue' :
                           'Pending';
          
          return `
            <!-- Individual Milestone Collapsible Card -->
            <div class="bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-300 hover:shadow-xl hover:border-emerald-200 hover:-translate-y-1 mb-4 overflow-hidden">
              <div class="bg-gradient-to-r from-emerald-50 to-gray-50 px-6 py-4 border-b border-emerald-200 cursor-pointer hover:from-emerald-100 hover:to-gray-100 transition-all duration-300 group" 
                   onclick="toggleMilestoneCard('milestone-${milestone.id}')">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-4">
                    <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600 group-hover:from-emerald-600 group-hover:to-emerald-700">
                      <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                      </svg>
                    </div>
                    <div>
                      <h4 class="text-lg font-bold text-black group-hover:text-emerald-800 transition-colors duration-300">${milestone.title}</h4>
                      <div class="flex flex-wrap items-center gap-3 mt-2">
                        <span class="px-3 py-1 text-xs font-medium rounded-full ${statusColor}">${statusText}</span>
                        <span class="text-sm text-gray-600">Weight: ${milestone.weight}%</span>
                        <span class="text-sm ${isOverdue ? 'text-red-600 font-medium' : 'text-gray-500'}">Due: ${milestone.dueDate}</span>
                        <span class="inline-flex items-center gap-1 px-2 py-1 text-xs font-bold rounded-full shadow-sm ${countdownClass}">
                          ${countdownIcon} ${countdownText}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div class="flex items-center gap-3">
                    <div class="text-right">
                      <div class="text-lg font-bold text-emerald-600">${milestone.weight}%</div>
                      <div class="text-xs text-gray-500">Weight</div>
                    </div>
                    <div class="icon-container-small bg-gradient-to-br from-gray-600 to-gray-700 hover:scale-110 hover:rotate-3 transition-all duration-300 border-2 border-gray-500 hover:border-gray-400 rounded-xl">
                      <svg id="milestone-${milestone.id}-icon" class="w-4 h-4 text-white milestone-icon transition-transform duration-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </div>
                  </div>
                </div>
              </div>
              
              <div id="milestone-${milestone.id}-content" class="section-content">
                <div class="p-6 space-y-6">
                  <!-- Enhanced Milestone Update Form -->
                  <div class="border-t border-gray-200 pt-6">
                    <!-- Enhanced Form Header -->
                    <div class="bg-gradient-to-r from-emerald-50 to-emerald-100 rounded-xl p-6 mb-6 border border-emerald-200">
                      <div class="flex items-center gap-3 mb-4">
                        <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
                          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                          </svg>
                        </div>
                        <h5 class="text-xl font-bold text-emerald-800">Enhanced Milestone Submission</h5>
                      </div>
                      
                      <!-- Project Header Information (Not Editable) -->
                      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-4">
                        <div class="space-y-3">
                          <div class="bg-white rounded-lg p-4 border border-emerald-200">
                            <label class="block text-sm font-medium text-emerald-700 mb-1">Project Name</label>
                            <div id="form-project-name-${milestone.id}" class="text-lg font-bold text-gray-900">Loading...</div>
                          </div>
                          <div class="bg-white rounded-lg p-4 border border-emerald-200">
                            <label class="block text-sm font-medium text-emerald-700 mb-1">Project Code</label>
                            <div id="form-project-code-${milestone.id}" class="text-sm font-semibold text-gray-700">Loading...</div>
                          </div>
                        </div>
                        <div class="space-y-3">
                          <div class="bg-white rounded-lg p-4 border border-emerald-200">
                            <label class="block text-sm font-medium text-emerald-700 mb-1">Total Budget Allocation (₱)</label>
                            <div id="form-total-budget-${milestone.id}" class="text-lg font-bold text-emerald-600">0.00</div>
                          </div>
                          <div class="grid grid-cols-2 gap-3">
                            <div class="bg-white rounded-lg p-4 border border-emerald-200">
                              <label class="block text-sm font-medium text-emerald-700 mb-1">Start Date</label>
                              <div id="form-start-date-${milestone.id}" class="text-sm font-semibold text-gray-700">–</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-emerald-200">
                              <label class="block text-sm font-medium text-emerald-700 mb-1">Target Completion Date</label>
                              <div id="form-target-completion-date-${milestone.id}" class="text-sm font-semibold text-gray-700">–</div>
                            </div>
                          </div>
                          <div class="grid grid-cols-2 gap-3">
                            <div class="bg-white rounded-lg p-4 border border-emerald-200">
                              <label class="block text-sm font-medium text-emerald-700 mb-1">Actual Completion Date</label>
                              <div id="form-actual-completion-date-${milestone.id}" class="text-sm font-semibold text-gray-700">–</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-emerald-200">
                              <label class="block text-sm font-medium text-emerald-700 mb-1">Expected Days</label>
                              <div id="form-expected-days-${milestone.id}" class="text-sm font-semibold text-gray-700">–</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Milestone Sub-header Information (Not Editable) -->
                    <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 mb-6 border border-gray-200">
                      <h6 class="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                        <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                        Milestone Information
                      </h6>
                      
                      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div class="space-y-3">
                          <div class="bg-white rounded-lg p-4 border border-gray-200">
                            <label class="block text-sm font-medium text-gray-600 mb-1">Milestone Name (Item of Work)</label>
                            <div id="form-milestone-name-${milestone.id}" class="text-lg font-bold text-gray-900">Loading...</div>
                          </div>
                          <div class="grid grid-cols-2 gap-3">
                            <div class="bg-white rounded-lg p-4 border border-gray-200">
                              <label class="block text-sm font-medium text-gray-600 mb-1">Status</label>
                              <div id="form-milestone-status-${milestone.id}" class="inline-block px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-700">Pending</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-gray-200">
                              <label class="block text-sm font-medium text-gray-600 mb-1">Weight</label>
                              <div id="form-milestone-weight-${milestone.id}" class="text-lg font-bold text-emerald-600">0%</div>
                            </div>
                          </div>
                        </div>
                        <div class="space-y-3">
                          <div class="bg-white rounded-lg p-4 border border-gray-200">
                            <label class="block text-sm font-medium text-gray-600 mb-1">Planned Budget</label>
                            <div id="form-milestone-budget-${milestone.id}" class="text-lg font-bold text-emerald-600">₱0.00</div>
                          </div>
                          <div class="bg-white rounded-lg p-4 border border-gray-200">
                            <label class="block text-sm font-medium text-gray-600 mb-1">Due Date</label>
                            <div id="form-milestone-due-date-${milestone.id}" class="text-sm font-semibold text-gray-700">Not set</div>
                          </div>
                        </div>
                      </div>
                      
                      <div class="mt-4 bg-white rounded-lg p-4 border border-gray-200">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Description</label>
                        <div id="form-milestone-description-${milestone.id}" class="text-sm text-gray-700">No description available</div>
                      </div>
                    </div>
                    
                    <div class="space-y-6">
                      <!-- Three Divisions Section -->
                      <div class="space-y-6">
                        <!-- Enhanced Timeline Division -->
                        <div class="form-section bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200 rounded-xl p-6 shadow-sm">
                          <h6 class="text-xl font-bold text-blue-800 mb-6 flex items-center gap-3">
                            <div class="icon-container-small bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl">
                              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                              </svg>
                            </div>
                            Timeline Division
                          </h6>
                          
                          <!-- Timeline Info Grid (Not Editable) -->
                          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
                            <div class="bg-white rounded-lg p-4 border border-blue-200">
                              <label class="block text-sm font-medium text-blue-700 mb-2">Weight (%)</label>
                              <div id="form-timeline-weight-${milestone.id}" class="text-xl font-bold text-blue-800">0.0%</div>
                              <div class="text-xs text-gray-500 mt-1">Not Editable</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-blue-200">
                              <label class="block text-sm font-medium text-blue-700 mb-2">Start Date</label>
                              <div id="form-timeline-start-date-${milestone.id}" class="text-sm font-semibold text-gray-700">Not set</div>
                              <div class="text-xs text-gray-500 mt-1">Not Editable</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-blue-200">
                              <label class="block text-sm font-medium text-blue-700 mb-2">End Date</label>
                              <div id="form-timeline-end-date-${milestone.id}" class="text-sm font-semibold text-gray-700">Not set</div>
                              <div class="text-xs text-gray-500 mt-1">Not Editable</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-blue-200">
                              <label class="block text-sm font-medium text-blue-700 mb-2">Submission Date *</label>
                              <div class="flex flex-col sm:flex-row items-stretch sm:items-center gap-2">
                                <input 
                                  type="datetime-local" 
                                  id="milestone-${milestone.id}-submission-date" 
                                  class="flex-1 min-w-0 px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors bg-gray-50" 
                                  required 
                                  readonly
                                  onchange="validateTimelineSubmissionDate('${milestone.id}'); updateFormValidation('${milestone.id}');"
                                />
                                <button 
                                  type="button" 
                                  onclick="generateServerBasedSubmissionDate('${milestone.id}')" 
                                  class="px-3 py-2 bg-blue-500 text-white text-sm rounded-lg hover:bg-blue-600 transition-colors flex items-center justify-center gap-1 whitespace-nowrap" 
                                  title="Use current server time (Philippine Standard Time)"
                                >
                                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                  </svg>
                                  Now
                                </button>
                              </div>
                              <div class="text-xs text-red-600 mt-1 hidden" id="milestone-${milestone.id}-timeline-date-error">Error: Submission Date is required</div>
                            </div>
                          </div>
                          
                          <!-- Enhanced Timeline Activities & Deliverables -->
                          <div class="bg-white rounded-lg p-4 border border-blue-200">
                            <div class="flex items-center justify-between mb-3">
                              <label class="text-sm font-medium text-blue-700 flex items-center gap-2">
                                <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                Timeline Activities & Deliverables *
                              </label>
                              <button 
                                type="button"
                                onclick="addTimelineActivity('${milestone.id}')"
                                class="px-3 py-1 bg-blue-500 text-white text-xs rounded-lg hover:bg-blue-600 transition-colors flex items-center gap-1"
                              >
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                </svg>
                                Add Activity
                              </button>
                            </div>
                            
                            <!-- Activities Container -->
                            <div id="milestone-${milestone.id}-activities-container" class="space-y-3">
                              <!-- Initial activity entry will be added by JavaScript -->
                            </div>
                            
                            <!-- Summary Info -->
                            <div class="mt-3 pt-3 border-t border-blue-100">
                              <div class="flex justify-between items-center text-xs">
                                <div class="flex items-center gap-4">
                                  <span class="text-blue-600 font-medium">Required:</span>
                                  <span class="text-blue-600">At least one activity entry with date and description</span>
                                </div>
                                <span id="milestone-${milestone.id}-activities-count" class="text-blue-600 font-medium">0 activities</span>
                              </div>
                            </div>
                            <div class="text-xs text-red-600 mt-1 hidden" id="milestone-${milestone.id}-timeline-activities-error">Error: At least one timeline activity is required</div>
                          </div>
                        </div>
                        
                        <!-- Enhanced Budget Division -->
                        <div class="form-section bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200 rounded-xl p-6 shadow-sm">
                          <h6 class="text-xl font-bold text-green-800 mb-6 flex items-center gap-3">
                            <div class="icon-container-small bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl">
                              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                              </svg>
                            </div>
                            Budget Division
                          </h6>
                          
                          <!-- Enhanced Budget Summary Cards (Not Editable) -->
                          <div class="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
                            <div class="bg-white rounded-lg p-4 border border-green-200">
                              <label class="block text-sm font-medium text-green-700 mb-2">Weight (%)</label>
                              <div id="form-budget-weight-${milestone.id}" class="text-xl font-bold text-green-800">0.0%</div>
                              <div class="text-xs text-gray-500 mt-1">Not Editable</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-green-200">
                              <label class="block text-sm font-medium text-green-700 mb-2">Planned Budget</label>
                              <div id="form-budget-planned-${milestone.id}" class="text-lg font-bold text-emerald-600">₱0.00</div>
                              <div class="text-xs text-gray-500 mt-1">Milestone Budget Only</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-green-200">
                              <label class="block text-sm font-medium text-green-700 mb-2">Funding Source</label>
                              <div id="form-budget-funding-source-${milestone.id}" class="text-sm font-semibold text-gray-700">LOCAL FUND</div>
                              <div class="text-xs text-gray-500 mt-1">Not Editable</div>
                            </div>
                            <div class="bg-green-50 rounded-lg p-4 border border-green-200">
                              <label class="block text-sm font-medium text-green-700 mb-2">Used Budget</label>
                              <div class="text-lg font-bold text-green-600" id="milestone-${milestone.id}-used-display">₱0.00</div>
                              <div class="text-xs text-green-600 mt-1">Auto-calculated</div>
                            </div>
                            <div class="bg-emerald-50 rounded-lg p-4 border border-emerald-200">
                              <label class="block text-sm font-medium text-emerald-700 mb-2">Remaining Budget</label>
                              <div class="text-lg font-bold text-emerald-600" id="milestone-${milestone.id}-remaining-display">₱0.00</div>
                              <div class="text-xs text-emerald-600 mt-1">
                                <div><span id="milestone-${milestone.id}-budget-division-utilized">0.00%</span> Division Utilized</div>
                                <div><span id="milestone-${milestone.id}-milestone-utilized">0.00%</span> Milestone Utilized</div>
                              </div>
                            </div>
                          </div>
                          
                          <!-- Enhanced Budget Input Section -->
                          <div class="space-y-4">
                            <div class="bg-white rounded-lg p-4 border border-green-200">
                              <label class="block text-sm font-medium text-green-700 mb-3 flex items-center gap-2">
                                <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                                </svg>
                                Used Budget Amount (₱) *
                              </label>
                              <input 
                                type="text" 
                                id="milestone-${milestone.id}-budget-amount" 
                                class="w-full px-4 py-3 text-sm border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors" 
                                placeholder="1,000,000.00"
                                maxlength="18"
                                oninput="formatCurrencyInput(this); updateBudgetCalculations('${milestone.id}'); validateBudgetAmount('${milestone.id}'); updateFormValidation('${milestone.id}');"
                                onkeydown="handleBudgetKeydown(event)"
                                required
                              />
                              <div class="flex justify-between items-center mt-2">
                                <span class="text-xs text-green-600 font-medium">Required: Enter the actual amount spent for this milestone</span>
                                <span class="text-xs text-gray-500">Max: ₱999,999,999,999.99</span>
                              </div>
                              <div class="text-xs text-red-600 mt-1 hidden" id="milestone-${milestone.id}-budget-amount-error">Error: Used Budget Amount is required</div>
                            </div>
                            
                            <div class="bg-white rounded-lg p-4 border border-green-200">
                              <label class="block text-sm font-medium text-green-700 mb-3 flex items-center gap-2">
                                <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                </svg>
                                Budget Breakdown & Allocation *
                              </label>
                              <textarea 
                                id="milestone-${milestone.id}-budget-breakdown" 
                                rows="5" 
                                maxlength="500"
                                class="w-full px-4 py-3 text-sm border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors resize-none" 
                                placeholder="Provide detailed breakdown of budget utilization, expenses, and allocation. Auto-capitalize first letter."
                                oninput="autoCapitalizeFirst(this); updateCharacterCount('${milestone.id}', 'budget'); validateBudgetBreakdown('${milestone.id}'); updateFormValidation('${milestone.id}');"
                                required
                              ></textarea>
                              <div class="flex justify-between items-center mt-2">
                                <div class="flex items-center gap-2">
                                  <span class="text-xs text-green-600 font-medium">Required:</span>
                                  <span class="text-xs text-green-600">Include specific expenses and cost breakdown</span>
                                </div>
                                <span id="milestone-${milestone.id}-budget-char-count" class="text-xs font-medium" style="color: #6b7280;">0/500</span>
                              </div>
                              <div class="text-xs text-red-600 mt-1 hidden" id="milestone-${milestone.id}-budget-breakdown-error">Error: Budget Breakdown & Allocation is required</div>
                            </div>
                          </div>
                        </div>
                        
                        <!-- Enhanced Physical Division -->
                        <div class="form-section bg-gradient-to-br from-orange-50 to-amber-50 border border-orange-200 rounded-xl p-6 shadow-sm">
                          <h6 class="text-xl font-bold text-orange-800 mb-6 flex items-center gap-3">
                            <div class="icon-container-small bg-gradient-to-br from-orange-500 to-amber-600 rounded-xl">
                              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2-2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                              </svg>
                            </div>
                            Physical Division
                          </h6>
                          
                          <!-- Enhanced Physical Info Grid (Not Editable) -->
                          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                            <div class="bg-white rounded-lg p-4 border border-orange-200">
                              <label class="block text-sm font-medium text-orange-700 mb-2">Weight (%)</label>
                              <div id="form-physical-weight-${milestone.id}" class="text-xl font-bold text-orange-800">0.0%</div>
                              <div class="text-xs text-gray-500 mt-1">Not Editable</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-orange-200">
                              <label class="block text-sm font-medium text-orange-700 mb-2">Required Proofs</label>
                              <div class="text-sm font-semibold text-gray-700">Photo, Video, Excel</div>
                              <div class="text-xs text-gray-500 mt-1">Not Editable</div>
                            </div>
                            <div class="bg-white rounded-lg p-4 border border-orange-200">
                              <label class="block text-sm font-medium text-orange-700 mb-2">Upload Status</label>
                              <div class="text-sm font-medium" id="milestone-${milestone.id}-upload-status">
                                <span class="text-red-600">Pending Upload</span>
                              </div>
                              <div class="text-xs text-gray-500 mt-1">Auto-updates</div>
                            </div>
                          </div>
                          
                          <!-- Enhanced Proof Upload System -->
                          <div class="space-y-6">
                            <!-- Photo Evidence Upload Section -->
                            <div class="bg-white rounded-lg border border-orange-200 p-6">
                              <div class="flex items-center gap-3 mb-4">
                                <div class="icon-container-small bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl">
                                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                  </svg>
                                </div>
                                <h7 class="text-lg font-semibold text-orange-800">Photo Evidence *</h7>
                              </div>
                              <div 
                                class="border-2 border-dashed border-orange-300 rounded-lg p-8 text-center hover:border-orange-400 hover:bg-orange-50/50 transition-all duration-300 cursor-pointer"
                                ondrop="handleFileDrop(event, '${milestone.id}', 'photo')" 
                                ondragover="handleDragOver(event)" 
                                ondragenter="handleDragEnter(event)"
                                ondragleave="handleDragLeave(event)"
                                onclick="document.getElementById('milestone-${milestone.id}-photo-files').click()"
                              >
                                <input 
                                  type="file" 
                                  id="milestone-${milestone.id}-photo-files" 
                                  multiple 
                                  accept="image/*" 
                                  class="hidden" 
                                  onchange="handlePhotoUpload('${milestone.id}', this); validatePhotoEvidence('${milestone.id}'); updateFormValidation('${milestone.id}');"
                                  required
                                />
                                <div class="text-orange-500">
                                  <svg class="mx-auto h-16 w-16 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                  </svg>
                                  <p class="text-lg font-medium mb-2">Upload Photo Evidence</p>
                                  <p class="text-sm text-orange-600 mb-1">Click to browse or drag and drop files</p>
                                  <p class="text-xs text-gray-500">JPG, PNG, GIF up to 10MB each • Maximum 5 files allowed</p>
                                </div>
                              </div>
                                                              <div id="milestone-${milestone.id}-photo-preview" class="mt-4 grid grid-cols-2 md:grid-cols-4 gap-4"></div>
                                                              <div class="text-xs text-red-600 mt-2 hidden" id="milestone-${milestone.id}-photo-error">Error: Photo Evidence is required</div>
                            </div>
                            
                            <!-- Video Evidence Upload Section -->
                            <div class="bg-white rounded-lg border border-orange-200 p-6">
                              <div class="flex items-center gap-3 mb-4">
                                <div class="icon-container-small bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl">
                                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                  </svg>
                                </div>
                                <h7 class="text-lg font-semibold text-orange-800">Video Evidence *</h7>
                              </div>
                              <div 
                                class="border-2 border-dashed border-orange-300 rounded-lg p-8 text-center hover:border-orange-400 hover:bg-orange-50/50 transition-all duration-300 cursor-pointer"
                                ondrop="handleFileDrop(event, '${milestone.id}', 'video')" 
                                ondragover="handleDragOver(event)" 
                                ondragenter="handleDragEnter(event)"
                                ondragleave="handleDragLeave(event)"
                                onclick="document.getElementById('milestone-${milestone.id}-video-files').click()"
                              >
                                <input 
                                  type="file" 
                                  id="milestone-${milestone.id}-video-files" 
                                  multiple 
                                  accept="video/*" 
                                  class="hidden" 
                                  onchange="handleVideoUpload('${milestone.id}', this); validateVideoEvidence('${milestone.id}'); updateFormValidation('${milestone.id}');"
                                  required
                                />
                                <div class="text-orange-500">
                                  <svg class="mx-auto h-16 w-16 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                                  </svg>
                                  <p class="text-lg font-medium mb-2">Upload Video Evidence</p>
                                  <p class="text-sm text-orange-600 mb-1">Click to browse or drag and drop files</p>
                                  <p class="text-xs text-gray-500">MP4, MOV, AVI up to 100MB each • Multiple files allowed</p>
                                </div>
                              </div>
                                                              <div id="milestone-${milestone.id}-video-preview" class="mt-4 space-y-2"></div>
                                <div class="text-xs text-red-600 mt-2 hidden" id="milestone-${milestone.id}-video-error">Error: Video Evidence is required</div>
                            </div>
                            
                            <!-- Excel/Document Files Upload Section -->
                            <div class="bg-white rounded-lg border border-orange-200 p-6">
                              <div class="flex items-center gap-3 mb-4">
                                <div class="icon-container-small bg-gradient-to-br from-green-600 to-green-700 rounded-xl">
                                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                  </svg>
                                </div>
                                <h7 class="text-lg font-semibold text-orange-800">Excel/Document Files *</h7>
                              </div>
                              <div 
                                class="border-2 border-dashed border-orange-300 rounded-lg p-8 text-center hover:border-orange-400 hover:bg-orange-50/50 transition-all duration-300 cursor-pointer"
                                ondrop="handleFileDrop(event, '${milestone.id}', 'document')" 
                                ondragover="handleDragOver(event)" 
                                ondragenter="handleDragEnter(event)"
                                ondragleave="handleDragLeave(event)"
                                onclick="document.getElementById('milestone-${milestone.id}-document-files').click()"
                              >
                                <input 
                                  type="file" 
                                  id="milestone-${milestone.id}-document-files" 
                                  multiple 
                                  accept=".xlsx,.xls,.pdf,.doc,.docx" 
                                  class="hidden" 
                                  onchange="handleDocumentUpload('${milestone.id}', this); validateDocumentEvidence('${milestone.id}'); updateFormValidation('${milestone.id}');"
                                  required
                                />
                                <div class="text-orange-500">
                                  <svg class="mx-auto h-16 w-16 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                  </svg>
                                  <p class="text-lg font-medium mb-2">Upload Excel/Documents</p>
                                  <p class="text-sm text-orange-600 mb-1">Click to browse or drag and drop files</p>
                                  <p class="text-xs text-gray-500">XLSX, PDF, DOC up to 50MB each • Multiple files allowed</p>
                                </div>
                              </div>
                              <div id="milestone-${milestone.id}-document-preview" class="mt-4 space-y-2"></div>
                              <div class="text-xs text-red-600 mt-2 hidden" id="milestone-${milestone.id}-document-error">Error: Excel/Document Files are required</div>
                            </div>
                          </div>
                          
                          <!-- Enhanced Physical Progress Description -->
                          <div class="bg-white rounded-lg p-4 border border-orange-200 mt-6">
                            <label class="block text-sm font-medium text-orange-700 mb-3 flex items-center gap-2">
                              <svg class="w-4 h-4 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                              </svg>
                              Physical Progress Description *
                            </label>
                            <textarea 
                              id="milestone-${milestone.id}-physical-description" 
                              rows="5" 
                              maxlength="500"
                              class="w-full px-4 py-3 text-sm border border-orange-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-colors resize-none" 
                              placeholder="Describe the physical progress, construction status, and measurable outputs achieved. Auto-capitalize first letter."
                              oninput="autoCapitalizeFirst(this); updateCharacterCount('${milestone.id}', 'physical'); validatePhysicalDescription('${milestone.id}'); updateFormValidation('${milestone.id}');"
                              required
                            ></textarea>
                            <div class="flex justify-between items-center mt-2">
                              <div class="flex items-center gap-2">
                                <span class="text-xs text-orange-600 font-medium">Required:</span>
                                <span class="text-xs text-orange-600">Include % completed and specific outputs achieved</span>
                              </div>
                              <span id="milestone-${milestone.id}-physical-char-count" class="text-xs font-medium" style="color: #6b7280;">0/500</span>
                            </div>
                            <div class="text-xs text-red-600 mt-1 hidden" id="milestone-${milestone.id}-physical-description-error">Error: Physical Progress Description is required</div>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Enhanced Additional Notes -->
                      <div class="bg-white rounded-lg p-4 border border-gray-200">
                        <label class="block text-sm font-medium text-gray-700 mb-3 flex items-center gap-2">
                          <svg class="w-4 h-4 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10m0 0V6a2 2 0 00-2-2H9a2 2 0 00-2 2v2m10 0v10a2 2 0 01-2 2H9a2 2 0 01-2-2V8m10 0H7"></path>
                          </svg>
                          Additional Notes *
                        </label>
                        <textarea 
                          id="milestone-${milestone.id}-notes" 
                          rows="4" 
                          maxlength="500"
                          class="w-full px-4 py-3 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-colors resize-none" 
                          placeholder="Any additional information, comments, or observations. Auto-capitalize first letter."
                          oninput="autoCapitalizeFirst(this); updateCharacterCount('${milestone.id}', 'notes'); validateAdditionalNotes('${milestone.id}'); updateFormValidation('${milestone.id}');"
                          required
                        ></textarea>
                        <div class="flex justify-between items-center mt-2">
                          <div class="flex items-center gap-2">
                            <span class="text-xs text-gray-600 font-medium">Required:</span>
                            <span class="text-xs text-gray-600">Include any additional information or comments</span>
                          </div>
                          <span id="milestone-${milestone.id}-notes-char-count" class="text-xs font-medium" style="color: #6b7280;">0/500</span>
                        </div>
                        <div class="text-xs text-red-600 mt-1 hidden" id="milestone-${milestone.id}-notes-error">Error: Additional Notes is required</div>
                      </div>
                      
                      <!-- Enhanced Progress Display (Controlled by SECRETARIAT) -->
                      <div class="bg-gradient-to-r from-emerald-50 to-emerald-100 border border-emerald-200 rounded-lg p-6">
                        <div class="flex items-center justify-between mb-3">
                          <div class="flex items-center gap-2">
                            <svg class="w-5 h-5 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                            </svg>
                            <span class="text-lg font-semibold text-emerald-800">Current Progress</span>
                          </div>
                          <span id="form-milestone-progress-text-${milestone.id}" class="text-2xl font-bold text-emerald-600">0%</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-4 mb-3">
                          <div id="form-milestone-progress-bar-${milestone.id}" class="bg-gradient-to-r from-emerald-500 to-emerald-600 h-4 rounded-full transition-all duration-500" style="width: 0%"></div>
                        </div>
                        <div class="bg-white rounded-lg p-3 border border-emerald-200">
                          <p class="text-sm text-gray-700 font-medium mb-1">Progress Determination:</p>
                          <p class="text-xs text-gray-600">Progress percentage is determined by SECRETARIAT based on submitted documentation, reports, and milestone evaluation. This value updates only after official review and approval.</p>
                        </div>
                      </div>
                      
                      <!-- Auto-Progress Preview Panel -->
                      <div id="milestone-${milestone.id}-preview-panel" class="bg-gradient-to-r from-indigo-50 to-purple-50 border border-indigo-200 rounded-xl p-6 mb-6" style="display: none;">
                        <h6 class="text-lg font-bold text-indigo-800 mb-4 flex items-center gap-2">
                          <svg class="w-5 h-5 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                          </svg>
                          Submission Preview
                        </h6>
                        
                        <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                          <div class="bg-white rounded-lg p-4 border border-indigo-200">
                            <div class="flex items-center justify-between">
                              <span class="text-sm font-medium text-gray-700">Timeline Progress</span>
                              <span id="milestone-${milestone.id}-timeline-preview" class="text-lg font-bold text-blue-600">0%</span>
                            </div>
                            <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
                              <div id="milestone-${milestone.id}-timeline-bar" class="bg-blue-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                            </div>
                          </div>
                          <div class="bg-white rounded-lg p-4 border border-indigo-200">
                            <div class="flex items-center justify-between">
                              <span class="text-sm font-medium text-gray-700">Budget Utilization</span>
                              <span id="milestone-${milestone.id}-budget-preview" class="text-lg font-bold text-green-600">0%</span>
                            </div>
                            <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
                              <div id="milestone-${milestone.id}-budget-bar" class="bg-green-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                            </div>
                          </div>
                          <div class="bg-white rounded-lg p-4 border border-indigo-200">
                            <div class="flex items-center justify-between">
                              <span class="text-sm font-medium text-gray-700">Physical Progress</span>
                              <span id="milestone-${milestone.id}-physical-preview" class="text-lg font-bold text-orange-600">0%</span>
                            </div>
                            <div class="w-full bg-gray-200 rounded-full h-2 mt-2">
                              <div id="milestone-${milestone.id}-physical-bar" class="bg-orange-500 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                            </div>
                          </div>
                        </div>
                        
                        <!-- Validation Status -->
                        <div id="milestone-${milestone.id}-validation" class="space-y-2">
                          <div class="flex items-center gap-2 text-sm">
                            <div id="milestone-${milestone.id}-timeline-validation" class="flex items-center gap-1">
                              <svg class="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                              </svg>
                              <span class="text-red-600">Timeline description required</span>
                            </div>
                          </div>
                          <div class="flex items-center gap-2 text-sm">
                            <div id="milestone-${milestone.id}-budget-validation" class="flex items-center gap-1">
                              <svg class="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                              </svg>
                              <span class="text-red-600">Budget amount required</span>
                            </div>
                          </div>
                          <div class="flex items-center gap-2 text-sm">
                            <div id="milestone-${milestone.id}-physical-validation" class="flex items-center gap-1">
                              <svg class="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                              </svg>
                              <span class="text-red-600">Physical proofs and description required</span>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Enhanced Action Buttons -->
                      <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 border border-gray-200">
                        <div class="flex flex-col lg:flex-row justify-between items-center gap-4">
                          <div class="flex items-center gap-4">
                            <button 
                              onclick="saveMilestoneDraft('${milestone.id}')" 
                              class="px-6 py-3 bg-gray-100 hover:bg-gray-200 text-gray-700 font-semibold rounded-xl transition-all duration-200 flex items-center gap-3 shadow-sm hover:shadow-md"
                            >
                              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 0V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v3m-1 0h6m-6 0V4a2 2 0 012-2h2a2 2 0 012 2v3"></path>
                              </svg>
                              Save Draft
                            </button>
                            <button 
                              onclick="previewMilestoneSubmission('${milestone.id}')" 
                              class="px-6 py-3 bg-emerald-100 hover:bg-emerald-200 text-emerald-700 font-semibold rounded-xl transition-all duration-200 flex items-center gap-3 shadow-sm hover:shadow-md"
                            >
                              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                              </svg>
                              Preview Submission
                            </button>
                          </div>
                          
                          <button 
                            onclick="submitMilestoneToAdminOffice('${milestone.id}')" 
                            class="px-8 py-4 bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-bold rounded-xl transition-all duration-200 flex items-center gap-3 shadow-lg hover:shadow-xl transform hover:scale-[1.02] disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none" 
                            id="milestone-${milestone.id}-submit-btn" 
                            disabled
                          >
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                            </svg>
                            Submit This Milestone to Admin Office for Review
                          </button>
                        </div>
                        
                        <!-- Form Validation Summary -->
                        <div id="milestone-${milestone.id}-validation-summary" class="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg hidden">
                          <div class="flex items-center gap-2 mb-2">
                            <svg class="w-5 h-5 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <h6 class="text-sm font-semibold text-red-800">Please complete the following required fields:</h6>
                          </div>
                          <ul id="milestone-${milestone.id}-validation-list" class="text-xs text-red-700 space-y-1 ml-7">
                            <!-- Validation errors will be populated here -->
                          </ul>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `;
        }).join('');
        
        // Close the milestone container
        milestonesHTML += `
            </div>
          </div>
        `;
      }

      // Show under approval milestones (locked - waiting for Secretariat verdict)
      if (underApprovalMilestones.length > 0) {
        // Check if any milestones need resubmission
        const needsResubmission = underApprovalMilestones.some(milestone => 
          milestone.status === 'revision_request' || 
          milestone.timelineStatus === 'rejected' || 
          milestone.budgetStatus === 'rejected' || 
          milestone.physicalStatus === 'rejected'
        );
        
        const sectionTitle = needsResubmission ? 
          'Under Resubmission' : 
          'Under Secretariat Review (Locked)';
        const sectionIcon = needsResubmission ? 
          '<svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>' :
          '<svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
        const sectionColor = needsResubmission ? 'text-orange-800' : 'text-yellow-800';
        
        milestonesHTML += `<h4 class="text-lg font-bold ${sectionColor} mb-6 flex items-center gap-2">${sectionIcon}${sectionTitle}</h4>`;
        milestonesHTML += underApprovalMilestones.map((milestone, index) => {
          const project = projects.find(p => p.id === milestone.projectId);
          const isUnderSecretariatReview = project && (project.workflowStatus === 'compiled_for_secretariat' || project.workflowStatus === 'iu_approved');
          
          // Determine the appropriate status message based on project workflow
          let statusMessage = '';
          let statusColor = 'bg-yellow-100 text-yellow-700';
          let statusText = 'Under Review';
          
          if (project) {
            if (project.workflowStatus === 'validated_by_secretariat') {
              statusMessage = 'This milestone has been approved by the Secretariat. All divisions have been validated and the project is now complete.';
              statusColor = 'bg-green-100 text-green-700';
              statusText = 'Approved';
            } else if (project.workflowStatus === 'revision_requested') {
              statusMessage = 'The Secretariat has requested revisions for this milestone. Please wait for the Implementing Office to provide specific revision requirements before making changes.';
              statusColor = 'bg-orange-100 text-orange-700';
              statusText = 'Revision Requested';
            } else if (project.workflowStatus === 'rejected') {
              statusMessage = 'This milestone has been rejected by the Secretariat. Please wait for the Implementing Office to provide feedback on the rejection.';
              statusColor = 'bg-red-100 text-red-700';
              statusText = 'Rejected';
            } else {
              statusMessage = 'This milestone is currently under Secretariat review and cannot be updated. Please wait for the Secretariat\'s final verdict (approve/reject/revision) before making any changes.';
            }
          } else {
            statusMessage = 'This milestone is under Secretariat approval and cannot be updated. Please wait for the Secretariat\'s verdict (approve/reject) before making any changes.';
          }
          
          return `
            <div class="bg-white rounded-xl shadow-sm border border-yellow-200 mb-4 opacity-75">
              <div class="flex items-center justify-between p-4 bg-gradient-to-r from-yellow-50 to-orange-50 border-b border-yellow-100">
                <div class="flex items-center gap-4">
                  <div class="w-10 h-10 bg-yellow-100 rounded-lg flex items-center justify-center">
                    <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-semibold text-gray-800 text-lg">${milestone.title}</h4>
                    <div class="flex items-center gap-3 mt-1">
                      <span class="px-3 py-1 text-xs font-medium rounded-full ${statusColor}">${statusText}</span>
                      <span class="text-sm text-gray-500">Weight: ${milestone.weight}%</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div class="p-6">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-yellow-50 rounded-lg mb-4">
                  <div class="text-center">
                    <div class="text-2xl font-bold text-yellow-600">${milestone.weight}%</div>
                    <div class="text-sm text-gray-600">Weight</div>
                  </div>
                  <div class="text-center">
                    <div class="text-lg font-semibold text-gray-800">₱${(milestone.plannedBudget || 0).toLocaleString()}</div>
                    <div class="text-sm text-gray-600">Planned Budget</div>
                  </div>
                  <div class="text-center">
                    <div class="text-lg font-semibold text-gray-800">${milestone.dueDate}</div>
                    <div class="text-sm text-gray-600">Due Date</div>
                  </div>
                </div>
                
                <div class="text-sm text-gray-600 leading-relaxed mb-4">${milestone.description || 'No description available'}</div>
                
                <!-- Locked Milestone Form -->
                <div class="bg-yellow-100 border border-yellow-200 rounded-lg p-4">
                  <div class="flex items-center gap-3">
                    <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <div>
                      <p class="text-sm text-yellow-700 font-medium">${statusMessage}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          `;
        }).join('');
      }

      // Show delayed milestones (locked - overdue)
      if (delayedMilestones.length > 0) {
        milestonesHTML += '<h4 class="text-lg font-bold text-red-800 mb-6 flex items-center gap-2"><svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path></svg>Delayed Milestones (Locked - Overdue)</h4>';
        milestonesHTML += delayedMilestones.map((milestone, index) => `
          <div class="bg-white rounded-xl shadow-sm border border-red-200 mb-4 opacity-75">
            <div class="flex items-center justify-between p-4 bg-gradient-to-r from-red-50 to-pink-50 border-b border-red-100">
              <div class="flex items-center gap-4">
                <div class="w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                  </svg>
                </div>
                <div>
                  <h4 class="font-semibold text-gray-800 text-lg">${milestone.title}</h4>
                  <div class="flex items-center gap-3 mt-1">
                    <span class="px-3 py-1 text-xs font-medium rounded-full bg-red-100 text-red-700">Delayed</span>
                    <span class="text-sm text-gray-500">Weight: ${milestone.weight}%</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div class="p-6">
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-red-50 rounded-lg mb-4">
                <div class="text-center">
                  <div class="text-2xl font-bold text-red-600">${milestone.weight}%</div>
                  <div class="text-sm text-gray-600">Weight</div>
                </div>
                <div class="text-center">
                  <div class="text-lg font-semibold text-gray-800">₱${(milestone.plannedBudget || 0).toLocaleString()}</div>
                  <div class="text-sm text-gray-600">Planned Budget</div>
                </div>
                <div class="text-center">
                  <div class="text-lg font-semibold text-red-600">${milestone.dueDate}</div>
                  <div class="text-sm text-red-600 font-medium">OVERDUE</div>
                </div>
              </div>
              
              <div class="text-sm text-gray-600 leading-relaxed mb-4">${milestone.description || 'No description available'}</div>
              
              <!-- Locked Milestone Form -->
              <div class="bg-red-100 border border-red-200 rounded-lg p-4">
                <div class="flex items-center gap-3">
                  <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                  </svg>
                  <div>
                    <p class="text-sm text-red-700 font-medium">This milestone is overdue and has been automatically marked as delayed.</p>
                    <p class="text-xs text-red-600 mt-1">Please contact the project manager to extend the due date or mark as completed.</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `).join('');
      }

             // Show revision request milestones (can be resubmitted)
       if (revisionRequestMilestones.length > 0) {
         milestonesHTML += '<h4 class="text-lg font-bold text-orange-800 mb-6 flex items-center gap-2"><svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path></svg>Revision Request (Resubmit Required)</h4>';
         milestonesHTML += revisionRequestMilestones.map((milestone, index) => {
           const dueDate = new Date(milestone.dueDate);
           dueDate.setHours(0, 0, 0, 0);
           const isOverdue = dueDate < today;
           
           return `
             <div class="milestone-card">
               <div class="milestone-header bg-gradient-to-r from-orange-50 to-red-50 border-b border-orange-100" onclick="toggleMilestoneCard('milestone-${milestone.id}')">
                 <div class="flex items-center justify-between">
                   <div class="flex items-center gap-4">
                     <div class="icon-container bg-gradient-to-br from-orange-500 to-red-600 shadow-lg">
                       <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                       </svg>
                     </div>
                     <div>
                       <h4 class="font-bold text-gray-800 text-xl">${milestone.title}</h4>
                       <div class="flex flex-wrap items-center gap-3 mt-3">
                         <span class="px-3 py-1 text-xs font-medium rounded-full bg-orange-100 text-orange-700">Revision Request</span>
                         <span class="text-sm text-gray-600 bg-white/70 px-2 py-1 rounded-lg">Weight: ${milestone.weight}%</span>
                         <span class="text-sm ${isOverdue ? 'text-red-600 font-medium bg-red-50' : 'text-gray-500 bg-gray-50'} px-2 py-1 rounded-lg">Due: ${milestone.dueDate}${isOverdue ? ' (OVERDUE)' : ''}</span>
                       </div>
                     </div>
                   </div>
                   <div class="flex items-center gap-4">
                     <div class="text-right bg-white/80 px-4 py-3 rounded-xl shadow-sm">
                       <div class="text-xl font-bold text-orange-600">${milestone.weight}%</div>
                       <div class="text-xs text-gray-500">Weight</div>
                     </div>
                     <div class="icon-container-small bg-gradient-to-br from-gray-600 to-gray-700">
                       <svg id="milestone-${milestone.id}-icon" class="w-4 h-4 text-white milestone-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                       </svg>
                     </div>
                   </div>
                 </div>
               </div>
               
               <div id="milestone-${milestone.id}-content" class="section-content">
                 <div class="p-6 space-y-6">
                   <!-- Revision Request Notice -->
                   <div class="bg-orange-100 border border-orange-200 rounded-lg p-4">
                     <div class="flex items-center gap-3">
                       <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                         <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                       </svg>
                       <div>
                         <p class="text-sm text-orange-700 font-medium">This milestone was rejected by the Secretariat and requires revision.</p>
                         <p class="text-xs text-orange-600 mt-1">Please review the feedback and resubmit with the required changes.</p>
                       </div>
                     </div>
                   </div>
                   
                   <!-- Secretariat Feedback -->
                   <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                     <h6 class="text-sm font-semibold text-red-800 mb-2">Secretariat Feedback:</h6>
                     <p class="text-sm text-red-700">${milestone.secretariatFeedback || 'No specific feedback provided. Please review your submission and ensure all requirements are met.'}</p>
                   </div>
                   
                   <!-- Same form as pending milestones but with revision context -->
                   <div class="border-t border-gray-200 pt-6">
                     <h5 class="text-xl font-bold text-gray-800 mb-6 flex items-center gap-3">
                       <div class="icon-container-small bg-gradient-to-br from-orange-500 to-red-600">
                         <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                           <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                         </svg>
                       </div>
                       Resubmit Milestone Update
                     </h5>
                     
                     <!-- Include the same form structure as pending milestones -->
                     <div class="space-y-6">
                       <!-- Three Divisions Section -->
                       <div class="space-y-6">
                         <!-- Timeline Division -->
                         <div class="form-section bg-gradient-to-br from-blue-50 to-indigo-50 border border-blue-200">
                           <h6 class="text-xl font-bold text-blue-800 mb-6 flex items-center gap-3">
                             <div class="icon-container-small bg-gradient-to-br from-blue-500 to-indigo-600">
                               <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                               </svg>
                             </div>
                             Timeline Division
                           </h6>
                           <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-3">
                             <div>
                               <label class="block text-xs font-medium text-blue-700 mb-1">Weight (%)</label>
                               <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.timelineWeight || '0.00'}%</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-blue-700 mb-1">Start Date</label>
                               <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.timelineStartDate || '–'}</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-blue-700 mb-1">Target Completion Date</label>
                               <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.timelineEndDate || milestone.targetCompletionDate || '–'}</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-blue-700 mb-1">Actual Completion Date</label>
                               <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.completionDate || milestone.actualCompletionDate || '–'}</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-blue-700 mb-1">Expected Days</label>
                               <div class="w-full px-3 py-2 text-sm bg-blue-100 border border-blue-300 rounded-lg text-blue-800 font-medium">${milestone.expectedDaysOfCompletion ? milestone.expectedDaysOfCompletion + ' days' : '–'}</div>
                             </div>
                           </div>
                           <div>
                             <label class="block text-xs font-medium text-blue-700 mb-1">Description</label>
                             <textarea id="milestone-${milestone.id}-timeline-description" rows="2" class="w-full px-3 py-2 text-sm border border-blue-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors" placeholder="Timeline activities and deliverables..." ${milestone.timelineStatus === 'approved' ? 'disabled' : ''}>${milestone.timelineDescription || ''}</textarea>
                             ${milestone.timelineStatus === 'approved' ? '<p class="text-xs text-green-600 mt-1">✅ Timeline division approved - cannot be modified</p>' : ''}
                           </div>
                         </div>
                         
                         <!-- Budget Division -->
                         <div class="form-section bg-gradient-to-br from-green-50 to-emerald-50 border border-green-200">
                           <h6 class="text-xl font-bold text-green-800 mb-6 flex items-center gap-3">
                             <div class="icon-container-small bg-gradient-to-br from-green-500 to-emerald-600">
                               <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                               </svg>
                             </div>
                             Budget Division
                           </h6>
                           <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                             <div>
                               <label class="block text-xs font-medium text-green-700 mb-1">Weight (%)</label>
                               <div class="w-full px-3 py-2 text-sm bg-green-100 border border-green-300 rounded-lg text-green-800 font-medium">${milestone.budgetWeight || '0.00'}%</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-green-700 mb-1">Used Budget (₱)</label>
                               <input type="number" id="milestone-${milestone.id}-budget-amount" min="0" step="0.01" class="w-full px-3 py-2 text-sm border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors" placeholder="0.00" value="${milestone.budgetAmount || ''}">
                             </div>
                           </div>
                           <div>
                             <label class="block text-xs font-medium text-green-700 mb-1">Breakdown Description</label>
                             <textarea id="milestone-${milestone.id}-budget-breakdown" rows="2" class="w-full px-3 py-2 text-sm border border-green-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors" placeholder="Budget allocation breakdown...">${milestone.budgetBreakdown || ''}</textarea>
                             ${milestone.budgetStatus === 'rejected' ? '<p class="text-xs text-red-600 mt-1">❌ Budget division rejected - needs revision</p>' : ''}
                           </div>
                         </div>
                         
                         <!-- Physical Division -->
                         <div class="form-section bg-gradient-to-br from-orange-50 to-amber-50 border border-orange-200">
                           <h6 class="text-xl font-bold text-orange-800 mb-6 flex items-center gap-3">
                             <div class="icon-container-small bg-gradient-to-br from-orange-500 to-amber-600">
                               <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                               </svg>
                             </div>
                             Physical Division
                           </h6>
                           <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-3">
                             <div>
                               <label class="block text-xs font-medium text-orange-700 mb-1">Weight (%)</label>
                               <div class="w-full px-3 py-2 text-sm bg-orange-100 border border-orange-300 rounded-lg text-orange-800 font-medium">${milestone.physicalWeight || '0.00'}%</div>
                             </div>
                             <div>
                               <label class="block text-xs font-medium text-orange-700 mb-1">Proof Types Required</label>
                               <div class="w-full px-3 py-2 text-sm bg-orange-100 border border-orange-300 rounded-lg text-orange-800 font-medium">${milestone.physicalProofTypes || 'Photo, Video, Document'}</div>
                             </div>
                           </div>
                           
                           <!-- Dynamic Proof Type Upload Sections -->
                           <div class="space-y-4">
                             ${generateProofTypeUploadSections(milestone)}
                           </div>
                           
                           <div class="mt-3">
                             <label class="block text-xs font-medium text-orange-700 mb-1">Description</label>
                             <textarea id="milestone-${milestone.id}-physical-description" rows="2" class="w-full px-3 py-2 text-sm border border-orange-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-colors" placeholder="Physical progress requirements...">${milestone.physicalDescription || ''}</textarea>
                             ${milestone.physicalStatus === 'rejected' ? '<p class="text-xs text-red-600 mt-1">❌ Physical division rejected - needs revision</p>' : ''}
                           </div>
                         </div>
                       </div>
                       
                       <!-- Additional Notes -->
                       <div>
                         <label class="block text-sm font-medium text-gray-700 mb-2">Additional Notes</label>
                         <textarea id="milestone-${milestone.id}-notes" rows="3" class="w-full px-4 py-3 text-sm border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-colors" placeholder="Any additional information or comments...">${milestone.notes || ''}</textarea>
                       </div>
                       
                       <!-- Progress Display (Read-only) -->
                       <div class="bg-gradient-to-r from-orange-50 to-red-50 border border-orange-200 rounded-lg p-4">
                         <div class="flex items-center justify-between mb-2">
                           <span class="text-sm font-medium text-gray-700">Current Progress:</span>
                           <span class="text-sm font-semibold text-orange-600">${milestone.progress || 0}% (Awarded by SECRETARIAT)</span>
                         </div>
                         <div class="w-full bg-gray-200 rounded-full h-3">
                           <div class="bg-gradient-to-r from-orange-500 to-red-600 h-3 rounded-full transition-all duration-300" style="width: ${milestone.progress || 0}%"></div>
                         </div>
                         <p class="text-xs text-gray-500 mt-2">Progress percentage is determined by SECRETARIAT based on submitted documentation and reports.</p>
                       </div>
                       
                       <!-- Resubmit Button -->
                       <div class="flex justify-end">
                         <button onclick="submitMilestoneUpdate('${milestone.id}')" class="px-6 py-3 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors flex items-center gap-2">
                           <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                             <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                           </svg>
                           Resubmit This Milestone
                         </button>
                       </div>
                     </div>
                   </div>
                 </div>
               </div>
             </div>
           `;
         }).join('');
       }

    // Show completed milestones (read-only)
    if (completedMilestones.length > 0) {
      milestonesHTML += '<h4 class="text-lg font-bold text-green-800 mb-6 flex items-center gap-2"><svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>Completed Milestones</h4>';
      milestonesHTML += completedMilestones.map((milestone, index) => `
        <div class="bg-white rounded-xl shadow-sm border border-green-200 mb-4">
          <div class="flex items-center justify-between p-4 bg-gradient-to-r from-green-50 to-emerald-50 border-b border-green-100">
            <div class="flex items-center gap-4">
              <div class="w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-800 text-lg">${milestone.title}</h4>
                <div class="flex items-center gap-3 mt-1">
                  <span class="px-3 py-1 text-xs font-medium rounded-full bg-green-100 text-green-700">Completed</span>
                  <span class="text-sm text-gray-500">Weight: ${milestone.weight}%</span>
                </div>
              </div>
            </div>
          </div>
          
          <div class="p-6">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-green-50 rounded-lg mb-4">
              <div class="text-center">
                <div class="text-2xl font-bold text-green-600">${milestone.weight}%</div>
                <div class="text-sm text-gray-600">Weight</div>
              </div>
              <div class="text-center">
                <div class="text-lg font-semibold text-gray-800">₱${(milestone.plannedBudget || 0).toLocaleString()}</div>
                <div class="text-sm text-gray-600">Planned Budget</div>
              </div>
              <div class="text-center">
                <div class="text-lg font-semibold text-gray-800">${milestone.dueDate}</div>
                <div class="text-sm text-gray-600">Due Date</div>
              </div>
            </div>
            
            <div class="text-sm text-gray-600 leading-relaxed mb-4">${milestone.description || 'No description available'}</div>
            
            <!-- Completed Milestone Info -->
            <div class="bg-green-100 border border-green-200 rounded-lg p-4">
              <div class="flex items-center gap-3">
                <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <div>
                  <p class="text-sm text-green-700 font-medium">This milestone has been completed successfully.</p>
                  <p class="text-xs text-green-600 mt-1">Progress: ${milestone.progress || 0}% | Status: ${milestone.status}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      `).join('');
    }

    // Show summary - ensure all values are numbers
    const totalWeight = projectMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const totalBudget = projectMilestones.reduce((sum, m) => sum + parseFloat(m.plannedBudget || 0), 0);
    const completedWeight = completedMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const pendingWeight = pendingMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const underApprovalWeight = underApprovalMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const delayedWeight = delayedMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const revisionRequestWeight = revisionRequestMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);



    container.innerHTML = milestonesHTML;
    console.log('🎉 Milestones HTML set successfully');
    
    // Update pending milestones counter
    updatePendingMilestonesCounter(pendingMilestones.length);
    
    // Update progress bars based on milestone data
    updateProgressBarsFromMilestones();
    
    // Add event listeners to milestone inputs to update progress bars in real-time
    const allUpdatableMilestones = [...pendingMilestones, ...revisionRequestMilestones];
    
    allUpdatableMilestones.forEach(milestone => {
      const budgetInput = document.getElementById(`milestone-${milestone.id}-budget-amount`);
      const budgetBreakdownTextarea = document.getElementById(`milestone-${milestone.id}-budget-breakdown`);
      const timelineDescriptionTextarea = document.getElementById(`milestone-${milestone.id}-timeline-description`);
      const physicalDescriptionTextarea = document.getElementById(`milestone-${milestone.id}-physical-description`);
      const notesTextarea = document.getElementById(`milestone-${milestone.id}-notes`);

      // Add event listeners for editable fields
      if (budgetInput) {
        budgetInput.addEventListener('input', updateProgressBarsFromMilestones);
      }
      if (budgetBreakdownTextarea) {
        budgetBreakdownTextarea.addEventListener('input', updateProgressBarsFromMilestones);
      }
      if (timelineDescriptionTextarea) {
        timelineDescriptionTextarea.addEventListener('input', updateProgressBarsFromMilestones);
      }
      if (physicalDescriptionTextarea) {
        physicalDescriptionTextarea.addEventListener('input', updateProgressBarsFromMilestones);
      }
      if (notesTextarea) {
        notesTextarea.addEventListener('input', updateProgressBarsFromMilestones);
      }

      // Add event listeners for proof type file uploads
      const proofTypes = milestone.physicalProofTypes ? milestone.physicalProofTypes.split(',').map(type => type.trim()) : ['Photo', 'Video', 'Document'];
      proofTypes.forEach(proofType => {
        const proofTypeLower = proofType.toLowerCase();
        const fileInput = document.getElementById(`milestone-${milestone.id}-${proofTypeLower}-files`);
        if (fileInput) {
          fileInput.addEventListener('change', function(e) {
            const files = Array.from(e.target.files);
            files.forEach(file => {
              if (file.size > 10 * 1024 * 1024) { // 10MB limit
                alert('File size must be less than 10MB');
                return;
              }
              globalUploadedFiles.push(file);
              displayFile(file, `milestone-${milestone.id}-${proofTypeLower}-file-list`);
            });
          });
        }
      });
    });
    
    // Ensure all milestones start collapsed - IMMEDIATE and DELAYED
    const forceCollapseAllMilestones = () => {
      const allMilestoneContents = container.querySelectorAll('[id$="-content"]');
      console.log('🔍 Found milestone contents:', allMilestoneContents.length);
      
      allMilestoneContents.forEach(content => {
        // Remove expanded class
        content.classList.remove('expanded');
        
        // Force collapsed styles directly
        content.style.maxHeight = '0px';
        content.style.opacity = '0';
        content.style.transform = 'translateY(-10px)';
        content.style.overflow = 'hidden';
        
        console.log('🔒 Milestone forced collapsed:', content.id);
      });
      
      // Reset all milestone icons
      const allMilestoneIcons = container.querySelectorAll('.milestone-icon');
      allMilestoneIcons.forEach(icon => {
        icon.classList.remove('rotated');
        icon.style.transform = 'rotate(0deg)';
      });
      console.log('✅ All milestones forced to collapsed state');
    };
    
    // Execute immediately
    forceCollapseAllMilestones();
    
    // Execute again after a delay to catch any late DOM updates
    setTimeout(forceCollapseAllMilestones, 50);
    setTimeout(forceCollapseAllMilestones, 200);
    setTimeout(forceCollapseAllMilestones, 500);
  }

  // Update pending milestones counter
  function updatePendingMilestonesCounter(count) {
    const counterElement = document.getElementById('pendingMilestonesCounter');
    if (counterElement) {
      counterElement.textContent = count;
      if (count > 0) {
        counterElement.style.display = 'inline-block';
        // Add a subtle animation when counter updates
        counterElement.style.transform = 'scale(1.2)';
        setTimeout(() => {
          counterElement.style.transform = 'scale(1)';
        }, 200);
      } else {
        counterElement.style.display = 'none';
      }
      console.log(`✅ Updated pending milestones counter: ${count}`);
    }
  }

  // Display updates
  function displayUpdates() {
    const container = document.getElementById('updatesContainer');
    if (!projectUpdates || projectUpdates.length === 0) {
      container.innerHTML = '<p class="text-gray-500">No updates found for this project.</p>';
      return;
    }

    const updatesHTML = projectUpdates.map(update => `
      <div class="border border-gray-200 rounded-lg p-4 mb-3">
        <div class="flex items-center justify-between mb-2">
          <h4 class="font-semibold text-gray-800">${update.updateType} Update</h4>
          <span class="px-2 py-1 text-xs font-medium rounded-full ${
            update.status === 'secretariat_approved' ? 'bg-green-100 text-green-700' :
            update.status === 'iu_approved' ? 'bg-blue-100 text-blue-700' :
            update.status === 'submitted' ? 'bg-yellow-100 text-yellow-700' :
            'bg-gray-100 text-gray-700'
          }">${update.status.replace('_', ' ')}</span>
        </div>
        <p class="text-sm text-gray-600 mb-2">Progress: ${update.claimedProgress}%</p>
        <p class="text-sm text-gray-600">${update.remarks || 'No remarks'}</p>
        <p class="text-xs text-gray-500 mt-2">Submitted: ${new Date(update.createdAt).toLocaleDateString()}</p>
      </div>
    `).join('');

    container.innerHTML = updatesHTML;
    document.getElementById('updatesHistory').style.display = 'block';
  }



  // Submit individual milestone update with confirmation
  async function submitMilestoneUpdate(milestoneId) {
    try {
      if (!selectedProject) {
        alert('Please select a project first');
        return;
      }

      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      // Find the milestone
      const milestone = projectMilestones.find(m => m.id === milestoneId);
      if (!milestone) {
        alert('Milestone not found');
        return;
      }

      // Check if milestone can be updated
      if (!canUpdateMilestone(milestone)) {
        alert(`This milestone cannot be updated. Current status: ${milestone.status}`);
        return;
      }

      // Show confirmation dialog
      const isRevision = milestone.status === 'revision_request';
      const confirmMessage = isRevision 
        ? `Are you sure you want to resubmit this milestone update to the Implementing Office for review?\n\nMilestone: ${milestone.title}\n\nThis is a revision submission. Once submitted, this milestone cannot be edited until the Secretariat gives a verdict (approve or reject).`
        : `Are you sure you want to submit this milestone update to the Implementing Office for review?\n\nMilestone: ${milestone.title}\n\nOnce submitted, this milestone cannot be edited until the Secretariat gives a verdict (approve or reject).`;
      
      const confirmSubmit = confirm(confirmMessage);
      
      if (!confirmSubmit) {
        return;
      }

      // Collect milestone update data with three divisions (only editable fields)
      const timelineDescription = document.getElementById(`milestone-${milestoneId}-timeline-description`)?.value;
      const budgetAmount = document.getElementById(`milestone-${milestoneId}-budget-amount`)?.value;
      const budgetBreakdown = document.getElementById(`milestone-${milestoneId}-budget-breakdown`)?.value;
      const physicalDescription = document.getElementById(`milestone-${milestoneId}-physical-description`)?.value;
      const notes = document.getElementById(`milestone-${milestoneId}-notes`)?.value;

      // Collect uploaded files from proof type sections
      const uploadedFiles = [];
      const proofTypes = milestone.physicalProofTypes ? milestone.physicalProofTypes.split(',').map(type => type.trim()) : ['Photo', 'Video', 'Document'];
      proofTypes.forEach(proofType => {
        const proofTypeLower = proofType.toLowerCase();
        const fileInput = document.getElementById(`milestone-${milestoneId}-${proofTypeLower}-files`);
        if (fileInput && fileInput.files) {
          uploadedFiles.push(...Array.from(fileInput.files));
        }
      });

      console.log(`Milestone ${milestoneId} update data:`, {
        timelineDescription, budgetAmount, budgetBreakdown, 
        physicalDescription, notes, filesCount: uploadedFiles.length
      });
      console.log('Budget amount raw value:', budgetAmount);
      console.log('Budget amount cleaned:', budgetAmount.replace(/[^\d.]/g, ''));
      console.log('Budget amount parsed:', parseFloat(budgetAmount.replace(/[^\d.]/g, '')));

      // Create milestone update object with three divisions
      const milestoneUpdate = {
        milestoneId: milestoneId,
        timeline: {
          description: timelineDescription || ''
        },
        budget: {
          amount: parseFloat(budgetAmount.replace(/[^\d.]/g, '')) || 0, // Fix: Remove commas before parsing
          breakdown: budgetBreakdown || ''
        },
        physical: {
          description: physicalDescription || ''
        },
        notes: notes || '',
        uploadedFiles: Array.from(uploadedFiles).map(f => ({
          name: f.name,
          size: f.size,
          type: f.type
        }))
      };

      console.log('Submitting milestone update:', milestoneUpdate);

      // Collect comprehensive milestone data for the new submission system
      const milestoneData = await collectMilestoneSubmissionData(milestoneId);
      if (!milestoneData) {
        alert('Failed to collect milestone data. Please try again.');
        return;
      }

      // Submit the update to implementing office for review using the new system
      const response = await fetch(`${API_URL}/milestones/milestone-submissions`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          milestoneId: milestoneId,
          projectId: selectedProject.id,
          submissionData: milestoneData,
          submittedBy: {
            fullName: localStorage.getItem('userFullName') || 'EIU User',
            subrole: localStorage.getItem('userSubrole') || 'External Implementing Unit',
            contactNumber: localStorage.getItem('userContact') || 'N/A',
            department: localStorage.getItem('userDepartment') || 'EIU',
            company: localStorage.getItem('userCompany') || 'External Partner'
          },
          submissionDate: new Date().toISOString(),
          status: 'pending_review'
        })
      });

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          const successMessage = isRevision
            ? `Milestone revision submitted successfully!\n\nMilestone: ${milestone.title}\nStatus: Resubmitted to Implementing Office for Review\n\nYou will receive a notification once the Secretariat reviews your resubmission.`
            : `Milestone update submitted successfully!\n\nMilestone: ${milestone.title}\nStatus: Submitted to Implementing Office for Review\n\nYou will receive a notification once the Secretariat reviews your submission.`;
          
          alert(successMessage);
          
          // Create notification for LGU-IU IOO about the new milestone submission
          try {
            await createLGUNotification({
              projectId: selectedProject.id,
              projectName: selectedProject.projectName || selectedProject.name || 'Unknown Project',
              projectCode: selectedProject.projectCode || 'N/A',
              milestoneId: milestoneId,
              milestoneName: milestone.name || milestone.title || `Milestone ${milestoneId}`,
              submittedBy: {
                fullName: localStorage.getItem('userFullName') || 'EIU User',
                company: localStorage.getItem('userCompany') || 'External Partner'
              },
              submissionDate: new Date().toISOString()
            });
            console.log('✅ LGU notification creation attempted for milestone:', milestoneId);
          } catch (notificationError) {
            console.warn('Failed to create LGU notification:', notificationError);
            // Don't fail the submission if notification fails
          }
          
          // Refresh project details and submission history
          await loadProjectDetails(selectedProject.id);
          await loadSubmissionHistory();
          
          // Disable the form for this milestone until Secretariat verdict
          disableMilestoneForm(milestoneId);
        } else {
          alert(`Error: ${result.message || 'Failed to submit milestone update'}`);
        }
      } else {
        const errorData = await response.json();
        alert(`Error: ${errorData.message || 'Failed to submit milestone update'}`);
      }
    } catch (error) {
      console.error('Error submitting milestone update:', error);
      alert('An error occurred while submitting the milestone update. Please try again.');
    }
  }

  // Disable milestone form after submission
  function disableMilestoneForm(milestoneId) {
    const formElements = [
      `milestone-${milestoneId}-timeline-description`,
      `milestone-${milestoneId}-budget-amount`,
      `milestone-${milestoneId}-budget-breakdown`,
      `milestone-${milestoneId}-physical-description`,
      `milestone-${milestoneId}-notes`
    ];

    // Add proof type file inputs
    const proofTypes = ['photo', 'video', 'document'];
    proofTypes.forEach(proofType => {
      formElements.push(`milestone-${milestoneId}-${proofType}-files`);
    });

    formElements.forEach(elementId => {
      const element = document.getElementById(elementId);
      if (element) {
        element.disabled = true;
        element.classList.add('opacity-50', 'cursor-not-allowed');
      }
    });

    // Disable submit button
    const submitButton = document.querySelector(`button[onclick="submitMilestoneUpdate('${milestoneId}')"]`);
    if (submitButton) {
      submitButton.disabled = true;
      submitButton.classList.add('opacity-50', 'cursor-not-allowed');
      submitButton.textContent = 'Submitted - Awaiting Review';
    }
  }

  // Update progress bars based on milestone data
  function updateProgressBarsFromMilestones() {
    try {
      if (!projectMilestones || projectMilestones.length === 0) return;

    // Calculate progress based on the new 33.33% equal distribution system
    let timelineProgress = 0;
    let budgetProgress = 0;
    let physicalProgress = 0;

    projectMilestones.forEach(milestone => {
      const weight = parseFloat(milestone.weight || 0);
      const progress = parseFloat(milestone.progress || 0); // This is awarded by SECRETARIAT
      
      // Timeline Progress: Based on milestone completion status
      if (milestone.status === 'completed') {
        timelineProgress += weight; // Full weight for completed milestones
      } else if (milestone.status === 'in_progress') {
        timelineProgress += weight * 0.5; // 50% weight for in-progress milestones
      }
      // No contribution for not_started or delayed milestones
      
      // Budget Progress: Based on SECRETARIAT-awarded progress for budget utilization
      budgetProgress += (weight * progress) / 100;
      
      // Physical Progress: Based on SECRETARIAT-awarded progress for physical accomplishment
      physicalProgress += (weight * progress) / 100;
    });

    // Calculate overall progress: Equal 33.33% contribution from each category
    const timelineContribution = (timelineProgress / 100) * 33.33;
    const budgetContribution = (budgetProgress / 100) * 33.33;
    const physicalContribution = (physicalProgress / 100) * 33.33;
    
    const overallProgress = timelineContribution + budgetContribution + physicalContribution;

    // Update progress bars with null checks
    const elements = {
      'overallProgressText': overallProgress.toFixed(2) + '%',
      'timelineProgressText': timelineProgress.toFixed(2) + '%',
      'budgetProgressText': budgetProgress.toFixed(2) + '%',
      'physicalProgressText': physicalProgress.toFixed(2) + '%'
    };
    
    Object.entries(elements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      } else {
        console.warn(`Progress text element not found: ${id}`);
      }
    });
    
    const bars = {
      'overallProgressBar': Math.max(overallProgress, 0) + '%',
      'timelineProgressBar': Math.max(timelineProgress, 0) + '%',
      'budgetProgressBar': Math.max(budgetProgress, 0) + '%',
      'physicalProgressBar': Math.max(physicalProgress, 0) + '%'
    };
    
    // Update progress bars with animation
    const progressData = [
      { element: 'overallProgressBar', progress: Math.max(overallProgress, 0) },
      { element: 'timelineProgressBar', progress: Math.max(timelineProgress, 0) },
      { element: 'budgetProgressBar', progress: Math.max(budgetProgress, 0) },
      { element: 'physicalProgressBar', progress: Math.max(physicalProgress, 0) }
    ];
    
    // Trigger animation for dashboard progress bars
    setTimeout(() => {
      animateDashboardProgressBars(progressData);
    }, 100);
    } catch (error) {
      console.error('Error updating progress bars from milestones:', error);
      // Don't let this error crash the application
    }
  }

  // Display file in file list
  function displayFile(file, containerId) {
    const container = document.getElementById(containerId);
    if (!container) return;

    const fileItem = document.createElement('div');
    fileItem.className = 'flex items-center justify-between p-2 bg-gray-50 rounded border';
    fileItem.innerHTML = `
      <div class="flex items-center gap-2">
        <svg class="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <span class="text-sm text-gray-700">${file.name}</span>
        <span class="text-xs text-gray-500">(${(file.size / 1024 / 1024).toFixed(2)} MB)</span>
      </div>
      <button onclick="removeFile(this, '${file.name}')" class="text-red-500 hover:text-red-700">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(fileItem);
  }

  // Remove file from list
  function removeFile(button, fileName) {
    const fileItem = button.closest('div');
    fileItem.remove();
    
    // Remove from globalUploadedFiles array
    const index = globalUploadedFiles.findIndex(f => f.name === fileName);
    if (index > -1) {
      globalUploadedFiles.splice(index, 1);
    }
  }

  // Refresh data
  async function refreshData() {
    await initializePage();
  }

  // Load submit update
  async function loadSubmitUpdate() {
    await initializePage();
  }



  // Toggle milestone card visibility
  function toggleMilestoneCard(milestoneId) {
    const content = document.getElementById(`${milestoneId}-content`);
    const icon = document.getElementById(`${milestoneId}-icon`);
    
    if (content && icon) {
      const isExpanded = content.classList.contains('expanded');
      
      if (isExpanded) {
        // Collapse
        content.classList.remove('expanded');
        icon.classList.remove('expanded');
        icon.style.transform = 'rotate(0deg)';
        console.log(`🔼 Collapsed milestone: ${milestoneId}`);
      } else {
        // Expand
        content.classList.add('expanded');
        icon.classList.add('expanded');
        icon.style.transform = 'rotate(180deg)';
        console.log(`🔽 Expanded milestone: ${milestoneId}`);
      }
    }
  }

  // Check if all required DOM elements exist
  function checkDOMElements() {
    const requiredElements = [
      'selectedProjectInfo',
      'selectedProjectName',
      'selectedProjectCode',
      'projectWorkflowStatus',
      'overallProgressText',
      'timelineProgressText',
      'budgetProgressText',
      'physicalProgressText',
      'overallProgressBar',
      'timelineProgressBar',
      'budgetProgressBar',
      'physicalProgressBar'
    ];
    
    console.log('=== CHECKING DOM ELEMENTS ===');
    requiredElements.forEach(id => {
      const element = document.getElementById(id);
      console.log(`${id}: ${element ? 'FOUND' : 'NOT FOUND'}`);
    });
  }

  // Nuclear option: Force recreate progress elements
  function forceRecreateProgressElements() {
    console.log('=== NUCLEAR OPTION: FORCE RECREATE ===');
    
    if (selectedProject) {
      // Get progress values
      const overallProgress = parseFloat(selectedProject.overallProgress) || 0;
      const timelineProgress = parseFloat(selectedProject.timelineProgress) || 0;
      const budgetProgress = parseFloat(selectedProject.budgetProgress) || 0;
      const physicalProgress = parseFloat(selectedProject.physicalProgress) || 0;
      
      // COMPLETELY RECREATE the entire selectedProjectInfo section
      const selectedProjectInfo = document.getElementById('selectedProjectInfo');
      if (selectedProjectInfo) {
        // Remove the entire section
        selectedProjectInfo.remove();
        
        // Create a completely new section
        const newSection = document.createElement('div');
        newSection.id = 'selectedProjectInfo';
        newSection.className = 'bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8';
        newSection.style.display = 'block';
        
        // Check if project has delayed milestones
        let actualStatus = selectedProject.workflowStatus || selectedProject.status || 'pending';
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        console.log('🔍 Project Status Debug:', {
          projectName: selectedProject.name,
          originalStatus: actualStatus,
          workflowStatus: selectedProject.workflowStatus,
          status: selectedProject.status,
          hasMilestones: !!selectedProject.milestones,
          milestonesArray: Array.isArray(selectedProject.milestones),
          milestonesLength: selectedProject.milestones?.length,
          milestones: selectedProject.milestones
        });
        
        // Check both selectedProject.milestones and projectMilestones (loaded separately)
        const milestonesToCheck = selectedProject.milestones || projectMilestones || [];
        const hasValidMilestones = Array.isArray(milestonesToCheck) && milestonesToCheck.length > 0;
        
        if (actualStatus !== 'completed' && actualStatus !== 'complete' && hasValidMilestones) {
          console.log('🔍 Checking milestones for delays...', {
            source: selectedProject.milestones ? 'selectedProject.milestones' : 'projectMilestones',
            count: milestonesToCheck.length
          });
          
          const hasDelayedMilestones = milestonesToCheck.some(milestone => {
            const dueDate = milestone.dueDate || milestone.deadline || milestone.targetDate || milestone.completionDate;
            const status = milestone.status || 'pending';
            
            console.log(`🔍 Milestone check:`, {
              title: milestone.title || milestone.name,
              dueDate: dueDate,
              status: status,
              today: today.toDateString()
            });
            
            if (dueDate && status !== 'completed' && status !== 'under_approval' && status !== 'revision_request') {
              const milestoneDate = new Date(dueDate);
              milestoneDate.setHours(0, 0, 0, 0);
              const isOverdue = milestoneDate < today;
              const isPending = status === 'pending';
              
              console.log(`🔍 Milestone "${milestone.title || milestone.name}":`, {
                dueDate: milestoneDate.toDateString(),
                isOverdue: isOverdue,
                isPending: isPending,
                shouldBeDelayed: isOverdue && isPending
              });
              
              return isOverdue && isPending;
            }
            return false;
          });
          
          console.log('🔍 Has delayed milestones:', hasDelayedMilestones);
          
          if (hasDelayedMilestones) {
            actualStatus = 'delayed';
            console.log('🚨 Project status changed to DELAYED');
          }
        } else {
          console.log('🔍 Skipping milestone check:', {
            reason: actualStatus === 'completed' || actualStatus === 'complete' ? 'Project completed' : 'No milestones data'
          });
        }
        
        // Get status colors based on proper project status lifecycle
        const getStatusClass = (status) => {
          switch(status?.toLowerCase()) {
            case 'completed':
            case 'complete':
              return 'bg-green-100 text-green-700'; // All milestones validated
            case 'ongoing':
            case 'secretariat_approved':
              return 'bg-blue-100 text-blue-700'; // Approved by Secretariat and can be updated by EIU
            case 'delayed':
              return 'bg-red-100 text-red-700 animate-pulse'; // If even one milestone is delayed
            case 'pending':
            case 'submitted':
              return 'bg-yellow-100 text-yellow-700'; // Not yet approved by Secretariat
            default:
              return 'bg-gray-100 text-gray-700';
          }
        };
        
        const statusText = actualStatus === 'secretariat_approved' ? 'ONGOING' : 
                          actualStatus === 'delayed' ? 'DELAYED' :
                          actualStatus === 'ongoing' ? 'ONGOING' :
                          actualStatus === 'completed' ? 'COMPLETED' :
                          actualStatus === 'pending' ? 'PENDING' :
                          actualStatus.replace('_', ' ').toUpperCase();
                          
        console.log('🔍 Final status mapping:', {
          actualStatus: actualStatus,
          statusText: statusText,
          statusClass: getStatusClass(actualStatus)
        });
        
        // Update the original project status badge too
        const projectStatusBadge = document.getElementById('projectStatusBadge');
        if (projectStatusBadge) {
          projectStatusBadge.className = `px-3 py-1 text-sm font-medium rounded-full ${getStatusClass(actualStatus)}`;
          projectStatusBadge.textContent = statusText;
          console.log('✅ Updated original project status badge');
        }

        newSection.innerHTML = `
          <div class="flex items-center justify-between mb-4">
            <div>
              <h3 class="text-lg font-semibold text-gray-800" id="selectedProjectName">${selectedProject.name}</h3>
              <p class="text-sm text-gray-600" id="selectedProjectCode">${selectedProject.projectCode}</p>
            </div>
            <span id="projectWorkflowStatus" class="px-3 py-1 text-sm font-medium rounded-full ${getStatusClass(actualStatus)}">${statusText}</span>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4" id="progressContainer">
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600" id="overallProgressText">${overallProgress.toFixed(1)}%</div>
              <p class="text-sm text-gray-600">Overall Progress</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div 
                  class="h-2 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                  id="overallProgressBar" 
                  style="width: 0%"
                  data-progress="${overallProgress}"
                  data-progress-color="${overallProgress >= 0 && overallProgress <= 25 ? 'bg-red-500' : overallProgress >= 26 && overallProgress <= 50 ? 'bg-yellow-500' : overallProgress >= 51 && overallProgress <= 75 ? 'bg-blue-500' : overallProgress >= 76 && overallProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                ></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600" id="timelineProgressText">${timelineProgress.toFixed(1)}%</div>
              <p class="text-sm text-gray-600">Timeline</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div 
                  class="h-2 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                  id="timelineProgressBar" 
                  style="width: 0%"
                  data-progress="${timelineProgress}"
                  data-progress-color="${timelineProgress >= 0 && timelineProgress <= 25 ? 'bg-red-500' : timelineProgress >= 26 && timelineProgress <= 50 ? 'bg-yellow-500' : timelineProgress >= 51 && timelineProgress <= 75 ? 'bg-blue-500' : timelineProgress >= 76 && timelineProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                ></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-purple-600" id="budgetProgressText">${budgetProgress.toFixed(1)}%</div>
              <p class="text-sm text-gray-600">Budget</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div 
                  class="h-2 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                  id="budgetProgressBar" 
                  style="width: 0%"
                  data-progress="${budgetProgress}"
                  data-progress-color="${budgetProgress >= 0 && budgetProgress <= 25 ? 'bg-red-500' : budgetProgress >= 26 && budgetProgress <= 50 ? 'bg-yellow-500' : budgetProgress >= 51 && budgetProgress <= 75 ? 'bg-blue-500' : budgetProgress >= 76 && budgetProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                ></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-orange-600" id="physicalProgressText">${physicalProgress.toFixed(1)}%</div>
              <p class="text-sm text-gray-600">Physical</p>
              <div class="w-full bg-gray-200 rounded-full h-2 mt-2 overflow-hidden">
                <div 
                  class="h-2 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                  id="physicalProgressBar" 
                  style="width: 0%"
                  data-progress="${physicalProgress}"
                  data-progress-color="${physicalProgress >= 0 && physicalProgress <= 25 ? 'bg-red-500' : physicalProgress >= 26 && physicalProgress <= 50 ? 'bg-yellow-500' : physicalProgress >= 51 && physicalProgress <= 75 ? 'bg-blue-500' : physicalProgress >= 76 && physicalProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                ></div>
              </div>
            </div>
          </div>
        `;
        
        // Insert the new section before the draft message
        const draftMessage = document.getElementById('draftMessage');
        if (draftMessage) {
          draftMessage.parentNode.insertBefore(newSection, draftMessage);
        } else {
          // Fallback: append to the end
          document.querySelector('section').appendChild(newSection);
        }
        
        console.log('Nuclear option completed - completely recreated selectedProjectInfo section');
        console.log('New section created with progress values:', { overall: overallProgress, timeline: timelineProgress, budget: budgetProgress, physical: physicalProgress });
      }
    } else {
      console.log('No project selected for nuclear option');
    }
  }

  // Debug function to manually trigger UI update
  function debugUpdateUI() {
    console.log('=== DEBUG UPDATE UI ===');
    console.log('Projects:', projects);
    console.log('Selected Project:', selectedProject);
    
    // Check DOM elements first
    checkDOMElements();
    
    // Check for project card wrappers
    const projectCardWrappers = document.querySelectorAll('.project-card-wrapper');
    console.log('Number of project card wrappers found:', projectCardWrappers.length);
    projectCardWrappers.forEach((wrapper, index) => {
      const projectId = wrapper.getAttribute('data-project-id');
      console.log(`Project card wrapper ${index + 1}: ID=${projectId}`);
    });
    
    // Check if selectedProjectInfo is visible
    const selectedProjectInfo = document.getElementById('selectedProjectInfo');
    console.log('selectedProjectInfo display:', selectedProjectInfo ? selectedProjectInfo.style.display : 'NOT FOUND');
    
    if (projects.length === 1 && !selectedProject) {
      console.log('Auto-selecting project via debug function');
      selectProject(projects[0].id);
    } else if (selectedProject) {
      console.log('Forcing UI update for selected project');
      updateSelectedProjectUI();
      
      // Force update by directly setting values
      const overallProgress = parseFloat(selectedProject.overallProgress) || 0;
      const timelineProgress = parseFloat(selectedProject.timelineProgress) || 0;
      const budgetProgress = parseFloat(selectedProject.budgetProgress) || 0;
      const physicalProgress = parseFloat(selectedProject.physicalProgress) || 0;
      
      // Direct DOM manipulation as fallback
      const elements = {
        'overallProgressText': overallProgress.toFixed(1) + '%',
        'timelineProgressText': timelineProgress.toFixed(1) + '%',
        'budgetProgressText': budgetProgress.toFixed(1) + '%',
        'physicalProgressText': physicalProgress.toFixed(1) + '%'
      };
      
      Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
          element.textContent = value;
          console.log(`Directly set ${id} to: ${value}`);
        } else {
          console.error(`Element ${id} not found for direct update`);
        }
      });
      
      // Force progress bar updates
      const bars = {
        'overallProgressBar': overallProgress,
        'timelineProgressBar': timelineProgress,
        'budgetProgressBar': budgetProgress,
        'physicalProgressBar': physicalProgress
      };
      
      Object.entries(bars).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
          element.style.width = Math.max(value, 0) + '%';
          console.log(`Directly set ${id} width to: ${Math.max(value, 0)}%`);
        } else {
          console.error(`Element ${id} not found for direct update`);
        }
      });
    } else {
      console.log('No projects available or multiple projects');
    }
    
    // Try nuclear option as last resort
    setTimeout(() => {
      console.log('Trying nuclear option...');
      forceRecreateProgressElements();
    }, 1000);
  }

  // Load submission history for the selected project
  async function loadSubmissionHistory() {
    if (!selectedProject) return;
    
    try {
      const token = localStorage.getItem('token');
      
      // Load milestone submissions for this EIU user and project
      const response = await fetch(`${API_URL}/milestones/milestone-submissions?projectId=${selectedProject.id}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          projectUpdates = data.submissions || [];
          displaySubmissionHistory();
          updateAnalyticsCharts();
        }
      }
    } catch (error) {
      console.error('Error loading submission history:', error);
    }
  }

  // Update analytics charts with submission data
  function updateAnalyticsCharts() {
    if (!projectUpdates || projectUpdates.length === 0) {
      // Show empty state for charts
      showEmptyAnalyticsState();
      return;
    }

    // Update budget utilization trend
    updateBudgetUtilizationTrend();
    
    // Update progress completion curve
    updateProgressCompletionCurve();
    
    // Update submission timeline
    updateSubmissionTimeline();
  }

  // Update budget utilization trend chart
  function updateBudgetUtilizationTrend() {
    const chartContainer = document.querySelector('.budget-trend-chart');
    if (!chartContainer) return;

    // Calculate budget utilization over time
    const budgetData = projectUpdates
      .filter(submission => submission.usedBudget > 0)
      .sort((a, b) => new Date(a.submittedAt) - new Date(b.submittedAt))
      .map(submission => ({
        date: new Date(submission.submittedAt).toLocaleDateString(),
        used: parseFloat(submission.usedBudget || 0),
        planned: parseFloat(submission.plannedBudget || 0)
      }));

    if (budgetData.length > 0) {
      chartContainer.innerHTML = `
        <div class="h-64 flex items-end justify-around space-x-2 px-4">
          ${budgetData.map((point, index) => {
            const percentage = point.planned > 0 ? (point.used / point.planned) * 100 : 0;
            return `
              <div class="flex-1 flex flex-col items-center">
                <div class="w-full bg-gray-200 rounded-full h-4 mb-2">
                  <div class="bg-gradient-to-r from-green-400 to-emerald-500 h-4 rounded-full transition-all duration-500" 
                       style="width: ${Math.min(percentage, 100)}%"></div>
                </div>
                <span class="text-xs text-gray-600">${point.date}</span>
                <span class="text-xs font-semibold text-green-600">${percentage.toFixed(1)}%</span>
              </div>
            `;
          }).join('')}
        </div>
      `;
    }
  }

  // Update progress completion curve
  function updateProgressCompletionCurve() {
    const chartContainer = document.querySelector('.progress-curve-chart');
    if (!chartContainer) return;

    // Calculate progress over time
    const progressData = projectUpdates
      .sort((a, b) => new Date(a.submittedAt) - new Date(b.submittedAt))
      .map((submission, index) => ({
        date: new Date(submission.submittedAt).toLocaleDateString(),
        progress: (index + 1) / projectUpdates.length * 100,
        status: submission.status
      }));

    if (progressData.length > 0) {
      chartContainer.innerHTML = `
        <div class="h-64 flex items-end justify-around space-x-2 px-4">
          ${progressData.map((point, index) => {
            const height = (point.progress / 100) * 100;
            const statusColor = point.status === 'approved' ? 'bg-green-500' : 
                               point.status === 'pending_review' ? 'bg-yellow-500' : 'bg-red-500';
            return `
              <div class="flex-1 flex flex-col items-center">
                <div class="w-full bg-gray-200 rounded-full h-32 mb-2 flex items-end">
                  <div class="${statusColor} w-full rounded-full transition-all duration-500" 
                       style="height: ${height}%"></div>
                </div>
                <span class="text-xs text-gray-600">${point.date}</span>
                <span class="text-xs font-semibold text-blue-600">${point.progress.toFixed(1)}%</span>
              </div>
            `;
          }).join('')}
        </div>
      `;
    }
  }

  // Update submission timeline
  function updateSubmissionTimeline() {
    const timelineContainer = document.getElementById('timelineContainer');
    if (!timelineContainer) return;

    const sortedSubmissions = [...projectUpdates].sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));

    timelineContainer.innerHTML = sortedSubmissions.map((submission, index) => {
      const date = new Date(submission.submittedAt);
      const statusColor = submission.status === 'approved' ? 'bg-green-100 border-green-300' : 
                         submission.status === 'pending_review' ? 'bg-yellow-100 border-yellow-300' : 
                         'bg-red-100 border-red-300';
      
      return `
        <div class="flex items-start space-x-4">
          <div class="flex-shrink-0 w-4 h-4 bg-emerald-500 rounded-full border-4 border-white shadow-md relative z-10"></div>
          <div class="flex-1 ${statusColor} rounded-lg p-4 border">
            <div class="flex items-center justify-between mb-2">
              <h4 class="font-semibold text-gray-800">${submission.milestone?.title || 'Milestone Update'}</h4>
              <span class="text-sm text-gray-500">${date.toLocaleDateString()}</span>
            </div>
            <p class="text-sm text-gray-600 mb-2">Budget Used: ₱${parseFloat(submission.usedBudget || 0).toLocaleString()}</p>
            <div class="flex items-center justify-between">
              <span class="text-xs px-2 py-1 rounded-full ${
                submission.status === 'approved' ? 'bg-green-200 text-green-800' :
                submission.status === 'pending_review' ? 'bg-yellow-200 text-yellow-800' :
                'bg-red-200 text-red-800'
              }">
                ${submission.status.replace('_', ' ').toUpperCase()}
              </span>
            </div>
          </div>
        </div>
      `;
    }).join('');
  }

  // Show empty analytics state
  function showEmptyAnalyticsState() {
    const budgetChart = document.querySelector('.budget-trend-chart');
    const progressChart = document.querySelector('.progress-curve-chart');
    
    if (budgetChart) {
      budgetChart.innerHTML = `
        <div class="h-64 flex items-center justify-center text-gray-500">
          <div class="text-center">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            <p class="text-sm">Budget trend will appear after submissions</p>
          </div>
        </div>
      `;
    }
    
    if (progressChart) {
      progressChart.innerHTML = `
        <div class="h-64 flex items-center justify-center text-gray-500">
          <div class="text-center">
            <svg class="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 12l3-3 3 3 4-4M8 21l4-4 4 4M3 4h18M4 4h16v12a1 1 0 01-1 1H5a1 1 0 01-1-1V4z"></path>
            </svg>
            <p class="text-sm">Progress curve will appear after submissions</p>
          </div>
        </div>
      `;
    }
  }

  // Display submission history
  function displaySubmissionHistory() {
    const container = document.getElementById('updatesContainer');
    const emptyHistory = document.getElementById('emptyHistory');
    
    if (!container) return;
    
    // Update summary statistics
    const totalSubmissions = projectUpdates.length;
    const pendingReviews = projectUpdates.filter(u => u.status === 'pending_review' || u.status === 'under_review').length;
    const approvedUpdates = projectUpdates.filter(u => u.status === 'approved').length;
    const rejectedUpdates = projectUpdates.filter(u => u.status === 'rejected' || u.status === 'needs_revision').length;
    
    // Update summary cards if they exist
    const totalElement = document.getElementById('totalSubmissions');
    const pendingElement = document.getElementById('pendingReviews');
    const approvedElement = document.getElementById('approvedUpdates');
    const rejectedElement = document.getElementById('rejectedUpdates');
    
    if (totalElement) totalElement.textContent = totalSubmissions;
    if (pendingElement) pendingElement.textContent = pendingReviews;
    if (approvedElement) approvedElement.textContent = approvedUpdates;
    if (rejectedElement) rejectedElement.textContent = rejectedUpdates;
    
    if (projectUpdates.length === 0) {
      container.style.display = 'none';
      if (emptyHistory) emptyHistory.style.display = 'block';
      return;
    }
    
    container.style.display = 'block';
    if (emptyHistory) emptyHistory.style.display = 'none';
    
    // Sort updates by date (newest first)
    const sortedUpdates = [...projectUpdates].sort((a, b) => new Date(b.submittedAt) - new Date(a.submittedAt));
    
    container.innerHTML = sortedUpdates.map(submission => {
      const date = new Date(submission.submittedAt);
      const statusColors = {
        'pending_review': 'bg-yellow-100 border-yellow-300 text-yellow-800',
        'under_review': 'bg-blue-100 border-blue-300 text-blue-800',
        'approved': 'bg-green-100 border-green-300 text-green-800',
        'needs_revision': 'bg-orange-100 border-orange-300 text-orange-800',
        'rejected': 'bg-red-100 border-red-300 text-red-800'
      };
      
      const statusText = {
        'pending_review': 'Pending Review',
        'under_review': 'Under Review',
        'approved': 'Approved',
        'needs_revision': 'Needs Revision',
        'rejected': 'Rejected'
      };
      
      return `
        <div class="bg-white rounded-lg border border-gray-200 p-6 hover:shadow-md transition-shadow">
          <div class="flex items-center justify-between mb-4">
            <div class="flex items-center gap-3">
              <div class="w-10 h-10 bg-emerald-100 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-emerald-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <div>
                <h4 class="font-semibold text-gray-800">${submission.milestone?.title || 'Milestone Update'}</h4>
                <p class="text-sm text-gray-600">${date.toLocaleDateString()} at ${date.toLocaleTimeString()}</p>
              </div>
            </div>
            <span class="px-3 py-1 rounded-full text-sm font-medium border ${statusColors[submission.status] || statusColors['pending_review']}">
              ${statusText[submission.status] || 'Pending Review'}
            </span>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <label class="text-sm font-medium text-gray-600">Budget Used</label>
              <p class="text-lg font-semibold text-green-600">₱${parseFloat(submission.usedBudget || 0).toLocaleString()}</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">Budget Utilization</label>
              <p class="text-lg font-semibold text-blue-600">${submission.budgetUtilizationPercentage || 0}%</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">Milestone Weight</label>
              <p class="text-lg font-semibold text-purple-600">${submission.milestoneUtilizationPercentage || 0}%</p>
            </div>
          </div>
          
          ${submission.physicalProgressDescription ? `
            <div class="mb-4">
              <label class="text-sm font-medium text-gray-600">Progress Description</label>
              <p class="text-sm text-gray-700 mt-1">${submission.physicalProgressDescription.substring(0, 150)}${submission.physicalProgressDescription.length > 150 ? '...' : ''}</p>
            </div>
          ` : ''}
          
          ${submission.reviewNotes ? `
            <div class="bg-gray-50 rounded-lg p-3">
              <label class="text-sm font-medium text-gray-600">Review Notes</label>
              <p class="text-sm text-gray-700 mt-1">${submission.reviewNotes}</p>
            </div>
          ` : ''}
        </div>
             `;
     }).join('');
  }

  // Refresh submission history
  function refreshSubmissionHistory() {
    loadSubmissionHistory();
  }

  // ===== HORIZONTAL TIMELINE FUNCTIONS =====
  
  // Load timeline for the selected project
  async function loadModernTimeline(forceLoad = false) {
    if (!selectedProject) {
      console.log('No project selected for timeline');
      hideModernTimeline();
      return;
    }
    
    // Check if timeline section is visible
    const timelineSection = document.getElementById('timelineSection');
    const modernTimeline = document.getElementById('modernTimeline');
    if (!timelineSection || !modernTimeline) {
      console.log('⏸️ Timeline elements not found, skipping load');
      return;
    }
    
    // Check if section is expanded (unless forced)
    const isExpanded = timelineSection.classList.contains('expanded');
    if (!isExpanded && !forceLoad) {
      console.log('⏸️ Timeline section not expanded, skipping load');
      return;
    }
    
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('No token available for timeline');
        hideModernTimeline();
        return;
      }
      
      console.log('🚀 Loading modern timeline for project:', selectedProject.id);
      
      // Show loading state
      showTimelineLoading();
      
      const response = await fetch(`${API_URL}/projects/${selectedProject.id}/milestones`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.milestones && data.milestones.length > 0) {
          console.log('✅ Timeline milestones loaded:', data.milestones.length);
          
          // Process milestones with enhanced status detection
          const processedMilestones = processMilestonesWithStatus(data.milestones);
          
          console.log('📊 Processed milestones for timeline:', processedMilestones.map(m => ({
            title: m.title,
            status: m.status,
            isDelayed: m.isDelayed,
            dueDate: m.dueDate,
            overallProgress: m.overallProgress
          })));
          
          // Render modern timeline
          await renderModernTimeline(selectedProject, processedMilestones);
        } else {
          console.log('⚠️ No milestones found for project timeline');
          hideModernTimeline();
        }
      } else {
        console.error('❌ Failed to load milestones for timeline:', response.status);
        hideModernTimeline();
      }
    } catch (error) {
      console.error('💥 Error loading modern timeline:', error);
      hideModernTimeline();
    }
  }
  
  // Process milestones with enhanced status detection
  function processMilestonesWithStatus(milestones) {
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    return milestones.map(milestone => {
      let status = milestone.status || 'pending';
      
      // Enhanced delayed detection using lifecycle rules
      if (milestone.dueDate && status !== 'completed' && status !== 'under_approval' && status !== 'revision_request') {
        const milestoneDate = new Date(milestone.dueDate);
        milestoneDate.setHours(0, 0, 0, 0);
        
        if (milestoneDate < today && status === 'pending') {
          status = 'delayed';
          console.log(`🚨 Milestone "${milestone.title}" marked as delayed (due: ${milestone.dueDate})`);
        }
      }
      
      // Calculate overall milestone progress
      const timelineProgress = milestone.timelineProgress || 0;
      const budgetProgress = milestone.budgetProgress || 0;
      const physicalProgress = milestone.physicalProgress || 0;
      const overallProgress = (timelineProgress + budgetProgress + physicalProgress) / 3;
      
      return { 
        ...milestone, 
        status,
        overallProgress,
        isDelayed: status === 'delayed'
      };
    });
  }
  
  // Show timeline loading state
  function showTimelineLoading() {
    const loading = document.getElementById('timelineLoading');
    const timeline = document.getElementById('modernTimeline');
    
    if (loading) loading.classList.remove('hidden');
    if (timeline) timeline.classList.add('hidden');
  }
  
  // Hide timeline loading and show timeline
  function showModernTimelineContent() {
    const loading = document.getElementById('timelineLoading');
    const timeline = document.getElementById('modernTimeline');
    
    if (loading) loading.classList.add('hidden');
    if (timeline) timeline.classList.remove('hidden');
  }
  
  // Hide entire timeline section
  function hideModernTimeline() {
    const container = document.getElementById('modernTimelineContainer');
    if (container) {
      container.innerHTML = `
        <div class="flex items-center justify-center py-12 text-gray-500">
          <div class="text-center">
            <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <p class="font-medium">No timeline data available</p>
            <p class="text-sm">Select a project with milestones to view timeline</p>
          </div>
        </div>
      `;
    }
  }
  
  // Render modern timeline for a project
  async function renderModernTimeline(project, processedMilestones) {
    try {
      const startDateSpan = document.getElementById('timelineStartDate');
      const targetDateSpan = document.getElementById('timelineTargetDate');
      const actualDateSpan = document.getElementById('timelineActualDate');
      const expectedDaysSpan = document.getElementById('timelineExpectedDays');
      const milestonesContainer = document.getElementById('timelineMilestonesContainer');
      const progressLine = document.getElementById('progressLine');
      
      if (!startDateSpan || !targetDateSpan || !actualDateSpan || !expectedDaysSpan || !milestonesContainer || !progressLine) {
        console.error('Modern timeline elements not found');
        hideModernTimeline();
        return;
      }
    
      // Show timeline content
      showModernTimelineContent();
      
      // Update date labels
      if (project.startDate) {
        startDateSpan.textContent = new Date(project.startDate).toLocaleDateString();
      }
      if (project.targetCompletionDate || project.targetDateOfCompletion || project.endDate) {
        targetDateSpan.textContent = new Date(project.targetCompletionDate || project.targetDateOfCompletion || project.endDate).toLocaleDateString();
      }
      // Update actual completion date
      if (project.completionDate || project.actualCompletionDate) {
        actualDateSpan.textContent = new Date(project.completionDate || project.actualCompletionDate).toLocaleDateString();
      } else {
        actualDateSpan.textContent = '–';
      }
      // Update expected days
      if (project.expectedDaysOfCompletion) {
        expectedDaysSpan.textContent = `${project.expectedDaysOfCompletion} days`;
      } else {
        expectedDaysSpan.textContent = '–';
      }
      
      console.log('🎯 Rendering modern timeline:', {
        project: project.name,
        milestones: processedMilestones.length,
        delayed: processedMilestones.filter(m => m.isDelayed).length
      });
      
      // Clear existing milestones and percentage indicators
      milestonesContainer.innerHTML = '';
      const percentageContainer = document.getElementById('milestonePercentageIndicators');
      if (percentageContainer) {
        percentageContainer.innerHTML = '';
      }
      
      // Clear and prepare date ruler
      const dateRuler = document.getElementById('dateRuler');
      if (dateRuler) {
        dateRuler.innerHTML = '';
      }
      
      // Clear percentage ruler
      let percentageRuler = document.getElementById('percentageRuler');
      if (percentageRuler) {
        percentageRuler.innerHTML = '';
      }

      // Calculate optimal timeline width based on milestone spacing
      const minSpacing = 120; // Increased minimum spacing between milestone circles
      const totalMilestones = processedMilestones.length * 2; // Each milestone has start + end
      const baseWidth = 800; // Base minimum width
      
      // Calculate positions to check for clustering
      const clusterProjectStart = new Date(project.startDate);
      const clusterProjectEnd = new Date(project.endDate);
      const clusterTotalDuration = clusterProjectEnd - clusterProjectStart;
      
      let positions = [];
      processedMilestones.forEach((milestone, index) => {
        // Add due date position
        const dueDate = new Date(milestone.dueDate);
        const duePosition = ((dueDate - clusterProjectStart) / clusterTotalDuration) * 100;
        positions.push(Math.max(0, Math.min(100, duePosition)));
        
        // Add start date position if different
        let startDate = milestone.startDate;
        if (!startDate && index === 0) {
          startDate = project.startDate;
        } else if (!startDate && index > 0) {
          const previousDueDate = new Date(processedMilestones[index - 1].dueDate);
          previousDueDate.setDate(previousDueDate.getDate() + 1);
          startDate = previousDueDate.toISOString().split('T')[0];
        }
        
        if (startDate) {
          const startMilestoneDate = new Date(startDate);
          const startPosition = ((startMilestoneDate - clusterProjectStart) / clusterTotalDuration) * 100;
          positions.push(Math.max(0, Math.min(100, startPosition)));
        }
      });
      
      // Sort positions and check for clustering
      positions.sort((a, b) => a - b);
      let maxCluster = 1;
      let currentCluster = 1;
      let clusteredPairs = 0;
      
      for (let i = 1; i < positions.length; i++) {
        const gap = positions[i] - positions[i-1];
        if (gap < 10) { // Less than 10% apart (more aggressive clustering detection)
          currentCluster++;
          clusteredPairs++;
        } else {
          maxCluster = Math.max(maxCluster, currentCluster);
          currentCluster = 1;
        }
      }
      maxCluster = Math.max(maxCluster, currentCluster);
      
      // More aggressive expansion calculation
      const clusterMultiplier = Math.max(4, maxCluster * 3); // Even more aggressive multiplier
      const baseExpansion = clusteredPairs > 0 ? 800 : 400; // Always expand significantly, more if clustering
      const requiredWidth = Math.max(baseWidth + baseExpansion, totalMilestones * minSpacing * clusterMultiplier + 800);
      
      // Force minimum expansion for any project with multiple milestones
      const forcedMinWidth = processedMilestones.length > 1 ? 1600 : baseWidth;
      
             // Apply dynamic width to timeline container and related elements
       const timelineContainer = milestonesContainer.parentElement; // The h-20 container
       const timelineSection = timelineContainer ? timelineContainer.parentElement : null; // The bg-gradient container
       
             // Force expansion if clustering detected or multiple milestones
      const finalWidth = Math.max(requiredWidth, forcedMinWidth);
      if (finalWidth > baseWidth) {
                 console.log(`🚀 Expanding timeline due to clustering - Final Width: ${finalWidth}px`);
        
        // Apply to main timeline container
        if (timelineContainer) {
          timelineContainer.style.minWidth = `${finalWidth}px`;
          timelineContainer.style.width = `${finalWidth}px`;
        }
        
        // ONLY apply horizontal scrolling to the timeline content container
        // This keeps headers and legends fixed while allowing timeline content to scroll
        if (timelineSection) {
          timelineSection.style.overflowX = 'auto';
          timelineSection.style.overflowY = 'visible';
          // Don't set width on timelineSection - let it be the viewport
        }
         
         // Apply expanded width to ruler CONTAINERS but keep ruler content properly bounded
         if (dateRuler) {
           // The ruler container needs to match the full timeline width since markers use calc() positioning
           dateRuler.style.minWidth = `${finalWidth}px`;
           dateRuler.style.width = `${finalWidth}px`;
           if (dateRuler.parentElement) {
             dateRuler.parentElement.style.minWidth = `${finalWidth}px`;
             dateRuler.parentElement.style.width = `${finalWidth}px`;
           }
         }
         
         if (percentageRuler) {
           // The ruler container needs to match the full timeline width since markers use calc() positioning
           percentageRuler.style.minWidth = `${finalWidth}px`;
           percentageRuler.style.width = `${finalWidth}px`;
           if (percentageRuler.parentElement) {
             percentageRuler.parentElement.style.minWidth = `${finalWidth}px`;
             percentageRuler.parentElement.style.width = `${finalWidth}px`;
           }
         }
         
         if (percentageContainer) {
           percentageContainer.style.minWidth = `${finalWidth}px`;
           percentageContainer.style.width = `${finalWidth}px`;
         }
         
         // Adjust ruler lines to align with markers (add padding to match marker positioning)
         const allRulerLines = timelineSection?.querySelectorAll('.absolute.left-8.right-8, .absolute[style*="left: 0px"]');
         allRulerLines?.forEach(line => {
           line.style.width = `${finalWidth - 64}px`; // Account for 32px padding on each side
           line.style.right = 'auto';
           line.style.left = '32px'; // Add padding to align with markers
           line.classList.remove('left-8', 'right-8'); // Remove Tailwind padding classes
         });
         
         // Adjust progress line to align with markers (add padding)
         const progressLine = document.getElementById('progressLine');
         if (progressLine) {
           progressLine.style.left = '32px'; // Add padding to align with markers
           progressLine.style.right = 'auto';
           progressLine.style.maxWidth = `${finalWidth - 64}px`; // Account for padding
           progressLine.classList.remove('left-8'); // Remove Tailwind padding class
         }
        
        console.log(`📏 Timeline expansion analysis:`, {
          totalMilestones: totalMilestones,
          positions: positions,
          maxCluster: maxCluster,
          clusterMultiplier: clusterMultiplier,
          baseWidth: baseWidth,
          requiredWidth: requiredWidth,
          forcedMinWidth: forcedMinWidth,
          finalWidth: finalWidth,
          timelineContainer: !!timelineContainer,
          timelineSection: !!timelineSection
        });
      }
      
      if (!project.startDate || !project.endDate) {
        console.log('Project missing start or end date');
        hideModernTimeline();
        return;
      }
      
      // Calculate project timeline dates
      const projectStart = new Date(project.startDate);
      const projectEnd = new Date(project.endDate);
      const totalDuration = projectEnd - projectStart;
      
            // Calculate overall project progress
      const overallProgress = processedMilestones.length > 0 
        ? processedMilestones.reduce((sum, m) => sum + m.overallProgress, 0) / processedMilestones.length
        : 0;
      
      // Update project center info
      const projectNameDisplay = document.getElementById('projectNameDisplay');
      const projectProgressDisplay = document.getElementById('projectProgressDisplay');
      if (projectNameDisplay && projectProgressDisplay) {
        projectNameDisplay.textContent = project.name || project.title || 'Project';
        projectProgressDisplay.textContent = `${overallProgress.toFixed(1)}%`;
      }
      
             console.log('📊 Timeline calculations:', {
        totalDuration: totalDuration / (1000 * 60 * 60 * 24) + ' days',
        overallProgress: overallProgress.toFixed(1) + '%',
        processedMilestones: processedMilestones.length
      });
       
       // Generate date ruler above timeline
       if (dateRuler) {
         generateDateRuler(projectStart, projectEnd, dateRuler, finalWidth);
       }
       
       // Generate percentage ruler below timeline
       percentageRuler = document.getElementById('percentageRuler');
       if (percentageRuler) {
         generatePercentageRuler(percentageRuler, finalWidth);
       }
       
       // Generate vertical connectors between all three ruler lines
       const verticalConnectors = document.getElementById('verticalConnectors');
       if (verticalConnectors) {
         generateVerticalConnectors(verticalConnectors, finalWidth);
       }
       
       // Animate progress line
       setTimeout(() => {
         progressLine.style.width = `${overallProgress}%`;
       }, 500);
       
       // Render milestone dots with animations (both start and due dates)
       processedMilestones.forEach((milestone, index) => {
         // Create due date dot (existing logic)
         if (milestone.dueDate) {
           const milestoneDate = new Date(milestone.dueDate);
           const position = ((milestoneDate - projectStart) / totalDuration) * 100;
           const clampedPosition = Math.max(0, Math.min(100, position)); // Allow full range from 0% to 100%
           
           console.log(`🎯 Creating modern milestone: ${milestone.title}`, {
             calculatedPosition: clampedPosition.toFixed(1) + '%',
             status: milestone.status,
             progress: milestone.overallProgress.toFixed(1) + '%',
             delayed: milestone.isDelayed
           });
           
                     // Create milestone dot
          const milestoneElement = document.createElement('div');
          milestoneElement.className = `timeline-milestone ${milestone.status} cursor-pointer transition-all duration-300 hover:scale-125`;
          // Position milestone to align with the ruler line (left-8 right-8) using precise position
          milestoneElement.style.left = `calc(32px + ${clampedPosition}% * (100% - 64px) / 100%)`;
          milestoneElement.style.transform = 'translateX(-50%) translateY(-50%)';
          milestoneElement.setAttribute('data-milestone-id', milestone.id);
          milestoneElement.setAttribute('data-milestone', JSON.stringify(milestone));
           
           // Add progress percentage as CSS custom property for animations
           milestoneElement.style.setProperty('--progress', milestone.overallProgress);
           
           // Add modern hover and click events
           milestoneElement.addEventListener('mouseenter', (e) => showModernTooltip(e, milestone));
           milestoneElement.addEventListener('mouseleave', hideModernTooltip);
           milestoneElement.addEventListener('click', (e) => openMilestoneDrawer(milestone));
           
           // Ensure milestone is visible and properly positioned
           milestoneElement.style.opacity = '1';
           milestoneElement.style.transform = 'translateY(-50%) translateX(-50%) scale(1)';
           milestoneElement.style.zIndex = '20';
           milestoneElement.style.top = '50%';
           milestoneElement.style.position = 'absolute';
           milestoneElement.style.display = 'block';
           milestoneElement.style.visibility = 'visible';
           
           // Force milestone styling to ensure visibility
           milestoneElement.style.width = '32px';
           milestoneElement.style.height = '32px';
           milestoneElement.style.borderRadius = '50%';
           milestoneElement.style.border = '4px solid white';
           
           // Apply status-specific styling
           switch (milestone.status) {
             case 'completed':
               milestoneElement.style.background = 'linear-gradient(135deg, #10b981, #059669)';
               milestoneElement.style.boxShadow = '0 6px 20px rgba(16, 185, 129, 0.3), 0 0 0 3px rgba(16, 185, 129, 0.2)';
               break;
             case 'ongoing':
               milestoneElement.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
               milestoneElement.style.boxShadow = '0 6px 20px rgba(59, 130, 246, 0.3), 0 0 0 3px rgba(59, 130, 246, 0.2)';
               break;
             case 'pending':
               milestoneElement.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
               milestoneElement.style.boxShadow = '0 6px 20px rgba(245, 158, 11, 0.3), 0 0 0 3px rgba(245, 158, 11, 0.2)';
               break;
             case 'delayed':
               milestoneElement.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
               milestoneElement.style.boxShadow = '0 6px 20px rgba(239, 68, 68, 0.4), 0 0 0 3px rgba(239, 68, 68, 0.3)';
               break;
             default:
               milestoneElement.style.background = 'linear-gradient(135deg, #6b7280, #4b5563)';
               milestoneElement.style.boxShadow = '0 6px 20px rgba(107, 114, 128, 0.3), 0 0 0 3px rgba(107, 114, 128, 0.2)';
           }
           
           // Create enhanced percentage indicator for this milestone
           const percentageIndicator = document.createElement('div');
           percentageIndicator.className = 'milestone-percentage-indicator';
           
           // Create the container with tick mark
           const indicatorContainer = document.createElement('div');
           indicatorContainer.style.position = 'absolute';
           // Position indicator using calc() to align with ruler system (accounting for padding)
           indicatorContainer.style.left = `calc(32px + ${clampedPosition}% * (100% - 64px) / 100%)`;
           indicatorContainer.style.transform = 'translateX(-50%)';
           indicatorContainer.style.top = '0';
           indicatorContainer.style.display = 'flex';
           indicatorContainer.style.flexDirection = 'column';
           indicatorContainer.style.alignItems = 'center';
           indicatorContainer.style.zIndex = '15';
           
           // Create tick mark
           const tickMark = document.createElement('div');
           tickMark.style.width = '2px';
           tickMark.style.height = '8px';
           tickMark.style.marginBottom = '2px';
           
           // Set tick color based on milestone status
           switch (milestone.status) {
             case 'completed': tickMark.style.background = '#10b981'; break;
             case 'ongoing': tickMark.style.background = '#3b82f6'; break;
             case 'pending': tickMark.style.background = '#f59e0b'; break;
             case 'delayed': tickMark.style.background = '#ef4444'; break;
             default: tickMark.style.background = '#6b7280';
           }
           
           // Create percentage label
           const percentageLabel = document.createElement('span');
           percentageLabel.style.fontSize = '10px';
           percentageLabel.style.fontWeight = '700';
           percentageLabel.style.color = '#1f2937';
           percentageLabel.style.backgroundColor = 'white';
           percentageLabel.style.padding = '1px 4px';
           percentageLabel.style.borderRadius = '3px';
           percentageLabel.style.border = '1px solid #e5e7eb';
           percentageLabel.style.boxShadow = '0 1px 2px rgba(0,0,0,0.05)';
           percentageLabel.style.whiteSpace = 'nowrap';
           percentageLabel.textContent = `${Math.round(clampedPosition)}%`;
           
           // Assemble the indicator
           indicatorContainer.appendChild(tickMark);
           indicatorContainer.appendChild(percentageLabel);
           percentageIndicator.appendChild(indicatorContainer);
           
           // Add to percentage indicators container
           const percentageContainer = document.getElementById('milestonePercentageIndicators');
           if (percentageContainer) {
             percentageContainer.appendChild(percentageIndicator);
           }
           
           milestonesContainer.appendChild(milestoneElement);
           
           console.log(`✅ Milestone dot created and added to DOM:`, {
             title: milestone.title,
             position: clampedPosition + '%',
             status: milestone.status,
             element: milestoneElement
           });
           
         } else {
           console.warn(`⚠️ Milestone ${milestone.title} has no due date`);
         }
         
         // Create start date dot (new logic)
         // Generate start date if not provided (assume it starts at project start or previous milestone end)
         let startDate = milestone.startDate;
         
         console.log(`🎯 Original milestone data for "${milestone.title}":`, {
           hasStartDate: !!milestone.startDate,
           originalStartDate: milestone.startDate,
           index: index
         });
         
         if (!startDate && index === 0) {
           // First milestone starts at project start
           const projectStartDate = new Date(project.startDate);
           startDate = projectStartDate.toISOString().split('T')[0];
           console.log(`📅 First milestone start date set to project start:`, startDate);
         } else if (!startDate && index > 0) {
           // Subsequent milestones start when previous milestone should end (add 1 day)
           const previousDueDate = new Date(processedMilestones[index - 1].dueDate);
           previousDueDate.setDate(previousDueDate.getDate() + 1);
           startDate = previousDueDate.toISOString().split('T')[0];
           console.log(`📅 Milestone ${index} start date set to day after previous due date:`, startDate, 'Previous milestone:', processedMilestones[index - 1].title);
         }
         
         console.log(`📊 Start date calculation for "${milestone.title}":`, {
           index: index,
           originalStartDate: milestone.startDate,
           generatedStartDate: startDate,
           projectStart: project.startDate,
           projectEnd: project.endDate
         });
         
         if (startDate) {
           const startMilestoneDate = new Date(startDate);
           const startPosition = ((startMilestoneDate - projectStart) / totalDuration) * 100;
           
           console.log(`🔍 Date parsing debug for "${milestone.title}" start date:`, {
             milestoneIndex: index,
             originalStartDate: startDate,
             parsedStartMilestoneDate: startMilestoneDate.toISOString(),
             projectStartParsed: projectStart.toISOString(),
             projectEndParsed: project.endDate,
             timeDifference: startMilestoneDate - projectStart,
             totalDuration: totalDuration,
             totalDurationDays: totalDuration / (1000 * 60 * 60 * 24),
             rawPosition: startPosition,
             expectedPosition: index === 0 ? '0%' : '~56%'
           });
           const startClampedPosition = Math.max(0, Math.min(100, startPosition)); // Allow 0% for start dates
           
           console.log(`🎯 Creating start date milestone: ${milestone.title}`, {
             startMilestoneDate: startMilestoneDate.toISOString(),
             projectStart: projectStart.toISOString(), 
             totalDuration: totalDuration,
             rawPosition: startPosition,
             calculatedPosition: startClampedPosition.toFixed(1) + '%',
             status: milestone.status,
             startDate: startDate
           });
           
                     // Create start date milestone dot
          const startMilestoneElement = document.createElement('div');
          startMilestoneElement.className = `timeline-milestone ${milestone.status} start-date cursor-pointer transition-all duration-300 hover:scale-125`;
          // Position start milestone to align with the ruler line (left-8 right-8) using precise position
          startMilestoneElement.style.position = 'absolute';
          startMilestoneElement.style.left = `calc(32px + ${startClampedPosition}% * (100% - 64px) / 100%)`;
          startMilestoneElement.style.transform = 'translateX(-50%) translateY(-50%)';
          startMilestoneElement.style.top = '50%';
          startMilestoneElement.style.marginTop = '0'; // Remove margin since we're using translateY(-50%)
           
           console.log(`🎨 Start date milestone positioned:`, {
             title: milestone.title,
             position: Math.round(startClampedPosition) + '%',
             status: milestone.status
           });
           startMilestoneElement.setAttribute('data-milestone-id', milestone.id + '-start');
           startMilestoneElement.setAttribute('data-milestone', JSON.stringify({...milestone, isStartDate: true, startDate: startDate}));
           
           // Add progress percentage as CSS custom property for animations
           startMilestoneElement.style.setProperty('--progress', milestone.overallProgress);
           
           // Add modern hover and click events for start date
           startMilestoneElement.addEventListener('mouseenter', (e) => showModernTooltip(e, {...milestone, isStartDate: true, startDate: startDate}));
           startMilestoneElement.addEventListener('mouseleave', () => hideModernTooltip());
           startMilestoneElement.addEventListener('click', (e) => {
             e.stopPropagation();
             console.log('Start date milestone clicked:', milestone.title);
           });
           
           // Force inline styles for visibility (same as due date)
           switch (milestone.status) {
             case 'completed':
               startMilestoneElement.style.background = 'linear-gradient(135deg, #10b981, #059669)';
               startMilestoneElement.style.boxShadow = '0 6px 20px rgba(16, 185, 129, 0.4), 0 0 0 3px rgba(16, 185, 129, 0.3)';
               break;
             case 'ongoing':
               startMilestoneElement.style.background = 'linear-gradient(135deg, #3b82f6, #2563eb)';
               startMilestoneElement.style.boxShadow = '0 6px 20px rgba(59, 130, 246, 0.4), 0 0 0 3px rgba(59, 130, 246, 0.3)';
               break;
             case 'pending':
               startMilestoneElement.style.background = 'linear-gradient(135deg, #f59e0b, #d97706)';
               startMilestoneElement.style.boxShadow = '0 6px 20px rgba(245, 158, 11, 0.4), 0 0 0 3px rgba(245, 158, 11, 0.3)';
               break;
             case 'delayed':
               startMilestoneElement.style.background = 'linear-gradient(135deg, #ef4444, #dc2626)';
               startMilestoneElement.style.boxShadow = '0 6px 20px rgba(239, 68, 68, 0.4), 0 0 0 3px rgba(239, 68, 68, 0.3)';
               break;
             default:
               startMilestoneElement.style.background = 'linear-gradient(135deg, #6b7280, #4b5563)';
               startMilestoneElement.style.boxShadow = '0 6px 20px rgba(107, 114, 128, 0.3), 0 0 0 3px rgba(107, 114, 128, 0.2)';
           }
           
           // Force visibility styles (same as due date)
           startMilestoneElement.style.width = '32px';
           startMilestoneElement.style.height = '32px';
           startMilestoneElement.style.borderRadius = '50%';
           startMilestoneElement.style.border = '4px solid white';
           startMilestoneElement.style.display = 'block';
           startMilestoneElement.style.visibility = 'visible';
           
           // Remove temporary visual debugging - positioning is now working
           
           // Create start date percentage indicator
           const startPercentageIndicator = document.createElement('div');
           startPercentageIndicator.className = 'milestone-percentage-indicator start-date';
           
           // Create the container with tick mark for start date
           const startIndicatorContainer = document.createElement('div');
           startIndicatorContainer.style.position = 'absolute';
           // Position start indicator to align with the ruler line (left-8 right-8) using precise position
           startIndicatorContainer.style.left = `calc(32px + ${startClampedPosition}% * (100% - 64px) / 100%)`;
           startIndicatorContainer.style.transform = 'translateX(-50%)';
           startIndicatorContainer.style.top = '0';
           startIndicatorContainer.style.display = 'flex';
           startIndicatorContainer.style.flexDirection = 'column';
           startIndicatorContainer.style.alignItems = 'center';
           startIndicatorContainer.style.zIndex = '15';
           
           // Create tick mark for start date
           const startTickMark = document.createElement('div');
           startTickMark.style.width = '2px';
           startTickMark.style.height = '8px';
           startTickMark.style.marginBottom = '2px';
           
           // Set tick color based on milestone status (same as due date)
           switch (milestone.status) {
             case 'completed': startTickMark.style.background = '#10b981'; break;
             case 'ongoing': startTickMark.style.background = '#3b82f6'; break;
             case 'pending': startTickMark.style.background = '#f59e0b'; break;
             case 'delayed': startTickMark.style.background = '#ef4444'; break;
             default: startTickMark.style.background = '#6b7280';
           }
           
           // Create percentage label for start date
           const startPercentageLabel = document.createElement('span');
           startPercentageLabel.style.fontSize = '9px';
           startPercentageLabel.style.fontWeight = '500';
           startPercentageLabel.style.color = '#6b7280';
           startPercentageLabel.style.backgroundColor = '#f9fafb';
           startPercentageLabel.style.padding = '1px 3px';
           startPercentageLabel.style.borderRadius = '3px';
           startPercentageLabel.style.border = '1px solid #e5e7eb';
           startPercentageLabel.style.boxShadow = '0 1px 2px rgba(0,0,0,0.05)';
           startPercentageLabel.style.whiteSpace = 'nowrap';
           startPercentageLabel.textContent = `${Math.round(startClampedPosition)}%`;
           
           // Assemble the start date indicator
           startIndicatorContainer.appendChild(startTickMark);
           startIndicatorContainer.appendChild(startPercentageLabel);
           startPercentageIndicator.appendChild(startIndicatorContainer);
           
           // Add start date indicator to percentage indicators container
           const percentageContainer = document.getElementById('milestonePercentageIndicators');
           if (percentageContainer) {
             percentageContainer.appendChild(startPercentageIndicator);
           }
           
           // Add start date milestone to timeline

           milestonesContainer.appendChild(startMilestoneElement);
           
           console.log(`✅ Start date milestone dot created and added to DOM:`, {
             title: milestone.title,
             position: startClampedPosition + '%',
             status: milestone.status,
             startDate: startDate,
             element: startMilestoneElement
           });
           

           
         } else {
           console.warn(`⚠️ Milestone ${milestone.title} has no start date`);
         }
       });
       
       console.log('✅ Modern timeline rendered successfully!');
       
    } catch (error) {
      console.error('💥 Error rendering modern timeline:', error);
      hideModernTimeline();
    }
  }
  
  // Generate date ruler above timeline with 5-day intervals
  function generateDateRuler(projectStart, projectEnd, dateRuler, finalWidth) {
    // Safety check for finalWidth
    if (!finalWidth || isNaN(finalWidth) || finalWidth < 800) {
      finalWidth = 800; // Fallback to base width
    }
    
    const totalDuration = projectEnd - projectStart;
    const totalDays = Math.ceil(totalDuration / (1000 * 60 * 60 * 24));
    
    console.log('📅 Generating date ruler with 5-day intervals:', {
      start: projectStart.toLocaleDateString(),
      end: projectEnd.toLocaleDateString(),
      totalDays: totalDays
    });
    
    const dateMarkers = [];
    
    // Generate markers every 5 days
    for (let day = 0; day <= totalDays; day += 5) {
      const currentDate = new Date(projectStart.getTime() + (day * 24 * 60 * 60 * 1000));
      const position = (day / totalDays) * 100;
      
      // Determine if this is a key marker (start, end, or every 10 days)
      const isKey = day === 0 || day === totalDays || day % 10 === 0;
      
      dateMarkers.push({
        position: Math.min(position, 100), // Ensure we don't exceed 100%
        date: currentDate,
        isKey: isKey,
        day: day
      });
    }
    
    // Ensure we always have the end date at exactly 100%
    const lastMarker = dateMarkers[dateMarkers.length - 1];
    if (lastMarker.position < 100) {
      dateMarkers.push({
        position: 100,
        date: projectEnd,
        isKey: true,
        day: totalDays
      });
    }
    
    dateMarkers.forEach(marker => {
      const dateMarker = document.createElement('div');
      dateMarker.style.position = 'absolute';
      // Position date markers to align with the ruler line (left-8 right-8)
      dateMarker.style.left = `calc(32px + ${marker.position}% * (100% - 64px) / 100%)`;
      
      if (marker.position === 0 || marker.position === 100) {
        console.log(`🔍 BOUNDARY DATE: ${marker.date.toLocaleDateString()} at ${marker.position}%`);
      } else {
        console.log(`📅 Date marker ${marker.date.toLocaleDateString()} at ${marker.position}%`);
      }
      dateMarker.style.transform = 'translateX(-50%)';
      dateMarker.style.display = 'flex';
      dateMarker.style.flexDirection = 'column';
      dateMarker.style.alignItems = 'center';
      dateMarker.style.bottom = '0';
      
      // Create date label
      const dateLabel = document.createElement('div');
      dateLabel.style.fontSize = marker.isKey ? '10px' : '9px';
      dateLabel.style.fontWeight = marker.isKey ? '600' : '500';
      dateLabel.style.color = marker.isKey ? '#1f2937' : '#6b7280';
      dateLabel.style.backgroundColor = 'white';
      dateLabel.style.padding = marker.isKey ? '2px 6px' : '1px 4px';
      dateLabel.style.borderRadius = '4px';
      dateLabel.style.border = marker.isKey ? '1px solid #10b981' : '1px solid #e5e7eb';
      dateLabel.style.boxShadow = marker.isKey ? '0 1px 3px rgba(16, 185, 129, 0.1)' : '0 1px 2px rgba(0,0,0,0.05)';
      dateLabel.style.whiteSpace = 'nowrap';
      
      // Format date - show month/day for key markers, just day for others
      if (marker.isKey) {
        dateLabel.textContent = marker.date.toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric'
        });
      } else {
        dateLabel.textContent = marker.date.getDate().toString();
      }
      
      // Add connecting line (ruler stamp)  
      const connector = document.createElement('div');
      connector.style.width = '1px';
      connector.style.height = marker.isKey ? '8px' : '6px';
      connector.style.backgroundColor = marker.isKey ? '#10b981' : '#d1d5db';
      connector.style.marginTop = '2px';
      
      dateMarker.appendChild(dateLabel);
      dateMarker.appendChild(connector);
      dateRuler.appendChild(dateMarker);
    });
  }
  
  // Generate percentage ruler with 5% intervals
  function generatePercentageRuler(percentageRuler, finalWidth) {
    // Safety check for finalWidth
    if (!finalWidth || isNaN(finalWidth) || finalWidth < 800) {
      finalWidth = 800; // Fallback to base width
    }
    
    percentageRuler.innerHTML = '';
    
    console.log('📊 Generating percentage ruler with 5% intervals');
    
    // Generate markers every 5%
    for (let percent = 0; percent <= 100; percent += 5) {
      const percentMarker = document.createElement('div');
      percentMarker.style.position = 'absolute';
      
      // Position markers to align with the ruler line (left-8 right-8)
      // 0% should be at left-8 (32px), 100% should be at right-8 (container width - 32px)
      // So: position = 32px + (percent/100) * (container width - 64px)
      percentMarker.style.left = `calc(32px + ${percent}% * (100% - 64px) / 100%)`;
      percentMarker.style.transform = 'translateX(-50%)';
      
      if (percent === 0 || percent === 100) {
        console.log(`🔍 BOUNDARY MARKER: ${percent}% positioned at ${percent}%`);
      } else {
        console.log(`📊 Percent marker ${percent}%`);
      }
      percentMarker.style.display = 'flex';
      percentMarker.style.flexDirection = 'column';
      percentMarker.style.alignItems = 'center';
      percentMarker.style.top = '0';
      
      // Determine if this is a key marker (0%, 25%, 50%, 75%, 100%)
      const isKey = percent === 0 || percent === 25 || percent === 50 || percent === 75 || percent === 100;
      const isMajor = percent % 10 === 0; // Every 10%
      
      // Create tick mark (ruler stamp)
      const tick = document.createElement('div');
      tick.style.width = '1px';
      tick.style.marginBottom = '2px';
      
      if (isKey) {
        tick.style.height = '8px';
        tick.style.backgroundColor = percent === 50 ? '#10b981' : '#6b7280';
      } else if (isMajor) {
        tick.style.height = '6px';
        tick.style.backgroundColor = '#9ca3af';
      } else {
        tick.style.height = '4px';
        tick.style.backgroundColor = '#d1d5db';
      }
      
      // Create percentage label
      const label = document.createElement('span');
      label.style.whiteSpace = 'nowrap';
      
      if (isKey) {
        label.style.fontSize = '11px';
        label.style.fontWeight = '600';
        label.style.color = percent === 50 ? '#059669' : '#374151';
        label.style.backgroundColor = percent === 50 ? '#ecfdf5' : 'white';
        label.style.padding = '2px 6px';
        label.style.borderRadius = '4px';
        label.style.border = percent === 50 ? '1px solid #10b981' : '1px solid #d1d5db';
        label.style.boxShadow = percent === 50 ? '0 1px 3px rgba(16, 185, 129, 0.1)' : '0 1px 2px rgba(0,0,0,0.05)';
      } else if (isMajor) {
        label.style.fontSize = '10px';
        label.style.fontWeight = '500';
        label.style.color = '#6b7280';
        label.style.backgroundColor = '#f9fafb';
        label.style.padding = '1px 4px';
        label.style.borderRadius = '3px';
        label.style.border = '1px solid #e5e7eb';
      } else {
        label.style.fontSize = '9px';
        label.style.fontWeight = '400';
        label.style.color = '#9ca3af';
        label.style.backgroundColor = 'transparent';
      }
      
      label.textContent = `${percent}%`;
      
      percentMarker.appendChild(tick);
      percentMarker.appendChild(label);
      percentageRuler.appendChild(percentMarker);
    }
  }
  
  // Generate vertical connectors between all three ruler lines - properly aligned
  function generateVerticalConnectors(verticalConnectors, finalWidth) {
    // Safety check for finalWidth
    if (!finalWidth || isNaN(finalWidth) || finalWidth < 800) {
      finalWidth = 800; // Fallback to base width
    }
    
    verticalConnectors.innerHTML = '';
    
    console.log('🔗 Generating vertical connectors with proper alignment');
    
    // Generate connectors ONLY at key positions that match the ruler system
    const keyPositions = [0, 25, 50, 75, 100];
    
    keyPositions.forEach(percent => {
      const connector = document.createElement('div');
      connector.style.position = 'absolute';
      // Position connectors to align with the ruler line (left-8 right-8)
      connector.style.left = `calc(32px + ${percent}% * (100% - 64px) / 100%)`;
      connector.style.transform = 'translateX(-50%)';
      connector.style.width = '1px';
      connector.style.top = '-32px'; // Start at date ruler line
      connector.style.bottom = '-32px'; // End at percentage ruler line
      connector.style.pointerEvents = 'none';
      
      // Clean visual hierarchy
      if (percent === 50) {
        // Center - EIU green
        connector.style.backgroundColor = '#10b981';
        connector.style.opacity = '0.6';
        connector.style.width = '1px';
      } else if (percent === 0 || percent === 100) {
        // Endpoints - gray
        connector.style.backgroundColor = '#6b7280';
        connector.style.opacity = '0.4';
      } else {
        // Quarter marks - light gray
        connector.style.backgroundColor = '#9ca3af';
        connector.style.opacity = '0.3';
      }
      
      verticalConnectors.appendChild(connector);
    });
  }
  
  // Modern tooltip system with smart positioning
  function showModernTooltip(event, milestone) {
    // Remove any existing tooltip
    hideModernTooltip();
    
    const tooltip = document.createElement('div');
    tooltip.className = 'timeline-tooltip';
    tooltip.id = 'modern-timeline-tooltip';
    
    // Apply EIU clean white theme with green accents
    tooltip.style.backgroundColor = 'white';
    tooltip.style.color = '#1f2937';
    tooltip.style.border = '1px solid #d1d5db';
    tooltip.style.borderRadius = '12px';
    tooltip.style.padding = '16px 20px';
    tooltip.style.fontSize = '14px';
    tooltip.style.lineHeight = '1.5';
    tooltip.style.boxShadow = '0 20px 25px -5px rgba(0,0,0,0.1), 0 10px 10px -5px rgba(0,0,0,0.04), 0 0 0 1px rgba(16, 185, 129, 0.1)';
    tooltip.style.zIndex = '1000';
    tooltip.style.minWidth = '280px';
    tooltip.style.maxWidth = '360px';
    tooltip.style.position = 'fixed';
    tooltip.style.fontFamily = '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif';
    tooltip.style.backdropFilter = 'blur(10px)';
    tooltip.style.background = 'rgba(255, 255, 255, 0.95)';
    
    // Calculate division progress
    const timelineProgress = milestone.timelineProgress || 0;
    const budgetProgress = milestone.budgetProgress || 0;
    const physicalProgress = milestone.physicalProgress || 0;
    
    // Determine delay reason if delayed
    let delayReason = '';
    if (milestone.status === 'delayed') {
      const dueDate = new Date(milestone.dueDate);
      const today = new Date();
      const daysOverdue = Math.ceil((today - dueDate) / (1000 * 60 * 60 * 24));
      delayReason = `<div class="mt-3 p-3 bg-red-50 border border-red-200 rounded-lg">
        <div class="flex items-center gap-2 text-red-800 font-semibold text-sm mb-1">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
          </svg>
          Milestone Overdue
        </div>
        <div class="text-red-700 text-xs">
          <div>Overdue by ${daysOverdue} day${daysOverdue !== 1 ? 's' : ''}</div>
          <div>Due: ${dueDate.toLocaleDateString()}</div>
          <div>Reason: Milestone not updated on time</div>
        </div>
      </div>`;
    }
    
    // Calculate professional date and time information like Cursor
    const isStartDate = milestone.isStartDate || false;
    const relevantDate = isStartDate 
      ? (milestone.startDate ? new Date(milestone.startDate) : null)
      : (milestone.dueDate ? new Date(milestone.dueDate) : null);
    const today = new Date();
    const overallProgress = (timelineProgress + budgetProgress + physicalProgress) / 3;
    
    let timeInfo = '';
    let statusColor = '#6b7280';
    
    if (relevantDate) {
      const diffTime = relevantDate - today;
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
      
      if (milestone.status === 'delayed') {
        timeInfo = `Overdue by ${Math.abs(diffDays)} day${Math.abs(diffDays) !== 1 ? 's' : ''}`;
        statusColor = '#ef4444';
      } else if (diffDays < 0) {
        timeInfo = `Due ${Math.abs(diffDays)} day${Math.abs(diffDays) !== 1 ? 's' : ''} ago`;
        statusColor = '#ef4444';
      } else if (diffDays === 0) {
        timeInfo = 'Due today';
        statusColor = '#f59e0b';
      } else if (diffDays === 1) {
        timeInfo = 'Due tomorrow';
        statusColor = '#f59e0b';
      } else if (diffDays <= 7) {
        timeInfo = `Due in ${diffDays} day${diffDays !== 1 ? 's' : ''}`;
        statusColor = '#f59e0b';
      } else {
        timeInfo = `Due in ${diffDays} day${diffDays !== 1 ? 's' : ''}`;
        statusColor = '#10b981';
      }
    }
    
    // EIU status badge colors (clean white theme with green accents)
    let statusBadgeColor = '';
    switch (milestone.status) {
      case 'completed': statusBadgeColor = 'background: linear-gradient(135deg, #10b981, #059669); color: white; box-shadow: 0 2px 4px rgba(16, 185, 129, 0.3);'; break;
      case 'ongoing': statusBadgeColor = 'background: linear-gradient(135deg, #3b82f6, #2563eb); color: white; box-shadow: 0 2px 4px rgba(59, 130, 246, 0.3);'; break;
      case 'pending': statusBadgeColor = 'background: linear-gradient(135deg, #f59e0b, #d97706); color: white; box-shadow: 0 2px 4px rgba(245, 158, 11, 0.3);'; break;
      case 'delayed': statusBadgeColor = 'background: linear-gradient(135deg, #ef4444, #dc2626); color: white; box-shadow: 0 2px 4px rgba(239, 68, 68, 0.3);'; break;
      default: statusBadgeColor = 'background: linear-gradient(135deg, #6b7280, #4b5563); color: white; box-shadow: 0 2px 4px rgba(107, 114, 128, 0.3);';
    }
    
    tooltip.innerHTML = `
      <div style="font-weight: 700; margin-bottom: 10px; color: #1f2937; border-bottom: 2px solid #10b981; padding-bottom: 8px; font-size: 16px;">
        ${milestone.title}
      </div>
      <div style="color: #6b7280; font-size: 12px; margin-bottom: 8px; font-weight: 400; line-height: 1.4;">
        ${milestone.description || 'No description available'}
      </div>
      <div style="color: #6b7280; font-size: 12px; margin-bottom: 6px; font-weight: 500;">
        ${isStartDate ? '🚀' : '📅'} ${isStartDate ? 'Start Date' : 'Due Date'}: ${relevantDate ? relevantDate.toLocaleDateString('en-US', { 
          weekday: 'short', 
          year: 'numeric', 
          month: 'short', 
          day: 'numeric' 
        }) : `No ${isStartDate ? 'start' : 'due'} date`}
      </div>
      <div style="display: inline-block; padding: 4px 10px; border-radius: 6px; font-size: 11px; font-weight: 700; text-transform: uppercase; margin-bottom: 10px; ${statusBadgeColor}">
        ${milestone.status.replace('_', ' ')}
      </div>
      ${timeInfo ? `<div style="color: ${statusColor}; font-size: 12px; margin-bottom: 10px; font-weight: 600; padding: 6px 10px; background: ${statusColor === '#ef4444' ? 'rgba(239, 68, 68, 0.1)' : 'rgba(245, 158, 11, 0.1)'}; border-radius: 6px; border-left: 3px solid ${statusColor};">${timeInfo}</div>` : ''}
      
      <div style="background: #f9fafb; padding: 12px; border-radius: 8px; margin-bottom: 8px;">
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 6px;">
          <span style="color: #374151; font-weight: 600; font-size: 12px;">📊 Overall Progress:</span>
          <span style="color: #10b981; font-weight: 700; font-size: 14px;">${overallProgress.toFixed(1)}%</span>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 4px;">
          <span style="color: #6b7280; font-size: 11px;">⏱️ Timeline:</span>
          <span style="color: #1f2937; font-weight: 600; font-size: 12px;">${timelineProgress.toFixed(1)}%</span>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 4px;">
          <span style="color: #6b7280; font-size: 11px;">💰 Budget:</span>
          <span style="color: #1f2937; font-weight: 600; font-size: 12px;">${budgetProgress.toFixed(1)}%</span>
        </div>
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <span style="color: #6b7280; font-size: 11px;">🏗️ Physical:</span>
          <span style="color: #1f2937; font-weight: 600; font-size: 12px;">${physicalProgress.toFixed(1)}%</span>
        </div>
      </div>
      
      ${milestone.plannedBudget ? `
      <div style="margin-top: 10px; padding-top: 10px; border-top: 1px solid #e5e7eb;">
        <div style="display: flex; justify-content: space-between; align-items: center;">
          <span style="color: #374151; font-weight: 600; font-size: 12px;">💵 Budget:</span>
          <span style="color: #10b981; font-weight: 700; font-size: 13px;">₱${parseFloat(milestone.plannedBudget).toLocaleString()}</span>
        </div>
      </div>
      ` : ''}
      
      <div style="margin-top: 12px; padding-top: 10px; border-top: 1px solid #e5e7eb; font-size: 11px; color: #9ca3af; text-align: center; font-style: italic;">
        🖱️ Click for detailed view
      </div>
    `;
    
    document.body.appendChild(tooltip);
    
    // Smart positioning with viewport boundary detection
    positionTooltip(event.target, tooltip);
    
    setTimeout(() => {
      tooltip.classList.add('show');
      console.log('🔍 Tooltip final state:', {
        left: tooltip.style.left,
        top: tooltip.style.top,
        opacity: getComputedStyle(tooltip).opacity,
        zIndex: getComputedStyle(tooltip).zIndex,
        display: getComputedStyle(tooltip).display,
        visibility: getComputedStyle(tooltip).visibility
      });
    }, 10);
  }
  
  // Smart tooltip positioning
  function positionTooltip(target, tooltip) {
    const rect = target.getBoundingClientRect();
    const tooltipRect = tooltip.getBoundingClientRect();
    const viewport = {
      width: window.innerWidth,
      height: window.innerHeight
    };
    
    console.log('📏 Positioning calculations:', {
      targetRect: rect,
      tooltipRect: tooltipRect,
      viewport: viewport
    });
    
    let left = rect.left + rect.width / 2 - tooltipRect.width / 2;
    let top = rect.top - tooltipRect.height - 12;
    
    console.log('📍 Initial position:', { left, top });
    
    // Horizontal boundary check
    if (left < 10) {
      left = 10;
      console.log('⬅️ Adjusted left boundary to:', left);
    } else if (left + tooltipRect.width > viewport.width - 10) {
      left = viewport.width - tooltipRect.width - 10;
      console.log('➡️ Adjusted right boundary to:', left);
    }
    
    // Vertical boundary check - flip to bottom if needed
    if (top < 10) {
      top = rect.bottom + 12;
      tooltip.classList.add('top');
      console.log('⬇️ Flipped to bottom, new top:', top);
    }
    
    console.log('✅ Final position:', { left, top });
    tooltip.style.left = `${left}px`;
    tooltip.style.top = `${top}px`;
  }
  
  // Hide modern tooltip
  function hideModernTooltip() {
    const tooltip = document.getElementById('modern-timeline-tooltip');
    if (tooltip) {
      tooltip.classList.remove('show');
      setTimeout(() => tooltip.remove(), 200);
    }
  }
  
  // Modern milestone drawer
  function openMilestoneDrawer(milestone) {
    // Remove existing drawer if any
    closeMilestoneDrawer();
    
    // Create backdrop
    const backdrop = document.createElement('div');
    backdrop.className = 'timeline-drawer-backdrop';
    backdrop.id = 'milestone-drawer-backdrop';
    
    // Create drawer
    const drawer = document.createElement('div');
    drawer.className = 'timeline-drawer';
    drawer.id = 'milestone-drawer';
    
    // Calculate division progress
    const timelineProgress = milestone.timelineProgress || 0;
    const budgetProgress = milestone.budgetProgress || 0;
    const physicalProgress = milestone.physicalProgress || 0;
    const overallProgress = ((timelineProgress + budgetProgress + physicalProgress) / 3) || 0;
    
    // Determine delay information
    let delayInfo = '';
    if (milestone.isDelayed) {
      const dueDate = new Date(milestone.dueDate);
      const today = new Date();
      const daysOverdue = Math.ceil((today - dueDate) / (1000 * 60 * 60 * 24));
      delayInfo = `
        <div class="bg-red-50 border-l-4 border-red-400 p-4 mb-6">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-red-400 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
            </svg>
            <div>
              <h3 class="text-sm font-medium text-red-800">Milestone Overdue</h3>
              <p class="text-sm text-red-700 mt-1">This milestone is ${daysOverdue} day${daysOverdue !== 1 ? 's' : ''} overdue (due: ${dueDate.toLocaleDateString()})</p>
            </div>
          </div>
        </div>
      `;
    }
    
    drawer.innerHTML = `
      <div class="h-full flex flex-col">
        <!-- Drawer Header -->
        <div class="bg-gradient-to-r from-emerald-500 to-blue-600 text-white p-6">
          <div class="flex items-start justify-between">
            <div>
              <h2 class="text-xl font-bold mb-2">${milestone.title}</h2>
              <span class="status-badge ${milestone.status} bg-white bg-opacity-20 text-white">${milestone.status.replace('_', ' ').toUpperCase()}</span>
            </div>
            <button onclick="closeMilestoneDrawer()" class="text-white hover:text-gray-200 transition-colors">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Drawer Content -->
        <div class="flex-1 overflow-y-auto p-6 space-y-6">
          ${delayInfo}
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
          <div class="space-y-4">
            <div>
              <h3 class="font-semibold text-gray-900 mb-3">Division Progress</h3>
              <div class="space-y-3">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-2">
                    <div class="division-icon timeline">T</div>
                    <span class="text-sm text-gray-600">Timeline</span>
                  </div>
                  <div class="flex items-center gap-2">
                    <div class="w-20 bg-gray-200 rounded-full h-2">
                      <div class="bg-blue-500 h-2 rounded-full transition-all duration-500" style="width: ${timelineProgress}%"></div>
                    </div>
                    <span class="text-sm font-semibold text-gray-900 w-12">${timelineProgress.toFixed(1)}%</span>
                  </div>
                </div>
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-2">
                    <div class="division-icon budget">B</div>
                    <span class="text-sm text-gray-600">Budget</span>
                  </div>
                  <div class="flex items-center gap-2">
                    <div class="w-20 bg-gray-200 rounded-full h-2">
                      <div class="bg-purple-500 h-2 rounded-full transition-all duration-500" style="width: ${budgetProgress}%"></div>
                    </div>
                    <span class="text-sm font-semibold text-gray-900 w-12">${budgetProgress.toFixed(1)}%</span>
                  </div>
                </div>
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-2">
                    <div class="division-icon physical">P</div>
                    <span class="text-sm text-gray-600">Physical</span>
                  </div>
                  <div class="flex items-center gap-2">
                    <div class="w-20 bg-gray-200 rounded-full h-2">
                      <div class="bg-orange-500 h-2 rounded-full transition-all duration-500" style="width: ${physicalProgress}%"></div>
                    </div>
                    <span class="text-sm font-semibold text-gray-900 w-12">${physicalProgress.toFixed(1)}%</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div>
              <h3 class="font-semibold text-gray-900 mb-3">Overall Progress</h3>
              <div class="flex items-center gap-3">
                <div class="flex-1 bg-gray-200 rounded-full h-3">
                  <div class="bg-gradient-to-r from-blue-500 to-green-500 h-3 rounded-full transition-all duration-700" style="width: ${overallProgress}%"></div>
                </div>
                <span class="text-lg font-bold text-gray-900">${overallProgress.toFixed(1)}%</span>
              </div>
            </div>
          </div>
          
          <div class="space-y-4">
            <div>
              <h3 class="font-semibold text-gray-900 mb-3">Milestone Details</h3>
              <div class="space-y-2 text-sm">
                <div class="flex justify-between">
                  <span class="text-gray-600">Due Date:</span>
                  <span class="font-medium">${milestone.dueDate ? new Date(milestone.dueDate).toLocaleDateString() : 'Not set'}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Weight:</span>
                  <span class="font-medium">${milestone.weight || 0}%</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Planned Budget:</span>
                  <span class="font-medium">₱${parseFloat(milestone.plannedBudget || 0).toLocaleString()}</span>
                </div>
                <div class="flex justify-between">
                  <span class="text-gray-600">Created:</span>
                  <span class="font-medium">${milestone.createdAt ? new Date(milestone.createdAt).toLocaleDateString() : 'Unknown'}</span>
                </div>
              </div>
            </div>
            
            ${milestone.status === 'delayed' ? `
            <div class="p-4 bg-red-50 border border-red-200 rounded-lg">
              <div class="flex items-center gap-2 text-red-800 font-semibold text-sm mb-2">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                </svg>
                Milestone Overdue
              </div>
              <div class="text-red-700 text-sm">
                <div>This milestone is overdue and requires immediate attention.</div>
                <div class="mt-2 text-xs">
                  <div>Due: ${new Date(milestone.dueDate).toLocaleDateString()}</div>
                  <div>Days overdue: ${Math.ceil((new Date() - new Date(milestone.dueDate)) / (1000 * 60 * 60 * 24))}</div>
                </div>
              </div>
            </div>
            ` : ''}
          </div>
        </div>
        
          <!-- Action Buttons -->
          <div class="flex gap-3 pt-4 border-t border-gray-200">
            <button onclick="closeMilestoneDrawer()" class="flex-1 px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors border border-gray-300 rounded-lg">
              Close
            </button>
            <button onclick="viewProjectDetails('${selectedProject?.id || ''}')" class="flex-1 px-4 py-2 bg-emerald-600 text-white rounded-lg hover:bg-emerald-700 transition-colors">
              View Full Details
            </button>
          </div>
        </div>
      </div>
    `;
    
    // Append elements
    document.body.appendChild(backdrop);
    document.body.appendChild(drawer);
    
    // Animate drawer in
    setTimeout(() => {
      backdrop.classList.add('open');
      drawer.classList.add('open');
    }, 10);
    
    // Close on backdrop click
    backdrop.addEventListener('click', () => {
      closeMilestoneDrawer();
    });
  }
  
  // Hide timeline section
  function hideTimelineSection() {
    const timelineSection = document.getElementById('horizontalTimelineSection');
    if (timelineSection) {
      timelineSection.style.display = 'none';
    }
  }
  
  // Refresh project timeline
    function refreshProjectTimeline() {
    if (selectedProject) {
      console.log('🔄 Refreshing timeline for project:', selectedProject.name);
      loadModernTimeline(true); // Force refresh
    } else {
      console.log('⚠️ No project selected for timeline refresh');
    }
  }
  
  // Close milestone drawer
  function closeMilestoneDrawer() {
    const backdrop = document.getElementById('milestone-drawer-backdrop');
    const drawer = document.getElementById('milestone-drawer');
    
    if (backdrop && drawer) {
      backdrop.classList.remove('open');
      drawer.classList.remove('open');
      
      setTimeout(() => {
        backdrop.remove();
        drawer.remove();
      }, 400);
    }
  }
  
  // Update milestone status automatically (for overdue detection)
  async function updateMilestoneStatus(milestoneId, newStatus) {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      const response = await fetch(`${API_URL}/milestones/${milestoneId}/status`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ status: newStatus })
      });

      if (response.ok) {
        console.log(`Milestone ${milestoneId} status updated to ${newStatus}`);
      } else {
        console.error('Failed to update milestone status:', response.status);
      }
    } catch (error) {
      console.error('Error updating milestone status:', error);
    }
  }

  // Check if milestone can be updated based on status
  function canUpdateMilestone(milestone) {
    const status = milestone.status;
    return status === 'pending' || status === 'not_started' || status === 'revision_request';
  }

  // Check if milestone is locked (cannot be updated)
  function isMilestoneLocked(milestone) {
    const status = milestone.status;
    return status === 'under_approval' || status === 'delayed' || status === 'completed';
  }

  // Generate proof type upload sections based on milestone requirements
  function generateProofTypeUploadSections(milestone) {
    const proofTypes = milestone.physicalProofTypes ? milestone.physicalProofTypes.split(',').map(type => type.trim()) : ['Photo', 'Video', 'Document'];
    
    return proofTypes.map(proofType => {
      const proofTypeLower = proofType.toLowerCase();
      const acceptTypes = proofTypeLower === 'photo' ? 'image/*' : 
                         proofTypeLower === 'video' ? 'video/*' : 
                         '.pdf,.doc,.docx,.xls,.xlsx';
      
      return `
        <div class="bg-white border border-orange-200 rounded-lg p-3">
          <label class="block text-xs font-medium text-orange-700 mb-2">${proofType} Upload</label>
          <div class="border-2 border-dashed border-orange-300 rounded-lg p-4 text-center hover:border-orange-400 transition-colors">
            <input type="file" id="milestone-${milestone.id}-${proofTypeLower}-files" multiple class="hidden" accept="${acceptTypes}">
            <label for="milestone-${milestone.id}-${proofTypeLower}-files" class="cursor-pointer">
              <div class="text-orange-500">
                <svg class="mx-auto h-8 w-8 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                <p class="text-sm font-medium">Upload ${proofType} files</p>
                <p class="text-xs text-orange-400 mt-1">Max 10MB each</p>
              </div>
            </label>
          </div>
          <div id="milestone-${milestone.id}-${proofTypeLower}-file-list" class="mt-2 space-y-1"></div>
        </div>
      `;
    }).join('');
  }

  // Enhanced Functions for New Features
  
  // Generate submission date/time
  function generateSubmissionDate(milestoneId) {
    const now = new Date();
    const localDateTime = new Date(now.getTime() - (now.getTimezoneOffset() * 60000)).toISOString().slice(0, 16);
    const dateInput = document.getElementById(`milestone-${milestoneId}-submission-date`);
    if (dateInput) {
      dateInput.value = localDateTime;
      // Store in localStorage for persistence
      localStorage.setItem(`milestone-${milestoneId}-submission-date`, localDateTime);
    }
  }
  
  // Update character count for textareas
  function updateCharacterCount(milestoneId, type) {
    const textarea = document.getElementById(`milestone-${milestoneId}-${type}-description`);
    const counter = document.getElementById(`milestone-${milestoneId}-${type}-char-count`);
    if (textarea && counter) {
      const currentLength = textarea.value.length;
      const maxLength = textarea.getAttribute('maxlength');
      counter.textContent = `${currentLength}/${maxLength}`;
      
      // Update counter color based on usage
      if (currentLength > maxLength * 0.9) {
        counter.className = 'text-xs text-red-500';
      } else if (currentLength > maxLength * 0.7) {
        counter.className = 'text-xs text-yellow-500';
      } else {
        counter.className = 'text-xs text-gray-500';
      }
      
      // Validate and update preview
      validateMilestone(milestoneId);
    }
  }
  
  // Update budget calculations
  function updateBudgetCalculations(milestoneId) {
    const usedInput = document.getElementById(`milestone-${milestoneId}-budget-amount`);
    const plannedBudgetEl = document.getElementById(`milestone-${milestoneId}-planned-budget`);
    const usedDisplayEl = document.getElementById(`milestone-${milestoneId}-used-display`);
    const remainingDisplayEl = document.getElementById(`milestone-${milestoneId}-remaining-display`);
    const utilizationDisplayEl = document.getElementById(`milestone-${milestoneId}-utilization-display`);
    const remainingCard = document.getElementById(`milestone-${milestoneId}-remaining-card`);
    
    if (usedInput && plannedBudgetEl && usedDisplayEl && remainingDisplayEl && utilizationDisplayEl) {
      const used = parseFloat(usedInput.value) || 0;
      const plannedText = plannedBudgetEl.textContent.replace(/[₱,]/g, '');
      const planned = parseFloat(plannedText) || 0;
      const remaining = planned - used;
      const utilization = planned > 0 ? (used / planned) * 100 : 0;
      
      // Update displays
      usedDisplayEl.textContent = `₱${used.toLocaleString()}`;
      remainingDisplayEl.textContent = `₱${remaining.toLocaleString()}`;
      utilizationDisplayEl.textContent = `${utilization.toFixed(2)}%`;
      
      // Update card styling based on budget status
      if (remaining < 0) {
        remainingCard.className = 'bg-red-50 rounded-lg p-4 border border-red-200 shadow-sm';
        remainingDisplayEl.className = 'text-lg font-bold text-red-600';
        document.querySelector(`#milestone-${milestoneId}-remaining-card label`).className = 'block text-xs font-medium text-red-600 mb-1';
      } else if (remaining < planned * 0.1) {
        remainingCard.className = 'bg-yellow-50 rounded-lg p-4 border border-yellow-200 shadow-sm';
        remainingDisplayEl.className = 'text-lg font-bold text-yellow-600';
        document.querySelector(`#milestone-${milestoneId}-remaining-card label`).className = 'block text-xs font-medium text-yellow-600 mb-1';
      } else {
        remainingCard.className = 'bg-blue-50 rounded-lg p-4 border border-blue-200 shadow-sm';
        remainingDisplayEl.className = 'text-lg font-bold text-blue-600';
        document.querySelector(`#milestone-${milestoneId}-remaining-card label`).className = 'block text-xs font-medium text-blue-600 mb-1';
      }
      
      // Validate and update preview
      validateMilestone(milestoneId);
    }
  }
  
  // Enhanced file upload handler
  function handleFileUpload(milestoneId, type, input) {
    const files = Array.from(input.files);
    const previewContainer = document.getElementById(`milestone-${milestoneId}-${type}-preview`);
    
    if (!previewContainer) return;
    
    files.forEach(file => {
      // File size validation
      const maxSize = type === 'video' ? 50 * 1024 * 1024 : 10 * 1024 * 1024; // 50MB for video, 10MB for others
      if (file.size > maxSize) {
        alert(`File "${file.name}" is too large. Maximum size is ${type === 'video' ? '50MB' : '10MB'}.`);
        return;
      }
      
      // Create preview element
      const previewElement = document.createElement('div');
      previewElement.className = 'flex items-center justify-between p-3 bg-gray-50 rounded-lg border';
      
      if (type === 'photo' && file.type.startsWith('image/')) {
        // Create image preview
        const reader = new FileReader();
        reader.onload = function(e) {
          previewElement.innerHTML = `
            <div class="flex items-center gap-3">
              <img src="${e.target.result}" alt="${file.name}" class="w-12 h-12 object-cover rounded cursor-pointer" onclick="openLightbox('${e.target.result}', '${file.name}')">
              <div>
                <div class="font-medium text-sm text-gray-800">${file.name}</div>
                <div class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(2)} MB</div>
              </div>
            </div>
            <button onclick="removeUploadedFile(this, '${milestoneId}', '${type}', '${file.name}')" class="text-red-500 hover:text-red-700">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          `;
        };
        reader.readAsDataURL(file);
      } else if (type === 'video' && file.type.startsWith('video/')) {
        // Create video preview
        previewElement.innerHTML = `
          <div class="flex items-center gap-3">
            <div class="w-12 h-12 bg-purple-100 rounded flex items-center justify-center">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div>
              <div class="font-medium text-sm text-gray-800">${file.name}</div>
              <div class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(2)} MB</div>
            </div>
          </div>
          <button onclick="removeUploadedFile(this, '${milestoneId}', '${type}', '${file.name}')" class="text-red-500 hover:text-red-700">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        `;
      } else {
        // Create document preview
        const iconColor = file.name.includes('.xlsx') || file.name.includes('.xls') ? 'text-green-600' : 
                         file.name.includes('.pdf') ? 'text-red-600' : 'text-blue-600';
        previewElement.innerHTML = `
          <div class="flex items-center gap-3">
            <div class="w-12 h-12 bg-gray-100 rounded flex items-center justify-center">
              <svg class="w-6 h-6 ${iconColor}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <div>
              <div class="font-medium text-sm text-gray-800">${file.name}</div>
              <div class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(2)} MB</div>
            </div>
          </div>
          <button onclick="removeUploadedFile(this, '${milestoneId}', '${type}', '${file.name}')" class="text-red-500 hover:text-red-700">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        `;
      }
      
      previewContainer.appendChild(previewElement);
    });
    
    // Update upload status and validate
    updateUploadStatus(milestoneId);
    validateMilestone(milestoneId);
  }
  
  // Remove uploaded file
  function removeUploadedFile(button, milestoneId, type, fileName) {
    const fileItem = button.closest('div');
    fileItem.remove();
    updateUploadStatus(milestoneId);
    validateMilestone(milestoneId);
  }
  
  // Update upload status
  function updateUploadStatus(milestoneId) {
    const photoPreview = document.getElementById(`milestone-${milestoneId}-photo-preview`);
    const videoPreview = document.getElementById(`milestone-${milestoneId}-video-preview`);
    const documentPreview = document.getElementById(`milestone-${milestoneId}-document-preview`);
    const statusEl = document.getElementById(`milestone-${milestoneId}-upload-status`);
    
    if (statusEl) {
      const hasPhotos = photoPreview && photoPreview.children.length > 0;
      const hasVideos = videoPreview && videoPreview.children.length > 0;
      const hasDocuments = documentPreview && documentPreview.children.length > 0;
      
      if (hasPhotos && hasVideos && hasDocuments) {
        statusEl.innerHTML = '<span class="text-green-600">All Proofs Uploaded</span>';
      } else {
        const missing = [];
        if (!hasPhotos) missing.push('Photo');
        if (!hasVideos) missing.push('Video');
        if (!hasDocuments) missing.push('Document');
        statusEl.innerHTML = `<span class="text-orange-600">Missing: ${missing.join(', ')}</span>`;
      }
    }
  }
  
  // Open lightbox for image preview
  function openLightbox(src, name) {
    const lightbox = document.createElement('div');
    lightbox.className = 'fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50';
    lightbox.innerHTML = `
      <div class="relative max-w-4xl max-h-full p-4">
        <img src="${src}" alt="${name}" class="max-w-full max-h-full object-contain">
        <button onclick="this.parentElement.parentElement.remove()" class="absolute top-4 right-4 text-white hover:text-gray-300">
          <svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <div class="absolute bottom-4 left-4 text-white text-sm bg-black bg-opacity-50 px-3 py-1 rounded">${name}</div>
      </div>
    `;
    document.body.appendChild(lightbox);
  }
  
  // Save draft function
  function saveDraft(milestoneId) {
    const draftData = {
      milestoneId: milestoneId,
      submissionDate: document.getElementById(`milestone-${milestoneId}-submission-date`)?.value || '',
      timelineActivities: milestoneActivitiesData[milestoneId]?.activities || [],
      budgetAmount: document.getElementById(`milestone-${milestoneId}-budget-amount`)?.value || '',
      budgetBreakdown: document.getElementById(`milestone-${milestoneId}-budget-breakdown`)?.value || '',
      physicalDescription: document.getElementById(`milestone-${milestoneId}-physical-description`)?.value || '',
      notes: document.getElementById(`milestone-${milestoneId}-notes`)?.value || '',
      savedAt: new Date().toISOString()
    };
    
    localStorage.setItem(`milestone-${milestoneId}-draft`, JSON.stringify(draftData));
    
    // Show success message
    const button = event.target;
    const originalText = button.innerHTML;
    button.innerHTML = `
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
      </svg>
      Draft Saved
    `;
    button.className = 'px-4 py-2 bg-green-100 text-green-700 rounded-lg transition-colors flex items-center gap-2 text-sm';
    
    setTimeout(() => {
      button.innerHTML = originalText;
      button.className = 'px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors flex items-center gap-2 text-sm';
    }, 2000);
  }
  
  // Preview submission function
  function previewSubmission(milestoneId) {
    const previewPanel = document.getElementById(`milestone-${milestoneId}-preview-panel`);
    if (previewPanel) {
      const isVisible = previewPanel.style.display !== 'none';
      previewPanel.style.display = isVisible ? 'none' : 'block';
      
      if (!isVisible) {
        // Update preview data
        updatePreviewData(milestoneId);
      }
    }
  }
  
  // Update preview data
  function updatePreviewData(milestoneId) {
    // Calculate progress percentages based on completion
    const timelineDesc = document.getElementById(`milestone-${milestoneId}-timeline-description`)?.value || '';
    const budgetAmount = parseFloat(document.getElementById(`milestone-${milestoneId}-budget-amount`)?.value) || 0;
    const physicalDesc = document.getElementById(`milestone-${milestoneId}-physical-description`)?.value || '';
    
    const photoPreview = document.getElementById(`milestone-${milestoneId}-photo-preview`);
    const videoPreview = document.getElementById(`milestone-${milestoneId}-video-preview`);
    const documentPreview = document.getElementById(`milestone-${milestoneId}-document-preview`);
    
    // Simple progress calculation based on field completion
    const timelineProgress = timelineDesc.length > 50 ? 85 : timelineDesc.length > 0 ? 50 : 0;
    const budgetProgress = budgetAmount > 0 ? 90 : 0;
    
    let physicalProgress = 0;
    if (physicalDesc.length > 0) physicalProgress += 30;
    if (photoPreview && photoPreview.children.length > 0) physicalProgress += 25;
    if (videoPreview && videoPreview.children.length > 0) physicalProgress += 25;
    if (documentPreview && documentPreview.children.length > 0) physicalProgress += 20;
    
    // Update preview displays
    document.getElementById(`milestone-${milestoneId}-timeline-preview`).textContent = `${timelineProgress}%`;
    document.getElementById(`milestone-${milestoneId}-budget-preview`).textContent = `${budgetProgress}%`;
    document.getElementById(`milestone-${milestoneId}-physical-preview`).textContent = `${physicalProgress}%`;
    
    document.getElementById(`milestone-${milestoneId}-timeline-bar`).style.width = `${timelineProgress}%`;
    document.getElementById(`milestone-${milestoneId}-budget-bar`).style.width = `${budgetProgress}%`;
    document.getElementById(`milestone-${milestoneId}-physical-bar`).style.width = `${physicalProgress}%`;
  }
  
  // Validate milestone for submission
  function validateMilestone(milestoneId) {
    const timelineDesc = document.getElementById(`milestone-${milestoneId}-timeline-description`)?.value || '';
    const budgetAmount = document.getElementById(`milestone-${milestoneId}-budget-amount`)?.value || '';
    const physicalDesc = document.getElementById(`milestone-${milestoneId}-physical-description`)?.value || '';
    
    const photoPreview = document.getElementById(`milestone-${milestoneId}-photo-preview`);
    const videoPreview = document.getElementById(`milestone-${milestoneId}-video-preview`);
    const documentPreview = document.getElementById(`milestone-${milestoneId}-document-preview`);
    
    const submitBtn = document.getElementById(`milestone-${milestoneId}-submit-btn`);
    const timelineValidation = document.getElementById(`milestone-${milestoneId}-timeline-validation`);
    const budgetValidation = document.getElementById(`milestone-${milestoneId}-budget-validation`);
    const physicalValidation = document.getElementById(`milestone-${milestoneId}-physical-validation`);
    
    let isValid = true;
    
    // Validate timeline
    if (timelineDesc.length < 10) {
      timelineValidation.innerHTML = `
        <svg class="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
        <span class="text-red-600">Timeline description required (minimum 10 characters)</span>
      `;
      isValid = false;
    } else {
      timelineValidation.innerHTML = `
        <svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span class="text-green-600">Timeline description complete</span>
      `;
    }
    
    // Validate budget
    if (!budgetAmount || parseFloat(budgetAmount) <= 0) {
      budgetValidation.innerHTML = `
        <svg class="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
        <span class="text-red-600">Budget amount required (must be greater than 0)</span>
      `;
      isValid = false;
    } else {
      budgetValidation.innerHTML = `
        <svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span class="text-green-600">Budget amount entered</span>
      `;
    }
    
    // Validate physical
    const hasPhotos = photoPreview && photoPreview.children.length > 0;
    const hasVideos = videoPreview && videoPreview.children.length > 0;
    const hasDocuments = documentPreview && documentPreview.children.length > 0;
    const hasDescription = physicalDesc.length >= 20;
    
    if (!hasPhotos || !hasVideos || !hasDocuments || !hasDescription) {
      const missing = [];
      if (!hasPhotos) missing.push('photos');
      if (!hasVideos) missing.push('videos');
      if (!hasDocuments) missing.push('documents');
      if (!hasDescription) missing.push('description (min 20 chars)');
      
      physicalValidation.innerHTML = `
        <svg class="w-4 h-4 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
        <span class="text-red-600">Missing: ${missing.join(', ')}</span>
      `;
      isValid = false;
    } else {
      physicalValidation.innerHTML = `
        <svg class="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span class="text-green-600">All physical proofs and description complete</span>
      `;
    }
    
    // Update submit button
    if (submitBtn) {
      submitBtn.disabled = !isValid;
      if (isValid) {
        submitBtn.classList.remove('opacity-50', 'cursor-not-allowed');
      } else {
        submitBtn.classList.add('opacity-50', 'cursor-not-allowed');
      }
    }
  }

  // Make functions globally available
  window.selectProject = selectProject;
  window.submitMilestoneUpdate = submitMilestoneUpdate;
  window.refreshData = refreshData;
  window.loadSubmitUpdate = loadSubmitUpdate;
  window.toggleMilestoneCard = toggleMilestoneCard;
  window.displayFile = displayFile;
  window.removeFile = removeFile;
  window.debugUpdateUI = debugUpdateUI;
  window.checkDOMElements = checkDOMElements;
  window.forceRecreateProgressElements = forceRecreateProgressElements;
  window.refreshSubmissionHistory = refreshSubmissionHistory;
  window.refreshProjectTimeline = refreshProjectTimeline;
  window.updateMilestoneStatus = updateMilestoneStatus;
  window.closeMilestoneDrawer = closeMilestoneDrawer;
  window.loadModernTimeline = loadModernTimeline;
  window.canUpdateMilestone = canUpdateMilestone;
  window.isMilestoneLocked = isMilestoneLocked;
  
  // Timeline view toggle function
  function toggleTimelineView(view) {
    const listView = document.getElementById('updatesContainer');
    const timelineView = document.getElementById('timelineView');
    const listBtn = document.getElementById('listViewBtn');
    const timelineBtn = document.getElementById('timelineViewBtn');
    
    if (view === 'timeline') {
      listView.style.display = 'none';
      timelineView.classList.remove('hidden');
      // Update tab button classes - List View inactive
      listBtn.className = 'tab-button inline-flex items-center gap-2 px-4 py-2 text-sm font-semibold rounded-lg transition-all duration-300';
      // Timeline View active
      timelineBtn.className = 'tab-button active inline-flex items-center gap-2 px-4 py-2 text-sm font-semibold rounded-lg transition-all duration-300';
      renderTimelineView();
    } else {
      listView.style.display = 'block';
      timelineView.classList.add('hidden');
      // List View active
      listBtn.className = 'tab-button active inline-flex items-center gap-2 px-4 py-2 text-sm font-semibold rounded-lg transition-all duration-300';
      // Timeline View inactive
      timelineBtn.className = 'tab-button inline-flex items-center gap-2 px-4 py-2 text-sm font-semibold rounded-lg transition-all duration-300';
    }
  }
  
  // Render timeline view
  function renderTimelineView() {
    const container = document.getElementById('timelineContainer');
    if (!container || !projectUpdates || projectUpdates.length === 0) return;
    
    const sortedUpdates = [...projectUpdates].sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
    
    container.innerHTML = sortedUpdates.map((update, index) => {
      const date = new Date(update.createdAt);
      const statusColors = {
        'submitted': 'from-amber-500 to-amber-600',
        'iu_approved': 'from-emerald-500 to-emerald-600',
        'secretariat_approved': 'from-green-500 to-emerald-600',
        'rejected': 'from-red-500 to-red-600',
        'compiled_for_secretariat': 'from-emerald-500 to-emerald-600'
      };
      
      return `
        <div class="flex items-start gap-6 relative">
          <div class="icon-container bg-gradient-to-br ${statusColors[update.status] || 'from-emerald-500 to-emerald-600'} flex-shrink-0 z-10">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
          <div class="flex-1 profile-card p-6">
            <div class="flex items-center justify-between mb-4">
              <div class="flex items-center gap-3">
                <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                  </svg>
                </div>
                <h5 class="text-lg font-bold text-black">${update.title || 'Milestone Update'}</h5>
              </div>
              <div class="text-xs text-emerald-600 font-medium bg-emerald-50 px-3 py-1 rounded-full border border-emerald-200">${date.toLocaleDateString('en-US', { 
                year: 'numeric', 
                month: 'short', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
              })}</div>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
              <div class="bg-emerald-50 p-3 rounded-lg border border-emerald-200">
                <div class="flex items-center gap-2 mb-1">
                  <svg class="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                  <span class="text-sm text-emerald-700 font-medium">Progress</span>
                </div>
                <span class="text-xl font-bold text-emerald-800">${update.currentProgress || 0}%</span>
              </div>
              <div class="bg-emerald-50 p-3 rounded-lg border border-emerald-200">
                <div class="flex items-center gap-2 mb-1">
                  <svg class="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                  </svg>
                  <span class="text-sm text-emerald-700 font-medium">Budget Used</span>
                </div>
                <span class="text-xl font-bold text-emerald-800">₱${(update.budgetUsed || 0).toLocaleString()}</span>
              </div>
              <div class="bg-emerald-50 p-3 rounded-lg border border-emerald-200">
                <div class="flex items-center gap-2 mb-1">
                  <svg class="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <span class="text-sm text-emerald-700 font-medium">Status</span>
                </div>
                <span class="text-lg font-bold text-emerald-800 capitalize">${update.status.replace('_', ' ')}</span>
              </div>
            </div>
            ${update.remarks ? `
              <div class="bg-gradient-to-br from-emerald-50 to-green-50 p-4 rounded-xl border border-emerald-200">
                <div class="flex items-center gap-2 mb-2">
                  <svg class="w-4 h-4 text-emerald-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"></path>
                  </svg>
                  <span class="text-sm text-emerald-700 font-semibold">Remarks</span>
                </div>
                <p class="text-sm text-emerald-800">${update.remarks}</p>
              </div>
            ` : ''}
          </div>
        </div>
      `;
    }).join('');
  }
  
  // Export submission report function
  function exportSubmissionReport() {
    if (!selectedProject || !projectUpdates || projectUpdates.length === 0) {
      alert('No submission data available to export.');
      return;
    }
    
    // Create a comprehensive report
    const reportData = {
      project: {
        name: selectedProject.name,
        code: selectedProject.projectCode,
        totalBudget: selectedProject.totalBudget,
        startDate: selectedProject.startDate,
        endDate: selectedProject.endDate
      },
      submissions: projectUpdates.map(update => ({
        date: new Date(update.createdAt).toLocaleDateString(),
        status: update.status,
        progress: update.currentProgress || 0,
        budgetUsed: update.budgetUsed || 0,
        remarks: update.remarks || ''
      })),
      summary: {
        totalSubmissions: projectUpdates.length,
        approvedCount: projectUpdates.filter(u => u.status === 'secretariat_approved').length,
        pendingCount: projectUpdates.filter(u => u.status === 'submitted').length,
        rejectedCount: projectUpdates.filter(u => u.status === 'rejected').length,
        totalBudgetUsed: projectUpdates.reduce((sum, u) => sum + (u.budgetUsed || 0), 0)
      },
      generatedAt: new Date().toISOString()
    };
    
    // Create and download CSV
    const csvContent = [
      ['EIU Project Submission Report'],
      ['Project:', reportData.project.name],
      ['Project Code:', reportData.project.code],
      ['Generated:', new Date().toLocaleDateString()],
      [''],
      ['Date', 'Status', 'Progress (%)', 'Budget Used (₱)', 'Remarks'],
      ...reportData.submissions.map(s => [s.date, s.status, s.progress, s.budgetUsed, s.remarks])
    ].map(row => row.join(',')).join('\\n');
    
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${selectedProject.projectCode}_submission_report_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    window.URL.revokeObjectURL(url);
    
    // Show success notification
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
    notification.innerHTML = `
      <div class="flex items-center gap-2">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        Report exported successfully!
      </div>
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  }
  
  // AI-Assisted Summary Generation (Step 8)
  function generateAISummary(milestoneId) {
    const timelineDesc = document.getElementById(`milestone-${milestoneId}-timeline-description`)?.value || '';
    const budgetAmount = parseFloat(document.getElementById(`milestone-${milestoneId}-budget-amount`)?.value) || 0;
    const physicalDesc = document.getElementById(`milestone-${milestoneId}-physical-description`)?.value || '';
    
    // Simple AI-like analysis (placeholder for future AI integration)
    const insights = {
      keyMilestones: extractKeyMilestones(timelineDesc),
      budgetHealth: analyzeBudgetHealth(budgetAmount),
      riskAlerts: generateRiskAlerts(budgetAmount, timelineDesc, physicalDesc)
    };
    
    return insights;
  }
  
  // Helper functions for AI summary
  function extractKeyMilestones(description) {
    const keywords = ['completed', 'finished', 'delivered', 'achieved', 'installed', 'constructed'];
    const achievements = [];
    
    keywords.forEach(keyword => {
      if (description.toLowerCase().includes(keyword)) {
        const sentences = description.split('.').filter(s => s.toLowerCase().includes(keyword));
        achievements.push(...sentences.slice(0, 2));
      }
    });
    
    return achievements.length > 0 ? achievements : ['Timeline activities in progress'];
  }
  
  function analyzeBudgetHealth(usedAmount) {
    if (!selectedProject) return 'Budget analysis not available';
    
    const totalBudget = parseFloat(selectedProject.totalBudget) || 0;
    const utilization = totalBudget > 0 ? (usedAmount / totalBudget) * 100 : 0;
    
    if (utilization > 90) return 'High utilization - monitor remaining budget carefully';
    if (utilization > 70) return 'Good utilization - on track with budget';
    if (utilization > 50) return 'Moderate utilization - budget available for remaining work';
    return 'Low utilization - significant budget remaining';
  }
  
  function generateRiskAlerts(budgetAmount, timelineDesc, physicalDesc) {
    const alerts = [];
    
    if (!selectedProject) return alerts;
    
    const totalBudget = parseFloat(selectedProject.totalBudget) || 0;
    const utilization = totalBudget > 0 ? (budgetAmount / totalBudget) * 100 : 0;
    
    // Budget risk alerts
    if (utilization > 85 && physicalDesc.toLowerCase().includes('incomplete')) {
      alerts.push('⚠️ High budget utilization with incomplete physical progress');
    }
    
    // Timeline risk alerts
    if (timelineDesc.toLowerCase().includes('delay') || timelineDesc.toLowerCase().includes('behind')) {
      alerts.push('⚠️ Timeline delays detected - may impact project completion');
    }
    
    // Quality risk alerts
    if (physicalDesc.toLowerCase().includes('issue') || physicalDesc.toLowerCase().includes('problem')) {
      alerts.push('⚠️ Quality issues mentioned - requires attention');
    }
    
    return alerts.length > 0 ? alerts : ['✅ No significant risks detected'];
  }
  
  // Enhanced submission function with AI insights
  const originalSubmitMilestoneUpdate = window.submitMilestoneUpdate;
  window.submitMilestoneUpdate = async function(milestoneId) {
    // Generate AI insights before submission
    const insights = generateAISummary(milestoneId);
    
    // Show AI insights in a modal before final submission
    const showInsights = confirm(`AI Summary Generated:\\n\\nKey Achievements: ${insights.keyMilestones.join('; ')}\\n\\nBudget Health: ${insights.budgetHealth}\\n\\nRisk Alerts: ${insights.riskAlerts.join('; ')}\\n\\nProceed with submission?`);
    
    if (showInsights) {
      // Call original submission function
      return originalSubmitMilestoneUpdate(milestoneId);
    }
  };

  // New enhanced functions
  window.generateSubmissionDate = generateSubmissionDate;
  window.updateCharacterCount = updateCharacterCount;
  window.updateBudgetCalculations = updateBudgetCalculations;
  window.handleFileUpload = handleFileUpload;
  window.removeUploadedFile = removeUploadedFile;
  window.updateUploadStatus = updateUploadStatus;
  window.openLightbox = openLightbox;
  window.saveDraft = saveDraft;
  window.previewSubmission = previewSubmission;
  window.updatePreviewData = updatePreviewData;
  window.validateMilestone = validateMilestone;
  window.toggleTimelineView = toggleTimelineView;
  window.renderTimelineView = renderTimelineView;
  window.exportSubmissionReport = exportSubmissionReport;
  window.generateAISummary = generateAISummary;
  
  // Enhanced Notification System (Step 6)
  function showNotification(type, title, message, duration = 5000) {
    const container = document.getElementById('notificationContainer') || createNotificationContainer();
    
    const notification = document.createElement('div');
    notification.className = `notification transform transition-all duration-300 translate-x-full opacity-0`;
    
    const colors = {
      success: 'bg-green-500 border-green-600',
      error: 'bg-red-500 border-red-600',
      warning: 'bg-yellow-500 border-yellow-600',
      info: 'bg-blue-500 border-blue-600'
    };
    
    const icons = {
      success: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>',
      error: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>',
      warning: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>',
      info: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>'
    };
    
    notification.innerHTML = `
      <div class="flex items-start gap-3 ${colors[type]} text-white px-6 py-4 rounded-lg shadow-lg border-l-4 max-w-md">
        <svg class="w-5 h-5 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          ${icons[type]}
        </svg>
        <div class="flex-1">
          <h4 class="font-semibold text-sm">${title}</h4>
          <p class="text-xs mt-1 opacity-90">${message}</p>
        </div>
        <button onclick="this.parentElement.parentElement.remove()" class="flex-shrink-0 opacity-70 hover:opacity-100">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;
    
    container.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
      notification.classList.remove('translate-x-full', 'opacity-0');
    }, 100);
    
    // Auto remove
    if (duration > 0) {
      setTimeout(() => {
        notification.classList.add('translate-x-full', 'opacity-0');
        setTimeout(() => notification.remove(), 300);
      }, duration);
    }
  }
  
  function createNotificationContainer() {
    const container = document.createElement('div');
    container.id = 'notificationContainer';
    container.className = 'fixed right-4 z-50 space-y-2';
    container.style.top = '100px'; // Position below the top navigation bar
    document.body.appendChild(container);
    return container;
  }
  
  function showSubmissionSuccessModal(submissionId) {
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4 shadow-2xl transform transition-all duration-300 scale-95 opacity-0">
        <div class="text-center">
          <div class="w-16 h-16 bg-gradient-to-br from-green-400 to-emerald-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <h3 class="text-xl font-bold text-gray-800 mb-2">Submission Successful!</h3>
          <p class="text-gray-600 mb-4">Your milestone update has been submitted for review.</p>
          <div class="bg-gray-50 rounded-lg p-4 mb-6">
            <div class="text-sm text-gray-700">
              <div class="flex justify-between items-center mb-1">
                <span>Submission ID:</span>
                <span class="font-mono font-semibold">${submissionId}</span>
              </div>
              <div class="flex justify-between items-center">
                <span>Status:</span>
                <span class="text-yellow-600 font-semibold">Under Review</span>
              </div>
            </div>
          </div>
          <button onclick="this.closest('.fixed').remove()" class="w-full px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors">
            Continue
          </button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Animate in
    setTimeout(() => {
      const content = modal.querySelector('div > div');
      content.classList.remove('scale-95', 'opacity-0');
      content.classList.add('scale-100', 'opacity-100');
    }, 100);
  }
  
  // Initialize character counters on page load
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize any existing textareas with character counters
    document.querySelectorAll('textarea[maxlength]').forEach(textarea => {
      const id = textarea.id;
      if (id.includes('milestone-') && id.includes('-description')) {
        const matches = id.match(/milestone-(.+)-(timeline|physical)-description/);
        if (matches) {
          updateCharacterCount(matches[1], matches[2]);
        }
      }
    });
    
    // Load any saved drafts from localStorage
    loadSavedDrafts();
  });
  
  // Load saved drafts function
  function loadSavedDrafts() {
    Object.keys(localStorage).forEach(key => {
      if (key.startsWith('milestone-') && key.endsWith('-draft')) {
        const milestoneId = key.replace('milestone-', '').replace('-draft', '');
        const draftData = JSON.parse(localStorage.getItem(key));
        
        // Restore draft data to form fields
        if (draftData.submissionDate) {
          const dateInput = document.getElementById(`milestone-${milestoneId}-submission-date`);
          if (dateInput) dateInput.value = draftData.submissionDate;
        }
        
        if (draftData.timelineActivities && Array.isArray(draftData.timelineActivities)) {
          // Initialize timeline activities data structure
          const milestone = projectMilestones.find(m => m.id == milestoneId);
          if (milestone) {
            window.initializeTimelineActivities(milestoneId, milestone);
            
            // Clear existing activities and load from draft
            const data = milestoneActivitiesData[milestoneId];
            if (data) {
              data.activities = [];
              data.nextId = 1;
              
              // Clear container
              const container = document.getElementById(`milestone-${milestoneId}-activities-container`);
              if (container) {
                container.innerHTML = '';
              }
              
              // Add each activity from draft
              draftData.timelineActivities.forEach(activity => {
                window.addTimelineActivity(milestoneId);
                const newActivityId = data.nextId - 1;
                
                // Set the values
                const dateInput = document.getElementById(`activity-${milestoneId}-${newActivityId}-date`);
                const descInput = document.getElementById(`activity-${milestoneId}-${newActivityId}-description`);
                
                if (dateInput && activity.date) {
                  dateInput.value = activity.date;
                  window.updateTimelineActivity(milestoneId, newActivityId, 'date', activity.date);
                }
                
                if (descInput && activity.description) {
                  descInput.value = activity.description;
                  window.updateTimelineActivity(milestoneId, newActivityId, 'description', activity.description);
                  window.updateActivityCharCount(milestoneId, newActivityId);
                }
              });
            }
          }
        }
        
        if (draftData.budgetAmount) {
          const input = document.getElementById(`milestone-${milestoneId}-budget-amount`);
          if (input) {
            input.value = draftData.budgetAmount;
            updateBudgetCalculations(milestoneId);
          }
        }
        
        if (draftData.budgetBreakdown) {
          const textarea = document.getElementById(`milestone-${milestoneId}-budget-breakdown`);
          if (textarea) textarea.value = draftData.budgetBreakdown;
        }
        
        if (draftData.physicalDescription) {
          const textarea = document.getElementById(`milestone-${milestoneId}-physical-description`);
          if (textarea) {
            textarea.value = draftData.physicalDescription;
            updateCharacterCount(milestoneId, 'physical');
          }
        }
        
        if (draftData.notes) {
          const textarea = document.getElementById(`milestone-${milestoneId}-notes`);
          if (textarea) textarea.value = draftData.notes;
        }
        
        // Show notification about loaded draft
        showNotification('info', 'Draft Restored', `Previous work restored for milestone. Saved: ${new Date(draftData.savedAt).toLocaleString()}`, 3000);
      }
    });
  }
  
  // Summary card filter functions
  window.filterByCard = function(filterType) {
    console.log('Filtering by:', filterType);
    // Implement filtering logic based on card type
    const searchInput = document.getElementById('searchInput');
    const statusFilter = document.getElementById('statusFilter');
    
    switch(filterType) {
      case 'assigned':
        searchInput.value = '';
        statusFilter.value = '';
        break;
      case 'pending':
        statusFilter.value = 'pending';
        break;
      case 'review':
        statusFilter.value = 'ongoing';
        break;
      case 'completed':
        statusFilter.value = 'complete';
        break;
      case 'delayed':
        // Filter for delayed projects
        break;
      case 'revision':
        // Filter for revision requests
        break;
      case 'budget':
        // Sort by budget
        document.getElementById('sortFilter').value = 'budget';
        break;
      case 'utilized':
        // Sort by utilization
        break;
    }
    applyFilters();
  }

  // Search and filter functions
  window.applyFilters = function() {
    const searchTerm = document.getElementById('searchInput').value;
    const statusFilter = document.getElementById('statusFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;
    const sortFilter = document.getElementById('sortFilter').value;
    
    console.log('Applying filters:', { searchTerm, statusFilter, priorityFilter, sortFilter });
    // Implement filter logic here
  }

  window.clearFilters = function() {
    document.getElementById('searchInput').value = '';
    document.getElementById('statusFilter').value = '';
    document.getElementById('priorityFilter').value = '';
    document.getElementById('sortFilter').value = 'name';
    // Reset display
    applyFilters();
  }

  // Export and refresh functions
  window.exportData = function() {
    console.log('Exporting milestone data');
    // Implement export functionality
    showNotification('info', 'Export Started', 'Your data export is being prepared...', 3000);
  }

  // Update summary cards with dynamic data
  function updateSummaryCards() {
    if (!projects || projects.length === 0) return;
    
    // Calculate metrics
    const assignedProjects = projects.length;
    let pendingMilestones = 0;
    let underReview = 0;
    let completedMilestones = 0;
    let delayedMilestones = 0;
    let delayedProjects = 0;
    let revisionRequests = 0;
    let totalBudgetAssigned = 0;
    let budgetUtilized = 0;
    
    projects.forEach(project => {
      totalBudgetAssigned += parseFloat(project.totalBudget || 0);
      
      let projectHasDelayedMilestones = false;
      
      // Count delayed milestones from delay info (backend)
      if (project.delayInfo && project.delayInfo.isDelayed) {
        delayedMilestones += project.delayInfo.overdueMilestoneCount || 0;
        projectHasDelayedMilestones = true;
      }
      
      // Count milestones by status if milestone data is available
      if (project.milestones && Array.isArray(project.milestones)) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        project.milestones.forEach(milestone => {
          // Check if milestone is overdue (frontend detection)
          let milestoneStatus = milestone.status?.toLowerCase() || 'pending';
          const dueDate = milestone.dueDate || milestone.deadline || milestone.targetDate || milestone.completionDate;
          
          if (dueDate && milestoneStatus !== 'completed' && milestoneStatus !== 'under_approval' && milestoneStatus !== 'revision_request') {
            const milestoneDate = new Date(dueDate);
            milestoneDate.setHours(0, 0, 0, 0);
            
            if (milestoneDate < today && milestoneStatus === 'pending') {
              milestoneStatus = 'delayed';
            }
          }
          
          switch (milestoneStatus) {
            case 'pending':
              pendingMilestones++;
              break;
            case 'in_progress':
            case 'submitted':
              underReview++;
              break;
            case 'completed':
              completedMilestones++;
              break;
            case 'delayed':
              delayedMilestones++;
              projectHasDelayedMilestones = true;
              break;
            case 'revision_request':
            case 'rejected':
              revisionRequests++;
              break;
          }
        });
      }
      
      // Count project as delayed if it has any delayed milestones
      if (projectHasDelayedMilestones) {
        delayedProjects++;
      }
      
      // Estimate budget utilization based on progress
      const progress = parseFloat(project.overallProgress || project.progress || 0);
      budgetUtilized += (parseFloat(project.totalBudget || 0) * progress) / 100;
    });
    
    // Update DOM elements
    const assignedEl = document.getElementById('assignedProjects');
    const pendingEl = document.getElementById('pendingMilestones');
    const reviewEl = document.getElementById('underReview');
    const completedEl = document.getElementById('completedMilestones');
    const delayedEl = document.getElementById('delayedMilestones');
    const delayedMilestonesCountEl = document.getElementById('delayedMilestonesCount');
    const revisionEl = document.getElementById('revisionRequests');
    const budgetEl = document.getElementById('totalBudgetAssigned');
    const utilizedEl = document.getElementById('budgetUtilized');
    const headerCountEl = document.getElementById('headerProjectCount');
    
    if (assignedEl) assignedEl.textContent = assignedProjects;
    if (pendingEl) pendingEl.textContent = pendingMilestones;
    if (reviewEl) reviewEl.textContent = underReview;
    if (completedEl) completedEl.textContent = completedMilestones;
    if (delayedEl) delayedEl.textContent = delayedProjects;
    if (delayedMilestonesCountEl) delayedMilestonesCountEl.textContent = delayedMilestones;
    if (revisionEl) revisionEl.textContent = revisionRequests;
    if (budgetEl) budgetEl.textContent = totalBudgetAssigned.toLocaleString();
    if (utilizedEl) utilizedEl.textContent = budgetUtilized.toFixed(1);
    if (headerCountEl) headerCountEl.textContent = `${assignedProjects} Projects Available`;
  }

  // Initialize summary cards when page loads
  document.addEventListener('DOMContentLoaded', function() {
    // Update summary cards
    updateSummaryCards();
    
    // Add hover tooltips to summary cards
    const summaryCards = document.querySelectorAll('.summary-card');
    summaryCards.forEach(card => {
      card.addEventListener('mouseenter', function() {
        // Add tooltip functionality here if needed
      });
    });
  });

  // Toggle collapsible sections (renamed to avoid conflict with ProjectDetailsModal)
  window.toggleProjectSection = function(sectionName) {
    const sectionContent = document.getElementById(`${sectionName}Section`);
    const chevron = document.querySelector(`[data-section="${sectionName}"]`);
    
    if (sectionContent && chevron) {
      const isExpanded = sectionContent.classList.contains('expanded');
      
      if (isExpanded) {
        // Collapse
        sectionContent.classList.remove('expanded');
        chevron.classList.remove('rotated');
        console.log(`🔼 Collapsed section: ${sectionName}`);
      } else {
        // Expand
        sectionContent.classList.add('expanded');
        chevron.classList.add('rotated');
        console.log(`🔽 Expanded section: ${sectionName}`);
        
        // Load content if needed
        if (sectionName === 'timeline') {
          loadModernTimeline(true); // Force load when section is expanded
        } else if (sectionName === 'summary') {
          displayMilestoneSummary();
        } else if (sectionName === 'milestones') {
          displayMilestones();
          
          // Extra safety: ensure all milestones remain collapsed after display
          setTimeout(() => {
            const milestoneContents = document.querySelectorAll('[id$="-content"]');
            milestoneContents.forEach(content => {
              if (content.classList.contains('expanded')) {
                content.classList.remove('expanded');
                content.style.maxHeight = '0px';
                content.style.opacity = '0';
                content.style.transform = 'translateY(-10px)';
                console.log('🔒 Extra safety: Collapsed milestone', content.id);
              }
            });
          }, 100);
        }
      }
    }
  };

  // Debug function to check milestone states
  window.debugMilestoneStates = function() {
    const milestoneContents = document.querySelectorAll('[id$="-content"]');
    console.log('🔍 Current milestone states:');
    milestoneContents.forEach(content => {
      const isExpanded = content.classList.contains('expanded');
      const computedStyle = window.getComputedStyle(content);
      console.log(`📋 ${content.id}:`, {
        expanded: isExpanded,
        classes: content.className,
        maxHeight: computedStyle.maxHeight,
        opacity: computedStyle.opacity,
        transform: computedStyle.transform
      });
    });
  };

  // Display project timeline
  // Legacy function - replaced with loadModernTimeline()
  function displayProjectTimeline() {
    console.log('⚠️ displayProjectTimeline() is deprecated, using loadModernTimeline() instead');
    if (selectedProject) {
      loadModernTimeline();
    }
  }

  // Display milestone summary
  function displayMilestoneSummary() {
    const summaryContainer = document.getElementById('milestoneSummaryContainer');
    if (!summaryContainer || !projectMilestones || projectMilestones.length === 0) {
      if (summaryContainer) {
        summaryContainer.innerHTML = '<p class="text-gray-600">No milestone data available.</p>';
      }
      return;
    }

    // Calculate milestone statistics
    const pendingMilestones = projectMilestones.filter(m => m.status?.toLowerCase() === 'pending');
    const underApprovalMilestones = projectMilestones.filter(m => m.status?.toLowerCase() === 'under_approval');
    const completedMilestones = projectMilestones.filter(m => m.status?.toLowerCase() === 'completed');
    const delayedMilestones = projectMilestones.filter(m => m.status?.toLowerCase() === 'delayed');
    const revisionRequestMilestones = projectMilestones.filter(m => m.status?.toLowerCase() === 'revision_requested');

    // Calculate weights
    const pendingWeight = pendingMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const underApprovalWeight = underApprovalMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const completedWeight = completedMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const delayedWeight = delayedMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const revisionRequestWeight = revisionRequestMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);
    const totalWeight = projectMilestones.reduce((sum, m) => sum + parseFloat(m.weight || 0), 0);

    // Calculate total budget from selected project
    const totalBudget = parseFloat(selectedProject?.totalBudget || 0);

    const summaryHTML = `
      <div class="bg-gradient-to-r from-emerald-50 to-gray-50 rounded-xl p-6 border border-emerald-200">
        <h4 class="text-lg font-bold text-gray-800 mb-6 flex items-center gap-3">
          <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
          </div>
          Milestone Status Overview
        </h4>
        
        <div class="grid grid-cols-2 md:grid-cols-5 gap-4 mb-6">
          <div class="text-center p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200">
            <div class="text-2xl font-bold text-blue-600 mb-1">${pendingMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Pending</div>
            <div class="text-xs text-gray-500">${pendingWeight.toFixed(1)}% weight</div>
          </div>
          <div class="text-center p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200">
            <div class="text-2xl font-bold text-yellow-600 mb-1">${underApprovalMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Under Approval</div>
            <div class="text-xs text-gray-500">${underApprovalWeight.toFixed(1)}% weight</div>
          </div>
          <div class="text-center p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200">
            <div class="text-2xl font-bold text-red-600 mb-1">${delayedMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Delayed</div>
            <div class="text-xs text-gray-500">${delayedWeight.toFixed(1)}% weight</div>
          </div>
          <div class="text-center p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200">
            <div class="text-2xl font-bold text-orange-600 mb-1">${revisionRequestMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Revision</div>
            <div class="text-xs text-gray-500">${revisionRequestWeight.toFixed(1)}% weight</div>
          </div>
          <div class="text-center p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-200">
            <div class="text-2xl font-bold text-green-600 mb-1">${completedMilestones.length}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Completed</div>
            <div class="text-xs text-gray-500">${completedWeight.toFixed(1)}% weight</div>
          </div>
        </div>
        
        <div class="p-4 bg-white rounded-lg shadow-sm">
          <div class="text-center">
            <div class="text-xl font-bold text-purple-600 mb-1">₱${totalBudget.toLocaleString()}</div>
            <div class="text-sm font-medium text-gray-700 mb-1">Total Budget</div>
            <div class="text-xs text-gray-500">${totalWeight.toFixed(1)}% total weight</div>
          </div>
        </div>
      </div>
    `;
    
    summaryContainer.innerHTML = summaryHTML;
    console.log('Milestone summary displayed successfully');
  }

  // Toggle milestone cards
  window.toggleMilestoneCard = function(milestoneId) {
    console.log('🎯 Toggle milestone card called:', milestoneId);
    const sectionContent = document.getElementById(`${milestoneId}-content`);
    const icon = document.getElementById(`${milestoneId}-icon`);
    
    console.log('📦 Elements found:', { 
      sectionContent: !!sectionContent, 
      icon: !!icon,
      currentClasses: sectionContent ? sectionContent.className : 'not found'
    });
    
    if (sectionContent) {
      const isExpanded = sectionContent.classList.contains('expanded');
      console.log('📊 Current state - isExpanded:', isExpanded);
      console.log('📊 Current computed style:', window.getComputedStyle(sectionContent).maxHeight);
      
      if (isExpanded) {
        // Collapse
        console.log('🔒 Attempting to collapse...');
        sectionContent.classList.remove('expanded');
        
        // Force immediate style update
        sectionContent.style.maxHeight = '0px';
        sectionContent.style.opacity = '0';
        sectionContent.style.transform = 'translateY(-10px)';
        
        if (icon) {
          icon.classList.remove('rotated');
          icon.style.transform = 'rotate(0deg)';
        }
        
        console.log('🔒 Milestone collapsed - new classes:', sectionContent.className);
        console.log('🔒 New computed style:', window.getComputedStyle(sectionContent).maxHeight);
        
      } else {
        // Expand - but first close all other milestones
        console.log('🔓 Attempting to expand...');
        
        // Close all other open milestone submission forms only
        const allMilestoneContents = document.querySelectorAll('[id^="milestone-"][id$="-content"].section-content.expanded');
        const allMilestoneIcons = document.querySelectorAll('[id^="milestone-"][id$="-icon"].milestone-icon.rotated');
        
        console.log('🔍 Found milestone contents to potentially close:', allMilestoneContents.length);
        console.log('🔍 Current milestone content ID:', sectionContent.id);
        
        allMilestoneContents.forEach(content => {
          if (content.id !== sectionContent.id) {
            console.log('🔒 Auto-closing milestone:', content.id);
            content.classList.remove('expanded');
            content.style.maxHeight = '0px';
            content.style.opacity = '0';
            content.style.transform = 'translateY(-10px)';
          }
        });
        
        console.log('🔍 Found milestone icons to potentially rotate:', allMilestoneIcons.length);
        console.log('🔍 Current milestone icon ID:', icon?.id);
        
        allMilestoneIcons.forEach(iconEl => {
          if (iconEl.id !== icon?.id) {
            console.log('🔒 Auto-rotating milestone icon:', iconEl.id);
            iconEl.classList.remove('rotated');
            iconEl.style.transform = 'rotate(0deg)';
          }
        });
        
        sectionContent.classList.add('expanded');
        
        // Force immediate style update
        sectionContent.style.maxHeight = '6000px';
        sectionContent.style.opacity = '1';
        sectionContent.style.transform = 'translateY(0)';
        
        if (icon) {
          icon.classList.add('rotated');
          icon.style.transform = 'rotate(180deg)';
        }
        
        console.log('🔓 Milestone expanded - new classes:', sectionContent.className);
        console.log('🔓 New computed style:', window.getComputedStyle(sectionContent).maxHeight);
        
        // Populate form header with project and milestone data
        const milestoneIdNumber = milestoneId.replace('milestone-', '');
        const milestone = projectMilestones.find(m => m.id == milestoneIdNumber);
        if (milestone && window.populateMilestoneFormHeader) {
          window.populateMilestoneFormHeader(milestone);
          // Initialize timeline activities for this milestone
          window.initializeTimelineActivities(milestoneIdNumber, milestone);
        }
        
        // Initialize any character counters in this milestone
        setTimeout(() => {
          const textareas = sectionContent.querySelectorAll('textarea[maxlength]');
          textareas.forEach(textarea => {
            const event = new Event('input', { bubbles: true });
            textarea.dispatchEvent(event);
          });
        }, 100);
      }
      
      // Force a reflow to ensure the transition takes effect
      sectionContent.offsetHeight;
      
    } else {
      console.error('❌ Elements not found for milestone:', milestoneId);
      console.error('Available elements with milestone IDs:', 
        Array.from(document.querySelectorAll('[id*="milestone-"]')).map(el => el.id)
      );
    }
  };

  // Enhanced global functions
  window.showNotification = showNotification;
  window.showSubmissionSuccessModal = showSubmissionSuccessModal;
  window.loadSavedDrafts = loadSavedDrafts;
  window.updateSummaryCards = updateSummaryCards;

  // ✨ Enhanced Milestone Form Validation & Utility Functions ✨

  // Auto-capitalize first letter function
  window.autoCapitalizeFirst = function(textarea) {
    const value = textarea.value;
    if (value.length === 1) {
      textarea.value = value.charAt(0).toUpperCase();
    }
  };

  // Server-based submission date generator (uses same time source as top bar)
  window.generateServerBasedSubmissionDate = function(milestoneId) {
    try {
      // Use the same time configuration as the EIU top bar clock
      const now = new Date();
      
      // Convert to Philippine Standard Time (same as top bar)
      const philippineTime = new Date(now.toLocaleString("en-US", {timeZone: "Asia/Manila"}));
      
      // Format for datetime-local input (YYYY-MM-DDTHH:MM)
      const year = philippineTime.getFullYear();
      const month = String(philippineTime.getMonth() + 1).padStart(2, '0');
      const day = String(philippineTime.getDate()).padStart(2, '0');
      const hours = String(philippineTime.getHours()).padStart(2, '0');
      const minutes = String(philippineTime.getMinutes()).padStart(2, '0');
      
      const formattedDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
      
      const dateInput = document.getElementById(`milestone-${milestoneId}-submission-date`);
      if (dateInput) {
        dateInput.value = formattedDateTime;
        window.validateTimelineSubmissionDate(milestoneId);
        window.updateFormValidation(milestoneId);
        
        // Show confirmation that server time was used
        showNotification('success', 'Time Set', 'Submission date set to current Philippine Standard Time from server.');
      }
    } catch (error) {
      console.error('❌ Error setting server-based submission date:', error);
      showNotification('error', 'Time Error', 'Failed to set submission date. Please try again.');
    }
  };

  // Currency formatting function with maximum limit validation
  window.formatCurrencyInput = function(input) {
    let value = input.value.replace(/[^\d.]/g, ''); // Remove non-numeric characters except decimal
    
    // Ensure only one decimal point
    const parts = value.split('.');
    if (parts.length > 2) {
      value = parts[0] + '.' + parts.slice(1).join('');
    }
    
    // Limit to 2 decimal places
    if (parts[1] && parts[1].length > 2) {
      value = parts[0] + '.' + parts[1].substring(0, 2);
    }
    
    // Check maximum limit (₱999,999,999,999.00)
    const numericValue = parseFloat(value.replace(/,/g, ''));
    const maxLimit = 999999999999.99; // Maximum allowed value
    
    if (numericValue > maxLimit) {
      // If exceeds limit, set to maximum allowed value
      value = '999,999,999,999.99';
      // Show warning notification
      showNotification('warning', 'Amount Limit Reached', 'Maximum allowed amount is ₱999,999,999,999.99');
    }
    
    // Add thousand separators
    if (parts[0]) {
      parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
      value = parts.join('.');
    }
    
    input.value = value;
  };

  // Handle budget input keydown to prevent exceeding maximum limit
  window.handleBudgetKeydown = function(event) {
    const input = event.target;
    const currentValue = input.value.replace(/[^\d.]/g, ''); // Remove formatting
    const maxLimit = 999999999999.99;
    
    // Allow backspace, delete, tab, escape, enter, and arrow keys
    if ([8, 9, 27, 13, 46, 37, 38, 39, 40].indexOf(event.keyCode) !== -1 ||
        // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
        (event.keyCode === 65 && event.ctrlKey === true) ||
        (event.keyCode === 67 && event.ctrlKey === true) ||
        (event.keyCode === 86 && event.ctrlKey === true) ||
        (event.keyCode === 88 && event.ctrlKey === true)) {
      return;
    }
    
    // Allow only numbers and decimal point
    if ((event.shiftKey || (event.keyCode < 48 || event.keyCode > 57)) && 
        (event.keyCode < 96 || event.keyCode > 105) && 
        event.keyCode !== 190 && event.keyCode !== 110) {
      event.preventDefault();
      return;
    }
    
    // Check if adding this character would exceed the limit
    const testValue = currentValue + event.key;
    const numericTestValue = parseFloat(testValue);
    
    if (numericTestValue > maxLimit) {
      event.preventDefault();
      showNotification('warning', 'Amount Limit', 'Cannot exceed ₱999,999,999,999.99');
    }
  };

  // Character count update with color coding
  window.updateCharacterCount = function(milestoneId, fieldType) {
    const textarea = document.getElementById(`milestone-${milestoneId}-${fieldType}-description`) || 
                     document.getElementById(`milestone-${milestoneId}-${fieldType}`) ||
                     document.getElementById(`milestone-${milestoneId}-notes`);
    const counter = document.getElementById(`milestone-${milestoneId}-${fieldType}-char-count`) ||
                   document.getElementById(`milestone-${milestoneId}-notes-char-count`);
    
    if (textarea && counter) {
      const currentLength = textarea.value.length;
      const maxLength = textarea.maxLength;
      
      counter.textContent = `${currentLength}/${maxLength}`;
      
      // Color coding based on usage
      if (currentLength >= maxLength * 0.9) {
        counter.style.color = '#dc2626'; // Red
        counter.classList.add('font-bold');
      } else if (currentLength >= maxLength * 0.7) {
        counter.style.color = '#d97706'; // Orange
        counter.classList.remove('font-bold');
      } else {
        counter.style.color = '#6b7280'; // Gray
        counter.classList.remove('font-bold');
      }
    }
  };

  // Validation functions
  window.validateTimelineSubmissionDate = function(milestoneId) {
    const dateInput = document.getElementById(`milestone-${milestoneId}-submission-date`);
    const errorDiv = document.getElementById(`milestone-${milestoneId}-timeline-date-error`);
    
    if (dateInput && errorDiv) {
      if (!dateInput.value) {
        dateInput.classList.add('border-red-500', 'bg-red-50');
        dateInput.classList.remove('border-green-500', 'bg-green-50');
        errorDiv.classList.remove('hidden');
        return false;
      } else {
        dateInput.classList.add('border-green-500', 'bg-green-50');
        dateInput.classList.remove('border-red-500', 'bg-red-50');
        errorDiv.classList.add('hidden');
        return true;
      }
    }
    return false;
  };

  window.validateTimelineDescription = function(milestoneId) {
    const textarea = document.getElementById(`milestone-${milestoneId}-timeline-description`);
    const errorDiv = document.getElementById(`milestone-${milestoneId}-timeline-description-error`);
    
    if (textarea && errorDiv) {
      if (!textarea.value.trim()) {
        textarea.classList.add('border-red-500', 'bg-red-50');
        textarea.classList.remove('border-green-500', 'bg-green-50');
        errorDiv.classList.remove('hidden');
        return false;
      } else {
        textarea.classList.add('border-green-500', 'bg-green-50');
        textarea.classList.remove('border-red-500', 'bg-red-50');
        errorDiv.classList.add('hidden');
        return true;
      }
    }
    return false;
  };

  window.validateBudgetAmount = function(milestoneId) {
    const input = document.getElementById(`milestone-${milestoneId}-budget-amount`);
    const errorDiv = document.getElementById(`milestone-${milestoneId}-budget-amount-error`);
    
    if (input && errorDiv) {
      const value = input.value.replace(/[^\d.]/g, '');
      if (!value || parseFloat(value) <= 0) {
        input.classList.add('border-red-500', 'bg-red-50');
        input.classList.remove('border-green-500', 'bg-green-50');
        errorDiv.classList.remove('hidden');
        return false;
      } else {
        input.classList.add('border-green-500', 'bg-green-50');
        input.classList.remove('border-red-500', 'bg-red-50');
        errorDiv.classList.add('hidden');
        return true;
      }
    }
    return false;
  };

  window.validateBudgetBreakdown = function(milestoneId) {
    const textarea = document.getElementById(`milestone-${milestoneId}-budget-breakdown`);
    const errorDiv = document.getElementById(`milestone-${milestoneId}-budget-breakdown-error`);
    
    if (textarea && errorDiv) {
      if (!textarea.value.trim()) {
        textarea.classList.add('border-red-500', 'bg-red-50');
        textarea.classList.remove('border-green-500', 'bg-green-50');
        errorDiv.classList.remove('hidden');
        return false;
      } else {
        textarea.classList.add('border-green-500', 'bg-green-50');
        textarea.classList.remove('border-red-500', 'bg-red-50');
        errorDiv.classList.add('hidden');
        return true;
      }
    }
    return false;
  };

  window.validatePhysicalDescription = function(milestoneId) {
    const textarea = document.getElementById(`milestone-${milestoneId}-physical-description`);
    const errorDiv = document.getElementById(`milestone-${milestoneId}-physical-description-error`);
    
    if (textarea && errorDiv) {
      if (!textarea.value.trim()) {
        textarea.classList.add('border-red-500', 'bg-red-50');
        textarea.classList.remove('border-green-500', 'bg-green-50');
        errorDiv.classList.remove('hidden');
        return false;
      } else {
        textarea.classList.add('border-green-500', 'bg-green-50');
        textarea.classList.remove('border-red-500', 'bg-red-50');
        errorDiv.classList.add('hidden');
        return true;
      }
    }
    return false;
  };

  window.validateAdditionalNotes = function(milestoneId) {
    const textarea = document.getElementById(`milestone-${milestoneId}-notes`);
    const errorDiv = document.getElementById(`milestone-${milestoneId}-notes-error`);
    
    if (textarea && errorDiv) {
      if (!textarea.value.trim()) {
        textarea.classList.add('border-red-500', 'bg-red-50');
        textarea.classList.remove('border-green-500', 'bg-green-50');
        errorDiv.classList.remove('hidden');
        return false;
      } else {
        textarea.classList.add('border-green-500', 'bg-green-50');
        textarea.classList.remove('border-red-500', 'bg-red-50');
        errorDiv.classList.add('hidden');
        return true;
      }
    }
    return false;
  };

  // File validation functions
  window.validatePhotoEvidence = function(milestoneId) {
    const input = document.getElementById(`milestone-${milestoneId}-photo-files`);
    const errorDiv = document.getElementById(`milestone-${milestoneId}-photo-error`);
    const previewContainer = document.getElementById(`milestone-${milestoneId}-photo-preview`);
    
    if (errorDiv) {
      // Check if there are photos in the preview container
      const hasPhotosInPreview = previewContainer && previewContainer.children.length > 0;
      
      // Check if there are photos in storage
      const hasPhotosInStorage = window.milestoneFileStorage && 
                                window.milestoneFileStorage[milestoneId] && 
                                window.milestoneFileStorage[milestoneId].photos && 
                                window.milestoneFileStorage[milestoneId].photos.length > 0;
      
      // Check if input has files (for immediate validation during upload)
      const hasFilesInInput = input && input.files && input.files.length > 0;
      
      // Valid if any of these conditions are true
      const isValid = hasPhotosInPreview || hasPhotosInStorage || hasFilesInInput;
      
      if (isValid) {
        errorDiv.classList.add('hidden');
        console.log(`✅ Photo evidence validation passed for milestone ${milestoneId}`);
        return true;
      } else {
        errorDiv.classList.remove('hidden');
        console.log(`❌ Photo evidence validation failed for milestone ${milestoneId}`);
        return false;
      }
    }
    return false;
  };

  window.validateVideoEvidence = function(milestoneId) {
    const input = document.getElementById(`milestone-${milestoneId}-video-files`);
    const errorDiv = document.getElementById(`milestone-${milestoneId}-video-error`);
    const previewContainer = document.getElementById(`milestone-${milestoneId}-video-preview`);
    
    if (errorDiv) {
      // Check if there are videos in the preview container
      const hasVideosInPreview = previewContainer && previewContainer.children.length > 0;
      
      // Check if there are videos in storage
      const hasVideosInStorage = window.milestoneFileStorage && 
                                window.milestoneFileStorage[milestoneId] && 
                                window.milestoneFileStorage[milestoneId].videos && 
                                window.milestoneFileStorage[milestoneId].videos.length > 0;
      
      // Check if input has files (for immediate validation during upload)
      const hasFilesInInput = input && input.files && input.files.length > 0;
      
      // Valid if any of these conditions are true
      const isValid = hasVideosInPreview || hasVideosInStorage || hasFilesInInput;
      
      if (isValid) {
        errorDiv.classList.add('hidden');
        console.log(`✅ Video evidence validation passed for milestone ${milestoneId}`);
        return true;
      } else {
        errorDiv.classList.remove('hidden');
        console.log(`❌ Video evidence validation failed for milestone ${milestoneId}`);
        return false;
      }
    }
    return false;
  };

  window.validateDocumentEvidence = function(milestoneId) {
    const input = document.getElementById(`milestone-${milestoneId}-document-files`);
    const errorDiv = document.getElementById(`milestone-${milestoneId}-document-error`);
    
    if (input && errorDiv) {
      if (!input.files || input.files.length === 0) {
        errorDiv.classList.remove('hidden');
        return false;
      } else {
        errorDiv.classList.add('hidden');
        return true;
      }
    }
    return false;
  };

  // Activity date validation function


   // Set up date input constraints based on milestone timeline
   window.setupActivityDateConstraints = function(milestoneId, milestone) {
     const dateInput = document.getElementById(`milestone-${milestoneId}-activity-date`);
     const infoDiv = document.getElementById(`milestone-${milestoneId}-date-range-info`);
     
     if (!dateInput || !milestone) return;
     
     // Extract start and end dates using the same logic as validation
     const startDate = milestone.timelineStartDate || milestone.plannedStartDate || milestone.timelineDivision?.startDate || milestone.timeline?.startDate || milestone.startDate || selectedProject.startDate;
     const endDate = milestone.timelineEndDate || milestone.plannedEndDate || milestone.timelineDivision?.endDate || milestone.timeline?.endDate || milestone.endDate || selectedProject.endDate;
     
     if (startDate && endDate) {
       // Set min and max attributes on the date input
       dateInput.min = startDate;
       dateInput.max = endDate;
       
       // Update info text
       if (infoDiv) {
         const startDateObj = new Date(startDate);
         const endDateObj = new Date(endDate);
         infoDiv.textContent = `Select a date between ${startDateObj.toLocaleDateString()} and ${endDateObj.toLocaleDateString()}`;
       }
       
       console.log(`📅 Activity date constraints set for milestone ${milestoneId}:`, {
         min: startDate,
         max: endDate,
         milestone: milestone.title || milestone.name
       });
     } else {
       console.warn(`⚠️ Could not set date constraints for milestone ${milestoneId} - missing timeline dates`);
       if (infoDiv) {
         infoDiv.textContent = 'Timeline dates not properly configured for this milestone';
         infoDiv.classList.add('text-orange-600');
       }
     }
   };

  // Comprehensive form validation
  window.updateFormValidation = function(milestoneId) {
    const validations = [
      { name: 'Submission Date', isValid: window.validateTimelineSubmissionDate(milestoneId) },
      { name: 'Timeline Activities & Deliverables', isValid: window.validateTimelineActivities(milestoneId) },
      { name: 'Used Budget Amount', isValid: window.validateBudgetAmount(milestoneId) },
      { name: 'Budget Breakdown & Allocation', isValid: window.validateBudgetBreakdown(milestoneId) },
      { name: 'Photo Evidence', isValid: window.validatePhotoEvidence(milestoneId) },
      { name: 'Video Evidence', isValid: window.validateVideoEvidence(milestoneId) },
      { name: 'Excel/Document Files', isValid: window.validateDocumentEvidence(milestoneId) },
      { name: 'Physical Progress Description', isValid: window.validatePhysicalDescription(milestoneId) },
      { name: 'Additional Notes', isValid: window.validateAdditionalNotes(milestoneId) }
    ];

    const invalidFields = validations.filter(v => !v.isValid);
    const submitButton = document.getElementById(`milestone-${milestoneId}-submit-btn`);
    const validationSummary = document.getElementById(`milestone-${milestoneId}-validation-summary`);
    const validationList = document.getElementById(`milestone-${milestoneId}-validation-list`);

    if (invalidFields.length === 0) {
      // All valid - enable submit button
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
      }
      if (validationSummary) {
        validationSummary.classList.add('hidden');
      }
    } else {
      // Some invalid - disable submit button and show errors
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.classList.add('opacity-50', 'cursor-not-allowed');
      }
      if (validationSummary && validationList) {
        validationList.innerHTML = invalidFields.map(field => 
          `<li>• ${field.name}</li>`
        ).join('');
        validationSummary.classList.remove('hidden');
      }
    }
  };

  // Budget calculations with enhanced logic
  window.updateBudgetCalculations = function(milestoneId) {
    const milestone = projectMilestones.find(m => m.id === milestoneId);
    if (!milestone) return;

    const amountInput = document.getElementById(`milestone-${milestoneId}-budget-amount`);
    const usedDisplay = document.getElementById(`milestone-${milestoneId}-used-display`);
    const remainingDisplay = document.getElementById(`milestone-${milestoneId}-remaining-display`);
    const divisionUtilizedSpan = document.getElementById(`milestone-${milestoneId}-budget-division-utilized`);
    const milestoneUtilizedSpan = document.getElementById(`milestone-${milestoneId}-milestone-utilized`);

    if (!amountInput) return;

    const usedAmount = parseFloat(amountInput.value.replace(/[^\d.]/g, '')) || 0;
    const plannedBudget = parseFloat(milestone.plannedBudget) || 0;

    // Update displays
    if (usedDisplay) {
      usedDisplay.textContent = usedAmount.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    }

    const remainingBudget = plannedBudget - usedAmount;
    if (remainingDisplay) {
      remainingDisplay.textContent = remainingBudget.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    }

    // Calculate utilization percentages
    const budgetDivisionWeight = (milestone.weight / 3) || 0; // Assuming 3 divisions
    const budgetDivisionUtilized = plannedBudget > 0 ? (usedAmount / plannedBudget) * budgetDivisionWeight : 0;
    const milestoneUtilized = plannedBudget > 0 ? (usedAmount / plannedBudget) * milestone.weight : 0;

    if (divisionUtilizedSpan) {
      divisionUtilizedSpan.textContent = budgetDivisionUtilized.toFixed(2) + '%';
    }
    if (milestoneUtilizedSpan) {
      milestoneUtilizedSpan.textContent = milestoneUtilized.toFixed(2) + '%';
    }
  };

  // File upload handlers with drag-and-drop support
  window.handleDragOver = function(event) {
    event.preventDefault();
    event.currentTarget.classList.add('border-emerald-400', 'bg-emerald-50');
  };

  window.handleDragEnter = function(event) {
    event.preventDefault();
  };

  window.handleDragLeave = function(event) {
    event.preventDefault();
    event.currentTarget.classList.remove('border-emerald-400', 'bg-emerald-50');
  };

  window.handleFileDrop = function(event, milestoneId, fileType) {
    event.preventDefault();
    event.currentTarget.classList.remove('border-emerald-400', 'bg-emerald-50');
    
    const files = event.dataTransfer.files;
    const input = document.getElementById(`milestone-${milestoneId}-${fileType}-files`);
    
    if (input && files.length > 0) {
      input.files = files;
      if (fileType === 'photo') {
        window.handlePhotoUpload(milestoneId, input);
        window.validatePhotoEvidence(milestoneId);
      } else if (fileType === 'video') {
        window.handleVideoUpload(milestoneId, input);
        window.validateVideoEvidence(milestoneId);
      } else if (fileType === 'document') {
        window.handleDocumentUpload(milestoneId, input);
        window.validateDocumentEvidence(milestoneId);
      }
      window.updateFormValidation(milestoneId);
    }
  };

  window.handlePhotoUpload = function(milestoneId, input) {
    const previewContainer = document.getElementById(`milestone-${milestoneId}-photo-preview`);
    if (!previewContainer || !input.files) return;

    // Get existing files from the preview container
    const existingFiles = Array.from(previewContainer.children);
    const existingCount = existingFiles.length;
    
    // Limit to 5 photo evidence files total
    const maxFiles = 5;
    const newFiles = Array.from(input.files);
    
    // Check if we're at the limit before processing
    if (existingCount >= maxFiles) {
      alert(`Maximum ${maxFiles} photo evidence files allowed. Please remove some existing files first.`);
      input.value = '';
      return;
    }

    // Calculate how many new files we can actually add
    const allowedNewFiles = maxFiles - existingCount;
    const filesToProcess = newFiles.slice(0, allowedNewFiles);

    if (newFiles.length > allowedNewFiles) {
      alert(`Maximum ${maxFiles} photo evidence files allowed. Only ${allowedNewFiles} of the selected files will be uploaded.`);
    }

    // Store files in a persistent way to prevent loss on browser minimize
    if (!window.milestoneFileStorage) {
      window.milestoneFileStorage = {};
    }
    if (!window.milestoneFileStorage[milestoneId]) {
      window.milestoneFileStorage[milestoneId] = { photos: [] };
    }

    // Check for duplicate file names to prevent re-upload duplicates
    const existingFileNames = new Set();
    window.milestoneFileStorage[milestoneId].photos.forEach(photo => {
      existingFileNames.add(photo.originalFileName);
    });

    // Filter out duplicate files
    const uniqueFiles = filesToProcess.filter(file => {
      if (existingFileNames.has(file.name)) {
        console.warn(`File "${file.name}" already uploaded, skipping duplicate.`);
        return false;
      }
      return true;
    });

    if (uniqueFiles.length === 0) {
      alert('All selected files have already been uploaded.');
      input.value = '';
      return;
    }

    if (uniqueFiles.length < filesToProcess.length) {
      alert(`${filesToProcess.length - uniqueFiles.length} duplicate file(s) were skipped.`);
    }

    // Don't clear existing previews - append new ones
    uniqueFiles.forEach((file, index) => {
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const preview = document.createElement('div');
          const totalIndex = existingCount + index; // Use total index for unique identification
          const fileId = `${milestoneId}-photo-${totalIndex}-${Date.now()}`;
          const dataUrl = e.target.result;
          
          preview.className = 'relative bg-gray-100 rounded-lg overflow-hidden';
          preview.setAttribute('data-file-name', file.name);
          preview.setAttribute('data-file-index', totalIndex);
          preview.setAttribute('data-file-id', fileId);
          // Store file info for collection during submission
          preview.setAttribute('data-file-info', JSON.stringify({
            name: file.name,
            size: file.size,
            type: file.type,
            file: file, // Store the actual File object
            url: dataUrl // Local preview URL
          }));
          preview.innerHTML = `
            <img src="${dataUrl}" alt="Preview ${totalIndex + 1}" class="w-full h-24 object-cover cursor-pointer hover:opacity-80 transition-opacity" data-original-src="${dataUrl}" data-file-id="${fileId}" onload="this.setAttribute('data-loaded', 'true')" onclick="previewPhoto('${dataUrl}', '${file.name}')">
            <button onclick="removeFilePreview(this, '${milestoneId}', 'photo', ${totalIndex})" class="absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600 z-10">×</button>
            <div class="p-2">
              <p class="text-xs text-gray-600 truncate">${file.name}</p>
              <p class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(1)} MB</p>
            </div>
          `;
          previewContainer.appendChild(preview);
          
          // Store file data persistently with enhanced metadata
          console.log('📸 Storing photo file:', file.name, 'for milestone:', milestoneId);
          window.milestoneFileStorage[milestoneId].photos.push({
            id: fileId,
            name: file.name,
            size: file.size,
            type: file.type,
            dataUrl: dataUrl,
            index: totalIndex,
            timestamp: Date.now(),
            originalFileName: file.name,
            file: file // Store the actual File object for later upload
          });
          console.log('📸 Updated storage for milestone', milestoneId, ':', window.milestoneFileStorage[milestoneId]);
          
          // Save to sessionStorage for persistence across page refreshes
          try {
            sessionStorage.setItem(`milestone-files-${milestoneId}`, JSON.stringify(window.milestoneFileStorage[milestoneId]));
            // Also save individual photo for quick access
            sessionStorage.setItem(`photo-${fileId}`, dataUrl);
          } catch (e) {
            console.warn('Could not save file data to sessionStorage:', e);
          }
          
          // Apply protection to the newly added image
          const newImg = preview.querySelector('img');
          if (newImg && window.imageObserver) {
            window.imageObserver.observe(newImg, {
              attributes: true,
              attributeFilter: ['src']
            });
          }
        };
        reader.readAsDataURL(file);
      }
    });
    
    // Clear the input value to allow re-uploading the same file
    input.value = '';
    
    window.updateUploadStatus(milestoneId);
  };

  window.handleVideoUpload = function(milestoneId, input) {
    const previewContainer = document.getElementById(`milestone-${milestoneId}-video-preview`);
    if (!previewContainer || !input.files) return;

    // Store videos in persistent storage
    if (!window.milestoneFileStorage) {
      window.milestoneFileStorage = {};
    }
    if (!window.milestoneFileStorage[milestoneId]) {
      window.milestoneFileStorage[milestoneId] = { photos: [], videos: [] };
    }
    if (!window.milestoneFileStorage[milestoneId].videos) {
      window.milestoneFileStorage[milestoneId].videos = [];
    }

    // Don't clear existing previews - append new ones
    const existingFiles = Array.from(previewContainer.children);
    const existingCount = existingFiles.length;

    Array.from(input.files).forEach((file, index) => {
      if (file.type.startsWith('video/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const preview = document.createElement('div');
          const totalIndex = existingCount + index;
          const fileId = `${milestoneId}-video-${totalIndex}-${Date.now()}`;
          const dataUrl = e.target.result;
          
          preview.className = 'relative bg-gray-100 rounded-lg overflow-hidden cursor-pointer hover:shadow-lg transition-shadow';
          preview.setAttribute('data-file-name', file.name);
          preview.setAttribute('data-file-index', totalIndex);
          preview.setAttribute('data-file-id', fileId);
          // Store file info for collection during submission
          preview.setAttribute('data-file-info', JSON.stringify({
            name: file.name,
            size: file.size,
            type: file.type,
            file: file, // Store the actual File object
            url: dataUrl // Local preview URL
          }));
          preview.innerHTML = `
            <div class="relative" onclick="previewVideo('${dataUrl}', '${file.name}')">
              <!-- Video Thumbnail/Preview -->
              <div class="bg-gradient-to-br from-purple-100 to-purple-200 p-6 flex flex-col items-center justify-center min-h-[120px]">
                <svg class="w-12 h-12 text-purple-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293H15M9 10V9a2 2 0 012-2h2a2 2 0 012 2v1M9 10v5a2 2 0 002 2h2a2 2 0 002-2v-5"></path>
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                  <div class="bg-white bg-opacity-90 rounded-full p-3 shadow-lg">
                    <svg class="w-8 h-8 text-purple-600" fill="currentColor" viewBox="0 0 24 24">
                      <path d="M8 5v14l11-7z"/>
                    </svg>
                  </div>
                </div>
              </div>
              <!-- Video Info -->
              <div class="p-3 bg-white">
                <p class="text-sm font-medium text-gray-700 truncate">${file.name}</p>
                <p class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(1)} MB</p>
              </div>
            </div>
            <button onclick="event.stopPropagation(); removeFilePreview(this, '${milestoneId}', 'video', ${totalIndex})" class="absolute top-2 right-2 bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm hover:bg-red-600 z-10 shadow-lg">×</button>
          `;
          previewContainer.appendChild(preview);

          // Store video data persistently
          console.log('🎥 Storing video file:', file.name, 'for milestone:', milestoneId);
          window.milestoneFileStorage[milestoneId].videos.push({
            id: fileId,
            name: file.name,
            size: file.size,
            type: file.type,
            dataUrl: dataUrl,
            index: totalIndex,
            timestamp: Date.now(),
            originalFileName: file.name,
            file: file // Store the actual File object for later upload
          });
          console.log('🎥 Updated storage for milestone', milestoneId, ':', window.milestoneFileStorage[milestoneId]);

          // Save to sessionStorage for persistence
          try {
            sessionStorage.setItem(`milestone-files-${milestoneId}`, JSON.stringify(window.milestoneFileStorage[milestoneId]));
            sessionStorage.setItem(`video-${fileId}`, dataUrl);
          } catch (e) {
            console.warn('Could not save video data to sessionStorage:', e);
          }
        };
        reader.readAsDataURL(file);
      }
    });
    
    // Clear input to allow re-uploading
    input.value = '';
    window.updateUploadStatus(milestoneId);
  };

  window.handleDocumentUpload = function(milestoneId, input) {
    const previewContainer = document.getElementById(`milestone-${milestoneId}-document-preview`);
    if (!previewContainer || !input.files) return;

    // Store documents in persistent storage
    if (!window.milestoneFileStorage) {
      window.milestoneFileStorage = {};
    }
    if (!window.milestoneFileStorage[milestoneId]) {
      window.milestoneFileStorage[milestoneId] = { photos: [], videos: [], documents: [] };
    }
    if (!window.milestoneFileStorage[milestoneId].documents) {
      window.milestoneFileStorage[milestoneId].documents = [];
    }

    previewContainer.innerHTML = '';
    Array.from(input.files).forEach((file, index) => {
      const preview = document.createElement('div');
      const fileId = `${milestoneId}-document-${index}-${Date.now()}`;
      preview.className = 'relative bg-gray-100 rounded-lg p-4 flex items-center gap-3';
      preview.setAttribute('data-file-id', fileId);
      preview.setAttribute('data-file-index', index);
      // Store file info for collection during submission
      preview.setAttribute('data-file-info', JSON.stringify({
        name: file.name,
        size: file.size,
        type: file.type,
        file: file, // Store the actual File object
        url: '#' // Will be replaced with server URL after upload
      }));
      preview.innerHTML = `
        <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <div class="flex-1">
          <p class="text-sm font-medium text-gray-700">${file.name}</p>
          <p class="text-xs text-gray-500">${(file.size / 1024 / 1024).toFixed(1)} MB</p>
        </div>
        <button onclick="removeFilePreview(this, '${milestoneId}', 'document', ${index})" class="bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600">×</button>
      `;
      previewContainer.appendChild(preview);

      // Store document data persistently
      console.log('📄 Storing document file:', file.name, 'for milestone:', milestoneId);
      window.milestoneFileStorage[milestoneId].documents.push({
        id: fileId,
        name: file.name,
        size: file.size,
        type: file.type,
        index: index,
        timestamp: Date.now(),
        originalFileName: file.name,
        file: file // Store the actual File object for later upload
      });
      console.log('📄 Updated storage for milestone', milestoneId, ':', window.milestoneFileStorage[milestoneId]);
    });

    // Save to sessionStorage for persistence
    try {
      sessionStorage.setItem(`milestone-files-${milestoneId}`, JSON.stringify(window.milestoneFileStorage[milestoneId]));
    } catch (e) {
      console.warn('Could not save document data to sessionStorage:', e);
    }

    window.updateUploadStatus(milestoneId);
  };

  window.removeFilePreview = function(button, milestoneId, fileType, index) {
    const previewElement = button.closest('.relative');
    const fileId = previewElement.getAttribute('data-file-id');
    
    // Remove from DOM
    previewElement.remove();
    
    // Remove from persistent storage
    if (window.milestoneFileStorage && window.milestoneFileStorage[milestoneId]) {
      if (fileType === 'photo') {
        window.milestoneFileStorage[milestoneId].photos = window.milestoneFileStorage[milestoneId].photos.filter(photo => photo.id !== fileId);
      } else if (fileType === 'video') {
        window.milestoneFileStorage[milestoneId].videos = window.milestoneFileStorage[milestoneId].videos.filter(video => video.id !== fileId);
      }
      
      // Update sessionStorage
      try {
        sessionStorage.setItem(`milestone-files-${milestoneId}`, JSON.stringify(window.milestoneFileStorage[milestoneId]));
        // Also remove individual file storage
        sessionStorage.removeItem(`${fileType}-${fileId}`);
      } catch (e) {
        console.warn('Could not update file data in sessionStorage:', e);
      }
    }
    
    window.updateUploadStatus(milestoneId);
    window.updateFormValidation(milestoneId);
  };

  // Function to restore photos from storage
  window.restorePhotosFromStorage = function(milestoneId) {
    try {
      const storedData = sessionStorage.getItem(`milestone-files-${milestoneId}`);
      if (!storedData) return;
      
      const fileData = JSON.parse(storedData);
      if (!fileData.photos || fileData.photos.length === 0) return;
      
      const previewContainer = document.getElementById(`milestone-${milestoneId}-photo-preview`);
      if (!previewContainer) return;
      
      console.log(`🔄 Restoring ${fileData.photos.length} photos for milestone ${milestoneId}`);
      
      // Clear existing previews to avoid duplicates
      previewContainer.innerHTML = '';
      
      // Restore each photo with enhanced error handling
      fileData.photos.forEach(photo => {
        const preview = document.createElement('div');
        preview.className = 'relative bg-gray-100 rounded-lg overflow-hidden';
        preview.setAttribute('data-file-name', photo.name);
        preview.setAttribute('data-file-index', photo.index);
        preview.setAttribute('data-file-id', photo.id);
        
        // Ensure we have the data URL
        const dataUrl = photo.dataUrl || sessionStorage.getItem(`photo-${photo.id}`);
        if (!dataUrl) {
          console.warn(`No data URL found for photo ${photo.id}`);
          return;
        }
        
        preview.innerHTML = `
          <img src="${dataUrl}" alt="Preview ${photo.index + 1}" class="w-full h-24 object-cover cursor-pointer hover:opacity-80 transition-opacity" data-original-src="${dataUrl}" data-file-id="${photo.id}" onload="this.setAttribute('data-loaded', 'true')" onclick="previewPhoto('${dataUrl}', '${photo.name}')">
          <button onclick="removeFilePreview(this, '${milestoneId}', 'photo', ${photo.index})" class="absolute top-1 right-1 bg-red-500 text-white rounded-full w-6 h-6 flex items-center justify-center text-xs hover:bg-red-600 z-10">×</button>
          <div class="p-2">
            <p class="text-xs text-gray-600 truncate">${photo.name}</p>
            <p class="text-xs text-gray-500">${(photo.size / 1024 / 1024).toFixed(1)} MB</p>
          </div>
        `;
        previewContainer.appendChild(preview);
        
        // Also ensure individual photo storage
        if (dataUrl) {
          sessionStorage.setItem(`photo-${photo.id}`, dataUrl);
        }
        
        // Apply protection to the restored image
        const restoredImg = preview.querySelector('img');
        if (restoredImg && window.imageObserver) {
          window.imageObserver.observe(restoredImg, {
            attributes: true,
            attributeFilter: ['src']
          });
        }
      });
      
      // Initialize storage in memory
              if (!window.milestoneFileStorage) {
          window.milestoneFileStorage = {};
        }
        window.milestoneFileStorage[milestoneId] = fileData;
        
            // Trigger validation after restoration
    if (window.validatePhotoEvidence) {
      window.validatePhotoEvidence(milestoneId);
    }
    
    console.log(`✅ Successfully restored ${fileData.photos.length} photos for milestone ${milestoneId}`);
  } catch (e) {
    console.warn('Could not restore photos from storage:', e);
  }
};

// Function to restore videos from storage
window.restoreVideosFromStorage = function(milestoneId) {
  try {
    const storedData = sessionStorage.getItem(`milestone-files-${milestoneId}`);
    if (!storedData) return;
    
    const fileData = JSON.parse(storedData);
    if (!fileData.videos || fileData.videos.length === 0) return;
    
    const previewContainer = document.getElementById(`milestone-${milestoneId}-video-preview`);
    if (!previewContainer) return;
    
    console.log(`🔄 Restoring ${fileData.videos.length} videos for milestone ${milestoneId}`);
    
    // Clear existing previews to avoid duplicates
    previewContainer.innerHTML = '';
    
    fileData.videos.forEach(video => {
      const preview = document.createElement('div');
      preview.className = 'relative bg-gray-100 rounded-lg overflow-hidden cursor-pointer hover:shadow-lg transition-shadow';
      preview.setAttribute('data-file-name', video.name);
      preview.setAttribute('data-file-index', video.index);
      preview.setAttribute('data-file-id', video.id);
      
      const dataUrl = video.dataUrl || sessionStorage.getItem(`video-${video.id}`);
      if (!dataUrl) {
        console.warn(`No data URL found for video ${video.id}`);
        return;
      }
      
      preview.innerHTML = `
        <div class="relative" onclick="previewVideo('${dataUrl}', '${video.name}')">
          <!-- Video Thumbnail/Preview -->
          <div class="bg-gradient-to-br from-purple-100 to-purple-200 p-6 flex flex-col items-center justify-center min-h-[120px]">
            <svg class="w-12 h-12 text-purple-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293H15M9 10V9a2 2 0 012-2h2a2 2 0 012 2v1M9 10v5a2 2 0 002 2h2a2 2 0 002-2v-5"></path>
            </svg>
            <div class="absolute inset-0 flex items-center justify-center">
              <div class="bg-white bg-opacity-90 rounded-full p-3 shadow-lg">
                <svg class="w-8 h-8 text-purple-600" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </div>
            </div>
          </div>
          <!-- Video Info -->
          <div class="p-3 bg-white">
            <p class="text-sm font-medium text-gray-700 truncate">${video.name}</p>
            <p class="text-xs text-gray-500">${(video.size / 1024 / 1024).toFixed(1)} MB</p>
          </div>
        </div>
        <button onclick="event.stopPropagation(); removeFilePreview(this, '${milestoneId}', 'video', ${video.index})" class="absolute top-2 right-2 bg-red-500 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm hover:bg-red-600 z-10 shadow-lg">×</button>
      `;
      previewContainer.appendChild(preview);
      
      // Store video data for quick access
      if (dataUrl) {
        sessionStorage.setItem(`video-${video.id}`, dataUrl);
      }
    });
    
    // Update storage reference
    if (!window.milestoneFileStorage) {
      window.milestoneFileStorage = {};
    }
    window.milestoneFileStorage[milestoneId] = fileData;
    
    // Trigger validation after restoration
    if (window.validateVideoEvidence) {
      window.validateVideoEvidence(milestoneId);
    }
    
    console.log(`✅ Successfully restored ${fileData.videos.length} videos for milestone ${milestoneId}`);
  } catch (e) {
    console.warn('Could not restore videos from storage:', e);
  }
};

  window.updateUploadStatus = function(milestoneId) {
    const photoInput = document.getElementById(`milestone-${milestoneId}-photo-files`);
    const videoInput = document.getElementById(`milestone-${milestoneId}-video-files`);
    const documentInput = document.getElementById(`milestone-${milestoneId}-document-files`);
    const statusDiv = document.getElementById(`milestone-${milestoneId}-upload-status`);

    if (!statusDiv) return;

    // Check photos - use preview container and storage instead of input.files
    const photoPreview = document.getElementById(`milestone-${milestoneId}-photo-preview`);
    const hasPhotosInPreview = photoPreview && photoPreview.children.length > 0;
    const hasPhotosInStorage = window.milestoneFileStorage && 
                             window.milestoneFileStorage[milestoneId] && 
                             window.milestoneFileStorage[milestoneId].photos && 
                             window.milestoneFileStorage[milestoneId].photos.length > 0;
    const photoCount = hasPhotosInPreview || hasPhotosInStorage ? 1 : 0;

    // Check videos - use preview container and storage instead of input.files
    const videoPreview = document.getElementById(`milestone-${milestoneId}-video-preview`);
    const hasVideosInPreview = videoPreview && videoPreview.children.length > 0;
    const hasVideosInStorage = window.milestoneFileStorage && 
                             window.milestoneFileStorage[milestoneId] && 
                             window.milestoneFileStorage[milestoneId].videos && 
                             window.milestoneFileStorage[milestoneId].videos.length > 0;
    const videoCount = hasVideosInPreview || hasVideosInStorage ? 1 : 0;

    // Check documents (still use input.files since they're not cleared)
    const documentCount = documentInput?.files?.length || 0;

    const allRequired = photoCount > 0 && videoCount > 0 && documentCount > 0;

    if (allRequired) {
      statusDiv.innerHTML = '<span class="text-green-600 font-medium">Complete</span>';
    } else if (photoCount + videoCount + documentCount > 0) {
      statusDiv.innerHTML = '<span class="text-yellow-600 font-medium">Partial</span>';
    } else {
      statusDiv.innerHTML = '<span class="text-red-600 font-medium">Pending Upload</span>';
    }
    
    // Also trigger validation to update error states
    if (window.validatePhotoEvidence) {
      window.validatePhotoEvidence(milestoneId);
    }
    if (window.validateVideoEvidence) {
      window.validateVideoEvidence(milestoneId);
    }
  };

  // Enhanced action button functions
  window.saveMilestoneDraft = function(milestoneId) {
    console.log('💾 Saving milestone draft:', milestoneId);
    
    const formData = {
      milestoneId: milestoneId,
      submissionDate: document.getElementById(`milestone-${milestoneId}-submission-date`)?.value,
      timelineDescription: document.getElementById(`milestone-${milestoneId}-timeline-description`)?.value,
      budgetAmount: document.getElementById(`milestone-${milestoneId}-budget-amount`)?.value,
      budgetBreakdown: document.getElementById(`milestone-${milestoneId}-budget-breakdown`)?.value,
      physicalDescription: document.getElementById(`milestone-${milestoneId}-physical-description`)?.value,
      additionalNotes: document.getElementById(`milestone-${milestoneId}-notes`)?.value,
      savedAt: new Date().toISOString()
    };

    const draftKey = `milestone_draft_${milestoneId}`;
    localStorage.setItem(draftKey, JSON.stringify(formData));
    
    showNotification('success', 'Draft Saved', 'Draft saved successfully! You can resume editing later.');
  };

  window.previewMilestoneSubmission = function(milestoneId) {
    console.log('👁️ Previewing milestone submission:', milestoneId);
    
    try {
      window.updateFormValidation(milestoneId);
      
      const submitButton = document.getElementById(`milestone-${milestoneId}-submit-btn`);
      if (submitButton && submitButton.disabled) {
        showNotification('error', 'Validation Error', 'Please complete all required fields before previewing.');
        return;
      }

      showNotification('info', 'Preview Ready', 'Preview functionality will show a comprehensive overview of your submission.');
    } catch (error) {
      console.error('Error in previewMilestoneSubmission:', error);
      showNotification('error', 'Preview Error', 'An error occurred while preparing the preview. Please try again.');
    }
  };

  window.submitMilestoneToAdminOffice = async function(milestoneId) {
    console.log('🚀 Submitting milestone to Admin Office:', milestoneId);
    
    try {
      window.updateFormValidation(milestoneId);
      
      const submitButton = document.getElementById(`milestone-${milestoneId}-submit-btn`);
      if (submitButton && submitButton.disabled) {
        showNotification('error', 'Validation Error', 'Please complete all required fields before submitting.');
        return;
      }

      // Confirm submission
      const confirmSubmit = confirm('Are you sure you want to submit this milestone for review? Once submitted, it cannot be edited until reviewed by the Implementing Office Admin.');
      if (!confirmSubmit) return;

      // Collect all milestone data
      console.log('📋 About to call collectMilestoneSubmissionData for milestone:', milestoneId);
      const milestoneData = await collectMilestoneSubmissionData(milestoneId);
      console.log('📋 Received milestoneData:', milestoneData);
      if (!milestoneData) {
        console.error('❌ collectMilestoneSubmissionData returned null/undefined');
        showNotification('error', 'Data Collection Error', 'Failed to collect milestone data. Please try again.');
        return;
      }

      // Submit to backend API
      const token = localStorage.getItem('token');
      if (!token) {
        showNotification('error', 'Authentication Error', 'Please log in again.');
        window.location.href = '/login/lgu-pmt';
        return;
      }

      const response = await fetch('http://localhost:3000/api/milestones/milestone-submissions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          milestoneId: milestoneId,
          projectId: selectedProject?.id,
          submissionData: milestoneData,
          submittedBy: {
            fullName: localStorage.getItem('userFullName') || 'EIU User',
            subrole: localStorage.getItem('userSubrole') || 'External Implementing Unit',
            contactNumber: localStorage.getItem('userContact') || 'N/A',
            department: localStorage.getItem('userDepartment') || 'EIU',
            company: localStorage.getItem('userCompany') || 'External Partner'
          },
          submissionDate: new Date().toISOString(),
          status: 'pending_review'
        })
      });

      const result = await response.json();
      
      if (result.success) {
        showNotification('success', 'Submission Complete', 'Milestone submitted successfully! It will be reviewed by the Implementing Office Admin.');
        
        // Create notification for LGU-IU IOO about the new milestone submission
        try {
          const milestone = projectMilestones.find(m => m.id === milestoneId);
          await createLGUNotification({
            projectId: selectedProject?.id,
            projectName: selectedProject?.projectName || 'Unknown Project',
            projectCode: selectedProject?.projectCode || 'N/A',
            milestoneId: milestoneId,
            milestoneName: milestone?.name || milestone?.title || `Milestone ${milestoneId}`,
            submittedBy: {
              fullName: localStorage.getItem('userFullName') || 'EIU User',
              company: localStorage.getItem('userCompany') || 'External Partner'
            },
            submissionDate: new Date().toISOString()
          });
          console.log('✅ LGU notification creation attempted for milestone:', milestoneId);
          
          // Force refresh notifications in any open LGU-IU IOO windows
          if (window.opener && window.opener.notificationService) {
            try {
              await window.opener.notificationService.forceRefresh();
              console.log('🔄 Forced refresh of parent window notifications');
            } catch (e) {
              console.log('Could not refresh parent window notifications:', e);
            }
          }
        } catch (notificationError) {
          console.warn('Failed to create LGU notification:', notificationError);
          // Don't fail the submission if notification fails
        }
        
        // Update UI to reflect submitted status
        const milestoneCard = document.querySelector(`[data-milestone-id="${milestoneId}"]`);
        if (milestoneCard) {
          milestoneCard.classList.add('opacity-75', 'pointer-events-none');
          const statusBadge = milestoneCard.querySelector('.status-badge');
          if (statusBadge) {
            statusBadge.textContent = 'Under Review';
            statusBadge.className = 'status-badge px-2 py-1 bg-yellow-100 text-yellow-800 text-xs rounded-full font-medium';
          }
        }

        // Disable submit button
        if (submitButton) {
          submitButton.disabled = true;
          submitButton.textContent = 'Submitted for Review';
          submitButton.classList.add('opacity-50', 'cursor-not-allowed');
        }

      } else {
        showNotification('error', 'Submission Failed', result.error || 'Failed to submit milestone. Please try again.');
      }

    } catch (error) {
      console.error('Error submitting milestone:', error);
      showNotification('error', 'Network Error', 'Network error occurred. Please check your connection and try again.');
    }
  };

  // Function to create notification for LGU-IU IOO when EIU submits milestone
  window.createLGUNotification = async function(notificationData) {
    try {
      console.log('🔔 Creating LGU notification with data:', notificationData);
      
      const token = localStorage.getItem('token');
      if (!token) {
        console.warn('No auth token available for notification creation');
        return;
      }

      const notificationPayload = {
        type: 'Info',
        category: 'Project',
        priority: 'Medium', // Capital M to match enum
        title: `New Milestone Submission: ${notificationData.milestoneName}`,
        message: `${notificationData.submittedBy.fullName} from ${notificationData.submittedBy.company} has submitted a milestone update for project "${notificationData.projectName}" (${notificationData.projectCode}). Please review the submission in the Progress Timeline.`,
        actionUrl: '/dashboard/iu-implementing-office/modules/progress-timeline',
        actionText: 'Review Submission',
        metadata: {
          updateType: 'milestone_submission',
          projectId: notificationData.projectId,
          projectName: notificationData.projectName,
          projectCode: notificationData.projectCode,
          milestoneId: notificationData.milestoneId,
          milestoneName: notificationData.milestoneName,
          submittedBy: notificationData.submittedBy,
          submissionDate: notificationData.submissionDate
        },
        targetRole: 'lgu-iu', // Target LGU-IU IOO users
        createdAt: new Date().toISOString()
      };

      console.log('📤 Sending notification payload:', notificationPayload);

      const response = await fetch('http://localhost:3000/api/notifications/create-lgu-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(notificationPayload)
      });

      console.log('📡 Notification API response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('📨 Notification API response:', result);
        if (result.success) {
          console.log('✅ LGU notification created successfully:', result.notification);
        } else {
          console.warn('⚠️ LGU notification creation failed:', result.error);
        }
      } else {
        const errorText = await response.text();
        console.warn('⚠️ Failed to create LGU notification - HTTP error:', response.status, errorText);
      }
    } catch (error) {
      console.error('❌ Error creating LGU notification:', error);
      throw error;
    }
  };

  // Test function to manually trigger LGU notification (for debugging)
  window.testLGUNotification = async function() {
    try {
      console.log('🧪 Testing LGU notification system...');
      
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('No auth token available');
        return;
      }

      const response = await fetch('http://localhost:3000/api/notifications/test-lgu-notification', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });

      const result = await response.json();
      console.log('🧪 Test notification result:', result);
      
      if (result.success) {
        console.log('✅ Test notification created successfully!');
        alert('Test notification created! Check the LGU-IU IOO dashboard.');
      } else {
        console.error('❌ Test notification failed:', result);
        alert('Test notification failed: ' + result.message);
      }
    } catch (error) {
      console.error('❌ Error testing LGU notification:', error);
      alert('Error testing notification: ' + error.message);
    }
  };

  // Function to collect all milestone submission data
  window.collectMilestoneSubmissionData = async function(milestoneId) {
    console.log('🚀 collectMilestoneSubmissionData called for milestone:', milestoneId);
    console.log('🗂️ Current milestoneFileStorage:', window.milestoneFileStorage);
    console.log('🎯 selectedProject:', selectedProject);
    console.log('📊 projectMilestones:', projectMilestones);
    
    try {
      if (!selectedProject) {
        console.error('❌ No project selected - selectedProject is:', selectedProject);
        return null;
      }

      const milestone = projectMilestones.find(m => m.id === milestoneId);
      if (!milestone) {
        console.error('❌ Milestone not found - looking for ID:', milestoneId);
        console.error('❌ Available milestones:', projectMilestones.map(m => ({id: m.id, title: m.title})));
        return null;
      }

      console.log('✅ Found milestone:', milestone.title);
      console.log('📋 Starting data collection...');

      // Collect form data
      const timelineActivities = milestoneActivitiesData[milestoneId]?.activities || [];
      const budgetAmount = document.getElementById(`milestone-${milestoneId}-budget-amount`)?.value || '';
      const budgetBreakdown = document.getElementById(`milestone-${milestoneId}-budget-breakdown`)?.value || '';
      const physicalDescription = document.getElementById(`milestone-${milestoneId}-physical-description`)?.value || '';
      const additionalNotes = document.getElementById(`milestone-${milestoneId}-notes`)?.value || '';
      const submissionDate = document.getElementById(`milestone-${milestoneId}-submission-date`)?.value || '';

      // Collect file uploads
      console.log('📁 Starting file collection...');
      const photoFiles = await collectUploadedFiles(`milestone-${milestoneId}-photo-preview`);
      const videoFiles = await collectUploadedFiles(`milestone-${milestoneId}-video-preview`);
      const documentFiles = await collectUploadedFiles(`milestone-${milestoneId}-document-preview`);
      
      console.log('📁 File collection results:');
      console.log('📸 Photos:', photoFiles.length, photoFiles);
      console.log('🎥 Videos:', videoFiles.length, videoFiles);
      console.log('📄 Documents:', documentFiles.length, documentFiles);

      // Calculate budget utilization
      const plannedBudget = parseFloat(milestone.plannedBudget) || 0;
      // Fix: Remove commas and other formatting from budget amount before parsing
      const budgetAmountRaw = budgetAmount.replace(/[^\d.]/g, ''); // Remove commas and other non-numeric chars
      const usedBudget = parseFloat(budgetAmountRaw) || 0;
      console.log('💰 Budget amount parsing:', {
        budgetAmountOriginal: budgetAmount,
        budgetAmountRaw: budgetAmountRaw,
        usedBudgetParsed: usedBudget
      });
      const remainingBudget = plannedBudget - usedBudget;
      const divisionUtilized = plannedBudget > 0 ? ((usedBudget / plannedBudget) * 100).toFixed(2) : 0;
      const milestoneUtilized = divisionUtilized; // Same as division for now

      return {
        // General Information
        projectName: selectedProject.name,
        projectCode: selectedProject.projectCode,
        totalBudgetAllocation: selectedProject.totalBudget,
        startDate: selectedProject.startDate,
        endDate: selectedProject.endDate,
        currentOverallProgress: selectedProject.overallProgress || 0,

        // Milestone Information
        milestoneName: milestone.title || milestone.name,
        plannedBudget: plannedBudget,
        weight: milestone.weight || milestone.timelineWeight,
        dueDate: milestone.dueDate || milestone.timelineEndDate,
        description: milestone.description,

        // Division Data
        divisions: {
          timeline: {
            weight: milestone.timelineWeight || 0,
            startDate: milestone.timelineStartDate,
            endDate: milestone.timelineEndDate,
            submissionDate: submissionDate,
            activities: timelineActivities
          },
          budget: {
            weight: milestone.budgetWeight || 0,
            plannedBudget: plannedBudget,
            fundingSource: milestone.fundingSource || 'LOCAL FUND',
            usedBudget: usedBudget,
            remainingBudget: remainingBudget,
            divisionUtilized: divisionUtilized,
            milestoneUtilized: milestoneUtilized,
            usedBudgetAmount: usedBudget,
            budgetBreakdown: budgetBreakdown
          },
          physical: {
            weight: milestone.physicalWeight || 0,
            requiredProofs: 'Photo, Video, Excel',
            photoEvidence: photoFiles,
            videoEvidence: videoFiles,
            documentEvidence: documentFiles,
            physicalDescription: physicalDescription
          }
        },

        // Additional Information
        additionalNotes: additionalNotes,
        submissionDate: submissionDate
      };

    } catch (error) {
      console.error('Error collecting milestone data:', error);
      return null;
    }
  };

  // Helper function to collect uploaded files and upload them to server
  window.collectUploadedFiles = async function(previewContainerId) {
    console.log(`🔍 collectUploadedFiles called for: ${previewContainerId}`);
    
    const container = document.getElementById(previewContainerId);
    if (!container) {
      console.log('❌ Container not found:', previewContainerId);
      return [];
    }

    // Extract milestone ID from container ID (e.g., "milestone-e2605f3-111a-4716-8b66-02a794e771ec-photo-preview")
    // Pattern: milestone-{FULL_MILESTONE_ID}-{TYPE}-preview
    const parts = previewContainerId.split('-');
    const fileType = parts[parts.length - 2]; // Second to last part is the file type (photo, video, document)
    const milestoneId = parts.slice(1, -2).join('-'); // Everything between "milestone-" and "-{type}-preview"
    
    console.log(`📋 Processing ${fileType} files for milestone ${milestoneId}`);
    console.log('🗂️ Current storage:', window.milestoneFileStorage);
    
    const files = [];

    // Get files from storage
    if (window.milestoneFileStorage && window.milestoneFileStorage[milestoneId]) {
      const storage = window.milestoneFileStorage[milestoneId];
      let fileArray = [];
      
      if (fileType === 'photo' && storage.photos) {
        fileArray = storage.photos;
        console.log(`📸 Found ${fileArray.length} photos in storage`);
      } else if (fileType === 'video' && storage.videos) {
        fileArray = storage.videos;
        console.log(`🎥 Found ${fileArray.length} videos in storage`);
      } else if (fileType === 'document' && storage.documents) {
        fileArray = storage.documents;
        console.log(`📄 Found ${fileArray.length} documents in storage`);
      }
      
      console.log(`📊 File array for ${fileType}:`, fileArray);
      
      for (const fileData of fileArray) {
        console.log(`🔄 Processing file: ${fileData.name}`);
        
        if (fileData.file && fileData.file instanceof File) {
          console.log('✅ File object found, uploading:', fileData.file.name);
          
          try {
            const formData = new FormData();
            formData.append('file', fileData.file);
            formData.append('category', 'milestone-evidence');
            
            console.log('📤 Starting upload for:', fileData.file.name);
            
            const uploadResponse = await fetch('http://localhost:3000/api/uploads/single', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
              },
              body: formData
            });
            
            console.log('📥 Upload response status:', uploadResponse.status);
            
            if (uploadResponse.ok) {
              const uploadResult = await uploadResponse.json();
              console.log('✅ File uploaded successfully:', uploadResult);
              
              files.push({
                name: fileData.name,
                size: fileData.size,
                type: fileData.type,
                url: `http://localhost:3000/uploads/${uploadResult.upload.fileName}`,
                uploadDate: new Date().toISOString(),
                originalName: uploadResult.upload.originalName,
                fileName: uploadResult.upload.fileName
              });
            } else {
              const errorText = await uploadResponse.text();
              console.error('❌ File upload failed:', uploadResponse.status, errorText);
              // Still add the file with placeholder URL
              files.push({
                name: fileData.name,
                size: fileData.size,
                type: fileData.type,
                url: '#',
                uploadDate: new Date().toISOString(),
                error: `Upload failed: ${uploadResponse.status}`
              });
            }
          } catch (uploadError) {
            console.error('💥 Error uploading file:', uploadError);
            // Still add the file with placeholder URL
            files.push({
              name: fileData.name,
              size: fileData.size,
              type: fileData.type,
              url: '#',
              uploadDate: new Date().toISOString(),
              error: 'Upload error: ' + uploadError.message
            });
          }
        } else {
          console.log('⚠️ No file object found for:', fileData.name);
          files.push({
            name: fileData.name,
            size: fileData.size,
            type: fileData.type,
            url: '#',
            uploadDate: new Date().toISOString(),
            note: 'File object not found'
          });
        }
      }
    } else {
      console.log('❌ No storage found for milestone:', milestoneId);
      console.log('🗂️ Available storage keys:', Object.keys(window.milestoneFileStorage || {}));
    }

    console.log(`✅ Collected ${files.length} files from ${previewContainerId}:`, files);
    return files;
  };

  // Function to populate form header with project and milestone data
  window.populateMilestoneFormHeader = function(milestone) {
    if (!selectedProject || !milestone) {
      console.log('⚠️ Missing project or milestone data for form population');
      return;
    }

    console.log('🔄 Populating form for milestone:', milestone.id, milestone);
    console.log('🔄 Milestone weight property:', milestone.weight, typeof milestone.weight);
    console.log('🔄 Available milestone properties:', Object.keys(milestone));
    console.log('🔄 Full milestone object structure:');
    console.table(milestone);
    console.log('🔄 Using project data:', selectedProject);
    
    // Debug: Check if elements exist
    const elementsCheck = {
      'form-project-name': !!document.getElementById(`form-project-name-${milestone.id}`),
      'form-timeline-weight': !!document.getElementById(`form-timeline-weight-${milestone.id}`),
      'form-budget-weight': !!document.getElementById(`form-budget-weight-${milestone.id}`),
      'form-physical-weight': !!document.getElementById(`form-physical-weight-${milestone.id}`),
      'form-timeline-start-date': !!document.getElementById(`form-timeline-start-date-${milestone.id}`),
      'form-timeline-end-date': !!document.getElementById(`form-timeline-end-date-${milestone.id}`),
      'form-budget-planned': !!document.getElementById(`form-budget-planned-${milestone.id}`)
    };
    console.log('🔍 Form elements found:', elementsCheck);

    // Populate project information
    const projectNameEl = document.getElementById(`form-project-name-${milestone.id}`);
    const projectCodeEl = document.getElementById(`form-project-code-${milestone.id}`);
    const totalBudgetEl = document.getElementById(`form-total-budget-${milestone.id}`);
    const startDateEl = document.getElementById(`form-start-date-${milestone.id}`);
    const targetCompletionDateEl = document.getElementById(`form-target-completion-date-${milestone.id}`);
    const actualCompletionDateEl = document.getElementById(`form-actual-completion-date-${milestone.id}`);
    const expectedDaysEl = document.getElementById(`form-expected-days-${milestone.id}`);

    if (projectNameEl) projectNameEl.textContent = selectedProject.name || 'N/A';
    if (projectCodeEl) projectCodeEl.textContent = selectedProject.projectCode || 'N/A';
    if (totalBudgetEl) {
      const budget = selectedProject.totalBudget ? parseFloat(selectedProject.totalBudget) : 0;
      totalBudgetEl.textContent = budget.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    }
    if (startDateEl) {
      startDateEl.textContent = selectedProject.startDate ? 
        new Date(selectedProject.startDate).toLocaleDateString() : '–';
    }
    if (targetCompletionDateEl) {
      targetCompletionDateEl.textContent = (selectedProject.targetCompletionDate || selectedProject.targetDateOfCompletion || selectedProject.endDate) ? 
        new Date(selectedProject.targetCompletionDate || selectedProject.targetDateOfCompletion || selectedProject.endDate).toLocaleDateString() : '–';
    }
    if (actualCompletionDateEl) {
      actualCompletionDateEl.textContent = (selectedProject.completionDate || selectedProject.actualCompletionDate) ? 
        new Date(selectedProject.completionDate || selectedProject.actualCompletionDate).toLocaleDateString() : '–';
    }
    if (expectedDaysEl) {
      expectedDaysEl.textContent = selectedProject.expectedDaysOfCompletion ? 
        `${selectedProject.expectedDaysOfCompletion} days` : '–';
    }

    // Populate milestone information
    const milestoneNameEl = document.getElementById(`form-milestone-name-${milestone.id}`);
    const milestoneStatusEl = document.getElementById(`form-milestone-status-${milestone.id}`);
    const milestoneWeightEl = document.getElementById(`form-milestone-weight-${milestone.id}`);
    const milestoneBudgetEl = document.getElementById(`form-milestone-budget-${milestone.id}`);
    const milestoneDueDateEl = document.getElementById(`form-milestone-due-date-${milestone.id}`);
    const milestoneDescriptionEl = document.getElementById(`form-milestone-description-${milestone.id}`);

    if (milestoneNameEl) milestoneNameEl.textContent = milestone.title || 'N/A';
    if (milestoneWeightEl) {
      const rawWeight = milestone.weight || milestone.weightPercentage || milestone.milestone_weight || 0;
      // Handle percentage strings by removing % symbol
      const cleanWeight = typeof rawWeight === 'string' ? rawWeight.replace('%', '') : rawWeight;
      const weight = parseFloat(cleanWeight) || 0;
      milestoneWeightEl.textContent = weight + '%';
      console.log('🔄 Milestone weight in sub-header:', {
        rawWeight: rawWeight,
        weight: milestone.weight,
        weightPercentage: milestone.weightPercentage,
        milestone_weight: milestone.milestone_weight,
        finalWeight: weight
      });
    }
    if (milestoneBudgetEl) {
      const budget = milestone.plannedBudget ? parseFloat(milestone.plannedBudget) : 0;
      milestoneBudgetEl.textContent = '₱' + budget.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    }
    if (milestoneDueDateEl) {
      milestoneDueDateEl.textContent = milestone.dueDate ? 
        new Date(milestone.dueDate).toLocaleDateString() : 'Not set';
    }
    if (milestoneDescriptionEl) {
      milestoneDescriptionEl.textContent = milestone.description || 'No description available';
    }

    // Update milestone status with proper styling
    if (milestoneStatusEl) {
      const status = milestone.status || 'pending';
      milestoneStatusEl.textContent = status.charAt(0).toUpperCase() + status.slice(1);
      
      // Remove all status classes
      milestoneStatusEl.classList.remove('bg-yellow-100', 'text-yellow-700', 'bg-green-100', 'text-green-700', 'bg-gray-100', 'text-gray-700', 'bg-red-100', 'text-red-700');
      
      // Apply appropriate status styling
      if (status === 'pending') {
        milestoneStatusEl.classList.add('bg-yellow-100', 'text-yellow-700');
      } else if (status === 'completed') {
        milestoneStatusEl.classList.add('bg-green-100', 'text-green-700');
      } else if (status === 'in-progress') {
        milestoneStatusEl.classList.add('bg-blue-100', 'text-blue-700');
      } else if (status === 'delayed' || status === 'overdue') {
        milestoneStatusEl.classList.add('bg-red-100', 'text-red-700');
      } else {
        milestoneStatusEl.classList.add('bg-gray-100', 'text-gray-700');
      }
    }

    // Populate Timeline Division fields
    const timelineWeightEl = document.getElementById(`form-timeline-weight-${milestone.id}`);
    const timelineStartDateEl = document.getElementById(`form-timeline-start-date-${milestone.id}`);
    const timelineEndDateEl = document.getElementById(`form-timeline-end-date-${milestone.id}`);

    if (timelineWeightEl) {
      // Use the same property extraction as ProjectDetailsModal
      const timelineWeight = parseFloat(milestone.timelineWeight || milestone.timelineDivision?.weight || milestone.timeline?.weight || 33.33);
      console.log('🔄 Timeline weight calculation (ProjectDetailsModal method):', {
        timelineWeight: milestone.timelineWeight,
        timelineDivisionWeight: milestone.timelineDivision?.weight,
        timelineWeight_final: timelineWeight,
        milestone_id: milestone.id
      });
      timelineWeightEl.textContent = timelineWeight.toFixed(1) + '%';
    }
    if (timelineStartDateEl) {
      // Use the same property extraction as ProjectDetailsModal
      const startDate = milestone.timelineStartDate || milestone.plannedStartDate || milestone.timelineDivision?.startDate || milestone.timeline?.startDate || milestone.startDate || selectedProject.startDate;
      console.log('🔄 Timeline start date (ProjectDetailsModal method):', {
        timelineStartDate: milestone.timelineStartDate,
        plannedStartDate: milestone.plannedStartDate,
        timelineDivisionStartDate: milestone.timelineDivision?.startDate,
        finalStartDate: startDate,
        milestone_id: milestone.id
      });
      timelineStartDateEl.textContent = startDate ? 
        new Date(startDate).toLocaleDateString() : 'Not set';
    }
    if (timelineEndDateEl) {
      // Use the same property extraction as ProjectDetailsModal
      const endDate = milestone.timelineEndDate || milestone.plannedEndDate || milestone.timelineDivision?.endDate || milestone.timeline?.endDate || milestone.endDate || selectedProject.endDate;
      console.log('🔄 Timeline end date (ProjectDetailsModal method):', {
        timelineEndDate: milestone.timelineEndDate,
        plannedEndDate: milestone.plannedEndDate,
        timelineDivisionEndDate: milestone.timelineDivision?.endDate,
        finalEndDate: endDate,
        milestone_id: milestone.id
      });
      timelineEndDateEl.textContent = endDate ? 
        new Date(endDate).toLocaleDateString() : 'Not set';
    }

    // Populate Budget Division fields
    const budgetWeightEl = document.getElementById(`form-budget-weight-${milestone.id}`);
    const budgetPlannedEl = document.getElementById(`form-budget-planned-${milestone.id}`);
    const budgetFundingSourceEl = document.getElementById(`form-budget-funding-source-${milestone.id}`);

    if (budgetWeightEl) {
      // Use the same property extraction as ProjectDetailsModal
      const budgetWeight = parseFloat(milestone.budgetWeight || milestone.budgetDivision?.weight || milestone.budget?.weight || 33.33);
      console.log('🔄 Budget weight calculation (ProjectDetailsModal method):', {
        budgetWeight: milestone.budgetWeight,
        budgetDivisionWeight: milestone.budgetDivision?.weight,
        budgetWeight_final: budgetWeight,
        milestone_id: milestone.id
      });
      budgetWeightEl.textContent = budgetWeight.toFixed(1) + '%';
    }
    if (budgetPlannedEl) {
      // Use the same property extraction as ProjectDetailsModal
      const budgetPlanned = parseFloat(milestone.budgetPlanned || milestone.budgetDivision?.plannedBudget || milestone.budget?.planned || milestone.plannedBudget || 0);
      console.log('🔄 Budget planned calculation (ProjectDetailsModal method):', {
        budgetPlanned: milestone.budgetPlanned,
        budgetDivisionPlannedBudget: milestone.budgetDivision?.plannedBudget,
        budgetPlanned_final: budgetPlanned,
        milestone_id: milestone.id,
        formatted: budgetPlanned.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})
      });
      budgetPlannedEl.textContent = '₱' + budgetPlanned.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2});
    }
    if (budgetFundingSourceEl) {
      let fundingSource = 'LOCAL FUND'; // Default value
      if (selectedProject?.fundingSource) {
        if (selectedProject.fundingSource === 'donor_fund') {
          fundingSource = 'MUNICIPAL DEVELOPMENT FUND';
        } else {
          fundingSource = selectedProject.fundingSource.replace(/_/g, ' ').toUpperCase();
        }
      }
      budgetFundingSourceEl.textContent = fundingSource;
      console.log('🔄 Funding source set to:', fundingSource);
    }

    // Populate Physical Division fields
    const physicalWeightEl = document.getElementById(`form-physical-weight-${milestone.id}`);

    if (physicalWeightEl) {
      // Use the same property extraction as ProjectDetailsModal
      const physicalWeight = parseFloat(milestone.physicalWeight || milestone.physicalDivision?.weight || milestone.physical?.weight || 33.34);
      console.log('🔄 Physical weight calculation (ProjectDetailsModal method):', {
        physicalWeight: milestone.physicalWeight,
        physicalDivisionWeight: milestone.physicalDivision?.weight,
        physicalWeight_final: physicalWeight,
        milestone_id: milestone.id
      });
      physicalWeightEl.textContent = physicalWeight.toFixed(1) + '%';
    }

    // Populate Progress Display
    const progressTextEl = document.getElementById(`form-milestone-progress-text-${milestone.id}`);
    const progressBarEl = document.getElementById(`form-milestone-progress-bar-${milestone.id}`);

    if (progressTextEl && progressBarEl) {
      const progress = milestone.progress || 0;
      progressTextEl.textContent = progress + '%';
      progressBarEl.style.width = progress + '%';
    }

    // Automatically populate submission date with current internet time
    window.generateInternetBasedSubmissionDate(milestone.id);

    console.log('✅ Milestone form header populated successfully');
  };

  // Submission History & Analytics Collapsible Functionality
  document.addEventListener('DOMContentLoaded', function() {
    const toggleSubmissionHistory = document.getElementById('toggleSubmissionHistory');
    const submissionHistoryContent = document.getElementById('submissionHistoryContent');
    let submissionHistoryExpanded = true;

    if (toggleSubmissionHistory && submissionHistoryContent) {
      toggleSubmissionHistory.addEventListener('click', function() {
        submissionHistoryExpanded = !submissionHistoryExpanded;
        submissionHistoryContent.style.display = submissionHistoryExpanded ? 'block' : 'none';
        
        // Update the arrow icon with smooth rotation
        const icon = toggleSubmissionHistory.querySelector('svg');
        if (icon) {
          icon.style.transform = submissionHistoryExpanded ? 'rotate(0deg)' : 'rotate(-90deg)';
          icon.style.transition = 'transform 0.3s ease-in-out';
        }
        
        // Update button styling with proper class management
        if (!submissionHistoryExpanded) {
          // Collapsed state - use emerald theme
          toggleSubmissionHistory.classList.remove('from-gray-400', 'to-gray-500', 'hover:from-gray-500', 'hover:to-gray-600');
          toggleSubmissionHistory.classList.add('bg-gradient-to-br', 'from-emerald-500', 'to-emerald-600', 'hover:from-emerald-600', 'hover:to-emerald-700');
        } else {
          // Expanded state - use emerald theme (not gray)
          toggleSubmissionHistory.classList.remove('from-emerald-500', 'to-emerald-600', 'hover:from-emerald-600', 'hover:to-emerald-700');
          toggleSubmissionHistory.classList.add('bg-gradient-to-br', 'from-emerald-500', 'to-emerald-600', 'hover:from-emerald-600', 'hover:to-emerald-700');
        }
        
        console.log('📊 Submission History & Analytics toggled:', submissionHistoryExpanded ? 'expanded' : 'collapsed');
      });
    }
  });

  // View project details function (uses generic API like other modules)
  window.viewProjectDetails = function(projectId) {
    console.log('🚀 EIU viewProjectDetails called with projectId:', projectId);
    console.log('🔍 Project ID type:', typeof projectId);
    
    // Check session validity first
    if (!authService.redirectIfInvalidSession()) {
      return;
    }
    
    // Use the unified ProjectDetailsModal (same as other modules)
    if (window.showProjectDetailsModal) {
      console.log('✅ Using unified ProjectDetailsModal (generic API)');
      console.log('🔍 About to call showProjectDetailsModal with:', projectId);
      window.showProjectDetailsModal(projectId);
    } else {
      console.error('❌ ProjectDetailsModal not available');
      alert('Unable to load project details. Please refresh the page.');
    }
  };

  // Multiple Timeline Activities Management
  let milestoneActivitiesData = {}; // Store activities for each milestone

  // Initialize timeline activities for a milestone
  window.initializeTimelineActivities = function(milestoneId, milestone) {
    if (!milestoneActivitiesData[milestoneId]) {
      milestoneActivitiesData[milestoneId] = {
        activities: [],
        milestone: milestone,
        nextId: 1
      };
    }
    
    // Add initial activity if none exist
    if (milestoneActivitiesData[milestoneId].activities.length === 0) {
      window.addTimelineActivity(milestoneId);
    }
  };

  // Add a new timeline activity entry
  window.addTimelineActivity = function(milestoneId) {
    if (!milestoneActivitiesData[milestoneId]) {
      const milestone = projectMilestones.find(m => m.id === milestoneId);
      window.initializeTimelineActivities(milestoneId, milestone);
    }
    
    const data = milestoneActivitiesData[milestoneId];
    const activityId = data.nextId++;
    const milestone = data.milestone;
    
    // Extract start and end dates
    const startDate = milestone.timelineStartDate || milestone.plannedStartDate || milestone.timelineDivision?.startDate || milestone.timeline?.startDate || milestone.startDate || selectedProject.startDate;
    const endDate = milestone.timelineEndDate || milestone.plannedEndDate || milestone.timelineDivision?.endDate || milestone.timeline?.endDate || milestone.endDate || selectedProject.endDate;
    
    const activity = {
      id: activityId,
      date: '',
      description: ''
    };
    
    data.activities.push(activity);
    
    const container = document.getElementById(`milestone-${milestoneId}-activities-container`);
    if (!container) return;
    
    const activityHTML = `
      <div class="activity-entry bg-blue-50 border border-blue-200 rounded-lg p-3" data-activity-id="${activityId}">
        <div class="flex items-start gap-3">
          <div class="flex-shrink-0">
            <div class="w-6 h-6 bg-blue-500 text-white rounded-full flex items-center justify-center text-xs font-medium">
              ${data.activities.length}
            </div>
          </div>
          <div class="flex-1 space-y-2">
            <div class="grid grid-cols-1 md:grid-cols-3 gap-2">
              <div>
                <label class="block text-xs font-medium text-blue-700 mb-1">Activity Date *</label>
                <input 
                  type="date" 
                  id="activity-${milestoneId}-${activityId}-date"
                  class="w-full px-2 py-1 text-xs border border-blue-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500"
                  min="${startDate || ''}"
                  max="${endDate || ''}"
                  onchange="updateTimelineActivity('${milestoneId}', ${activityId}, 'date', this.value); validateTimelineActivities('${milestoneId}');"
                  required
                />
              </div>
              <div class="md:col-span-2">
                <label class="block text-xs font-medium text-blue-700 mb-1">Activities & Deliverables *</label>
                <textarea 
                  id="activity-${milestoneId}-${activityId}-description"
                  rows="2" 
                  maxlength="200" 
                  class="w-full px-2 py-1 text-xs border border-blue-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 resize-none" 
                  placeholder="Describe activities completed on this date..."
                  oninput="autoCapitalizeFirst(this); updateTimelineActivity('${milestoneId}', ${activityId}, 'description', this.value); updateActivityCharCount('${milestoneId}', ${activityId}); validateTimelineActivities('${milestoneId}');"
                  required
                ></textarea>
                <div class="flex justify-between items-center mt-1">
                  <span class="text-xs text-gray-500">Max 200 characters</span>
                  <span id="activity-${milestoneId}-${activityId}-char-count" class="text-xs text-gray-500">0/200</span>
                </div>
              </div>
            </div>
          </div>
          <div class="flex-shrink-0">
            <button 
              type="button"
              onclick="removeTimelineActivity('${milestoneId}', ${activityId})"
              class="w-6 h-6 text-red-500 hover:text-red-700 hover:bg-red-100 rounded transition-colors flex items-center justify-center"
              title="Remove activity"
              ${data.activities.length === 1 ? 'style="display: none;"' : ''}
            >
              <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
    `;
    
    container.insertAdjacentHTML('beforeend', activityHTML);
    window.updateActivitiesCount(milestoneId);
    window.validateTimelineActivities(milestoneId);
    
    console.log(`➕ Added timeline activity ${activityId} for milestone ${milestoneId}`);
  };

  // Remove a timeline activity entry
  window.removeTimelineActivity = function(milestoneId, activityId) {
    const data = milestoneActivitiesData[milestoneId];
    if (!data) return;
    
    // Remove from data
    data.activities = data.activities.filter(a => a.id !== activityId);
    
    // Remove from DOM
    const activityElement = document.querySelector(`[data-activity-id="${activityId}"]`);
    if (activityElement) {
      activityElement.remove();
    }
    
    // Update numbering and remove buttons visibility
    window.updateActivitiesNumbering(milestoneId);
    window.updateActivitiesCount(milestoneId);
    window.validateTimelineActivities(milestoneId);
    
    console.log(`➖ Removed timeline activity ${activityId} for milestone ${milestoneId}`);
  };

  // Update activity data
  window.updateTimelineActivity = function(milestoneId, activityId, field, value) {
    const data = milestoneActivitiesData[milestoneId];
    if (!data) return;
    
    const activity = data.activities.find(a => a.id === activityId);
    if (activity) {
      activity[field] = value;
    }
  };

  // Update character count for activity description
  window.updateActivityCharCount = function(milestoneId, activityId) {
    const textarea = document.getElementById(`activity-${milestoneId}-${activityId}-description`);
    const counter = document.getElementById(`activity-${milestoneId}-${activityId}-char-count`);
    
    if (textarea && counter) {
      const currentLength = textarea.value.length;
      const maxLength = textarea.maxLength;
      
      counter.textContent = `${currentLength}/${maxLength}`;
      
      // Color coding
      if (currentLength >= maxLength * 0.9) {
        counter.style.color = '#dc2626'; // Red
      } else if (currentLength >= maxLength * 0.7) {
        counter.style.color = '#d97706'; // Orange
      } else {
        counter.style.color = '#6b7280'; // Gray
      }
    }
  };

  // Update activities numbering
  window.updateActivitiesNumbering = function(milestoneId) {
    const container = document.getElementById(`milestone-${milestoneId}-activities-container`);
    if (!container) return;
    
    const activities = container.querySelectorAll('.activity-entry');
    activities.forEach((activity, index) => {
      const numberCircle = activity.querySelector('.w-6.h-6.bg-blue-500');
      if (numberCircle) {
        numberCircle.textContent = index + 1;
      }
      
      // Show/hide remove button based on count
      const removeButton = activity.querySelector('button[onclick*="removeTimelineActivity"]');
      if (removeButton) {
        removeButton.style.display = activities.length > 1 ? 'flex' : 'none';
      }
    });
  };

  // Update activities count display
  window.updateActivitiesCount = function(milestoneId) {
    const data = milestoneActivitiesData[milestoneId];
    const countElement = document.getElementById(`milestone-${milestoneId}-activities-count`);
    
    if (countElement && data) {
      const count = data.activities.length;
      countElement.textContent = `${count} ${count === 1 ? 'activity' : 'activities'}`;
    }
  };

  // Validate timeline activities
  window.validateTimelineActivities = function(milestoneId) {
    const data = milestoneActivitiesData[milestoneId];
    const errorDiv = document.getElementById(`milestone-${milestoneId}-timeline-activities-error`);
    
    if (!data || !errorDiv) return false;
    
    let isValid = true;
    let hasValidActivity = false;
    
    data.activities.forEach(activity => {
      const dateInput = document.getElementById(`activity-${milestoneId}-${activity.id}-date`);
      const descInput = document.getElementById(`activity-${milestoneId}-${activity.id}-description`);
      
      if (dateInput && descInput) {
        const hasDate = dateInput.value.trim() !== '';
        const hasDescription = descInput.value.trim() !== '';
        
        if (hasDate && hasDescription) {
          hasValidActivity = true;
          dateInput.classList.remove('border-red-500');
          descInput.classList.remove('border-red-500');
          dateInput.classList.add('border-green-500');
          descInput.classList.add('border-green-500');
        } else {
          if (!hasDate) {
            dateInput.classList.add('border-red-500');
            dateInput.classList.remove('border-green-500');
          }
          if (!hasDescription) {
            descInput.classList.add('border-red-500');
            descInput.classList.remove('border-green-500');
          }
        }
      }
    });
    
    if (!hasValidActivity) {
      errorDiv.classList.remove('hidden');
      isValid = false;
    } else {
      errorDiv.classList.add('hidden');
    }
    
    return isValid;
  };

  // Set up date input constraints based on milestone timeline (updated for multiple activities)
  window.setupActivityDateConstraints = function(milestoneId, milestone) {
    // Initialize timeline activities for this milestone
    window.initializeTimelineActivities(milestoneId, milestone);
    
    console.log(`📅 Timeline activities initialized for milestone ${milestoneId}:`, {
      milestone: milestone.title || milestone.name,
      startDate: milestone.timelineStartDate || milestone.startDate,
      endDate: milestone.timelineEndDate || milestone.endDate
    });
  };

  // Debug: Check if modal functions are available
  console.log('🔍 Modal functions availability check:');
  console.log('  - showProjectDetailsModal:', typeof window.showProjectDetailsModal);
  console.log('  - closeProjectDetailsModal:', typeof window.closeProjectDetailsModal);
  console.log('  - toggleProjectSection:', typeof window.toggleProjectSection);
  console.log('  - toggleSection (modal):', typeof window.toggleSection);

  console.log('✅ Enhanced Milestone Form System Loaded Successfully!');

  // Restore photos when page becomes visible (after minimizing browser)
  document.addEventListener('visibilitychange', function() {
    if (!document.hidden) {
      console.log('🔄 Page became visible, checking photo and video restoration...');
      // Only restore if files are missing or corrupted
      restorePhotosIfNeeded();
      restoreVideosIfNeeded();
    }
  });

  // Also restore on window focus
  window.addEventListener('focus', function() {
    console.log('🔄 Window gained focus, checking photo and video restoration...');
    // Only restore if files are missing or corrupted
    restorePhotosIfNeeded();
    restoreVideosIfNeeded();
  });

  // Function to check if photos need restoration and restore only if necessary
  function restorePhotosIfNeeded() {
    // Get all milestone IDs from the DOM
    const milestoneContainers = document.querySelectorAll('[id^="milestone-"][id$="-photo-preview"]');
    
    milestoneContainers.forEach(container => {
      const milestoneId = container.id.replace('milestone-', '').replace('-photo-preview', '');
      
      // Check if there are stored photos for this milestone
      try {
        const storedData = sessionStorage.getItem(`milestone-files-${milestoneId}`);
        if (!storedData) return;
        
        const fileData = JSON.parse(storedData);
        if (!fileData.photos || fileData.photos.length === 0) return;
        
        // Check if current photos match stored photos
        const currentPhotos = container.children;
        const storedPhotos = fileData.photos;
        
        // Only restore if there's a mismatch or photos are missing
        if (currentPhotos.length !== storedPhotos.length || photosAreDifferent(currentPhotos, storedPhotos)) {
          console.log(`🔄 Restoring photos for milestone ${milestoneId} - mismatch detected`);
          window.restorePhotosFromStorage(milestoneId);
        } else {
          console.log(`✅ Photos for milestone ${milestoneId} are already correct`);
          // Even if photos are correct, run validation to clear any error messages
          if (window.validatePhotoEvidence) {
            window.validatePhotoEvidence(milestoneId);
          }
        }
      } catch (e) {
        console.warn('Could not check photo restoration for milestone:', milestoneId, e);
      }
    });
  }

     // Function to check if current photos are different from stored photos
   function photosAreDifferent(currentPhotos, storedPhotos) {
     for (let i = 0; i < Math.min(currentPhotos.length, storedPhotos.length); i++) {
       const currentImg = currentPhotos[i].querySelector('img');
       const storedPhoto = storedPhotos[i];
       
       if (!currentImg || currentImg.src !== storedPhoto.dataUrl) {
         return true; // Photos are different
       }
     }
     return false;
   }

   // Function to check if videos need restoration and restore only if necessary
   function restoreVideosIfNeeded() {
     // Get all milestone IDs from the DOM
     const milestoneContainers = document.querySelectorAll('[id^="milestone-"][id$="-video-preview"]');
     
     milestoneContainers.forEach(container => {
       const milestoneId = container.id.replace('milestone-', '').replace('-video-preview', '');
       
       // Check if there are stored videos for this milestone
       try {
         const storedData = sessionStorage.getItem(`milestone-files-${milestoneId}`);
         if (!storedData) return;
         
         const fileData = JSON.parse(storedData);
         if (!fileData.videos || fileData.videos.length === 0) return;
         
         // Check if current videos match stored videos
         const currentVideos = container.children;
         const storedVideos = fileData.videos;
         
                 // Only restore if there's a mismatch or videos are missing
        if (currentVideos.length !== storedVideos.length) {
          console.log(`🔄 Restoring videos for milestone ${milestoneId} - mismatch detected`);
          window.restoreVideosFromStorage(milestoneId);
        } else {
          console.log(`✅ Videos for milestone ${milestoneId} are already correct`);
          // Even if videos are correct, run validation to clear any error messages
          if (window.validateVideoEvidence) {
            window.validateVideoEvidence(milestoneId);
          }
        }
       } catch (e) {
         console.warn('Could not check video restoration for milestone:', milestoneId, e);
       }
     });
   }

       // Function to restore individual image from storage
    window.restoreImageFromStorage = function(fileId, imgElement) {
      try {
        const storedDataUrl = sessionStorage.getItem(`photo-${fileId}`);
        if (storedDataUrl && imgElement) {
          console.log(`🔄 Restoring individual image: ${fileId}`);
          imgElement.src = storedDataUrl;
          imgElement.setAttribute('data-restored', 'true');
        }
      } catch (e) {
        console.warn('Could not restore individual image:', fileId, e);
      }
    };

    // Periodic check to ensure photos remain correct (every 30 seconds)
    setInterval(function() {
      const photoImages = document.querySelectorAll('[id^="milestone-"][id$="-photo-preview"] img');
      photoImages.forEach(img => {
        const originalSrc = img.getAttribute('data-original-src');
        
        // If the image src doesn't match the original, restore it immediately
        if (originalSrc && img.src !== originalSrc) {
          console.log(`🔄 Correcting image src change detected`);
          img.src = originalSrc;
        }
      });
    }, 1000); // Check every 1 second for faster response

    // Use MutationObserver to prevent any external changes to image src
    window.imageObserver = new MutationObserver(function(mutations) {
      mutations.forEach(function(mutation) {
        if (mutation.type === 'attributes' && mutation.attributeName === 'src') {
          const img = mutation.target;
          const originalSrc = img.getAttribute('data-original-src');
          
          // If someone tries to change the src, revert it immediately
          if (originalSrc && img.src !== originalSrc && img.src !== '') {
            console.log(`🛡️ Blocked unauthorized image src change from "${img.src}" back to "${originalSrc}"`);
            img.src = originalSrc;
          }
        }
      });
    });

    // Start observing all photo images
    function startImageProtection() {
      const photoImages = document.querySelectorAll('[id^="milestone-"][id$="-photo-preview"] img');
      photoImages.forEach(img => {
        window.imageObserver.observe(img, {
          attributes: true,
          attributeFilter: ['src']
        });
      });
    }

    // Start protection immediately and restart periodically
    startImageProtection();
    setInterval(startImageProtection, 5000); // Restart protection every 5 seconds

    // Run initial validation for all milestones on page load
    document.addEventListener('DOMContentLoaded', function() {
      // Find all milestone containers and run validation
      const milestoneContainers = document.querySelectorAll('[id^="milestone-"][id$="-photo-preview"]');
      milestoneContainers.forEach(container => {
        const milestoneId = container.id.replace('milestone-', '').replace('-photo-preview', '');
        if (window.validatePhotoEvidence) {
          window.validatePhotoEvidence(milestoneId);
        }
        if (window.validateVideoEvidence) {
          window.validateVideoEvidence(milestoneId);
        }
        if (window.updateUploadStatus) {
          window.updateUploadStatus(milestoneId);
        }
      });
    });

    // Also run validation after a short delay to ensure everything is loaded
    setTimeout(function() {
      const milestoneContainers = document.querySelectorAll('[id^="milestone-"][id$="-photo-preview"]');
      milestoneContainers.forEach(container => {
        const milestoneId = container.id.replace('milestone-', '').replace('-photo-preview', '');
        if (window.validatePhotoEvidence) {
          window.validatePhotoEvidence(milestoneId);
        }
        if (window.validateVideoEvidence) {
          window.validateVideoEvidence(milestoneId);
        }
        if (window.updateUploadStatus) {
          window.updateUploadStatus(milestoneId);
        }
      });
    }, 1000);

    // Additional protection for modal image
    setInterval(function() {
      const modal = document.getElementById('photo-preview-modal');
      const modalImg = document.getElementById('modal-photo');
      
      // If modal is open and we have stored image data
      if (modal && !modal.classList.contains('hidden') && modalImg && window.currentModalImageData) {
        const originalSrc = modalImg.getAttribute('data-original-src');
        
        // If the modal image src doesn't match the original, restore it
        if (originalSrc && modalImg.src !== originalSrc) {
          console.log(`🔄 Restoring modal image: ${window.currentModalImageData.fileName}`);
          modalImg.src = originalSrc;
        }
        
        // Double-check with stored data
        if (window.currentModalImageData.src && modalImg.src !== window.currentModalImageData.src) {
          console.log(`🔄 Restoring modal image from stored data: ${window.currentModalImageData.fileName}`);
          modalImg.src = window.currentModalImageData.src;
          modalImg.setAttribute('data-original-src', window.currentModalImageData.src);
        }
      }
    }, 500); // Check modal image every 500ms for faster response

    // Photo preview/zoom function
    window.previewPhoto = function(imageSrc, fileName) {
      const modal = document.getElementById('photo-preview-modal');
      const modalImg = document.getElementById('modal-photo');
      const modalTitle = document.getElementById('modal-photo-title');
      
      if (modal && modalImg && modalTitle) {
        // Store the original image source for protection
        modalImg.setAttribute('data-original-src', imageSrc);
        modalImg.setAttribute('data-file-name', fileName);
        modalImg.src = imageSrc;
        modalTitle.textContent = fileName;
        
        // Apply protection to the modal image
        if (window.imageObserver) {
          window.imageObserver.observe(modalImg, {
            attributes: true,
            attributeFilter: ['src']
          });
        }
        
        modal.classList.remove('hidden');
        modal.style.display = 'block';
        
        // Prevent body scrolling when modal is open
        document.body.style.overflow = 'hidden';
        
        // Store the image data for persistence
        window.currentModalImageData = {
          src: imageSrc,
          fileName: fileName,
          timestamp: Date.now()
        };
      }
    };

    // Video preview/player function
    window.previewVideo = function(videoSrc, fileName) {
      const modal = document.getElementById('video-preview-modal');
      const modalVideo = document.getElementById('modal-video');
      const modalTitle = document.getElementById('modal-video-title');
      
      if (modal && modalVideo && modalTitle) {
        modalVideo.src = videoSrc;
        modalTitle.textContent = fileName;
        
        modal.classList.remove('hidden');
        modal.style.display = 'block';
        
        // Prevent body scrolling when modal is open
        document.body.style.overflow = 'hidden';
        
        // Store video data for persistence
        window.currentModalVideoData = {
          src: videoSrc,
          fileName: fileName,
          timestamp: Date.now()
        };
      }
    };

    // Close photo preview modal
    window.closePhotoPreview = function() {
      const modal = document.getElementById('photo-preview-modal');
      const modalImg = document.getElementById('modal-photo');
      
      if (modal) {
        modal.classList.add('hidden');
        modal.style.display = 'none';
        
        // Clean up modal image protection
        if (modalImg && window.imageObserver) {
          window.imageObserver.disconnect();
          // Restart protection for other images
          setTimeout(() => {
            startImageProtection();
          }, 100);
        }
        
        // Clear modal image data
        if (modalImg) {
          modalImg.src = '';
          modalImg.removeAttribute('data-original-src');
          modalImg.removeAttribute('data-file-name');
        }
        
        // Clear stored modal data
        window.currentModalImageData = null;
        
        // Restore body scrolling
        document.body.style.overflow = 'auto';
      }
    };

    // Close video preview modal
    window.closeVideoPreview = function() {
      const modal = document.getElementById('video-preview-modal');
      const modalVideo = document.getElementById('modal-video');
      
      if (modal) {
        modal.classList.add('hidden');
        modal.style.display = 'none';
        
        // Stop video playback and clear source
        if (modalVideo) {
          modalVideo.pause();
          modalVideo.currentTime = 0;
          modalVideo.src = '';
        }
        
        // Clear stored modal data
        window.currentModalVideoData = null;
        
        // Restore body scrolling
        document.body.style.overflow = 'auto';
      }
    };

    // Close modal when clicking outside the content
    window.addEventListener('click', function(event) {
      const photoModal = document.getElementById('photo-preview-modal');
      const videoModal = document.getElementById('video-preview-modal');
      
      if (event.target === photoModal) {
        window.closePhotoPreview();
      }
      if (event.target === videoModal) {
        window.closeVideoPreview();
      }
    });

    // Close modal with Escape key
    window.addEventListener('keydown', function(event) {
      if (event.key === 'Escape') {
        window.closePhotoPreview();
        window.closeVideoPreview();
      }
    });

  // Dashboard progress bar animation function
  function animateDashboardProgressBars(progressData = null) {
    if (progressData) {
      // Use provided progress data
      progressData.forEach(({ element, progress }) => {
        const bar = document.getElementById(element);
        if (!bar) return;

        // Determine color based on progress percentage
        const colorClass = progress >= 0 && progress <= 25 ? 'bg-red-500' : 
                          progress >= 26 && progress <= 50 ? 'bg-yellow-500' : 
                          progress >= 51 && progress <= 75 ? 'bg-blue-500' : 
                          progress >= 76 && progress <= 100 ? 'bg-green-500' : 'bg-gray-500';

        // Apply the color class
        bar.className = bar.className.replace(/bg-\w+-\d+/, '');
        bar.classList.add(colorClass);

        // Update data attributes
        bar.setAttribute('data-progress', progress);
        bar.setAttribute('data-progress-color', colorClass);

        // Set the progress width for animation
        bar.style.setProperty('--dashboard-progress-width', `${progress}%`);

        // Reset and start animation
        bar.style.width = '0%';
        bar.style.animation = 'none';
        bar.offsetHeight; // Trigger reflow
        bar.style.animation = 'fillDashboardProgress 2s ease-out forwards';
      });
    } else {
      // Fallback to original method for backward compatibility
      const progressBars = document.querySelectorAll('.dashboard-progress-bar-fill');
      progressBars.forEach((bar, index) => {
        const progress = parseFloat(bar.getAttribute('data-progress')) || 0;
        const colorClass = bar.getAttribute('data-progress-color') || 'bg-gray-500';
        
        // Apply the color class
        bar.className = bar.className.replace(/bg-\w+-\d+/, '');
        bar.classList.add(colorClass);
        
        // Set the progress width for animation
        bar.style.setProperty('--dashboard-progress-width', `${progress}%`);
        
        // Reset and start animation
        bar.style.width = '0%';
        bar.style.animation = 'none';
        bar.offsetHeight; // Trigger reflow
        bar.style.animation = 'fillDashboardProgress 2s ease-out forwards';
      });
    }
  }

  // Initialize dashboard progress bar animation when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(animateDashboardProgressBars, 500);
  });

  // Also run on window load
  window.addEventListener('load', function() {
    setTimeout(animateDashboardProgressBars, 800);
  });

  // Export function globally
  window.animateDashboardProgressBars = animateDashboardProgressBars;

</script>

<!-- Photo Preview Modal -->
<div id="photo-preview-modal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden">
  <div class="absolute inset-0 flex items-center justify-center p-4">
    <!-- Close Button -->
    <button 
      onclick="closePhotoPreview()" 
      class="absolute top-4 right-4 bg-red-500 hover:bg-red-600 text-white rounded-full w-12 h-12 flex items-center justify-center text-2xl font-bold z-20 transition-colors shadow-lg"
      title="Close (Esc)"
    >
      ×
    </button>
    
    <!-- Photo Title -->
    <div class="absolute top-4 left-4 bg-black bg-opacity-70 text-white px-4 py-2 rounded-lg z-20 shadow-lg">
      <p id="modal-photo-title" class="text-sm font-medium"></p>
    </div>
    
    <!-- Photo Container - Perfectly Centered -->
    <div class="flex items-center justify-center w-full h-full">
      <img 
        id="modal-photo" 
        src="" 
        alt="Photo Preview" 
        class="max-w-full max-h-full object-contain rounded-lg shadow-2xl"
        style="max-height: 85vh; max-width: 85vw; display: block; margin: auto;"
      />
    </div>
    
    <!-- Instructions -->
    <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-70 text-white px-4 py-2 rounded-lg z-20 shadow-lg">
      <p class="text-xs text-center">Click outside or press Esc to close</p>
    </div>
  </div>
</div>

<!-- Video Preview Modal -->
<div id="video-preview-modal" class="fixed inset-0 bg-black bg-opacity-75 z-50 hidden">
  <div class="absolute inset-0 flex items-center justify-center p-4">
    <!-- Close Button -->
    <button 
      onclick="closeVideoPreview()" 
      class="absolute top-4 right-4 bg-red-500 hover:bg-red-600 text-white rounded-full w-12 h-12 flex items-center justify-center text-2xl font-bold z-20 transition-colors shadow-lg"
      title="Close (Esc)"
    >
      ×
    </button>
    
    <!-- Video Title -->
    <div class="absolute top-4 left-4 bg-black bg-opacity-70 text-white px-4 py-2 rounded-lg z-20 shadow-lg">
      <p id="modal-video-title" class="text-sm font-medium"></p>
    </div>
    
    <!-- Video Container - Perfectly Centered -->
    <div class="flex items-center justify-center w-full h-full">
      <video 
        id="modal-video" 
        controls 
        class="max-w-full max-h-full rounded-lg shadow-2xl"
        style="max-height: 85vh; max-width: 85vw; display: block; margin: auto;"
        preload="metadata"
      >
        Your browser does not support the video tag.
      </video>
    </div>
    
    <!-- Instructions -->
    <div class="absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-70 text-white px-4 py-2 rounded-lg z-20 shadow-lg">
      <p class="text-xs text-center">Click outside or press Esc to close • Use video controls to play/pause</p>
    </div>
  </div>
</div> 