---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import EIULayout from '../../../../components/EIULayout.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let assignedProjects = [];
let projectStats = {
  totalProjects: 0,
  activeProjects: 0,
  completedProjects: 0,
  totalBudget: '₱0',
  utilizedBudget: '₱0',
  averageProgress: 0
};
let loading = true;
let error = '';

// Try to fetch projects data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    console.log('Token found, attempting to fetch projects data...');
    
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
        console.log('User data fetched:', userData.name);
      }
    } else {
      console.error('Failed to fetch user data:', userRes.status);
    }

    // Fetch EIU projects from the API
    console.log('Fetching EIU projects...');
    const projectsRes = await fetch(`${API_URL}/eiu/projects`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      console.log('Projects API response:', data);
      
      if (data.success) {
        assignedProjects = data.projects;
        console.log('Projects fetched:', assignedProjects.length);
        
        // Calculate statistics
        projectStats.totalProjects = assignedProjects.length;
        projectStats.activeProjects = assignedProjects.filter(p => p.status === 'ongoing').length;
        projectStats.completedProjects = assignedProjects.filter(p => p.status === 'complete').length;
        
        const totalBudget = assignedProjects.reduce((sum, p) => sum + parseFloat(p.totalBudget || 0), 0);
        projectStats.totalBudget = `₱${totalBudget.toLocaleString()}`;
        
        const utilizedBudget = assignedProjects.reduce((sum, p) => {
          const progress = parseFloat(p.overallProgress || 0);
          const budget = parseFloat(p.totalBudget || 0);
          return sum + (budget * progress / 100);
        }, 0);
        projectStats.utilizedBudget = `₱${utilizedBudget.toLocaleString()}`;
        
        const avgProgress = assignedProjects.length > 0 
          ? assignedProjects.reduce((sum, p) => sum + parseFloat(p.overallProgress || 0), 0) / assignedProjects.length
          : 0;
        projectStats.averageProgress = Math.round(avgProgress);
        
        console.log('Calculated project stats:', projectStats);
      } else {
        console.error('API returned success: false:', data.error);
        error = data.error || 'Failed to fetch projects data';
      }
    } else {
      console.error('Failed to fetch projects:', projectsRes.status, projectsRes.statusText);
      error = `Failed to fetch projects: ${projectsRes.status}`;
    }
  } else {
    console.error('No token found');
    error = 'No authentication token found';
  }
} catch (err) {
  console.error('Error fetching EIU projects data:', err);
  error = 'Failed to fetch projects data: ' + err.message;
}

loading = false;
---

<Layout title="My Projects - EIU Personnel">
  <EIULayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header -->
      <div class="flex items-center justify-between mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">My Assigned Projects</h1>
          <p class="text-gray-600">Overview of all projects assigned to your EIU organization</p>
        </div>
        <div class="flex gap-3">
          <button class="px-4 py-2 bg-blue-100 text-blue-700 rounded-lg font-semibold hover:bg-blue-200 transition-all flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
            {projectStats.totalProjects} Total Projects
          </button>
          <button onclick="window.location.href='/dashboard/eiu/modules/submit-update'" class="px-6 py-2 bg-gradient-to-r from-[#3C9CEB] to-[#2a7bb8] text-white rounded-xl font-semibold shadow-lg hover:from-[#2a7bb8] hover:to-[#3C9CEB] transition-all duration-300">
            Submit Update
          </button>
        </div>
      </div>

      <!-- Project Statistics -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Active Projects</p>
              <p class="text-2xl font-bold text-[#3C9CEB]">{projectStats.activeProjects}</p>
            </div>
            <div class="p-3 bg-blue-100 rounded-xl">
              <svg class="w-6 h-6 text-[#3C9CEB]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Completed Projects</p>
              <p class="text-2xl font-bold text-green-600">{projectStats.completedProjects}</p>
            </div>
            <div class="p-3 bg-green-100 rounded-xl">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Average Progress</p>
              <p class="text-2xl font-bold text-purple-600">{projectStats.averageProgress}%</p>
            </div>
            <div class="p-3 bg-purple-100 rounded-xl">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Total Budget</p>
              <p class="text-2xl font-bold text-orange-600">{projectStats.totalBudget}</p>
            </div>
            <div class="p-3 bg-orange-100 rounded-xl">
              <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#3C9CEB]"></div>
          <span class="ml-3 text-gray-600">Loading projects...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12">
          <p class="text-red-600 mb-4">{error}</p>
          <button onclick="loadProjects()" class="px-4 py-2 bg-[#3C9CEB] text-white rounded-lg hover:bg-[#2a7bb8] transition-all">
            Try Again
          </button>
        </div>
      ) : assignedProjects.length === 0 ? (
        <div class="text-center py-12">
          <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">No Projects Assigned</h3>
          <p class="text-gray-600 mb-6">You don't have any projects assigned to your EIU organization yet. Projects will appear here once they are created by Implementing Offices and assigned to your organization.</p>
        </div>
      ) : (
        <!-- Projects Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          {assignedProjects.map(project => {
            const progress = parseFloat(project.overallProgress || 0);
            const budget = parseFloat(project.totalBudget || 0);
            const utilized = (budget * progress / 100);
            
            return (
              <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300">
                <!-- Project Header -->
                <div class="flex items-start justify-between mb-4">
                  <div class="flex-1">
                    <h3 class="text-lg font-semibold text-gray-800 mb-1">{project.name}</h3>
                    <p class="text-sm text-gray-600">{project.projectCode} • {project.location}</p>
                    <p class="text-sm text-gray-600">{project.implementingOfficeName}</p>
                  </div>
                  <div class="flex items-center gap-2">
                    <span class={`px-2 py-1 rounded-full text-xs font-semibold ${
                      project.status === 'complete' ? 'bg-green-100 text-green-700' :
                      project.status === 'ongoing' ? 'bg-blue-100 text-blue-700' :
                      project.status === 'pending' ? 'bg-yellow-100 text-yellow-700' :
                      project.status === 'delayed' ? 'bg-red-100 text-red-700' :
                      'bg-gray-100 text-gray-700'
                    }`}>
                      {project.status.toUpperCase()}
                    </span>
                    <span class={`px-2 py-1 rounded-full text-xs font-semibold ${
                      project.priority === 'high' ? 'bg-red-100 text-red-700' :
                      project.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                      project.priority === 'low' ? 'bg-green-100 text-green-700' :
                      'bg-gray-100 text-gray-600'
                    }`}>
                      {project.priority} priority
                    </span>
                  </div>
                </div>

                <!-- Progress Bar -->
                <div class="mb-4">
                  <div class="flex items-center justify-between mb-2">
                    <span class="text-sm font-medium text-gray-700">Progress</span>
                    <span class="text-sm text-gray-600">{progress.toFixed(1)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class={`h-2 rounded-full transition-all duration-300 ${
                      project.status === 'complete' ? 'bg-green-500' :
                      project.status === 'ongoing' ? 'bg-[#3C9CEB]' :
                      project.status === 'delayed' ? 'bg-red-500' :
                      'bg-gray-400'
                    }`} style={`width: ${Math.max(progress, 0)}%`}></div>
                  </div>
                </div>

                <!-- Budget Information -->
                <div class="grid grid-cols-2 gap-4 mb-4">
                  <div>
                    <p class="text-xs text-gray-500">Total Budget</p>
                    <p class="text-sm font-semibold text-gray-800">₱{budget.toLocaleString()}</p>
                  </div>
                  <div>
                    <p class="text-xs text-gray-500">Utilized</p>
                    <p class="text-sm font-semibold text-gray-800">₱{utilized.toLocaleString()}</p>
                  </div>
                </div>

                <!-- Project Details -->
                <div class="grid grid-cols-2 gap-4 mb-4 text-sm">
                  <div>
                    <p class="text-gray-500">Start Date</p>
                    <p class="font-medium">{project.startDate}</p>
                  </div>
                  <div>
                    <p class="text-gray-500">End Date</p>
                    <p class="font-medium">{project.endDate}</p>
                  </div>
                  <div>
                    <p class="text-gray-500">Category</p>
                    <p class="font-medium capitalize">{project.category}</p>
                  </div>
                  <div>
                    <p class="text-gray-500">Funding Source</p>
                    <p class="font-medium capitalize">{project.fundingSource}</p>
                  </div>
                </div>

                <!-- Three Divisions Progress -->
                <div class="grid grid-cols-3 gap-2 text-xs mb-4">
                  <div class="text-center">
                    <div class="w-full bg-gray-200 rounded-full h-1 mb-1">
                      <div class="bg-blue-500 h-1 rounded-full" style={`width: ${Math.max(project.timelineProgress || 0, 0)}%`}></div>
                    </div>
                    <span class="text-gray-600">Timeline {(project.timelineProgress || 0).toFixed(1)}%</span>
                  </div>
                  <div class="text-center">
                    <div class="w-full bg-gray-200 rounded-full h-1 mb-1">
                      <div class="bg-green-500 h-1 rounded-full" style={`width: ${Math.max(project.budgetProgress || 0, 0)}%`}></div>
                    </div>
                    <span class="text-gray-600">Budget {(project.budgetProgress || 0).toFixed(1)}%</span>
                  </div>
                  <div class="text-center">
                    <div class="w-full bg-gray-200 rounded-full h-1 mb-1">
                      <div class="bg-purple-500 h-1 rounded-full" style={`width: ${Math.max(project.physicalProgress || 0, 0)}%`}></div>
                    </div>
                    <span class="text-gray-600">Physical {(project.physicalProgress || 0).toFixed(1)}%</span>
                  </div>
                </div>

                <!-- Action Buttons -->
                <div class="flex items-center gap-2">
                  <button onclick={`viewProjectDetails('${project.id}')`} class="flex-1 px-4 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium">
                    View Details
                  </button>
                  <button onclick={`submitUpdate('${project.id}')`} class="px-4 py-2 bg-[#3C9CEB] text-white rounded-lg hover:bg-[#2a7bb8] transition-colors text-sm font-medium">
                    Submit Update
                  </button>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </section>
  </EIULayout>
</Layout>

<script>
  // API Configuration
  const API_URL = 'http://localhost:3000/api';
  
  // Global variables
  let projects = [];
  let currentUser = null;

  // Initialize the page
  async function initializePage() {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // Fetch user data for authentication
        const userRes = await fetch(`${API_URL}/auth/profile`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (userRes.ok) {
          const userDataResponse = await userRes.json();
          if (userDataResponse.success && userDataResponse.user) {
            currentUser = userDataResponse.user;
          }
        }

        // Fetch EIU projects from the API
        const projectsRes = await fetch(`${API_URL}/eiu/projects`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (projectsRes.ok) {
          const data = await projectsRes.json();
          if (data.success) {
            projects = data.projects;
            updateProjectsUI();
          }
        }
      }
    } catch (error) {
      console.error('Error fetching EIU projects data:', error);
    }
  }

  // Initialize the page when the script loads
  initializePage();

  // Load projects function
  async function loadProjects() {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      const response = await fetch(`${API_URL}/eiu/projects`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          projects = data.projects;
          updateProjectsUI();
          location.reload(); // Refresh the page to update statistics
        }
      }
    } catch (error) {
      console.error('Error loading projects:', error);
    }
  }

  // Update projects UI
  function updateProjectsUI() {
    // This function can be used to dynamically update the UI if needed
    console.log('Projects updated:', projects);
  }

  // View project details
  async function viewProjectDetails(projectId) {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      // Find the project in the current projects array instead of making another API call
      const project = projects.find(p => p.id === projectId);
      if (project) {
        showProjectDetailsModal(project);
      } else {
        // Fallback to API call if project not found in current array
        const response = await fetch(`${API_URL}/projects/${projectId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (response.ok) {
          const data = await response.json();
          if (data.success) {
            showProjectDetailsModal(data.project);
          } else {
            alert('Failed to fetch project details');
          }
        } else {
          alert('Failed to fetch project details');
        }
      }
    } catch (error) {
      console.error('Error viewing project details:', error);
      alert('Error viewing project details');
    }
  }

  // Show project details modal
  function showProjectDetailsModal(project) {
    // Create modal HTML with proper null checks
    const modalHTML = `
      <div id="projectDetailsModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-xl font-bold text-gray-800">${project.name || 'Project Details'}</h2>
            <button onclick="closeProjectDetailsModal()" class="text-gray-500 hover:text-gray-700">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <h3 class="font-semibold text-gray-800 mb-2">Project Information</h3>
              <div class="space-y-2 text-sm">
                <p><span class="font-medium">Project Code:</span> ${project.projectCode || 'N/A'}</p>
                <p><span class="font-medium">Location:</span> ${project.location || 'N/A'}</p>
                <p><span class="font-medium">Category:</span> ${project.category || 'N/A'}</p>
                <p><span class="font-medium">Priority:</span> ${project.priority || 'N/A'}</p>
                <p><span class="font-medium">Status:</span> ${project.workflowStatus || project.status || 'N/A'}</p>
                <p><span class="font-medium">Start Date:</span> ${project.startDate || 'N/A'}</p>
                <p><span class="font-medium">End Date:</span> ${project.endDate || 'N/A'}</p>
              </div>
            </div>
            
            <div>
              <h3 class="font-semibold text-gray-800 mb-2">Progress Overview</h3>
              <div class="space-y-3">
                <div>
                  <div class="flex justify-between text-sm mb-1">
                    <span>Overall Progress</span>
                    <span>${(project.overallProgress || 0).toFixed(1)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-blue-500 h-2 rounded-full" style="width: ${project.overallProgress || 0}%"></div>
                  </div>
                </div>
                <div>
                  <div class="flex justify-between text-sm mb-1">
                    <span>Timeline</span>
                    <span>${(project.timelineProgress || 0).toFixed(1)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-green-500 h-2 rounded-full" style="width: ${project.timelineProgress || 0}%"></div>
                  </div>
                </div>
                <div>
                  <div class="flex justify-between text-sm mb-1">
                    <span>Budget</span>
                    <span>${(project.budgetProgress || 0).toFixed(1)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-purple-500 h-2 rounded-full" style="width: ${project.budgetProgress || 0}%"></div>
                  </div>
                </div>
                <div>
                  <div class="flex justify-between text-sm mb-1">
                    <span>Physical</span>
                    <span>${(project.physicalProgress || 0).toFixed(1)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class="bg-orange-500 h-2 rounded-full" style="width: ${project.physicalProgress || 0}%"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="mt-6">
            <h3 class="font-semibold text-gray-800 mb-2">Description</h3>
            <p class="text-sm text-gray-600">${project.description || 'No description available'}</p>
          </div>
          
          <div class="mt-6 flex gap-3">
            <button onclick="submitUpdate('${project.id}')" class="px-4 py-2 bg-[#3C9CEB] text-white rounded-lg hover:bg-[#2a7bb8] transition-colors">
              Submit Update
            </button>
            <button onclick="closeProjectDetailsModal()" class="px-4 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition-colors">
              Close
            </button>
          </div>
        </div>
      </div>
    `;
    
    // Add modal to page
    document.body.insertAdjacentHTML('beforeend', modalHTML);
  }

  // Close project details modal
  function closeProjectDetailsModal() {
    const modal = document.getElementById('projectDetailsModal');
    if (modal) {
      modal.remove();
    }
  }

  // Submit update for a project
  async function submitUpdate(projectId) {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      // Redirect to submit update page with project ID
      window.location.href = `/dashboard/eiu/modules/submit-update?projectId=${projectId}`;
    } catch (error) {
      console.error('Error submitting update:', error);
    }
  }

  // Make functions globally available
  window.loadProjects = loadProjects;
  window.viewProjectDetails = viewProjectDetails;
  window.submitUpdate = submitUpdate;
  window.closeProjectDetailsModal = closeProjectDetailsModal;
</script> 