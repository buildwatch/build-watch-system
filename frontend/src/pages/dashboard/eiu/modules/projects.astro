---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import EIULayout from '../../../../components/EIULayout.astro';
import ProjectCard from '../../../../components/ProjectCard.astro';
import ProjectDetailsModal from '../../../../components/ProjectDetailsModal.astro';

// Determine API URL based on environment (server-side)
const isProduction = import.meta.env.PROD;
const isLocalhost = Astro.url.hostname === 'localhost' || Astro.url.hostname === '127.0.0.1' || !isProduction;
const API_URL = isLocalhost 
  ? 'http://localhost:3000/api' 
  : (Astro.url.protocol === 'https:' 
      ? `${Astro.url.protocol}//${Astro.url.hostname}/api`
      : `http://${Astro.url.hostname}:3000/api`);
let userData = null;
let assignedProjects = [];
let projectStats = {
  totalProjects: 0,
  activeProjects: 0,
  completedProjects: 0,
  totalBudget: '₱0',
  utilizedBudget: '₱0',
  averageProgress: 0
};
let loading = true;
let error = '';

// Try to fetch projects data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    console.log('Token found, attempting to fetch projects data...');
    
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
        console.log('User data fetched:', userData.name);
      }
    } else {
      console.error('Failed to fetch user data:', userRes.status);
    }

    // Fetch EIU projects from the API with cache-busting
    console.log('Fetching EIU projects...');
    const timestamp = new Date().getTime();
    const projectsRes = await fetch(`${API_URL}/eiu/projects?_t=${timestamp}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      console.log('Projects API response:', data);
      
        if (data.success) {
          assignedProjects = data.projects;
          console.log('Projects fetched:', assignedProjects.length);
        
        // Debug: Log the first project's progress data
        if (assignedProjects.length > 0) {
          const firstProject = assignedProjects[0];
          console.log('🔍 First project progress data:', {
            name: firstProject.name,
            overallProgress: firstProject.overallProgress,
            timelineProgress: firstProject.timelineProgress,
            budgetProgress: firstProject.budgetProgress,
            physicalProgress: firstProject.physicalProgress,
            progress: firstProject.progress,
            debug: firstProject._debug
          });
        }
        
        // Calculate statistics
        projectStats.totalProjects = assignedProjects.length;
        projectStats.activeProjects = assignedProjects.filter(p => p.status === 'ongoing').length;
        projectStats.completedProjects = assignedProjects.filter(p => p.status === 'complete').length;
        
        const totalBudget = assignedProjects.reduce((sum, p) => sum + parseFloat(p.totalBudget || 0), 0);
        projectStats.totalBudget = `₱${totalBudget.toLocaleString()}`;
        
        const utilizedBudget = assignedProjects.reduce((sum, p) => {
          const budget = parseFloat(p.totalBudget || 0);
          // Use budget division progress for utilized budget calculation (only approved divisions)
          // The backend now returns budgetProgress directly from ProgressCalculationService
          const budgetProgress = parseFloat(p.budgetProgress || 0);
          return sum + (budget * budgetProgress / 100);
        }, 0);
        projectStats.utilizedBudget = `₱${utilizedBudget.toLocaleString()}`;
        
        const avgProgress = assignedProjects.length > 0 
          ? assignedProjects.reduce((sum, p) => {
              // Use the overallProgress directly from backend calculation
              const progress = parseFloat(p.overallProgress || 0);
              
              console.log(`Project ${p.name}: overall=${progress}%`);
              return sum + progress;
            }, 0) / assignedProjects.length
          : 0;
        projectStats.averageProgress = Math.round(avgProgress);
        
        console.log('Calculated project stats:', projectStats);
      } else {
        console.error('API returned success: false:', data.error);
        error = data.error || 'Failed to fetch projects data';
      }
    } else {
      console.error('Failed to fetch projects:', projectsRes.status, projectsRes.statusText);
      error = `Failed to fetch projects: ${projectsRes.status}`;
    }
  } else {
    console.error('No token found');
    error = 'No authentication token found';
  }
} catch (err) {
  console.error('Error fetching EIU projects data:', err);
  error = 'Failed to fetch projects data: ' + err.message;
}

loading = false;
---

<Layout title="My Projects - EIU Personnel">
  <style>
    /* Enhanced Icon Container Styles - EIU Theme with Hover Effects */
    .icon-container {
      @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
      position: relative;
      overflow: hidden;
    }
    
    .icon-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    .icon-container > * {
      position: relative;
      z-index: 2;
    }
    
    .icon-container:hover::before {
      left: 100%;
    }
    
    .icon-container:hover {
      @apply transform scale-110 rotate-3;
    }
    
    .icon-container-small {
      @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
      position: relative;
      overflow: hidden;
    }
    
    .icon-container-small::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    .icon-container-small > * {
      position: relative;
      z-index: 2;
    }
    
    .icon-container-small:hover::before {
      left: 100%;
    }
    
    .icon-container-small:hover {
      @apply transform scale-110 rotate-3;
    }
    
    /* Modern Profile Card Styles - EIU Theme */
    .profile-card {
      @apply bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 ease-out hover:shadow-2xl hover:border-emerald-500/20 hover:-translate-y-2;
      position: relative;
      overflow: hidden;
    }
    
    .profile-card::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(16, 185, 129, 0.05), transparent);
      transition: left 0.5s;
    }
    
    .profile-card > * {
      position: relative;
      z-index: 2;
    }
    
    .profile-card:hover::before {
      left: 100%;
    }
    
    /* Modern Button Styles - EIU Theme */
    .btn-primary {
      @apply bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/25 border border-emerald-500/20;
      position: relative;
      overflow: hidden;
    }
    
    .btn-primary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    .btn-primary > * {
      position: relative;
      z-index: 2;
    }
    
    .btn-primary:hover::before {
      left: 100%;
    }
    
    .btn-secondary {
      @apply bg-gradient-to-r from-gray-100 to-gray-200 hover:from-gray-200 hover:to-gray-300 text-gray-700 hover:text-gray-800 font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-lg border border-gray-200;
      position: relative;
      overflow: hidden;
    }
    
    .btn-secondary::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    .btn-secondary > * {
      position: relative;
      z-index: 2;
    }
    
    .btn-secondary:hover::before {
      left: 100%;
    }
    
    .btn-success {
      @apply bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-green-500/25 border border-green-500/20;
      position: relative;
      overflow: hidden;
    }
    
    .btn-success::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
      transition: left 0.5s;
    }
    
    .btn-success > * {
      position: relative;
      z-index: 2;
    }
    
    .btn-success:hover::before {
      left: 100%;
    }
    
    /* Small Button Variants */
    .btn-sm {
      @apply px-4 py-2 text-sm;
    }
    
    /* Summary Card Hover Effects */
    .summary-card {
      @apply cursor-pointer transition-all duration-300;
    }
    
    .summary-card:hover {
      @apply transform scale-105;
    }
    
    /* Enhanced Input Styles */
    .form-input {
      @apply w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md;
    }
    
    .form-select {
      @apply w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-emerald-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md;
    }
  </style>
  
  <EIULayout>
    <!-- Enhanced Page Header - EIU Theme -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-black">My Assigned Projects</h1>
              <p class="text-sm text-gray-600">Overview of all projects assigned to your EIU organization</p>
            </div>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Active Projects</p>
            <p class="text-xs text-black font-semibold" id="headerProjectCount">{projectStats.totalProjects} Projects Available</p>
          </div>
          <div class="w-4 h-4 bg-emerald-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <main class="bg-gradient-to-br from-gray-50 to-white min-h-screen px-8 py-8">
      <!-- Enhanced Action Buttons -->
      <div class="flex items-center justify-end gap-3 mb-8">
        <button onclick="exportData()" class="btn-success btn-sm inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Export Data
        </button>
        <button onclick="refreshData()" class="btn-primary btn-sm inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          Refresh Data
        </button>
      </div>

      <!-- Enhanced Summary Cards - EIU Theme -->
      <div class="space-y-6 mb-8">
        <!-- Top Row: Primary Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Active Projects - EIU primary color theme -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('active')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Active Projects</p>
                <p class="text-2xl font-bold text-black" id="activeProjects">{projectStats.activeProjects}</p>
                <p class="text-xs text-emerald-600 mt-1">Currently ongoing</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Completed Projects - Professional Light Green -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('completed')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Completed Projects</p>
                <p class="text-2xl font-bold text-black" id="completedProjects">{projectStats.completedProjects}</p>
                <p class="text-xs text-green-600 mt-1">Successfully finished</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-green-500 to-green-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Average Progress - Professional Light Purple -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('progress')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Average Progress</p>
                <p class="text-2xl font-bold text-black" id="averageProgress">{projectStats.averageProgress}%</p>
                <p class="text-xs text-purple-600 mt-1">Overall completion</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-purple-500 to-purple-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Total Budget - Professional Light Orange -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('budget')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Total Budget</p>
                <p class="text-2xl font-bold text-black" id="totalBudget">{projectStats.totalBudget}</p>
                <p class="text-xs text-orange-600 mt-1">Allocated budget</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-orange-500 to-orange-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Search & Filter Section -->
      <div class="profile-card p-8 mb-8">
        <!-- Enhanced Filters Section -->
        <div class="mb-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-bold text-black">Search & Filter Projects</h3>
          </div>
          
          <div class="bg-gradient-to-br from-gray-50 to-gray-100/50 rounded-2xl p-6 border border-gray-200">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Search Projects</label>
                <div class="relative">
                  <input 
                    type="text" 
                    id="searchInput" 
                    placeholder="Search by project name..." 
                    class="form-input"
                  >
                  <svg class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Status</label>
                <select 
                  id="statusFilter" 
                  class="form-select"
                >
                  <option value="">All Status</option>
                  <option value="pending">Pending</option>
                  <option value="ongoing">Ongoing</option>
                  <option value="complete">Complete</option>
                </select>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Priority</label>
                <select 
                  id="priorityFilter" 
                  class="form-select"
                >
                  <option value="">All Priorities</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </select>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Sort By</label>
                <select 
                  id="sortFilter" 
                  class="form-select"
                >
                  <option value="name">Project Name</option>
                  <option value="date">Start Date</option>
                  <option value="progress">Progress</option>
                  <option value="priority">Priority</option>
                </select>
              </div>
            </div>
            
            <div class="flex flex-wrap items-center gap-3 mt-6">
              <button onclick="applyFilters()" class="btn-primary inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                </svg>
                Apply Filters
              </button>
              <button onclick="clearFilters()" class="btn-secondary inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Clear Filters
              </button>
            </div>
          </div>
        </div>

        <!-- Project Selection Section -->
        <div class="mb-6">
          <div class="flex items-center gap-3 mb-4">
            <div class="icon-container-small bg-gradient-to-br from-emerald-500 to-emerald-600">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
              </svg>
            </div>
            <h3 class="text-xl font-bold text-black">Select Project to View Full Information</h3>
          </div>
          
          {loading ? (
            <div class="flex items-center justify-center py-12">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-emerald-500"></div>
              <span class="ml-3 text-gray-600">Loading projects...</span>
            </div>
          ) : error ? (
            <div class="text-center py-12">
              <p class="text-red-600 mb-4">{error}</p>
              <button onclick="loadProjects()" class="btn-primary">
                Try Again
              </button>
            </div>
          ) : assignedProjects.length === 0 ? (
            <div class="text-center py-12">
              <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
              <h3 class="text-xl font-semibold text-gray-800 mb-2">No Projects Assigned</h3>
              <p class="text-gray-600 mb-6">You don't have any projects assigned to your EIU organization yet. Projects will appear here once they are created by Implementing Offices and assigned to your organization.</p>
            </div>
          ) : (
            <!-- Enhanced Projects Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
              {assignedProjects.map(project => (
                <ProjectCard 
                  project={project} 
                  userTheme="eiu"
                  onClick="viewProjectDetails"
                />
              ))}
            </div>
          )}
        </div>
      </div>
    </main>
  </EIULayout>
</Layout>

<script>
  // API Configuration (client-side)
  // Get API URL dynamically based on environment (same logic as config/api.js)
  const getApiUrl = () => {
    const hostname = window.location.hostname;
    const protocol = window.location.protocol;
    if (hostname === 'localhost' || hostname === '127.0.0.1') {
      return 'http://localhost:3000/api';
    }
    if (hostname.includes('build-watch.com')) {
      // For HTTPS, use same domain without port (Caddy reverse proxy expected)
      if (protocol === 'https:') {
        return protocol + '//' + hostname + '/api';
      } else {
        return 'http://' + hostname + ':3000/api';
      }
    }
    return 'http://localhost:3000/api';
  };
  const API_URL = getApiUrl();
  
  // Global variables
  let projects = [];
  let currentUser = null;
  let filteredProjects = [];

  // Initialize the page
  async function initializePage() {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // Fetch user data for authentication
        const userRes = await fetch(`${API_URL}/auth/profile`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (userRes.ok) {
          const userDataResponse = await userRes.json();
          if (userDataResponse.success && userDataResponse.user) {
            currentUser = userDataResponse.user;
          }
        }

        // Fetch EIU projects from the API with cache-busting
        const timestamp = new Date().getTime();
        const projectsRes = await fetch(`${API_URL}/eiu/projects?_t=${timestamp}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (projectsRes.ok) {
          const data = await projectsRes.json();
          if (data.success) {
            projects = data.projects;
            filteredProjects = [...projects];
            updateProjectsUI();
          }
        }
      }
    } catch (error) {
      console.error('Error fetching EIU projects data:', error);
    }
  }

  // Define all functions first
  async function loadProjects() {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      const timestamp = new Date().getTime();
      const response = await fetch(`${API_URL}/eiu/projects?_t=${timestamp}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          projects = data.projects;
          assignedProjects = data.projects; // Update assignedProjects as well
          // Update global variable if window is available
          if (typeof window !== 'undefined') {
            window.assignedProjects = assignedProjects;
          }
          filteredProjects = [...projects];
          updateProjectsUI();
          location.reload(); // Refresh the page to update statistics
        }
      }
    } catch (error) {
      console.error('Error loading projects:', error);
    }
  }

  // Update projects UI
  function updateProjectsUI() {
    console.log('Projects updated:', projects);
    // Update header count
    const headerCount = document.getElementById('headerProjectCount');
    if (headerCount) {
      headerCount.textContent = `${projects.length} Projects Available`;
    }
  }

  // Filter by card click
  function filterByCard(filterType) {
    console.log('Filtering by card:', filterType);
    
    // Remove active class from all cards
    document.querySelectorAll('.summary-card').forEach(card => {
      card.classList.remove('ring-2', 'ring-emerald-500');
    });
    
    // Add active class to clicked card
    event.currentTarget.classList.add('ring-2', 'ring-emerald-500');
    
    // Apply filter based on type
    switch(filterType) {
      case 'active':
        filteredProjects = projects.filter(p => p.status === 'ongoing');
        break;
      case 'completed':
        filteredProjects = projects.filter(p => p.status === 'complete');
        break;
      case 'progress':
        filteredProjects = [...projects].sort((a, b) => parseFloat(b.overallProgress || 0) - parseFloat(a.overallProgress || 0));
        break;
      case 'budget':
        filteredProjects = [...projects].sort((a, b) => parseFloat(b.totalBudget || 0) - parseFloat(a.totalBudget || 0));
        break;
      default:
        filteredProjects = [...projects];
    }
    
    // Re-render projects
    renderFilteredProjects();
  }

  // Apply filters from form
  function applyFilters() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const statusFilter = document.getElementById('statusFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;
    const sortFilter = document.getElementById('sortFilter').value;
    
    filteredProjects = projects.filter(project => {
      const matchesSearch = project.name.toLowerCase().includes(searchTerm);
      const matchesStatus = !statusFilter || project.status === statusFilter;
      const matchesPriority = !priorityFilter || project.priority?.toLowerCase() === priorityFilter;
      
      return matchesSearch && matchesStatus && matchesPriority;
    });
    
    // Sort projects
    switch(sortFilter) {
      case 'name':
        filteredProjects.sort((a, b) => a.name.localeCompare(b.name));
        break;
      case 'date':
        filteredProjects.sort((a, b) => new Date(a.startDate) - new Date(b.startDate));
        break;
      case 'progress':
        filteredProjects.sort((a, b) => parseFloat(b.overallProgress || 0) - parseFloat(a.overallProgress || 0));
        break;
      case 'priority':
        const priorityOrder = { 'high': 3, 'medium': 2, 'low': 1 };
        filteredProjects.sort((a, b) => (priorityOrder[b.priority] || 0) - (priorityOrder[a.priority] || 0));
        break;
    }
    
    renderFilteredProjects();
  }

  // Clear all filters
  function clearFilters() {
    document.getElementById('searchInput').value = '';
    document.getElementById('statusFilter').value = '';
    document.getElementById('priorityFilter').value = '';
    document.getElementById('sortFilter').value = 'name';
    
    // Remove active class from all cards
    document.querySelectorAll('.summary-card').forEach(card => {
      card.classList.remove('ring-2', 'ring-emerald-500');
    });
    
    filteredProjects = [...projects];
    renderFilteredProjects();
  }

  // Render filtered projects
  function renderFilteredProjects() {
    // This would need to be implemented to dynamically update the project grid
    // For now, we'll just log the filtered results
    console.log('Filtered projects:', filteredProjects);
  }

  // Export data function
  function exportData() {
    console.log('Exporting project data...');
    // Implement export functionality
    alert('Export functionality will be implemented soon.');
  }

  // Refresh data function
  function refreshData() {
    console.log('Refreshing project data...');
    loadProjects();
  }

  // Submit update for a project
  async function submitUpdate(projectId) {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      // Redirect to submit update page with project ID
      window.location.href = `/dashboard/eiu/modules/submit-update?projectId=${projectId}`;
    } catch (error) {
      console.error('Error submitting update:', error);
    }
  }
  
  // View project details function (same as EIUDashboard.astro)
  async function viewProjectDetails(projectId) {
    try {
      // Try to show modal if available, otherwise redirect
      if (window.showProjectModal) {
        window.showProjectModal(projectId);
      } else {
        // Fallback to redirect to projects page
        window.location.href = `/dashboard/eiu/modules/projects?projectId=${projectId}`;
      }
    } catch (error) {
      console.error('Error viewing project details:', error);
    }
  }

  // Make all functions globally available immediately
  window.loadProjects = loadProjects;
  window.submitUpdate = submitUpdate;
  window.filterByCard = filterByCard;
  window.applyFilters = applyFilters;
  window.clearFilters = clearFilters;
  window.exportData = exportData;
  window.refreshData = refreshData;
  window.viewProjectDetails = viewProjectDetails;

  // Make project data available globally (client-side only)
  if (typeof window !== 'undefined') {
    window.assignedProjects = assignedProjects;
  }

  // Initialize the page when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    initializePage();
  });
</script>

<!-- Include the standardized project details modal -->
<ProjectDetailsModal userTheme="eiu" />