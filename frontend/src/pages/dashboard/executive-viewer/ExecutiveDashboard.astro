export const prerender = false;
---
import Layout from '../../../layouts/Layout.astro';
import ExecutiveLayout from '../../../components/ExecutiveLayout.astro';
import ProjectCard from '../../../components/ProjectCard.astro';
import ProjectDetailsModal from '../../../components/ProjectDetailsModal.astro';

const API_URL = 'http://localhost:3000/api';

// Initialize with default values
let dashboardStats = {
  totalProjects: 0,
  ongoingProjects: 0,
  completedProjects: 0,
  delayedProjects: 0,
  totalBudget: '₱0',
  utilizedBudget: '₱0',
  budgetUtilization: 0,
  activeDepartments: 0
};

let recentProjects = [];
let criticalAlerts = [];
let departmentPerformance = [];
let loading = true;
let error = '';

// Fetch executive dashboard data from API on server side
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    console.log('Executive Dashboard: Fetching data from API...');
    
    // Fetch executive dashboard data
    const response = await fetch(`${API_URL}/executive/dashboard`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    
    if (response.ok) {
      const data = await response.json();
      if (data.success) {
        dashboardStats = data.stats || dashboardStats;
        recentProjects = data.recentProjects || [];
        criticalAlerts = data.criticalAlerts || [];
        departmentPerformance = data.departmentPerformance || [];
        loading = false;
        console.log('Executive Dashboard: Data loaded successfully', {
          totalProjects: dashboardStats.totalProjects,
          recentProjectsCount: recentProjects.length
        });
      } else {
        error = data.message || 'Failed to load dashboard data';
        loading = false;
      }
    } else {
      error = `Failed to fetch dashboard data: ${response.status}`;
      loading = false;
    }
  } else {
    error = 'Authentication required';
    loading = false;
  }
} catch (err) {
  console.error('Executive Dashboard: Error fetching data:', err);
  error = 'Failed to load dashboard data';
  loading = false;
}
---

<Layout title="Executive Dashboard">
  <style>
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }
  </style>
  <ExecutiveLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header -->
      <div class="flex items-center justify-between mb-8 animate-fade-in-up" style="animation-delay: 0.1s;">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Executive Dashboard</h1>
          <p class="text-gray-600">Comprehensive oversight of all LGU projects and programs</p>
        </div>
        <div class="flex gap-3">
          <button class="px-4 py-2 bg-green-100 text-green-700 rounded-lg font-semibold hover:bg-green-200 transition-all flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            All Systems Operational
          </button>
          <button class="px-6 py-2 bg-gradient-to-r from-[#3D50D7] to-[#2a3bb8] text-white rounded-xl font-semibold shadow-lg hover:from-[#2a3bb8] hover:to-[#3D50D7] transition-all duration-300">
            Export Report
          </button>
        </div>
      </div>

      <!-- Executive Summary Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.2s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Total Projects</p>
              <p class="text-2xl font-bold text-gray-800" data-stat="totalProjects">{dashboardStats.totalProjects}</p>
            </div>
            <div class="p-3 bg-blue-100 rounded-xl">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.3s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Ongoing Projects</p>
              <p class="text-2xl font-bold text-green-600" data-stat="ongoingProjects">{dashboardStats.ongoingProjects}</p>
            </div>
            <div class="p-3 bg-green-100 rounded-xl">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.4s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Budget Utilization</p>
              <p class="text-2xl font-bold text-purple-600" data-stat="budgetUtilization">{dashboardStats.budgetUtilization}%</p>
            </div>
            <div class="p-3 bg-purple-100 rounded-xl">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
              </svg>
            </div>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2 mt-3">
            <div class="bg-purple-600 h-2 rounded-full" style="width: {dashboardStats.budgetUtilization}%" data-stat="budgetProgress"></div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.5s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Delayed Projects</p>
              <p class="text-2xl font-bold text-red-600" data-stat="delayedProjects">{dashboardStats.delayedProjects}</p>
            </div>
            <div class="p-3 bg-red-100 rounded-xl">
              <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Critical Alerts and Recent Projects -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <!-- Critical Alerts -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.6s;">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-800">Critical Alerts</h3>
            <span class="px-2 py-1 bg-red-100 text-red-700 rounded-full text-xs font-semibold" data-stat="alertsCount">
              {criticalAlerts.length} Active
            </span>
          </div>
          <div class="space-y-3" data-section="criticalAlerts">
            {criticalAlerts.map((alert, index) => (
              <div class={`p-4 rounded-lg border-l-4 animate-fade-in-up ${
                alert.severity === 'high' ? 'bg-red-50 border-red-400' :
                alert.severity === 'medium' ? 'bg-yellow-50 border-yellow-400' :
                'bg-green-50 border-green-400'
              }`} style={`animation-delay: ${0.7 + index * 0.1}s`}>
                <div class="flex items-start justify-between">
                  <div class="flex-1">
                    <div class="flex items-center gap-2 mb-1">
                      <span class={`w-2 h-2 rounded-full ${
                        alert.severity === 'high' ? 'bg-red-500' :
                        alert.severity === 'medium' ? 'bg-yellow-500' :
                        'bg-green-500'
                      }`}></span>
                      <h4 class="font-medium text-gray-800">{alert.title}</h4>
                    </div>
                    <p class="text-sm text-gray-600 mb-2">{alert.message}</p>
                    <p class="text-xs text-gray-500">{alert.time}</p>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <!-- Recent Projects -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.8s;">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-800">Recent Projects</h3>
            <a href="/dashboard/executive-viewer/modules/projects" class="text-blue-600 hover:text-blue-700 text-sm font-medium">View All</a>
          </div>
          
          {loading ? (
            <div class="flex items-center justify-center py-8">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span class="ml-3 text-gray-600">Loading projects...</span>
            </div>
          ) : error ? (
            <div class="text-center py-8">
              <p class="text-red-600 mb-4">{error}</p>
            </div>
          ) : recentProjects.length === 0 ? (
            <div class="text-center py-8">
              <p class="text-gray-500">No recent projects found</p>
            </div>
          ) : (
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4" data-section="recentProjects">
              {recentProjects.slice(0, 4).map(project => (
                <ProjectCard 
                  project={project}
                  userTheme="executive"
                  onClick="viewProjectDetails"
                />
              ))}
            </div>
          )}
        </div>
      </div>

      <!-- Department Performance -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8 animate-fade-in-up" style="animation-delay: 1.0s;">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Department Performance Overview</h3>
        <div class="overflow-x-auto">
          <table class="min-w-full table-auto border-collapse">
            <thead>
              <tr class="bg-gray-50 text-gray-700">
                <th class="px-6 py-3 text-left font-semibold">Department</th>
                <th class="px-6 py-3 text-left font-semibold">Active Projects</th>
                <th class="px-6 py-3 text-left font-semibold">Completion Rate</th>
                <th class="px-6 py-3 text-left font-semibold">Budget Allocation</th>
                <th class="px-6 py-3 text-left font-semibold">Status</th>
              </tr>
            </thead>
            <tbody data-section="departmentPerformance">
              {departmentPerformance.map((dept, index) => (
                <tr class="border-b hover:bg-gray-50 transition-all animate-fade-in-up" style={`animation-delay: ${1.1 + index * 0.1}s`}>
                  <td class="px-6 py-4 font-medium text-gray-800">{dept.name}</td>
                  <td class="px-6 py-4">{dept.projects}</td>
                  <td class="px-6 py-4">
                    <div class="flex items-center gap-2">
                      <div class="w-20 bg-gray-200 rounded-full h-2">
                        <div class="bg-green-500 h-2 rounded-full" style="width: {dept.completion}%"></div>
                      </div>
                      <span class="text-sm text-gray-600">{dept.completion}%</span>
                    </div>
                  </td>
                  <td class="px-6 py-4 text-gray-600">{dept.budget}</td>
                  <td class="px-6 py-4">
                    <span class={`px-2 py-1 rounded-full text-xs font-semibold ${
                      dept.completion >= 90 ? 'bg-green-100 text-green-700' :
                      dept.completion >= 70 ? 'bg-yellow-100 text-yellow-700' :
                      'bg-red-100 text-red-700'
                    }`}>
                      {dept.completion >= 90 ? 'Excellent' :
                       dept.completion >= 70 ? 'Good' : 'Needs Attention'}
                    </span>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 1.5s;">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Quick Actions</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <button class="flex items-center gap-3 p-4 bg-blue-50 hover:bg-blue-100 rounded-xl transition-all duration-300 animate-fade-in-up" style="animation-delay: 1.6s;">
            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            <span class="font-medium text-blue-700">View All Projects</span>
          </button>
          <button class="flex items-center gap-3 p-4 bg-green-50 hover:bg-green-100 rounded-xl transition-all duration-300 animate-fade-in-up" style="animation-delay: 1.7s;">
            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            <span class="font-medium text-green-700">Generate Reports</span>
          </button>
          <button class="flex items-center gap-3 p-4 bg-purple-50 hover:bg-purple-100 rounded-xl transition-all duration-300 animate-fade-in-up" style="animation-delay: 1.8s;">
            <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
            </svg>
            <span class="font-medium text-purple-700">View Heatmap</span>
          </button>
          <button class="flex items-center gap-3 p-4 bg-orange-50 hover:bg-orange-100 rounded-xl transition-all duration-300 animate-fade-in-up" style="animation-delay: 1.9s;">
            <svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <span class="font-medium text-orange-700">Export Data</span>
          </button>
        </div>
      </div>
    </section>

    <!-- Project Details Modal -->
    <ProjectDetailsModal userTheme="executive" />
  </ExecutiveLayout>
</Layout>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fadeInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
  }
</style>

<script>
  import authService from '../../../services/auth.js';
  import executiveService from '../../../services/executive.js';
  
  // Authentication check for Executive Viewer
  document.addEventListener('DOMContentLoaded', async function() {
    // Check session validity first
    if (!authService.redirectIfInvalidSession()) {
      return;
    }
    
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      window.location.href = '/login/lgu-pmt';
      return;
    }
    
    try {
      const user = JSON.parse(userData);
      
      // Check if user is Executive Viewer (SYS.AD with EXECUTIVE subRole)
      if (user.role !== 'SYS.AD' || user.subRole !== 'EXECUTIVE') {
        // Redirect to appropriate dashboard based on role
        if (user.role === 'SYS.AD') {
          window.location.href = '/dashboard/sysadmin/SysAdminDashboard';
        } else {
          window.location.href = '/login/lgu-pmt';
        }
        return;
      }
      
      console.log('Executive Dashboard loaded for user:', user.username);
      
      // Fetch dashboard data
      await loadDashboardData();
      
    } catch (error) {
      console.error('Error parsing user data:', error);
      window.location.href = '/login/lgu-pmt';
    }
  });

  // Function to load dashboard data
  async function loadDashboardData() {
    try {
      // Show loading state
      showLoadingState();
      
      // Fetch all data in parallel
      const [stats, projects, alerts, departments] = await Promise.all([
        executiveService.getDashboardStats(),
        executiveService.getRecentProjects(5),
        executiveService.getCriticalAlerts(),
        executiveService.getDepartmentPerformance()
      ]);
      
      // Update dashboard stats
      updateDashboardStats(stats);
      
      // Recent projects are now rendered server-side via ProjectCard components
      // No JavaScript update needed
      
      // Update critical alerts
      updateCriticalAlerts(alerts);
      
      // Update department performance
      updateDepartmentPerformance(departments);
      
      // Hide loading state
      hideLoadingState();
      
    } catch (error) {
      console.error('Error loading dashboard data:', error);
      hideLoadingState();
    }
  }

  // Update dashboard statistics
  function updateDashboardStats(stats) {
    const totalProjectsEl = document.querySelector('[data-stat="totalProjects"]');
    const ongoingProjectsEl = document.querySelector('[data-stat="ongoingProjects"]');
    const budgetUtilizationEl = document.querySelector('[data-stat="budgetUtilization"]');
    const delayedProjectsEl = document.querySelector('[data-stat="delayedProjects"]');
    const budgetProgressEl = document.querySelector('[data-stat="budgetProgress"]');
    
    if (totalProjectsEl) totalProjectsEl.textContent = stats.totalProjects;
    if (ongoingProjectsEl) ongoingProjectsEl.textContent = stats.ongoingProjects;
    if (budgetUtilizationEl) budgetUtilizationEl.textContent = stats.budgetUtilization + '%';
    if (delayedProjectsEl) delayedProjectsEl.textContent = stats.delayedProjects;
    if (budgetProgressEl) budgetProgressEl.style.width = stats.budgetUtilization + '%';
  }

  // Recent projects are now handled by server-side rendering
  // No need to update them via JavaScript since ProjectCard components are rendered by Astro



  // Update critical alerts
  function updateCriticalAlerts(alerts) {
    const alertsContainer = document.querySelector('[data-section="criticalAlerts"]');
    const alertsCount = document.querySelector('[data-stat="alertsCount"]');
    
    if (alertsCount) alertsCount.textContent = alerts.length;
    
    if (!alertsContainer) return;
    
    if (alerts.length === 0) {
      alertsContainer.innerHTML = '<p class="text-gray-500 text-center py-4">No critical alerts at this time</p>';
      return;
    }
    
    alertsContainer.innerHTML = alerts.map(alert => `
      <div class="p-4 rounded-lg border-l-4 bg-red-50 border-red-400">
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <div class="flex items-center gap-2 mb-1">
              <span class="w-2 h-2 rounded-full bg-red-500"></span>
              <h4 class="font-medium text-gray-800">${alert.title || 'Alert'}</h4>
            </div>
            <p class="text-sm text-gray-600 mb-2">${alert.message || alert.content || 'No details available'}</p>
            <p class="text-xs text-gray-500">${executiveService.formatDate(alert.createdAt)}</p>
          </div>
        </div>
      </div>
    `).join('');
  }

  // Update department performance
  function updateDepartmentPerformance(departments) {
    const deptContainer = document.querySelector('[data-section="departmentPerformance"]');
    if (!deptContainer) return;
    
    if (departments.length === 0) {
      deptContainer.innerHTML = '<p class="text-gray-500 text-center py-4">No department data available</p>';
      return;
    }
    
    deptContainer.innerHTML = departments.map(dept => `
      <tr class="border-b hover:bg-gray-50 transition-all">
        <td class="px-6 py-4 font-medium text-gray-800">${dept.name || dept.department}</td>
        <td class="px-6 py-4">${dept.projects || dept.projectCount || 0}</td>
        <td class="px-6 py-4">
          <div class="flex items-center gap-2">
            <div class="w-20 bg-gray-200 rounded-full h-2">
              <div class="bg-green-500 h-2 rounded-full" style="width: ${dept.completion || dept.completionRate || 0}%"></div>
            </div>
            <span class="text-sm text-gray-600">${dept.completion || dept.completionRate || 0}%</span>
          </div>
        </td>
        <td class="px-6 py-4 text-gray-600">${executiveService.formatBudget(dept.budget || dept.totalBudget || 0)}</td>
        <td class="px-6 py-4">
          <span class="px-2 py-1 rounded-full text-xs font-semibold ${getPerformanceColor(dept.completion || dept.completionRate || 0)}">
            ${getPerformanceStatus(dept.completion || dept.completionRate || 0)}
          </span>
        </td>
      </tr>
    `).join('');
  }

  // Helper functions
  function getStatusColor(status) {
    switch (status?.toLowerCase()) {
      case 'completed': return 'bg-green-500';
      case 'delayed': return 'bg-red-500';
      case 'ongoing': return 'bg-blue-500';
      default: return 'bg-gray-400';
    }
  }

  function getPerformanceColor(completion) {
    if (completion >= 90) return 'bg-green-100 text-green-700';
    if (completion >= 70) return 'bg-yellow-100 text-yellow-700';
    return 'bg-red-100 text-red-700';
  }

  function getPerformanceStatus(completion) {
    if (completion >= 90) return 'Excellent';
    if (completion >= 70) return 'Good';
    return 'Needs Attention';
  }

  // Helper functions for ProjectCard-style design
  function getProjectImage(initialPhoto) {
    if (!initialPhoto || initialPhoto === 'None' || initialPhoto === '') {
      return '/projects-page-header-bg.png';
    }
    return initialPhoto.startsWith('http') ? initialPhoto : `/uploads/${initialPhoto}`;
  }

  function getStatusBadgeColor(status) {
    switch(status?.toLowerCase()) {
      case 'completed':
      case 'complete':
        return 'bg-green-100 text-green-700 border-green-200';
      case 'ongoing':
        return 'bg-blue-100 text-blue-700 border-blue-200';
      case 'delayed':
        return 'bg-red-100 text-red-700 border-red-200';
      case 'pending':
        return 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'on hold':
        return 'bg-gray-100 text-gray-700 border-gray-200';
      default:
        return 'bg-gray-100 text-gray-600 border-gray-200';
    }
  }

  function formatBudget(amount) {
    if (!amount || isNaN(amount)) return '₱0.00';
    const num = parseFloat(amount);
    if (num >= 1000000) {
      return `₱${num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    } else if (num >= 1000) {
      return `₱${num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    }
    return `₱${num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  }

  function showLoadingState() {
    // Add loading indicators
    const loadingElements = document.querySelectorAll('[data-loading]');
    loadingElements.forEach(el => {
      el.classList.add('animate-pulse');
      el.classList.add('bg-gray-200');
    });
  }

  function hideLoadingState() {
    // Remove loading indicators
    const loadingElements = document.querySelectorAll('[data-loading]');
    loadingElements.forEach(el => {
      el.classList.remove('animate-pulse');
      el.classList.remove('bg-gray-200');
    });
  }

  // View project details
  async function viewProjectDetails(projectId) {
    try {
      // Check session validity first
      if (!authService.redirectIfInvalidSession()) {
        return;
      }

      // Try to show modal if available, otherwise redirect
      if (window.showProjectModal) {
        window.showProjectModal(projectId);
      } else {
        // Fallback to redirect to projects page
        window.location.href = `/dashboard/executive-viewer/modules/projects?projectId=${projectId}`;
      }
    } catch (error) {
      console.error('Error viewing project details:', error);
    }
  }

  // Make function available globally
  window.viewProjectDetails = viewProjectDetails;
</script> 