export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import ExecutiveLayout from '../../../../components/ExecutiveLayout.astro';
import executiveService from '../../../../services/executive.js';

// Fetch real notices data for Executive Viewer
let notices = [];
let noticeTypes = [];

try {
  notices = await executiveService.getNotices(20);
} catch (error) {
  console.error('Error fetching notices:', error);
  notices = [];
}

// Generate notice types based on available notices
const typeCounts = {};
notices.forEach(notice => {
  const type = notice.type || 'general';
  typeCounts[type] = (typeCounts[type] || 0) + 1;
});

noticeTypes = [
  { type: 'urgent', label: 'Urgent', count: typeCounts.urgent || 0, color: 'red' },
  { type: 'meeting', label: 'Meetings', count: typeCounts.meeting || 0, color: 'blue' },
  { type: 'financial', label: 'Financial', count: typeCounts.financial || 0, color: 'green' },
  { type: 'approval', label: 'Approvals', count: typeCounts.approval || 0, color: 'purple' },
  { type: 'maintenance', label: 'Maintenance', count: typeCounts.maintenance || 0, color: 'orange' }
];
---

<Layout title="Executive Notices - Executive Viewer">
  <ExecutiveLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header -->
      <div class="flex items-center justify-between mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Executive Notices</h1>
          <p class="text-gray-600">Important announcements and notifications for executive oversight</p>
        </div>
        <div class="flex gap-3">
          <button class="px-4 py-2 bg-red-100 text-red-700 rounded-lg font-semibold hover:bg-red-200 transition-all flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            {notices.filter(n => !n.read).length} Unread
          </button>
          <button class="px-6 py-2 bg-gradient-to-r from-[#3D50D7] to-[#2a3bb8] text-white rounded-xl font-semibold shadow-lg hover:from-[#2a3bb8] hover:to-[#3D50D7] transition-all duration-300">
            Mark All Read
          </button>
        </div>
      </div>

      <!-- Notice Type Overview -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Notice Categories</h3>
        <div class="grid grid-cols-1 md:grid-cols-5 gap-4">
          {noticeTypes.map(category => (
            <div class="text-center p-4 bg-gray-50 rounded-lg hover:bg-gray-100 transition-all cursor-pointer">
              <div class={`w-12 h-12 bg-${category.color}-100 rounded-full flex items-center justify-center mx-auto mb-3`}>
                <svg class={`w-6 h-6 text-${category.color}-600`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                </svg>
              </div>
              <h4 class="font-medium text-gray-800 mb-1">{category.label}</h4>
              <p class="text-2xl font-bold text-[#3D50D7]">{category.count}</p>
              <p class="text-sm text-gray-600">Notices</p>
            </div>
          ))}
        </div>
      </div>

      <!-- Filters -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <select class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3D50D7] focus:border-transparent">
            <option value="all">All Types</option>
            <option value="urgent">Urgent</option>
            <option value="meeting">Meetings</option>
            <option value="financial">Financial</option>
            <option value="approval">Approvals</option>
            <option value="maintenance">Maintenance</option>
          </select>
          
          <select class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3D50D7] focus:border-transparent">
            <option value="all">All Priorities</option>
            <option value="high">High Priority</option>
            <option value="medium">Medium Priority</option>
            <option value="low">Low Priority</option>
          </select>
          
          <select class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3D50D7] focus:border-transparent">
            <option value="all">All Status</option>
            <option value="active">Active</option>
            <option value="scheduled">Scheduled</option>
            <option value="completed">Completed</option>
          </select>
          
          <select class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3D50D7] focus:border-transparent">
            <option value="all">All Departments</option>
            <option value="engineering">Engineering</option>
            <option value="economic-development">Economic Development</option>
            <option value="education">Education</option>
            <option value="it">IT Department</option>
          </select>
        </div>
      </div>

      <!-- Notices List -->
      <div class="space-y-4 mb-8">
        {notices.map(notice => (
          <div class={`bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300 ${
            !notice.read ? 'border-l-4 border-l-[#3D50D7]' : ''
          }`}>
            <div class="flex items-start justify-between">
              <div class="flex-1">
                <div class="flex items-center gap-3 mb-2">
                  <h3 class="text-lg font-semibold text-gray-800">{notice.title}</h3>
                  {!notice.read && (
                    <span class="w-2 h-2 bg-[#3D50D7] rounded-full"></span>
                  )}
                  <span class={`px-2 py-1 rounded-full text-xs font-semibold ${
                    notice.type === 'urgent' ? 'bg-red-100 text-red-700' :
                    notice.type === 'meeting' ? 'bg-blue-100 text-blue-700' :
                    notice.type === 'financial' ? 'bg-green-100 text-green-700' :
                    notice.type === 'approval' ? 'bg-purple-100 text-purple-700' :
                    'bg-orange-100 text-orange-700'
                  }`}>
                    {notice.type}
                  </span>
                  <span class={`px-2 py-1 rounded-full text-xs font-semibold ${
                    notice.priority === 'high' ? 'bg-red-100 text-red-700' :
                    notice.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                    'bg-green-100 text-green-700'
                  }`}>
                    {notice.priority} priority
                  </span>
                  <span class={`px-2 py-1 rounded-full text-xs font-semibold ${
                    notice.status === 'active' ? 'bg-green-100 text-green-700' :
                    notice.status === 'scheduled' ? 'bg-blue-100 text-blue-700' :
                    'bg-gray-100 text-gray-700'
                  }`}>
                    {notice.status}
                  </span>
                </div>
                <p class="text-gray-600 mb-3">{notice.content}</p>
                <div class="flex items-center gap-6 text-sm text-gray-500">
                  <span class="flex items-center gap-1">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    {notice.department}
                  </span>
                  <span class="flex items-center gap-1">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                    {notice.date} at {notice.time}
                  </span>
                </div>
              </div>
              <div class="flex gap-2">
                <button class="px-4 py-2 bg-blue-50 text-blue-700 rounded-lg text-sm font-medium hover:bg-blue-100 transition-all">
                  View Details
                </button>
                <button class="px-3 py-2 bg-gray-50 text-gray-700 rounded-lg text-sm font-medium hover:bg-gray-100 transition-all">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
        ))}
      </div>

      <!-- Quick Actions -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Notice Actions</h3>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <button class="flex items-center gap-3 p-4 bg-blue-50 hover:bg-blue-100 rounded-xl transition-all duration-300">
            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
            <span class="font-medium text-blue-700">View All Notices</span>
          </button>
          <button class="flex items-center gap-3 p-4 bg-green-50 hover:bg-green-100 rounded-xl transition-all duration-300">
            <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <span class="font-medium text-green-700">Mark All Read</span>
          </button>
          <button class="flex items-center gap-3 p-4 bg-purple-50 hover:bg-purple-100 rounded-xl transition-all duration-300">
            <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <span class="font-medium text-purple-700">Export Notices</span>
          </button>
          <button class="flex items-center gap-3 p-4 bg-orange-50 hover:bg-orange-100 rounded-xl transition-all duration-300">
            <svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
            <span class="font-medium text-orange-700">Notification Settings</span>
          </button>
        </div>
      </div>
    </section>
  </ExecutiveLayout>
</Layout> 