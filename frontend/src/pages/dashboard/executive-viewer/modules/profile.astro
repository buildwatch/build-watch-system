---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import ExecutiveLayout from '../../../../components/ExecutiveLayout.astro';
---

<style>
  /* Enhanced Profile Styles */
  .profile-card {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }
  
  .profile-card:hover {
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }
  
  .profile-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.6s;
  }
  
  .profile-card:hover::before {
    left: 100%;
  }
  
  /* Enhanced Avatar */
  .avatar-container {
    position: relative;
    transition: all 0.3s ease;
  }
  
  .avatar-container:hover {
    transform: scale(1.05);
  }
  
  .avatar-container::after {
    content: '';
    position: absolute;
    inset: -4px;
    background: linear-gradient(45deg, #3b82f6, #2563eb, #1d4ed8, #3b82f6);
    border-radius: 1rem;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .avatar-container:hover::after {
    opacity: 1;
  }
  
  /* Profile Picture Border */
  .profile-picture-border {
    border: 4px solid #3b82f6 !important;
  }
  
  /* Enhanced Content Hover Effects */
  .info-field {
    @apply bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl text-gray-800 font-medium transition-all duration-300 hover:shadow-lg hover:border-blue-400 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .info-field::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .info-field:hover::before {
    left: 100%;
  }
  
  .info-field:hover {
    @apply transform scale-105;
  }
  
  .info-field > * {
    position: relative;
    z-index: 2;
  }
  
  .stat-card-enhanced {
    @apply bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl transition-all duration-300 hover:shadow-lg hover:border-blue-400 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .stat-card-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .stat-card-enhanced:hover::before {
    left: 100%;
  }
  
  .stat-card-enhanced:hover {
    @apply transform scale-105;
  }
  
  .stat-card-enhanced > * {
    position: relative;
    z-index: 2;
  }
  
  .permission-item-enhanced {
    @apply flex items-center p-3 bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl border border-blue-200 transition-all duration-300 hover:shadow-lg hover:border-blue-400 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .permission-item-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .permission-item-enhanced:hover::before {
    left: 100%;
  }
  
  .permission-item-enhanced:hover {
    @apply transform scale-105;
  }
  
  .permission-item-enhanced > * {
    position: relative;
    z-index: 2;
  }
  
  .quick-action-btn-enhanced {
    @apply w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-4 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 border border-blue-600/20 text-sm;
    position: relative;
    overflow: hidden;
  }
  
  .quick-action-btn-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .quick-action-btn-enhanced:hover::before {
    left: 100%;
  }
  
  .quick-action-btn-enhanced:hover {
    @apply transform scale-105 -translate-y-1;
  }
  
  .quick-action-btn-enhanced > * {
    position: relative;
    z-index: 2;
  }
  
  .status-item-enhanced {
    @apply flex items-center justify-between py-2 px-3 bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl transition-all duration-300 hover:shadow-lg hover:border-blue-400 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .status-item-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .status-item-enhanced:hover::before {
    left: 100%;
  }
  
  .status-item-enhanced:hover {
    @apply transform scale-105;
  }
  
  .status-item-enhanced > * {
    position: relative;
    z-index: 2;
  }
  
  .section-card-enhanced {
    @apply mt-6 bg-white rounded-2xl border border-gray-200 p-5 shadow-sm transition-all duration-300 hover:shadow-lg hover:border-blue-300 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .section-card-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.05), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .section-card-enhanced:hover::before {
    left: 100%;
  }
  
  .section-card-enhanced:hover {
    @apply transform scale-[1.02];
  }
  
  .section-card-enhanced > * {
    position: relative;
    z-index: 2;
  }
  
  .status-active {
    @apply bg-gradient-to-r from-green-600 to-emerald-700 text-white px-4 py-2 rounded-full text-xs font-semibold shadow-lg;
    position: relative;
    overflow: hidden;
  }
  
  .status-active::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s ease-out;
    z-index: 1;
  }
  
  .status-active:hover::before {
    left: 100%;
  }
  
  .status-active > * {
    position: relative;
    z-index: 2;
  }
  
  .info-row {
    @apply flex items-center justify-between py-3 border-b border-gray-200 hover:border-blue-300 transition-colors duration-300;
  }
  
  .info-row:last-child {
    @apply border-b-0;
  }
  
  /* Enhanced Button Styling */
  .btn-enhanced {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }
  
  .btn-enhanced:hover {
    transform: translateY(-2px);
    box-shadow: 0 15px 30px -5px rgba(0, 0, 0, 0.2);
  }
  
  .btn-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.6s;
  }
  
  .btn-enhanced:hover::before {
    left: 100%;
  }
  
  /* Icon Container Hover Effects */
  .icon-container {
    @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
    position: relative;
    overflow: hidden;
  }
  
  .icon-container-small {
    @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
    position: relative;
    overflow: hidden;
  }
  
  .icon-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s ease-out;
    z-index: 1;
  }
  
  .icon-container:hover::before {
    left: 100%;
  }
  
  .icon-container:hover {
    @apply transform scale-110 rotate-3;
  }
  
  .icon-container > * {
    position: relative;
    z-index: 2;
  }
  
  .icon-container-small::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s ease-out;
    z-index: 1;
  }
  
  .icon-container-small:hover::before {
    left: 100%;
  }
  
  .icon-container-small:hover {
    @apply transform scale-110 rotate-3;
  }
  
  .icon-container-small > * {
    position: relative;
    z-index: 2;
  }

  /* Executive Viewer Modal Button Styles */
  .btn-primary {
    @apply bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 border border-blue-600/20;
    position: relative;
    overflow: hidden;
  }
  .btn-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }
  .btn-primary > * {
    position: relative;
    z-index: 2;
  }
  .btn-primary:hover::before {
    left: 100%;
  }
  .btn-secondary {
    @apply bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 border border-blue-600/20;
    position: relative;
    overflow: hidden;
  }
  .btn-secondary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }
  .btn-secondary > * {
    position: relative;
    z-index: 2;
  }
  .btn-secondary:hover::before {
    left: 100%;
  }
</style>

<Layout title="Executive Viewer Profile">
  <ExecutiveLayout>
    <!-- Flush Header (matches Secretariat design) -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
                      <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/></svg>
              </div>
        <div>
              <h1 class="text-3xl font-bold text-black">Executive Viewer Profile</h1>
              <p class="text-sm text-gray-600">Executive Oversight Account Management</p>
        </div>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Last Updated</p>
            <p class="text-xs text-black font-semibold" id="currentDateTime">Loading...</p>
          </div>
          <div class="w-4 h-4 bg-green-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <!-- Main Content Wrapper -->
    <section class="bg-gradient-to-br from-gray-50 via-blue-50 to-white min-h-screen">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 px-8 py-8">
        <!-- Left Column: Profile Overview -->
        <div class="lg:col-span-1">
          <div class="group profile-card bg-white rounded-2xl shadow-lg border border-gray-100 p-8 hover:shadow-2xl hover:border-blue-300 transition-all duration-300">
            <div class="text-center mb-8">
              <div class="relative inline-block">
                <div id="profilePictureContainer" class="avatar-container profile-picture-border w-32 h-32 rounded-2xl mx-auto mb-6 flex items-center justify-center shadow-xl overflow-hidden cursor-pointer group">
                  <img 
                    id="mainProfilePicture"
                    src="/mv.svg"
                    alt="Executive Viewer"
                    class="w-full h-full object-cover"
                    crossorigin="anonymous"
                    onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                  />
                  <div class="w-full h-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center" style="display: none;">
                    <span class="text-white font-bold text-3xl" id="userInitials">EV</span>
                    </div>
                  <div class="absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center">
                    <p class="text-white text-sm font-medium">Click to Edit</p>
                  </div>
                </div>
                <div class="absolute bottom-1 -right-2 w-10 h-10 bg-green-500 rounded-full border-4 border-white flex items-center justify-center shadow-lg">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
              </div>
              <h2 class="text-2xl font-bold text-gray-800 mb-2 group-hover:text-blue-600 transition-colors" id="userName">Loading...</h2>
              <div class="status-active inline-block mb-3">Active</div>
              <p class="text-sm text-gray-700 font-medium">Executive Viewer</p>
              <p class="text-xs text-gray-600">Executive Oversight Officer</p>
      </div>
          
          <div class="space-y-4">
              <div class="info-row">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V4a2 2 0 114 0v2m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                  </svg>
                  User ID
                </span>
                <span class="text-sm font-bold text-gray-800" id="userId">Loading...</span>
              </div>
              <div class="info-row">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                  </svg>
                  Email
                </span>
                <span class="text-sm font-bold text-gray-800 hover:text-blue-600 transition-colors cursor-pointer" id="userEmail">Loading...</span>
              </div>
              <div class="info-row">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                  Contact
                </span>
                <span class="text-sm font-bold text-gray-800" id="userContact">Loading...</span>
              </div>
              <div class="info-row">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                  Department
                </span>
                <span class="text-sm font-bold text-gray-800" id="userDepartment">Loading...</span>
            </div>
              <div class="info-row">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  Location
                </span>
                <span class="text-sm font-bold text-gray-800" id="userLocation">Loading...</span>
            </div>
              <div class="info-row">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  Birthday
                </span>
                <span class="text-sm font-bold text-gray-800" id="userBirthday">Loading...</span>
              </div>
              <div class="info-row">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Timezone
                </span>
                <span class="text-sm font-bold text-gray-800" id="userTimezone">Loading...</span>
              </div>
              </div>
            </div>
            
          <!-- Quick Actions -->
          <div class="section-card-enhanced">
            <div class="flex items-center gap-3 mb-4">
              <div class="icon-container-small bg-gradient-to-br from-blue-500 to-blue-600">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
              </div>
              <h4 class="text-sm font-semibold text-gray-700">Quick Actions</h4>
              </div>
            <div class="space-y-3">
              <button onclick="editProfile()" class="quick-action-btn-enhanced">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                Edit Profile
              </button>
              <button onclick="changePassword()" class="quick-action-btn-enhanced">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                  </svg>
                Change Password
              </button>
              <button onclick="securitySettings()" class="quick-action-btn-enhanced">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                  </svg>
                Security Settings
              </button>
            </div>
            </div>
            
          <!-- System Status -->
          <div class="section-card-enhanced">
            <div class="flex items-center gap-3 mb-4">
              <div class="icon-container-small bg-gradient-to-br from-blue-500 to-blue-600">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <h4 class="text-sm font-semibold text-gray-700">System Status</h4>
              </div>
            <div class="space-y-3">
              <div class="status-item-enhanced">
                <span class="text-gray-600 text-sm">Last Login:</span>
                <span id="lastLogin" class="text-gray-800 text-sm font-medium">Loading...</span>
                </div>
              <div class="status-item-enhanced">
                <span class="text-gray-600 text-sm">Session Status:</span>
                <span class="flex items-center text-green-600 text-sm font-medium">
                  <div class="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                  Active
                </span>
              </div>
              <div class="status-item-enhanced">
                <span class="text-gray-600 text-sm">Access Level:</span>
                <span class="text-gray-800 text-sm font-medium">Executive Dashboard</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Right Column: Profile Details -->
        <div class="lg:col-span-2 space-y-8">
          <!-- Personal Information -->
          <div class="group profile-card bg-white rounded-2xl shadow-lg border border-gray-100 p-8 hover:shadow-2xl hover:border-blue-300 transition-all duration-300">
            <div class="flex items-center gap-4 mb-6">
              <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600 shadow-xl">
                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
              <h3 class="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors">Personal Information</h3>
            </div>
            <p class="text-sm text-gray-500 mb-6">Complete personal details and contact information</p>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Full Name</label>
                <div class="w-full px-4 py-3 info-field" id="profileName">Loading...</div>
              </div>
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Email Address</label>
                <div class="w-full px-4 py-3 info-field" id="profileEmail">Loading...</div>
                </div>
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Date of Birth</label>
                                                                <div class="w-full px-4 py-3 info-field">
                  <span id="profileBirthday">Loading...</span>
                </div>
                </div>
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Username</label>
                                                                <div class="w-full px-4 py-3 info-field">
                  <span id="profileUsername">Loading...</span>
                </div>
                </div>
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Contact Number</label>
                                                                <div class="w-full px-4 py-3 info-field">
                  <span id="profileContact">Loading...</span>
                </div>
                  </div>
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">User ID</label>
                <div class="w-full px-4 py-3 info-field">
                  <span id="profileUserId">Loading...</span>
                </div>
              </div>
              </div>
            </div>
            
          <!-- LGU-IU Information -->
          <div class="group profile-card bg-white rounded-2xl shadow-lg border border-gray-100 p-8 hover:shadow-2xl hover:border-blue-300 transition-all duration-300">
            <div class="flex items-center gap-4 mb-6">
              <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600 shadow-xl">
                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
            </div>
              <h3 class="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors">Executive Information</h3>
            </div>
            <p class="text-sm text-gray-500 mb-6">Executive role and access details</p>
            
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Executive Role</label>
                                                                <div class="w-full px-4 py-3 info-field">
                  <span>Executive Viewer</span>
                </div>
              </div>
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Position</label>
                                                                <div class="w-full px-4 py-3 info-field">
                  <span>Executive Oversight Officer</span>
                </div>
              </div>
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Access Level</label>
                                                                <div class="w-full px-4 py-3 info-field">
                  <span>Executive Dashboard Access</span>
                </div>
                  </div>
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700 mb-2">Department</label>
                                <div class="w-full px-4 py-3 info-field">
                  <span id="profileDepartment">Loading...</span>
                </div>
          </div>
        </div>
      </div>

          <!-- System Statistics -->
          <div class="group profile-card bg-white rounded-2xl shadow-lg border border-gray-100 p-8 hover:shadow-2xl hover:border-blue-300 transition-all duration-300">
            <div class="flex items-center gap-4 mb-6">
              <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600 shadow-xl">
                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <h3 class="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors">System Statistics</h3>
            </div>
            <p class="text-sm text-gray-500 mb-6">Executive performance and activity metrics</p>
            
            <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
              <div class="text-center p-4 stat-card-enhanced">
                <div class="text-2xl font-bold text-blue-600 mb-1" id="projectsReviewed">0</div>
                <div class="text-xs text-gray-600">Projects Reviewed</div>
                  </div>
              <div class="text-center p-4 stat-card-enhanced">
                <div class="text-2xl font-bold text-blue-600 mb-1" id="meetingsAttended">0</div>
                <div class="text-xs text-gray-600">Meetings Attended</div>
                  </div>
              <div class="text-center p-4 stat-card-enhanced">
                <div class="text-2xl font-bold text-blue-600 mb-1" id="daysActive">0</div>
                <div class="text-xs text-gray-600">Days Active</div>
                </div>
              <div class="text-center p-4 stat-card-enhanced">
                <div class="text-2xl font-bold text-blue-600 mb-1" id="performance">0%</div>
                <div class="text-xs text-gray-600">Performance</div>
              </div>
              <div class="text-center p-4 stat-card-enhanced">
                <div class="text-2xl font-bold text-blue-600 mb-1" id="attendance">0%</div>
                <div class="text-xs text-gray-600">Attendance</div>
                  </div>
              <div class="text-center p-4 stat-card-enhanced">
                <div class="text-2xl font-bold text-blue-600 mb-1" id="lastActivity">Loading...</div>
                <div class="text-xs text-gray-600">Last Activity</div>
                  </div>
        </div>
      </div>

          <!-- Permissions & Access Control -->
          <div class="group profile-card bg-white rounded-2xl shadow-lg border border-gray-100 p-8 hover:shadow-2xl hover:border-blue-300 transition-all duration-300">
            <div class="flex items-center gap-4 mb-6">
              <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600 shadow-xl">
                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
            </svg>
                  </div>
              <h3 class="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors">Permissions & Access Control</h3>
                </div>
            <p class="text-sm text-gray-500 mb-6">Executive access permissions and capabilities</p>
            
            <div class="space-y-3">
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
                  </div>
                <span class="text-sm font-medium text-gray-800">Executive Dashboard Access</span>
                </div>
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
              </div>
                <span class="text-sm font-medium text-gray-800">Project Monitoring & Updates</span>
                  </div>
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
                  </div>
                <span class="text-sm font-medium text-gray-800">Activity Submission</span>
                </div>
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                  </div>
                <span class="text-sm font-medium text-gray-800">LGU Feedback & Communication</span>
                </div>
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </div>
                <span class="text-sm font-medium text-gray-800">Compliance Tracking</span>
                  </div>
                  </div>
                </div>
        </div>
      </div>
    </section>
  </ExecutiveLayout>
</Layout>

<!-- Enhanced Profile Picture Edit Modal -->
<div id="profilePictureModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-3xl shadow-2xl max-w-lg w-full mx-4 transform transition-all duration-300 scale-95 opacity-0 border border-gray-100" id="profilePictureModalContent">
      <!-- Modal Header -->
      <div class="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-gray-50 to-white rounded-t-3xl">
        <div class="flex items-center gap-3">
          <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-2xl font-bold text-gray-800">Edit Profile Picture</h3>
            <p class="text-sm text-gray-600">Update your profile picture</p>
          </div>
        </div>
        <button id="closeProfileModal" class="w-10 h-10 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 transition-all duration-200">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Modal Body -->
      <div class="p-6 space-y-8">
        <!-- Current Profile Picture Section -->
        <div class="space-y-4">
          <div class="flex items-center justify-center gap-3">
            <span class="text-base font-semibold text-gray-700">Current Profile Picture</span>
            <button id="refreshCurrentPic" class="p-2 bg-blue-50 hover:bg-blue-100 rounded-full transition-colors duration-200">
              <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
            </button>
        </div>
          <div class="flex justify-center items-center w-full">
                               <div class="w-28 h-28 rounded-3xl overflow-hidden profile-picture-border shadow-xl flex-shrink-0">
              <img 
                src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%2310b981'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EEU%3C/text%3E%3C/svg%3E"
                alt="Current Profile Picture"
                class="w-full h-full object-cover"
                id="currentProfilePic"
                crossorigin="anonymous"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
              />
                                   <div class="w-full h-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center" style="display: none;">
                       <span class="text-white font-bold text-xl">IU</span>
        </div>
            </div>
          </div>
        </div>
        
        <!-- Image Upload Area -->
        <div class="space-y-3">
                           <div id="dropZone" class="border-2 border-dashed border-gray-300 rounded-2xl p-10 text-center hover:border-blue-500 transition-all duration-300 cursor-pointer bg-gradient-to-br from-gray-50 to-blue-50/30 hover:from-blue-50/50 hover:to-blue-100/50">
            <div class="space-y-4">
              <div class="w-20 h-20 bg-gradient-to-br from-blue-100 to-blue-200 rounded-full mx-auto flex items-center justify-center shadow-lg">
                <svg class="w-10 h-10 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
              </div>
              <div class="space-y-2">
                <p class="text-base font-semibold text-gray-700">Drop your image here</p>
                <p class="text-sm text-gray-600">or click to browse</p>
                <p class="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
              </div>
            </div>
          </div>
          <input type="file" id="profilePictureInput" accept="image/*" class="hidden" />

          <!-- Preview Section -->
          <div id="imagePreview" class="hidden">
            <div class="text-center space-y-4">
                                   <div class="w-36 h-36 rounded-3xl overflow-hidden profile-picture-border shadow-xl mx-auto">
                <img id="previewImage" src="" alt="Preview" class="w-full h-full object-cover" crossorigin="anonymous" />
              </div>
              <p class="text-sm font-medium text-gray-600">Image Preview</p>
            </div>
          </div>
        </div>
        
        <!-- Action Buttons -->
        <div class="flex gap-4 pt-6 border-t border-gray-100">
          <button id="saveProfilePicture" class="flex-1 bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 border border-blue-500/30 text-sm btn-enhanced">
            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            Save Changes
          </button>
          <button id="cancelProfilePicture" class="flex-1 bg-gradient-to-r from-gray-200 to-gray-300 text-gray-700 font-semibold px-6 py-3 rounded-xl hover:from-gray-300 hover:to-gray-400 transition-all duration-300 transform hover:scale-105 hover:shadow-lg text-sm btn-enhanced">
            Cancel
          </button>
        </div>
        
        <!-- Reset Button -->
        <div class="text-center pt-4 space-y-2">
          <button id="resetProfilePicture" class="text-sm text-red-500 hover:text-red-700 underline transition-colors duration-200">
            Reset to Default Picture
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Edit Profile Modal -->
<div id="editProfileModal" class="fixed inset-0 bg-black/60 backdrop-blur-md hidden z-50 transition-all duration-500 ease-out flex items-center justify-center p-4">
  <div class="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl max-w-3xl w-full mx-4 transform scale-95 opacity-0 transition-all duration-500 ease-out border border-white/20 overflow-hidden" id="editProfileModalContent">
      <!-- Modal Header -->
      <div class="relative bg-gradient-to-r from-blue-600 via-blue-700 to-blue-800 px-8 py-6 rounded-t-3xl">
        <div class="absolute inset-0 bg-gradient-to-r from-blue-700/20 to-blue-800/20 rounded-t-3xl"></div>
        <div class="relative flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
              </svg>
            </div>
            <div>
              <h2 class="text-2xl font-bold text-white">Edit Profile</h2>
              <p class="text-blue-100 text-sm">Update your personal information and contact details</p>
            </div>
          </div>
          <button id="closeEditProfileModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
            <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Modal Body -->
      <div class="p-8 bg-gradient-to-br from-gray-50 to-white rounded-b-3xl">
        <form id="editProfileForm" class="space-y-8">
          <!-- Personal Information Section -->
          <div class="space-y-6">
            <div class="flex items-center space-x-3 mb-6">
              <div class="w-1 h-8 bg-gradient-to-b from-blue-500 to-blue-600 rounded-full"></div>
              <h3 class="text-lg font-bold text-gray-800">Personal Information</h3>
            </div>
            
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <!-- Full Name -->
              <div class="group">
                <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                  <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                  Full Name
                </label>
                <div class="relative">
                  <input type="text" id="editFullName" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your full name" required>
                  <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                </div>
              </div>
              
              <!-- Email Address -->
              <div class="group">
                <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                  <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                  </svg>
                  Email Address
                </label>
                <div class="relative">
                  <input type="email" id="editEmail" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your email address" required>
                  <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                </div>
              </div>
              
              <!-- Phone Number -->
              <div class="group">
                <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                  <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                  Phone Number
                </label>
                <div class="relative">
                  <input type="tel" id="editPhone" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your phone number">
                  <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                </div>
              </div>
              
              <!-- Location -->
              <div class="group">
                <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                  <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  Location
                </label>
                <div class="relative">
                  <input type="text" id="editLocation" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your location">
                  <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                </div>
              </div>
              
              <!-- Birthday -->
              <div class="group">
                <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                  <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  Birthday
                </label>
                <div class="relative">
                  <input type="date" id="editBirthday" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 shadow-sm hover:shadow-md text-lg">
                  <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                </div>
              </div>
              
              <!-- Timezone -->
              <div class="group">
                <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                  <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Timezone
                </label>
                <div class="relative">
                  <select id="editTimezone" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 shadow-sm hover:shadow-md appearance-none cursor-pointer text-lg">
                    <option value="Asia/Manila" selected>Asia/Manila (UTC+8)</option>
                    <option value="UTC">UTC (UTC+0)</option>
                    <option value="America/New_York">America/New_York (UTC-5)</option>
                    <option value="Europe/London">Europe/London (UTC+0)</option>
                  </select>
                  <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Action Buttons -->
          <div class="flex justify-end space-x-6 pt-8 border-t border-gray-200/60">
            <button type="button" id="cancelEditProfile" class="btn-secondary flex items-center space-x-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
              <span>Cancel</span>
            </button>
            <button type="submit" class="btn-primary flex items-center space-x-3">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <span>Save Changes</span>
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Change Password Modal -->
<div id="changePasswordModal" class="fixed inset-0 bg-black/60 backdrop-blur-md hidden z-50 transition-all duration-500 ease-out flex items-center justify-center p-4">
  <div class="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl max-w-2xl w-full mx-4 transform scale-95 opacity-0 transition-all duration-500 ease-out border border-white/20 overflow-hidden" id="changePasswordModalContent">
    <!-- Modal Header -->
    <div class="relative bg-gradient-to-r from-blue-600 via-blue-700 to-blue-800 px-8 py-6 rounded-t-3xl">
      <div class="absolute inset-0 bg-gradient-to-r from-blue-700/20 to-blue-800/20 rounded-t-3xl"></div>
      <div class="relative flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7 7m7-7a6 6 0 00-7-7m-7 7a6 6 0 007 7m7-7H3m3 3h.01M9 6h.01M9 12h.01M9 18h.01"></path>
            </svg>
          </div>
          <div>
            <h2 class="text-2xl font-bold text-white">Change Password</h2>
            <p class="text-blue-100 text-sm">Update your account password for better security</p>
          </div>
        </div>
        <button id="closeChangePasswordModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
          <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Modal Body -->
    <div class="p-8 bg-gradient-to-br from-gray-50 to-white rounded-b-3xl">
      <form id="changePasswordForm" class="space-y-8">
        <!-- Current Password -->
        <div class="group">
          <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
            <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
            </svg>
            Current Password
          </label>
          <div class="relative">
            <input type="password" id="currentPassword" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your current password" required>
            <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
          </div>
        </div>

        <!-- New Password -->
        <div class="group">
          <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
            <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
            </svg>
            New Password
          </label>
          <div class="relative">
            <input type="password" id="newPassword" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your new password" required>
            <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
          </div>
        </div>

        <!-- Password Strength Indicator -->
        <div class="p-5 bg-gray-50 rounded-2xl border border-gray-200">
          <div class="flex items-center justify-between mb-3">
            <span class="text-sm font-semibold text-gray-700">Password Strength</span>
            <span id="passwordStrengthText" class="text-sm font-medium text-gray-500">Enter a password</span>
          </div>
          <div class="w-full bg-gray-200 rounded-full h-2 mb-4">
            <div id="passwordStrengthBar" class="h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
          </div>
          <div class="space-y-2">
            <div class="flex items-center space-x-2">
              <div id="lengthCheck" class="w-4 h-4 rounded-full border-2 border-gray-300 flex items-center justify-center">
                <svg class="w-3 h-3 text-white hidden" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-600">8+ characters</span>
            </div>
            <div class="flex items-center space-x-2">
              <div id="uppercaseCheck" class="w-4 h-4 rounded-full border-2 border-gray-300 flex items-center justify-center">
                <svg class="w-3 h-3 text-white hidden" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-600">Uppercase letter</span>
            </div>
            <div class="flex items-center space-x-2">
              <div id="lowercaseCheck" class="w-4 h-4 rounded-full border-2 border-gray-300 flex items-center justify-center">
                <svg class="w-3 h-3 text-white hidden" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-600">Lowercase letter</span>
            </div>
            <div class="flex items-center space-x-2">
              <div id="numberCheck" class="w-4 h-4 rounded-full border-2 border-gray-300 flex items-center justify-center">
                <svg class="w-3 h-3 text-white hidden" fill="currentColor" viewBox="0 0 20 20">
                  <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                </svg>
              </div>
              <span class="text-sm text-gray-600">Number</span>
            </div>
          </div>
        </div>

        <!-- Confirm New Password -->
        <div class="group">
          <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
            <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Confirm New Password
          </label>
          <div class="relative">
            <input type="password" id="confirmNewPassword" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Confirm your new password" required>
            <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
          </div>
        </div>
          
          <!-- Action Buttons -->
          <div class="flex justify-end space-x-6 pt-8 border-t border-gray-200/60">
            <button type="button" id="cancelChangePassword" class="btn-secondary">
              Cancel
            </button>
            <button type="submit" class="btn-primary flex items-center space-x-3">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <span>Update Password</span>
            </button>
          </div>
      </form>
    </div>
  </div>
</div>

<!-- Security Settings Modal -->
<div id="securitySettingsModal" class="fixed inset-0 bg-black/60 backdrop-blur-md z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 w-full max-w-4xl max-h-[95vh] overflow-hidden transform scale-95 opacity-0 transition-all duration-500 ease-out" id="securitySettingsModalContent">
    <!-- Header with Executive Viewer theme -->
    <div class="relative bg-gradient-to-r from-blue-600 via-blue-700 to-blue-800 px-8 py-6">
      <div class="absolute inset-0 bg-gradient-to-r from-blue-700/20 to-blue-800/20"></div>
      <div class="relative flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
            </svg>
          </div>
          <div>
            <h2 class="text-2xl font-bold text-white">Security Settings</h2>
            <p class="text-blue-100 text-sm">Manage your account security and privacy preferences</p>
          </div>
        </div>
        <button id="closeSecuritySettingsModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
          <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Content with scrollable area -->
    <div class="overflow-y-auto max-h-[calc(95vh-120px)]">
      <div class="p-8 space-y-8">
        <!-- Two-Factor Authentication -->
        <div class="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200/50 shadow-sm hover:shadow-md transition-all duration-300">
          <div class="flex items-center justify-between mb-6">
            <div class="flex items-center space-x-4">
              <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-gray-900">Two-Factor Authentication</h3>
                <p class="text-sm text-gray-600">Add an extra layer of security to your account</p>
              </div>
            </div>
            <label class="relative inline-flex items-center cursor-pointer group">
              <input type="checkbox" id="twoFactorToggle" class="sr-only peer">
              <div class="w-14 h-7 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-blue-500 peer-checked:to-blue-600 group-hover:shadow-lg transition-all duration-300"></div>
            </label>
          </div>
          <div id="twoFactorSetup" class="hidden space-y-6">
            <div class="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
              <h4 class="font-bold text-gray-900 mb-4 flex items-center space-x-2">
                <svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>Setup Instructions</span>
              </h4>
              <ol class="list-decimal list-inside space-y-3 text-sm text-gray-600">
                <li>Download an authenticator app (Google Authenticator, Authy, etc.)</li>
                <li>Scan the QR code below with your authenticator app</li>
                <li>Enter the 6-digit code to verify setup</li>
              </ol>
              <div class="mt-6 text-center">
                <div class="w-40 h-40 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl mx-auto flex items-center justify-center shadow-inner">
                  <div class="text-center">
                    <svg class="w-12 h-12 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
                    </svg>
                    <span class="text-gray-500 text-sm">QR Code</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Login Notifications -->
        <div class="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200/50 shadow-sm hover:shadow-md transition-all duration-300">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <div class="w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl flex items-center justify-center">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4.828 7l2.586 2.586a2 2 0 002.828 0L12 7H4.828zM4.828 17l2.586-2.586a2 2 0 012.828 0L12 17H4.828z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-gray-900">Login Notifications</h3>
                <p class="text-sm text-gray-600">Get notified when someone logs into your account</p>
              </div>
            </div>
            <label class="relative inline-flex items-center cursor-pointer group">
              <input type="checkbox" id="loginNotificationsToggle" class="sr-only peer" checked>
              <div class="w-14 h-7 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-blue-500 peer-checked:to-blue-600 group-hover:shadow-lg transition-all duration-300"></div>
            </label>
          </div>
        </div>

        <!-- Session Management -->
        <div class="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200/50 shadow-sm hover:shadow-md transition-all duration-300">
          <div class="flex items-center space-x-4 mb-6">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-900">Active Sessions</h3>
              <p class="text-sm text-gray-600">Manage your active login sessions</p>
            </div>
          </div>
          <div class="space-y-4">
            <div class="flex items-center justify-between p-4 bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
              <div class="flex items-center space-x-4">
                <div class="w-10 h-10 bg-gradient-to-br from-green-100 to-emerald-100 rounded-xl flex items-center justify-center">
                  <div class="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                </div>
                <div>
                  <p class="font-semibold text-gray-900">Current Session</p>
                  <p class="text-sm text-gray-600">Chrome on Windows • Manila, PH</p>
                </div>

              </div>
              <span class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">Active</span>
            </div>
            <div class="flex items-center justify-between p-4 bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
              <div class="flex items-center space-x-4">
                <div class="w-10 h-10 bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl flex items-center justify-center">
                  <div class="w-4 h-4 bg-gray-400 rounded-full"></div>
                </div>
                <div>
                  <p class="font-semibold text-gray-900">Mobile App</p>
                  <p class="text-sm text-gray-600">iPhone • 2 hours ago</p>
                </div>
              </div>
              <button class="px-4 py-2 text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg font-medium transition-all duration-200">End Session</button>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-4 pt-8 border-t border-gray-200/60">
          <button id="cancelSecuritySettings" class="btn-secondary">
            Cancel
          </button>
          <button id="saveSecuritySettings" class="btn-primary flex items-center space-x-3">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <span>Save Settings</span>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Function to load user profile data from database
  async function loadProfileData() {
    try {
    const token = localStorage.getItem('token');
      if (!token) {
        console.error('No authentication token found');
      return;
    }
    
      const response = await fetch('http://localhost:3000/api/auth/profile', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('📊 API response received:', data);

      // Check if response has the expected structure
      if (!data.success || !data.user) {
        console.error('❌ Invalid API response structure:', data);
        throw new Error('Invalid user data received');
      }

      const userData = data.user;
      console.log('📊 User profile data loaded:', userData);

      // Update current date/time
      const currentDateTime = new Date().toLocaleDateString('en-US', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit' 
      }) + ' Philippine Standard Time';
      document.getElementById('currentDateTime').textContent = currentDateTime;

      // Update profile summary section
      document.getElementById('userName').textContent = userData.fullName || userData.name || 'EIU User';
      document.getElementById('userId').textContent = userData.userId || userData.id || 'Loading...';
      document.getElementById('userEmail').textContent = userData.email || userData.username || 'loading@email.com';

      // Update personal information section
      document.getElementById('profileName').textContent = userData.fullName || userData.name || 'Loading...';
      document.getElementById('profileEmail').textContent = userData.email || userData.username || 'loading@email.com';
      document.getElementById('profileUsername').textContent = userData.username || 'Loading...';
      document.getElementById('profileUserId').textContent = userData.userId || 'Loading...';

      // Update additional form fields
      const profileContact = document.getElementById('profileContact');
      if (profileContact) {
        profileContact.textContent = userData.contactNumber || userData.contact || '-';
      }
      
      const profileBirthday = document.getElementById('profileBirthday');
      if (profileBirthday) {
        profileBirthday.textContent = userData.birthdate ? new Date(userData.birthdate).toLocaleDateString() : '-';
      }
      
      const profileDepartment = document.getElementById('profileDepartment');
      if (profileDepartment) {
        profileDepartment.textContent = userData.department || 'Municipal Project Monitoring';
      }

      // Update contact information if available
      const contactElement = document.querySelector('#userContact');
      if (contactElement) {
        contactElement.textContent = userData.contactNumber || userData.contact || '-';
      }

      const departmentElement = document.querySelector('#userDepartment');
      if (departmentElement) {
        departmentElement.textContent = userData.department || 'Municipal Project Monitoring';
      }

      const locationElement = document.querySelector('#userLocation');
      if (locationElement) {
        locationElement.textContent = userData.location || '-';
      }

      const birthdayElement = document.querySelector('#userBirthday');
      if (birthdayElement) {
        birthdayElement.textContent = userData.birthdate ? new Date(userData.birthdate).toLocaleDateString() : '-';
      }

      const timezoneElement = document.querySelector('#userTimezone');
      if (timezoneElement) {
        timezoneElement.textContent = userData.timezone || 'Asia/Manila';
      }

      // Update user initials
      const fullName = userData.fullName || userData.name || '';
      const initials = fullName.split(' ')
        .map(name => name.charAt(0))
        .join('')
        .toUpperCase()
        .slice(0, 2);
      document.getElementById('userInitials').textContent = initials || 'EU';

      // Store user data for profile picture loading
      window.userProfile = userData;

      // Load profile picture after user data is loaded
      loadProfilePictureFromStorage();

      // Load additional profile data
      loadAdditionalProfileData();

    } catch (error) {
      console.error('❌ Error loading profile data:', error);
      console.error('❌ Error details:', error.message);
      
      // Set fallback values
      document.getElementById('userName').textContent = 'Error loading data';
      document.getElementById('userId').textContent = 'Error';
      document.getElementById('userEmail').textContent = 'Error loading email';
      
      // Show error in console for debugging
      console.log('🔍 Debugging info:');
      console.log('🔍 Token exists:', !!localStorage.getItem('token'));
      console.log('🔍 Token preview:', localStorage.getItem('token')?.substring(0, 20) + '...');
    }
  }

  // Function to load additional profile data (statistics, last login, etc.)
  async function loadAdditionalProfileData() {
    try {
      // Load last login from localStorage or set default
      const lastLogin = localStorage.getItem('eiu_last_login') || new Date().toLocaleString();
      document.getElementById('lastLogin').textContent = lastLogin;

      // Load system statistics (these would typically come from an API)
      // For now, we'll set some default values that could be updated via API
      const stats = {
        projectsReviewed: 0,
        meetingsAttended: 0,
        daysActive: 0,
        performance: '0%',
        attendance: '0%',
        lastActivity: 'Loading...'
      };

      // Update statistics display
      document.getElementById('projectsReviewed').textContent = stats.projectsReviewed;
      document.getElementById('meetingsAttended').textContent = stats.meetingsAttended;
      document.getElementById('daysActive').textContent = stats.daysActive;
      document.getElementById('performance').textContent = stats.performance;
      document.getElementById('attendance').textContent = stats.attendance;
      document.getElementById('lastActivity').textContent = stats.lastActivity;

      // TODO: Replace with actual API calls to fetch real statistics
      // const response = await fetch('http://localhost:3000/api/eiu/statistics', {
      //   headers: { 'Authorization': `Bearer ${localStorage.getItem('token')}` }
      // });
      // const statistics = await response.json();
      // Update statistics with real data...

    } catch (error) {
      console.error('❌ Error loading additional profile data:', error);
    }
  }

  // Quick Actions Functions
  window.editProfile = function() {
    openModal('editProfileModal');
  };

  window.changePassword = function() {
    openModal('changePasswordModal');
  };

  window.securitySettings = function() {
    openModal('securitySettingsModal');
  };

  // Modal Functions
  function openModal(modalId) {
    const modal = document.getElementById(modalId);
    const modalContent = document.getElementById(modalId + 'Content');
    
    if (modal && modalContent) {
      modal.classList.remove('hidden');
      
      // Trigger animation
      setTimeout(() => {
        modalContent.classList.remove('scale-95', 'opacity-0');
        modalContent.classList.add('scale-100', 'opacity-100');
      }, 10);
    }
  }

  function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    const modalContent = document.getElementById(modalId + 'Content');
    
    if (modal && modalContent) {
      modalContent.classList.remove('scale-100', 'opacity-100');
      modalContent.classList.add('scale-95', 'opacity-0');
      
      setTimeout(() => {
        modal.classList.add('hidden');
      }, 300);
    }
  }

  // Password Strength Checker
  function checkPasswordStrength(password) {
    const strengthBar = document.getElementById('passwordStrengthBar');
    const strengthText = document.getElementById('passwordStrengthText');
    const lengthCheck = document.getElementById('lengthCheck');
    const uppercaseCheck = document.getElementById('uppercaseCheck');
    const lowercaseCheck = document.getElementById('lowercaseCheck');
    const numberCheck = document.getElementById('numberCheck');

    if (!password) {
      strengthBar.style.width = '0%';
      strengthBar.className = 'h-2 rounded-full transition-all duration-300';
      strengthText.textContent = 'Enter a password';
      strengthText.className = 'text-sm text-gray-500';
      updateCheck(lengthCheck, false);
      updateCheck(uppercaseCheck, false);
      updateCheck(lowercaseCheck, false);
      updateCheck(numberCheck, false);
      return;
    }

    let score = 0;
    const checks = {
      length: password.length >= 8,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      number: /\d/.test(password)
    };

    // Update individual checks
    updateCheck(lengthCheck, checks.length);
    updateCheck(uppercaseCheck, checks.uppercase);
    updateCheck(lowercaseCheck, checks.lowercase);
    updateCheck(numberCheck, checks.number);

    // Calculate score
    Object.values(checks).forEach(check => {
      if (check) score++;
    });

    const percentage = (score / 4) * 100;
    strengthBar.style.width = percentage + '%';

    // Update strength text and color
    if (score === 0) {
      strengthText.textContent = 'Very Weak';
      strengthText.className = 'text-sm text-red-500';
      strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-red-500';
    } else if (score === 1) {
      strengthText.textContent = 'Weak';
      strengthText.className = 'text-sm text-orange-500';
      strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-orange-500';
    } else if (score === 2) {
      strengthText.textContent = 'Fair';
      strengthText.className = 'text-sm text-yellow-500';
      strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-yellow-500';
    } else if (score === 3) {
      strengthText.textContent = 'Good';
      strengthText.className = 'text-sm text-blue-500';
      strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-blue-500';
    } else {
      strengthText.textContent = 'Strong';
      strengthText.className = 'text-sm text-green-500';
      strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-green-500';
    }
  }

  function updateCheck(checkElement, isValid) {
    const icon = checkElement.querySelector('svg');
    if (isValid) {
      checkElement.className = 'w-4 h-4 rounded-full bg-green-500 border-2 border-green-500 flex items-center justify-center';
      icon.classList.remove('hidden');
    } else {
      checkElement.className = 'w-4 h-4 rounded-full border-2 border-gray-300 flex items-center justify-center';
      icon.classList.add('hidden');
    }
  }

  // Save Functions
  function saveProfile() {
    // TODO: Implement profile save functionality
    alert('Profile saved successfully!');
    closeModal('editProfileModal');
  }

  function savePassword() {
    // TODO: Implement password save functionality
    alert('Password changed successfully!');
    closeModal('changePasswordModal');
  }

  function saveSecuritySettings() {
    // TODO: Implement security settings save functionality
    alert('Security settings saved successfully!');
    closeModal('securitySettingsModal');
  }

  // Function to load profile picture
  async function loadProfilePictureFromStorage() {
    try {
      // Get user ID from localStorage or use default
      const userData = localStorage.getItem('user');
      let userId = 'EXEC-0001'; // Default fallback
      if (userData) {
        try {
          const user = JSON.parse(userData);
          userId = user.employeeId || user.username || user.id || user.userId || 'EXEC-0001';
        } catch (error) {
          console.warn('⚠️ Error parsing user data, using default userId');
        }
      }
      
      console.log('🔍 Loading Executive Viewer profile picture from server for:', userId);
      try {
        const response = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
        if (response.ok) {
          const data = await response.json();
          if (data.success && data.profilePictureUrl) {
            console.log('✅ Profile picture loaded from server:', data.profilePictureUrl);
            
            // Update main profile picture
            const mainProfilePic = document.getElementById('mainProfilePicture');
            if (mainProfilePic) { 
              mainProfilePic.src = data.profilePictureUrl; 
              mainProfilePic.style.display = 'block';
            }
            
            // Update modal profile picture
            const modalProfilePic = document.getElementById('currentProfilePic');
            if (modalProfilePic) { 
              modalProfilePic.src = data.profilePictureUrl; 
              modalProfilePic.style.display = 'block';
            }
            
            // Store in localStorage for future use
            localStorage.setItem('executive_profile_picture', data.profilePictureUrl);
            
            // Dispatch event to update other components
            const profileUpdateEvent = new CustomEvent('executiveProfilePictureUpdated', {
              detail: { profilePictureUrl: data.profilePictureUrl }
            });
            window.dispatchEvent(profileUpdateEvent);
            
            // Also directly call the global manager to ensure immediate update
            if (window.executiveProfilePictureManager) {
              console.log('🎯 Directly calling Executive Viewer global manager from server load...');
              window.executiveProfilePictureManager.setProfilePicture(data.profilePictureUrl);
            }
            
            console.log('📸 Profile picture loaded from server and applied to main instances');
            return true;
          }
        }
      } catch (serverError) {
        console.log('⚠️ Server fetch failed, trying localStorage:', serverError);
      }
      
      // Fallback to localStorage
      const storedUrl = localStorage.getItem('executive_profile_picture');
      if (storedUrl) {
        console.log('📱 Loading Executive Viewer profile picture from localStorage:', storedUrl.substring(0, 50) + '...');
        
        // Update main profile picture
        const mainProfilePic = document.getElementById('mainProfilePicture');
        if (mainProfilePic) { 
          mainProfilePic.src = storedUrl; 
          mainProfilePic.style.display = 'block';
        }
        
        // Update modal profile picture
        const modalProfilePic = document.getElementById('currentProfilePic');
        if (modalProfilePic) { 
          modalProfilePic.src = storedUrl; 
          modalProfilePic.style.display = 'block';
        }
        
        // Dispatch event to update other components
        const profileUpdateEvent = new CustomEvent('executiveProfilePictureUpdated', {
          detail: { profilePictureUrl: storedUrl }
        });
        window.dispatchEvent(profileUpdateEvent);
        
        console.log('📸 Profile picture loaded from localStorage and applied to main instances');
        return true;
      }
      
      console.log('⚠️ No Executive Viewer profile picture found in localStorage or server');
      return false;
      
    } catch (error) {
      console.error('❌ Error loading Executive Viewer profile picture:', error);
      return false;
    }
  }

  // Function to update profile picture display
  function updateProfilePicture(imageUrl) {
    const mainProfilePicture = document.getElementById('mainProfilePicture');
    if (mainProfilePicture) {
      mainProfilePicture.src = imageUrl;
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Executive Viewer Profile module loaded!');
    
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (token && userData) {
      try {
        const user = JSON.parse(userData);
        // Always fetch fresh data from API to ensure accuracy
        loadProfileData();
      } catch (error) {
        console.error('Error parsing user data:', error);
        loadProfileData();
      }
    } else {
      loadProfileData();
    }
    
    // Load profile picture on page load
    loadProfilePictureFromStorage().then(() => {
      console.log('✅ Executive Viewer profile picture loading completed');
      
      // Also ensure global manager is updated
      if (window.executiveProfilePictureManager) {
        console.log('🎯 Executive Viewer global manager found, ensuring sync...');
        const storedUrl = localStorage.getItem('executive_profile_picture');
        if (storedUrl) {
          window.executiveProfilePictureManager.setProfilePicture(storedUrl);
          console.log('✅ Executive Viewer global manager synced with stored URL');
        }
      } else {
        console.warn('⚠️ Executive Viewer global manager not found');
      }
    }).catch(error => {
      console.error('❌ Error during profile picture loading:', error);
    });
    
    // Profile Picture Editing Functionality
    const profilePictureContainer = document.getElementById('profilePictureContainer');
    const profilePictureModal = document.getElementById('profilePictureModal');
    const modalContent = document.getElementById('profilePictureModalContent');
    const closeProfileModal = document.getElementById('closeProfileModal');
    const dropZone = document.getElementById('dropZone');
    const profilePictureInput = document.getElementById('profilePictureInput');
    const imagePreview = document.getElementById('imagePreview');
    const previewImage = document.getElementById('previewImage');
    const currentProfilePic = document.getElementById('currentProfilePic');
    const saveProfilePicture = document.getElementById('saveProfilePicture');
    const cancelProfilePicture = document.getElementById('cancelProfilePicture');
    
    let selectedFile = null;
    
    console.log('🔍 DOM elements found:');
    console.log('🔍 Profile picture container:', profilePictureContainer);
    console.log('🔍 Profile picture modal:', profilePictureModal);
    console.log('🔍 Modal content:', modalContent);

    // Function to sync modal's current profile picture with main display
    function syncModalCurrentProfilePicture() {
      const currentProfilePic = document.getElementById('currentProfilePic');
      const mainProfilePic = document.getElementById('mainProfilePicture');
      
      if (!currentProfilePic) {
        console.log('❌ Modal current profile picture element not found');
      return;
    }

      console.log('🔄 Syncing modal current profile picture...');
      
      // Priority 1: Try to get from Executive Viewer profile picture manager
      if (window.executiveProfilePictureManager && window.executiveProfilePictureManager.profilePictureUrl) {
        const managerUrl = window.executiveProfilePictureManager.profilePictureUrl;
        console.log('🎯 Using Executive Viewer manager profile picture:', managerUrl);
        
        // Handle CORS issues by adding error handling and fallback
        currentProfilePic.onerror = () => {
          console.log('⚠️ CORS error loading profile picture, trying alternative approach...');
          // Try to load via fetch and convert to data URL
          fetchProfilePictureAsDataURL(managerUrl).then(dataUrl => {
            if (dataUrl) {
              currentProfilePic.src = dataUrl;
            }
          });
        };
        
        currentProfilePic.src = managerUrl;
          return;
        }
      
      // Priority 2: Try localStorage
      const storedPicture = localStorage.getItem('executive_profile_picture');
      if (storedPicture) {
        console.log('🎯 Using stored profile picture from localStorage');
        currentProfilePic.src = storedPicture;
        return;
      }
      
      // Priority 3: Sync with main profile picture
      if (mainProfilePic && mainProfilePic.src) {
        console.log('🎯 Syncing with main profile picture');
        currentProfilePic.src = mainProfilePic.src;
        return;
      }
      
      console.log('⚠️ No profile picture found to sync');
    }

    // Function to fetch profile picture as data URL to avoid CORS
    async function fetchProfilePictureAsDataURL(url) {
      try {
        const response = await fetch(url);
        const blob = await response.blob();
        return new Promise((resolve) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.readAsDataURL(blob);
        });
      } catch (error) {
        console.error('❌ Error fetching profile picture as data URL:', error);
        return null;
      }
    }

    // Function to convert file to base64
    function fileToBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.onload = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(file);
      });
    }

    // Function to save profile picture to storage
    function saveProfilePictureToStorage(imageUrl) {
      localStorage.setItem('executive_profile_picture', imageUrl);
      console.log('💾 Profile picture saved to localStorage');
    }

    // Open profile picture modal
    window.openProfilePictureModal = function() {
      console.log('🎯 Opening profile picture modal...');
      if (profilePictureModal) {
        syncModalCurrentProfilePicture();
        profilePictureModal.classList.remove('hidden');
        setTimeout(() => {
          modalContent.classList.remove('scale-95', 'opacity-0');
          modalContent.classList.add('scale-100', 'opacity-100');
        }, 10);
      } else {
        console.error('❌ Profile picture modal not found');
      }
    };

    // Close profile picture modal
    window.closeProfileModal = function() {
      console.log('🎯 Closing profile picture modal...');
      if (profilePictureModal) {
        modalContent.classList.remove('scale-100', 'opacity-100');
        modalContent.classList.add('scale-95', 'opacity-0');
        setTimeout(() => {
          profilePictureModal.classList.add('hidden');
        }, 300);
      }
    };

    // Handle file selection
    window.handleFile = function(file) {
      console.log('📁 File selected:', file);
      selectedFile = file;
      
      if (file && file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = function(e) {
          const imagePreview = document.getElementById('imagePreview');
          const previewImage = document.getElementById('previewImage');
          
          if (imagePreview && previewImage) {
            previewImage.src = e.target.result;
            imagePreview.classList.remove('hidden');
          }
        };
        reader.readAsDataURL(file);
      }
    };

    // Event listeners
    if (profilePictureContainer) {
      profilePictureContainer.addEventListener('click', window.openProfilePictureModal);
    }

    if (closeProfileModal) {
      closeProfileModal.addEventListener('click', window.closeProfileModal);
    }

    if (profilePictureModal) {
      profilePictureModal.addEventListener('click', function(e) {
        if (e.target === profilePictureModal) {
          window.closeProfileModal();
        }
      });
    }

    if (dropZone) {
      dropZone.addEventListener('click', () => {
        if (profilePictureInput) {
          profilePictureInput.click();
        }
      });

      dropZone.addEventListener('dragover', (e) => {
    e.preventDefault();
        dropZone.classList.add('border-blue-500', 'bg-blue-50/50');
      });

      dropZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        dropZone.classList.remove('border-blue-500', 'bg-blue-50/50');
      });

      dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('border-blue-500', 'bg-blue-50/50');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          window.handleFile(files[0]);
        }
      });
    }

    if (profilePictureInput) {
      profilePictureInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
          window.handleFile(e.target.files[0]);
        }
      });
    }

    if (saveProfilePicture) {
      saveProfilePicture.addEventListener('click', async () => {
        if (!selectedFile) {
          alert('Please select an image first.');
          return;
        }
        
        try {
          // Show loading state
          saveProfilePicture.disabled = true;
          saveProfilePicture.innerHTML = `
            <svg class="w-4 h-4 inline mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Uploading...
          `;
          
          // Create FormData for file upload
          const formData = new FormData();
          formData.append('profilePicture', selectedFile);
          
          // Get user ID from localStorage or use default
          const userData = localStorage.getItem('user');
          let userId = 'EXEC-0001'; // Default fallback
          if (userData) {
            try {
              const user = JSON.parse(userData);
              userId = user.employeeId || user.username || user.id || user.userId || 'EXEC-0001';
            } catch (error) {
              console.warn('⚠️ Error parsing user data, using default userId');
            }
          }
          formData.append('userId', userId);
          console.log('🔍 Uploading profile picture for userId:', userId);
          
          // Upload to server
          const response = await fetch('http://localhost:3000/api/profile/upload-picture', {
            method: 'POST',
            body: formData
          });
          
          if (!response.ok) {
            throw new Error(`Upload failed: ${response.status} ${response.statusText}`);
          }
          
          const result = await response.json();
          
          if (result.success) {
            console.log('✅ Profile picture uploaded to server:', result.profilePictureUrl);
            
            // Update the main profile picture
            const mainProfilePic = document.getElementById('mainProfilePicture');
            if (mainProfilePic) {
              mainProfilePic.src = result.profilePictureUrl;
              mainProfilePic.style.display = 'block';
            }
            
            // Update modal profile picture
            const modalProfilePic = document.getElementById('currentProfilePic');
            if (modalProfilePic) {
              modalProfilePic.src = result.profilePictureUrl;
              modalProfilePic.style.display = 'block';
            }
            
            // Store the SERVER URL in localStorage for persistence
            localStorage.setItem('executive_profile_picture', result.profilePictureUrl);
            
            // Dispatch custom event to notify other components
            const event = new CustomEvent('executiveProfilePictureUpdated', {
              detail: { profilePictureUrl: result.profilePictureUrl }
            });
            window.dispatchEvent(event);
            
            // Also directly call the global manager to ensure immediate update
            if (window.executiveProfilePictureManager) {
              console.log('🎯 Directly calling Executive Viewer global manager...');
              window.executiveProfilePictureManager.setProfilePicture(result.profilePictureUrl);
              console.log('✅ Executive Viewer global manager updated with new profile picture');
            } else {
              console.warn('⚠️ Executive Viewer global manager not found during save');
            }
            
            // Show success message
            alert('Profile picture updated successfully!');
            window.closeProfileModal();
          } else {
            throw new Error(result.message || 'Upload failed');
          }
          
        } catch (error) {
          console.error('Upload error:', error);
          alert('Failed to upload profile picture. Please try again.');
        } finally {
          // Reset button state
          saveProfilePicture.disabled = false;
          saveProfilePicture.innerHTML = `
            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            Save Picture
          `;
        }
      });
    }

    if (cancelProfilePicture) {
      cancelProfilePicture.addEventListener('click', () => {
        selectedFile = null;
        const imagePreview = document.getElementById('imagePreview');
        if (imagePreview) {
          imagePreview.classList.add('hidden');
        }
        window.closeProfileModal();
      });
    }

    // Refresh current picture button
    const refreshCurrentPic = document.getElementById('refreshCurrentPic');
    if (refreshCurrentPic) {
      refreshCurrentPic.addEventListener('click', () => {
        loadProfilePictureFromStorage();
      });
    }

    // Reset profile picture button
    const resetProfilePicture = document.getElementById('resetProfilePicture');
    if (resetProfilePicture) {
      resetProfilePicture.addEventListener('click', () => {
        if (confirm('Are you sure you want to reset to the default picture?')) {
          // Reset to default
          const currentProfilePic = document.getElementById('currentProfilePic');
          if (currentProfilePic) {
            currentProfilePic.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%233b82f6'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EEV%3C/text%3E%3C/svg%3E";
          }
          
          // Clear localStorage
          localStorage.removeItem('executive_profile_picture');
          
          // Dispatch event to update other components
          window.dispatchEvent(new CustomEvent('executiveProfilePictureUpdated', {
            detail: { profilePictureUrl: null }
          }));
          
          alert('Profile picture reset to default successfully!');
        }
      });
    }

    // Modal Event Listeners
    const modals = ['editProfileModal', 'changePasswordModal', 'securitySettingsModal'];
    
    modals.forEach(modalId => {
      const modal = document.getElementById(modalId);
      if (modal) {
        // Close modal when clicking outside
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            closeModal(modalId);
        }
      });
    }
    });

    // Password strength checker
    const newPasswordInput = document.getElementById('newPassword');
    if (newPasswordInput) {
      newPasswordInput.addEventListener('input', (e) => {
        checkPasswordStrength(e.target.value);
      });
    }
  });

  // Modal Event Listeners
  document.addEventListener('DOMContentLoaded', function() {
    // Edit Profile Modal
    const closeEditProfileModal = document.getElementById('closeEditProfileModal');
    const cancelEditProfile = document.getElementById('cancelEditProfile');
    const editProfileForm = document.getElementById('editProfileForm');
    
    if (closeEditProfileModal) {
      closeEditProfileModal.addEventListener('click', () => closeModal('editProfileModal'));
    }
    
    if (cancelEditProfile) {
      cancelEditProfile.addEventListener('click', () => closeModal('editProfileModal'));
    }
    
    if (editProfileForm) {
      editProfileForm.addEventListener('submit', (e) => {
        e.preventDefault();
        console.log('✏️ Edit Profile form submitted');
        // Add form submission logic here
        closeModal('editProfileModal');
      });
    }
    
    // Change Password Modal
    const closeChangePasswordModal = document.getElementById('closeChangePasswordModal');
    const cancelChangePassword = document.getElementById('cancelChangePassword');
    const changePasswordForm = document.getElementById('changePasswordForm');
    
    if (closeChangePasswordModal) {
      closeChangePasswordModal.addEventListener('click', () => closeModal('changePasswordModal'));
    }
    
    if (cancelChangePassword) {
      cancelChangePassword.addEventListener('click', () => closeModal('changePasswordModal'));
    }
    
    if (changePasswordForm) {
      changePasswordForm.addEventListener('submit', (e) => {
        e.preventDefault();
        console.log('🔐 Change Password form submitted');
        // Add form submission logic here
        closeModal('changePasswordModal');
      });
    }
    
    // Security Settings Modal
    const closeSecuritySettingsModal = document.getElementById('closeSecuritySettingsModal');
    const cancelSecuritySettings = document.getElementById('cancelSecuritySettings');
    const saveSecuritySettings = document.getElementById('saveSecuritySettings');
    
    if (closeSecuritySettingsModal) {
      closeSecuritySettingsModal.addEventListener('click', () => closeModal('securitySettingsModal'));
    }
    
    if (cancelSecuritySettings) {
      cancelSecuritySettings.addEventListener('click', () => closeModal('securitySettingsModal'));
    }
    
    if (saveSecuritySettings) {
      saveSecuritySettings.addEventListener('click', () => {
        console.log('🔒 Security Settings saved');
        // Add save logic here
        closeModal('securitySettingsModal');
      });
    }
    
    // Click outside to close modals
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('fixed') && e.target.classList.contains('inset-0')) {
        const modalId = e.target.id;
        if (modalId && modalId.includes('Modal')) {
          closeModal(modalId);
        }
      }
    });
  });

  // React to global Executive Viewer updates
  window.addEventListener('executiveProfilePictureUpdated', (e) => {
    console.log('🌍 Executive Viewer Profile module received global update event:', e.detail);
    if (e.detail.profilePictureUrl) {
      const mainProfilePic = document.getElementById('mainProfilePicture');
      const modalProfilePic = document.getElementById('currentProfilePic');
      
      if (mainProfilePic) {
        mainProfilePic.src = e.detail.profilePictureUrl;
        mainProfilePic.style.display = 'block';
      }
      
      if (modalProfilePic) {
        modalProfilePic.src = e.detail.profilePictureUrl;
        modalProfilePic.style.display = 'block';
      }
      
      console.log('✅ Executive Viewer Profile module updated from global event');
    }
  });
</script> 
