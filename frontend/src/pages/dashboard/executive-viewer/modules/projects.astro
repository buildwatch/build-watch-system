export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import ExecutiveLayout from '../../../../components/ExecutiveLayout.astro';
import ProjectCard from '../../../../components/ProjectCard.astro';
import ProjectDetailsModal from '../../../../components/ProjectDetailsModal.astro';

// Initialize with empty data - will be populated by client-side JavaScript
let projects = [];
let filters = {
  status: 'all',
  department: 'all',
  risk: 'all',
  priority: 'all'
};
let searchQuery = '';
---

<Layout title="All Projects - Executive Viewer">
  <ExecutiveLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header -->
      <div class="flex items-center justify-between mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">All Projects</h1>
          <p class="text-gray-600">Comprehensive view of all LGU projects and programs</p>
        </div>
        <div class="flex gap-3">
          <button class="px-4 py-2 bg-green-100 text-green-700 rounded-lg font-semibold hover:bg-green-200 transition-all flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            {projects.length} Total Projects
          </button>
          <button class="px-6 py-2 bg-gradient-to-r from-[#3D50D7] to-[#2a3bb8] text-white rounded-xl font-semibold shadow-lg hover:from-[#2a3bb8] hover:to-[#3D50D7] transition-all duration-300">
            Export Projects
          </button>
        </div>
      </div>

      <!-- Filters and Search -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
          <!-- Search -->
          <div class="lg:col-span-2">
            <input 
              type="text" 
              placeholder="Search projects..." 
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3D50D7] focus:border-transparent"
            />
          </div>
          
          <!-- Status Filter -->
          <select class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3D50D7] focus:border-transparent">
            <option value="all">All Status</option>
            <option value="ongoing">Ongoing</option>
            <option value="completed">Completed</option>
            <option value="delayed">Delayed</option>
            <option value="pending">Pending</option>
          </select>
          
          <!-- Department Filter -->
          <select class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3D50D7] focus:border-transparent">
            <option value="all">All Departments</option>
            <option value="engineering">Engineering</option>
            <option value="public-works">Public Works</option>
            <option value="economic-development">Economic Development</option>
            <option value="health-services">Health Services</option>
            <option value="education">Education</option>
          </select>
          
          <!-- Risk Filter -->
          <select class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#3D50D7] focus:border-transparent">
            <option value="all">All Risk Levels</option>
            <option value="high">High Risk</option>
            <option value="medium">Medium Risk</option>
            <option value="low">Low Risk</option>
            <option value="none">No Risk</option>
          </select>
        </div>
      </div>

      <!-- Projects Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6 mb-8" id="projectsGrid">
        {projects.map(project => (
          <ProjectCard 
            project={project}
            userTheme="executive"
            onClick="viewProjectDetails"
          />
        ))}
      </div>

      <!-- Summary Statistics -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Project Summary</h3>
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div class="text-center">
            <p class="text-2xl font-bold text-blue-600">{projects.filter(p => p.status === 'ongoing').length}</p>
            <p class="text-sm text-gray-600">Ongoing Projects</p>
          </div>
          <div class="text-center">
            <p class="text-2xl font-bold text-green-600">{projects.filter(p => p.status === 'completed').length}</p>
            <p class="text-sm text-gray-600">Completed Projects</p>
          </div>
          <div class="text-center">
            <p class="text-2xl font-bold text-red-600">{projects.filter(p => p.status === 'delayed').length}</p>
            <p class="text-sm text-gray-600">Delayed Projects</p>
          </div>
          <div class="text-center">
            <p class="text-2xl font-bold text-purple-600">‚Ç±{projects.reduce((sum, p) => sum + parseInt(p.budget.replace(/[‚Ç±,]/g, '')), 0).toLocaleString()}</p>
            <p class="text-sm text-gray-600">Total Budget</p>
          </div>
        </div>
      </div>
    </section>

    <!-- Project Details Modal -->
    <ProjectDetailsModal userTheme="executive" />
  </ExecutiveLayout>
</Layout>

<script>
  import executiveService from '../../../../services/executive.js';
  
  document.addEventListener('DOMContentLoaded', async function() {
    // Load projects data
    await loadProjects();
    
    // Set up event listeners
    setupEventListeners();
  });

  async function loadProjects(filters = {}) {
    try {
      const projects = await executiveService.getAllProjects(filters);
      updateProjectsDisplay(projects);
      updateProjectCount(projects.length);
      updateSummaryStats(projects);
    } catch (error) {
      console.error('Error loading projects:', error);
      showErrorMessage('Failed to load projects. Please try again.');
    }
  }

  // Helper functions for consistent formatting
  function formatBudget(amount) {
    if (!amount || isNaN(amount)) return '‚Ç±0.00';
    const numAmount = parseFloat(amount);
    return '‚Ç±' + numAmount.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
  }

  function getProjectImage(initialPhoto) {
    if (!initialPhoto || initialPhoto === 'None' || initialPhoto === '') {
      return '/projects-page-header-bg.png';
    }
    return initialPhoto.startsWith('http') ? initialPhoto : `/uploads/${initialPhoto}`;
  }

  function getStatusColor(status) {
    switch (status?.toLowerCase()) {
      case 'completed': case 'complete': return 'bg-green-500';
      case 'ongoing': case 'active': return 'bg-blue-500';
      case 'delayed': case 'overdue': return 'bg-red-500';
      case 'pending': return 'bg-yellow-500';
      default: return 'bg-gray-500';
    }
  }

  function updateProjectsDisplay(projects) {
    const projectsGrid = document.querySelector('#projectsGrid');
    if (!projectsGrid) return;

    if (projects.length === 0) {
      projectsGrid.innerHTML = '<div class="col-span-3 text-center py-8"><p class="text-gray-500">No projects found</p></div>';
      return;
    }

    projectsGrid.innerHTML = projects.map(project => `
      <div class="group bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden transition-all duration-300 hover:border-blue-400 hover:shadow-blue-100 hover:shadow-xl cursor-pointer transform hover:scale-[1.02]"
           onclick="viewProjectDetails('${project.id}')">
        
        <!-- Project Image -->
        <div class="relative h-48 overflow-hidden">
          <img 
            src="${getProjectImage(project.initialPhoto)}" 
            alt="${project.name || 'Project'}"
            class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
            onerror="this.src='/projects-page-header-bg.png'"
          />
          
          <!-- Status and Priority Badges -->
          <div class="absolute top-3 left-3 right-3 flex items-start justify-between">
            <div class="flex flex-col gap-2">
              <span class="px-2 py-1 rounded-full text-xs font-semibold bg-blue-100 text-blue-800">
                ${(project.status || 'Unknown').charAt(0).toUpperCase() + (project.status || 'Unknown').slice(1)}
              </span>
              ${project.category ? `<span class="px-2 py-1 rounded-full text-xs font-semibold bg-gray-100 text-gray-700">üèóÔ∏è ${(project.category || '').charAt(0).toUpperCase() + (project.category || '').slice(1)}</span>` : ''}
            </div>
            ${project.priority ? `<span class="px-2 py-1 rounded-full text-xs font-semibold ${project.priority === 'high' ? 'bg-red-100 text-red-700' : project.priority === 'medium' ? 'bg-yellow-100 text-yellow-700' : 'bg-green-100 text-green-700'}">‚ö° ${(project.priority || '').charAt(0).toUpperCase() + (project.priority || '').slice(1)}</span>` : ''}
          </div>

          <!-- Progress Overlay -->
          <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-4">
            <div class="flex items-center justify-between text-white text-sm">
              <span class="font-medium">Overall Progress</span>
              <span class="font-bold">${(isNaN(parseFloat(project.overallProgress)) ? 0 : parseFloat(project.overallProgress || 0)).toFixed(1)}%</span>
            </div>
            <div class="w-full bg-white/20 rounded-full h-2 mt-1">
              <div class="h-2 rounded-full bg-white transition-all duration-500" style="width: ${isNaN(parseFloat(project.overallProgress)) ? 0 : parseFloat(project.overallProgress || 0)}%"></div>
            </div>
          </div>
        </div>

        <!-- Project Details -->
        <div class="p-6">
          <!-- Title and Code -->
          <div class="mb-4">
            <h3 class="text-lg font-bold text-gray-900 mb-1 line-clamp-2">${project.name || 'Untitled Project'}</h3>
            <p class="text-sm font-medium text-blue-600">${project.projectCode || 'No Code'}</p>
          </div>

          <!-- Description -->
          ${project.description ? `<div class="mb-4"><p class="text-sm text-gray-600 line-clamp-2">${project.description}</p></div>` : ''}

          <!-- Location and Office -->
          <div class="space-y-2 mb-4">
            <div class="flex items-center text-sm text-gray-600">
              <span class="w-4 h-4 mr-2">üìç</span>
              <span class="truncate">${project.location || 'Location not specified'}</span>
            </div>
            <div class="flex items-center text-sm text-gray-600">
              <span class="w-4 h-4 mr-2">üè¢</span>
              <span class="truncate">${project.implementingOfficeName || 'Office not specified'}</span>
            </div>
          </div>

          <!-- Additional Information -->
          <div class="grid grid-cols-2 gap-3 mb-4 text-xs text-gray-600">
            ${project.latitude && project.longitude ? `<div><span class="font-medium">üìç Coordinates:</span><br>${project.latitude}, ${project.longitude}</div>` : ''}
            <div><span class="font-medium">üí∞ Budget:</span><br>${formatBudget(project.totalBudget)}</div>
            <div><span class="font-medium">üìÖ Start:</span><br>${project.startDate ? new Date(project.startDate).toLocaleDateString() : 'Not set'}</div>
            <div><span class="font-medium">üéØ End:</span><br>${project.endDate ? new Date(project.endDate).toLocaleDateString() : 'Not set'}</div>
          </div>

          <!-- Progress Breakdown -->
          <div class="grid grid-cols-3 gap-3 mb-6">
            <div class="text-center">
              <div class="text-xs text-gray-500 mb-1">Timeline</div>
              <div class="text-sm font-semibold text-blue-600">${(isNaN(parseFloat(project.timelineProgress)) ? 0 : parseFloat(project.timelineProgress || 0)).toFixed(1)}%</div>
              <div class="w-full bg-gray-200 rounded-full h-1 mt-1">
                <div class="h-1 rounded-full ${getStatusColor('ongoing')} transition-all duration-300" style="width: ${isNaN(parseFloat(project.timelineProgress)) ? 0 : parseFloat(project.timelineProgress || 0)}%"></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-xs text-gray-500 mb-1">Budget</div>
              <div class="text-sm font-semibold text-green-600">${(isNaN(parseFloat(project.budgetProgress)) ? 0 : parseFloat(project.budgetProgress || 0)).toFixed(1)}%</div>
              <div class="w-full bg-gray-200 rounded-full h-1 mt-1">
                <div class="h-1 rounded-full bg-green-500 transition-all duration-300" style="width: ${isNaN(parseFloat(project.budgetProgress)) ? 0 : parseFloat(project.budgetProgress || 0)}%"></div>
              </div>
            </div>
            <div class="text-center">
              <div class="text-xs text-gray-500 mb-1">Physical</div>
              <div class="text-sm font-semibold text-purple-600">${(isNaN(parseFloat(project.physicalProgress)) ? 0 : parseFloat(project.physicalProgress || 0)).toFixed(1)}%</div>
              <div class="w-full bg-gray-200 rounded-full h-1 mt-1">
                <div class="h-1 rounded-full bg-purple-500 transition-all duration-300" style="width: ${isNaN(parseFloat(project.physicalProgress)) ? 0 : parseFloat(project.physicalProgress || 0)}%"></div>
              </div>
            </div>
          </div>

          <!-- View Details Button -->
          <button 
            class="w-full py-3 px-4 rounded-lg font-semibold text-sm transition-all duration-300 bg-blue-50 text-blue-600 hover:bg-blue-100"
            onclick="event.stopPropagation(); viewProjectDetails('${project.id}');"
          >
            View Details
          </button>
        </div>
      </div>
    `).join('');
  }

  function updateProjectCount(count) {
    const countElement = document.querySelector('.bg-green-100');
    if (countElement) {
      countElement.innerHTML = `
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
        </svg>
        ${count} Total Projects
      `;
    }
  }

  function updateSummaryStats(projects) {
    const ongoingCount = projects.filter(p => p.status === 'Ongoing').length;
    const completedCount = projects.filter(p => p.status === 'Completed').length;
    const delayedCount = projects.filter(p => p.status === 'Delayed').length;
    const totalBudget = projects.reduce((sum, p) => sum + (parseFloat(p.totalBudget) || 0), 0);

    const statsContainer = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-4');
    if (statsContainer) {
      statsContainer.innerHTML = `
        <div class="text-center">
          <p class="text-2xl font-bold text-blue-600">${ongoingCount}</p>
          <p class="text-sm text-gray-600">Ongoing Projects</p>
        </div>
        <div class="text-center">
          <p class="text-2xl font-bold text-green-600">${completedCount}</p>
          <p class="text-sm text-gray-600">Completed Projects</p>
        </div>
        <div class="text-center">
          <p class="text-2xl font-bold text-red-600">${delayedCount}</p>
          <p class="text-sm text-gray-600">Delayed Projects</p>
        </div>
        <div class="text-center">
          <p class="text-2xl font-bold text-purple-600">${executiveService.formatBudget(totalBudget)}</p>
          <p class="text-sm text-gray-600">Total Budget</p>
        </div>
      `;
    }
  }

  function setupEventListeners() {
    // Search input
    const searchInput = document.querySelector('input[type="text"]');
    if (searchInput) {
      let searchTimeout;
      searchInput.addEventListener('input', function() {
        clearTimeout(searchTimeout);
        searchTimeout = setTimeout(() => {
          const query = this.value.trim();
          loadProjects({ search: query });
        }, 300);
      });
    }

    // Filter selects
    const filterSelects = document.querySelectorAll('select');
    filterSelects.forEach(select => {
      select.addEventListener('change', function() {
        const filters = {
          status: filterSelects[0]?.value || 'all',
          department: filterSelects[1]?.value || 'all',
          risk: filterSelects[2]?.value || 'all'
        };
        loadProjects(filters);
      });
    });
  }



  function getRiskColor(risk) {
    switch (risk?.toLowerCase()) {
      case 'high': return 'bg-red-100 text-red-700';
      case 'medium': return 'bg-yellow-100 text-yellow-700';
      case 'low': return 'bg-green-100 text-green-700';
      default: return 'bg-gray-100 text-gray-600';
    }
  }

  function formatTimeline(startDate, endDate) {
    if (!startDate || !endDate) return 'Timeline not set';
    const start = new Date(startDate).toLocaleDateString('en-PH', { month: 'short', day: 'numeric', year: 'numeric' });
    const end = new Date(endDate).toLocaleDateString('en-PH', { month: 'short', day: 'numeric', year: 'numeric' });
    return `${start} to ${end}`;
  }

  function showErrorMessage(message) {
    const projectsGrid = document.querySelector('#projectsGrid');
    if (projectsGrid) {
      projectsGrid.innerHTML = `<div class="col-span-3 text-center py-8"><p class="text-red-500">${message}</p></div>`;
    }
  }

  // View project details
  async function viewProjectDetails(projectId) {
    try {
      // Check session validity first
      if (!authService.redirectIfInvalidSession()) {
        return;
      }

      // Try to show modal if available, otherwise redirect
      if (window.showProjectModal) {
        window.showProjectModal(projectId);
      } else {
        // Fallback - could implement a basic redirect or alert
        console.log('Modal not available for project:', projectId);
      }
    } catch (error) {
      console.error('Error viewing project details:', error);
    }
  }

  // Make function available globally
  window.viewProjectDetails = viewProjectDetails;
</script> 