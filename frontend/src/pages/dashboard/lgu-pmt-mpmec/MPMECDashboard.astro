---
export const prerender = false;
import Layout from '../../../layouts/Layout.astro';
import LGUPMTLayout from '../../../components/LGUPMTLayout.astro';
import ProjectCard from '../../../components/ProjectCard.astro';
import ProjectDetailsModal from '../../../components/ProjectDetailsModal.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let projects = [];
let stats = {
  totalProjects: 0,
  ongoingProjects: 0,
  completedProjects: 0,
  pendingProjects: 0,
  averageProgress: 0,
  totalBudget: '₱0',
  utilizedBudget: '₱0',
  approvedProjects: 0
};
let loading = true;
let error = '';

// Try to fetch dashboard data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  console.log('MPMEC Dashboard loaded with token:', token ? 'Present' : 'Missing');
  
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
        console.log('User data loaded for:', userData.email);
      }
    }

    // Fetch all approved projects for MPMEC monitoring
    console.log('Fetching projects from:', `${API_URL}/projects`);
    const timestamp = new Date().getTime();
    const projectsRes = await fetch(`${API_URL}/projects?_t=${timestamp}`, {
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      console.log('Projects response:', data);
      if (data.success) {
        projects = data.projects;
        console.log('Projects loaded:', projects.length, 'projects');
        console.log('Projects details:', projects.map(p => ({
          id: p.id,
          name: p.name,
          approvedBySecretariat: p.approvedBySecretariat,
          submittedToSecretariat: p.submittedToSecretariat,
          workflowStatus: p.workflowStatus
        })));
        
        // Calculate statistics
        stats.totalProjects = projects.length;
        stats.ongoingProjects = projects.filter(p => p.status === 'ongoing').length;
        stats.completedProjects = projects.filter(p => p.status === 'complete').length;
        stats.pendingProjects = projects.filter(p => p.status === 'pending').length;
        stats.approvedProjects = projects.filter(p => p.approvedBySecretariat === true).length;
        
        // Calculate total budget properly
        const totalBudget = projects.reduce((sum, p) => {
          const budget = parseFloat(p.totalBudget) || 0;
          return sum + budget;
        }, 0);
        stats.totalBudget = `₱${totalBudget.toLocaleString()}`;
        
        // Calculate utilized budget and average progress using updated backend calculation service
        let totalUtilizedBudget = 0;
        let totalProgress = 0;
        
        for (const project of projects) {
          try {
            console.log(`Fetching progress for project: ${project.name} (${project.id})`);
            // Fetch progress data from the updated calculation service
            const progressTimestamp = new Date().getTime();
            const progressRes = await fetch(`${API_URL}/projects/progress/${project.id}?_t=${progressTimestamp}`, {
              headers: { 
                'Authorization': `Bearer ${token}`,
                'Cache-Control': 'no-cache',
                'Pragma': 'no-cache'
              }
            });
            
            if (progressRes.ok) {
              const progressData = await progressRes.json();
              console.log(`Progress data for ${project.name}:`, progressData);
              if (progressData.success && progressData.data) {
                const progress = progressData.data.progress;
                const budget = parseFloat(project.totalBudget) || 0;
                
                // Update the project object with the new progress data - ensure valid numbers
                project.progress = progress;
                project.overallProgress = isNaN(parseFloat(progress.overall)) ? 0 : parseFloat(progress.overall || 0);
                project.timelineProgress = isNaN(parseFloat(progress.internalTimeline)) ? 0 : parseFloat(progress.internalTimeline || 0);
                project.budgetProgress = isNaN(parseFloat(progress.internalBudget)) ? 0 : parseFloat(progress.internalBudget || 0);
                project.physicalProgress = isNaN(parseFloat(progress.internalPhysical)) ? 0 : parseFloat(progress.internalPhysical || 0);
                
                // Calculate utilized budget based on budget progress
                const budgetProgress = parseFloat(progress.internalBudget || 0);
                totalUtilizedBudget += (budget * budgetProgress / 100);
                
                // Add to total progress
                totalProgress += parseFloat(progress.overall || 0);
                
                console.log(`Project ${project.name} - Budget: ${budget}, Budget Progress: ${budgetProgress}%, Overall: ${progress.overall}%`);
              }
            } else {
              console.error(`Progress API failed for project ${project.id}:`, progressRes.status);
              // Fallback to old calculation if API fails
              const budget = parseFloat(project.totalBudget) || 0;
              const budgetProgress = parseFloat(project.budgetProgress || 0);
              totalUtilizedBudget += (budget * budgetProgress / 100);
              totalProgress += parseFloat(project.overallProgress || 0);
            }
          } catch (error) {
            console.error(`Error fetching progress for project ${project.id}:`, error);
            // Fallback to old calculation if API fails
            const budget = parseFloat(project.totalBudget) || 0;
            const budgetProgress = parseFloat(project.budgetProgress || 0);
            totalUtilizedBudget += (budget * budgetProgress / 100);
            totalProgress += parseFloat(project.overallProgress || 0);
          }
        }
        
        stats.utilizedBudget = `₱${totalUtilizedBudget.toLocaleString()}`;
        stats.averageProgress = projects.length > 0 ? Math.round(totalProgress / projects.length) : 0;
        
        // Calculate budget utilization percentage for progress bar
        const budgetUtilizationPercentage = totalBudget > 0 ? (totalUtilizedBudget / totalBudget) * 100 : 0;
        stats.budgetUtilizationPercentage = Math.round(budgetUtilizationPercentage);
        
        console.log('Dashboard updated:', {
          totalProjects: stats.totalProjects,
          totalBudget: stats.totalBudget,
          utilizedBudget: stats.utilizedBudget,
          averageProgress: stats.averageProgress,
          budgetUtilizationPercentage: stats.budgetUtilizationPercentage
        });
        
        // Log updated project data for verification
        console.log('Updated projects with progress data:', projects.map(p => ({
          name: p.name,
          overallProgress: p.overallProgress,
          timelineProgress: p.timelineProgress,
          budgetProgress: p.budgetProgress,
          physicalProgress: p.physicalProgress
        })));
      }
    } else {
      console.error('Projects API failed:', projectsRes.status, projectsRes.statusText);
      const errorText = await projectsRes.text();
      console.error('Error response:', errorText);
      error = `Failed to fetch projects: ${projectsRes.status}`;
    }
  } else {
    console.error('No authentication token found');
    error = 'Authentication required';
  }
} catch (err) {
  console.error('Error fetching dashboard data:', err);
  error = 'Failed to fetch dashboard data.';
}

loading = false;
---

<Layout title="MPMEC Dashboard | Build Watch">
  <LGUPMTLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header Section -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">MPMEC Dashboard</h1>
          <p class="text-gray-600">Municipal Project Monitoring and Evaluation Committee - Project Overview</p>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="window.location.href='/dashboard/lgu-pmt-mpmec/modules/approved-projects'" class="px-6 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors flex items-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            View Projects
          </button>
        </div>
      </div>

      <!-- Statistics Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Total Projects</p>
              <p class="text-2xl font-bold text-gray-800 stat-total-projects">{stats.totalProjects}</p>
            </div>
            <div class="p-3 bg-blue-100 rounded-full">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Approved</p>
              <p class="text-2xl font-bold text-green-600 stat-approved-projects">{stats.approvedProjects}</p>
            </div>
            <div class="p-3 bg-green-100 rounded-full">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Ongoing</p>
              <p class="text-2xl font-bold text-blue-600 stat-ongoing-projects">{stats.ongoingProjects}</p>
            </div>
            <div class="p-3 bg-blue-100 rounded-full">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Average Progress</p>
              <p class="text-2xl font-bold text-purple-600 stat-average-progress">{stats.averageProgress}%</p>
            </div>
            <div class="p-3 bg-purple-100 rounded-full">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Budget Overview -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Budget Overview</h3>
          <div class="space-y-4">
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600">Total Budget</span>
              <span class="font-semibold text-gray-800 stat-total-budget">{stats.totalBudget}</span>
            </div>
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-600">Utilized Budget</span>
              <span class="font-semibold text-gray-800 stat-utilized-budget">{stats.utilizedBudget}</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2">
              <div class="bg-[#92751F] h-2 rounded-full budget-utilization-bar" style={`width: ${stats.budgetUtilizationPercentage}%`}></div>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <h3 class="text-lg font-semibold text-gray-800 mb-4">Quick Actions</h3>
          <div class="space-y-3">
            <button onclick="window.location.href='/dashboard/lgu-pmt-mpmec/modules/approved-projects'" class="w-full px-4 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors text-left flex items-center gap-3">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
              View Approved Projects
            </button>
            <button onclick="window.location.href='/dashboard/lgu-pmt-mpmec/modules/progress-timeline'" class="w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-left flex items-center gap-3">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
              Progress Timeline
            </button>
            <button onclick="window.location.href='/dashboard/lgu-pmt-mpmec/modules/profile'" class="w-full px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors text-left flex items-center gap-3">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
              View Profile
            </button>
          </div>
        </div>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12 loading-indicator">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#92751F]"></div>
          <span class="ml-3 text-gray-600">Loading dashboard...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12 error-message">
          <p class="text-red-600 mb-4">{error}</p>
          <button onclick="loadDashboard()" class="px-4 py-2 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-all">
            Try Again
          </button>
        </div>
      ) : projects.length === 0 ? (
        <div class="text-center py-12 no-projects-section">
          <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">No Projects Available</h3>
          <p class="text-gray-600 mb-6">No projects have been approved by the Secretariat yet. Projects will appear here once they are approved and ready for MPMEC monitoring.</p>
          <button onclick="window.location.href='/dashboard/lgu-pmt-mpmec/modules/approved-projects'" class="px-6 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors flex items-center gap-2 mx-auto">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            View Approved Projects
          </button>
        </div>
      ) : (
        <!-- Recent Projects -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 projects-section">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-lg font-semibold text-gray-800">Recent Projects</h3>
            <button onclick="window.location.href='/dashboard/lgu-pmt-mpmec/modules/approved-projects'" class="text-[#92751F] hover:text-[#7A6219] text-sm font-medium">
              View All Projects →
            </button>
          </div>
          
          <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6 recent-projects-container">
            {projects.slice(0, 6).map(project => (
              <ProjectCard 
                project={project}
                userTheme="mpmec"
                onClick="viewProjectDetails"
              />
            ))}
          </div>
        </div>
      )}
    </section>

    <!-- Project Details Modal -->
    <ProjectDetailsModal userTheme="mpmec" />
  </LGUPMTLayout>
</Layout>

<script>
  import authService from '../../../services/auth.js';
  
  // API Configuration
  const API_URL = 'http://localhost:3000/api';
  
  // Global variables
  let projects = [];
  let currentUser = null;

  // Authentication check for MPMEC
  document.addEventListener('DOMContentLoaded', function() {
    // Check session validity first
    if (!authService.redirectIfInvalidSession()) {
      return;
    }
    
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      window.location.href = '/';
      return;
    }
    
    try {
      const user = JSON.parse(userData);
      
      // ✅ FIXED: Check if user is MPMEC - handle both "MPMEC" and "MPMEC - Member" subroles
      const isLGUPMT = user.role === 'LGU-PMT';
      const isMPMECMember = user.subRole && (
        user.subRole.toLowerCase().includes('mpmec') || 
        user.subRole.toLowerCase() === 'mpmec' ||
        user.subRole.toLowerCase().includes('member')
      );
      
      if (!isLGUPMT || !isMPMECMember) {
        console.log('❌ User is not MPMEC member:', {
          role: user.role,
          subRole: user.subRole,
          isLGUPMT,
          isMPMECMember
        });
        // Redirect to appropriate dashboard based on role
        authService.redirectToDashboard(user.role, user.subRole);
        return;
      }
      
      console.log('✅ User is valid MPMEC member:', {
        role: user.role,
        subRole: user.subRole,
        name: user.fullName || user.name
      });
      
      console.log('MPMEC Dashboard loaded for user:', user.username);
      
      // Initialize the page
      initializePage();
      
    } catch (error) {
      console.error('Error parsing user data:', error);
      window.location.href = '/';
    }
  });

  // ✅ ENHANCED: Initialize the page - prevent multiple calls
  let isInitializing = false;
  
  async function initializePage() {
    // Prevent multiple simultaneous initialization calls
    if (isInitializing) {
      console.log('Page initialization already in progress, skipping...');
      return;
    }
    
    isInitializing = true;
    
    try {
      console.log('Starting page initialization...');
      
      const token = localStorage.getItem('token');
      if (token) {
        // Fetch user data for authentication
        const userRes = await fetch(`${API_URL}/auth/profile`, {
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        });
        if (userRes.ok) {
          const userDataResponse = await userRes.json();
          if (userDataResponse.success && userDataResponse.user) {
            currentUser = userDataResponse.user;
            console.log('Current user loaded:', currentUser.email);
          }
        }

        // Fetch projects from the API
        const projectsRes = await fetch(`${API_URL}/projects`, {
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        });
        if (projectsRes.ok) {
          const data = await projectsRes.json();
          if (data.success) {
            projects = data.projects || [];
            console.log('Projects loaded in client-side:', projects.length, 'projects');
            await updateDashboardUI();
          }
        } else {
          console.error('Projects API failed:', projectsRes.status);
        }
      } else {
        console.error('No token found for initialization');
      }
      
      console.log('Page initialization completed');
    } catch (error) {
      console.error('Error fetching dashboard data:', error);
    } finally {
      isInitializing = false;
    }
  }

  // ✅ FIXED: Load dashboard function - removed infinite reload loop
  async function loadDashboard() {
    try {
      // Check session validity first
      if (!authService.redirectIfInvalidSession()) {
        return;
      }
      
      // Show loading state
      const loadingElement = document.querySelector('.loading-indicator');
      const errorElement = document.querySelector('.error-message');
      
      if (loadingElement) loadingElement.style.display = 'block';
      if (errorElement) errorElement.style.display = 'none';
      
      const token = localStorage.getItem('token');
      const response = await fetch(`${API_URL}/projects`, {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          projects = data.projects || [];
          updateDashboardUI();
          
          // Hide loading state
          if (loadingElement) loadingElement.style.display = 'none';
          
          // ✅ REMOVED: location.reload() - this was causing infinite reload loop
          console.log('Dashboard refreshed successfully with', projects.length, 'projects');
        } else {
          throw new Error(data.message || 'Failed to fetch projects');
        }
      } else {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
    } catch (error) {
      console.error('Error loading dashboard:', error);
      
      // Hide loading state and show error
      const loadingElement = document.querySelector('.loading-indicator');
      const errorElement = document.querySelector('.error-message');
      
      if (loadingElement) loadingElement.style.display = 'none';
      if (errorElement) {
        errorElement.style.display = 'block';
        errorElement.textContent = `Error: ${error.message}`;
      }
    }
  }

  // ✅ ENHANCED: Update dashboard UI with actual data
  async function updateDashboardUI() {
    console.log('Dashboard updated:', projects);
    
    try {
      // Calculate statistics
      const stats = {
        totalProjects: projects.length,
        ongoingProjects: projects.filter(p => p.status === 'ongoing').length,
        completedProjects: projects.filter(p => p.status === 'complete').length,
        pendingProjects: projects.filter(p => p.status === 'pending').length,
        approvedProjects: projects.filter(p => p.approvedBySecretariat === true).length,
        averageProgress: 0,
        totalBudget: '₱0',
        utilizedBudget: '₱0',
        budgetUtilizationPercentage: 0
      };

      // Calculate total budget
      const totalBudget = projects.reduce((sum, p) => {
        const budget = parseFloat(p.totalBudget) || 0;
        return sum + budget;
      }, 0);
      stats.totalBudget = `₱${totalBudget.toLocaleString()}`;

      // Calculate progress and utilized budget
      let totalUtilizedBudget = 0;
      let totalProgress = 0;

      for (const project of projects) {
        const progress = parseFloat(project.overallProgress || 0);
        const budget = parseFloat(project.totalBudget) || 0;
        const budgetProgress = parseFloat(project.budgetProgress || 0);
        
        totalUtilizedBudget += (budget * budgetProgress / 100);
        totalProgress += progress;
      }

      stats.utilizedBudget = `₱${totalUtilizedBudget.toLocaleString()}`;
      stats.averageProgress = projects.length > 0 ? Math.round(totalProgress / projects.length) : 0;
      stats.budgetUtilizationPercentage = totalBudget > 0 ? Math.round((totalUtilizedBudget / totalBudget) * 100) : 0;

      // Update statistics cards in the DOM
      const statElements = {
        totalProjects: document.querySelector('.stat-total-projects'),
        approvedProjects: document.querySelector('.stat-approved-projects'),
        ongoingProjects: document.querySelector('.stat-ongoing-projects'),
        averageProgress: document.querySelector('.stat-average-progress'),
        totalBudget: document.querySelector('.stat-total-budget'),
        utilizedBudget: document.querySelector('.stat-utilized-budget'),
        budgetBar: document.querySelector('.budget-utilization-bar')
      };

      // Update elements if they exist
      if (statElements.totalProjects) statElements.totalProjects.textContent = stats.totalProjects;
      if (statElements.approvedProjects) statElements.approvedProjects.textContent = stats.approvedProjects;
      if (statElements.ongoingProjects) statElements.ongoingProjects.textContent = stats.ongoingProjects;
      if (statElements.averageProgress) statElements.averageProgress.textContent = `${stats.averageProgress}%`;
      if (statElements.totalBudget) statElements.totalBudget.textContent = stats.totalBudget;
      if (statElements.utilizedBudget) statElements.utilizedBudget.textContent = stats.utilizedBudget;
      if (statElements.budgetBar) statElements.budgetBar.style.width = `${stats.budgetUtilizationPercentage}%`;

      // Show/hide project sections based on data
      const noProjectsSection = document.querySelector('.no-projects-section');
      const projectsSection = document.querySelector('.projects-section');
      
      if (projects.length === 0) {
        if (noProjectsSection) noProjectsSection.style.display = 'block';
        if (projectsSection) projectsSection.style.display = 'none';
      } else {
        if (noProjectsSection) noProjectsSection.style.display = 'none';
        if (projectsSection) projectsSection.style.display = 'block';
        
        // Update recent projects if section exists
        updateRecentProjectsSection();
      }

      console.log('UI updated with stats:', stats);
      
    } catch (error) {
      console.error('Error updating dashboard UI:', error);
    }
  }

  // Update recent projects section
  function updateRecentProjectsSection() {
    const recentProjectsContainer = document.querySelector('.recent-projects-container');
    if (!recentProjectsContainer || projects.length === 0) return;

    const recentProjects = projects.slice(0, 4);
    const projectsHTML = recentProjects.map(project => {
      const progress = parseFloat(project.progress?.overallProgress || project.overallProgress || 0);
      
      return `
        <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow">
          <div class="flex items-start justify-between mb-3">
            <div class="flex-1">
              <h4 class="font-semibold text-gray-800 mb-1">${project.name}</h4>
              <p class="text-sm text-gray-600">${project.projectCode}</p>
            </div>
            <span class="px-2 py-1 text-xs font-medium rounded-full ${
              project.approvedBySecretariat === true ? 'bg-green-100 text-green-700' :
              project.status === 'ongoing' ? 'bg-blue-100 text-blue-700' :
              project.status === 'complete' ? 'bg-purple-100 text-purple-700' :
              project.status === 'pending' ? 'bg-yellow-100 text-yellow-700' :
              'bg-gray-100 text-gray-700'
            }">
              ${project.approvedBySecretariat === true ? 'approved' : project.status}
            </span>
          </div>
          
          <div class="mb-3">
            <div class="flex items-center justify-between mb-1">
              <span class="text-sm text-gray-600">Progress</span>
              <span class="text-sm font-medium text-gray-800">${progress}%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2">
              <div class="${
                project.status === 'complete' ? 'bg-green-500' : 
                project.approvedBySecretariat === true ? 'bg-green-400' : 'bg-[#92751F]'
              } h-2 rounded-full" style="width: ${progress}%"></div>
            </div>
          </div>
          
          <div class="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span class="text-gray-500">Budget:</span>
              <span class="font-medium ml-1">₱${(parseFloat(project.totalBudget) || 0).toLocaleString()}</span>
            </div>
            <div>
              <span class="text-gray-500">Implementing Office:</span>
              <span class="font-medium ml-1">${project.implementingOfficeName || 'Not specified'}</span>
            </div>
          </div>
          
          <div class="mt-3 flex items-center gap-2">
            <button onclick="viewProject('${project.id}')" class="flex-1 px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors text-sm">
              View Details
            </button>
            <button onclick="viewProgress('${project.id}')" class="px-3 py-2 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors text-sm">
              Progress
            </button>
          </div>
        </div>
      `;
    }).join('');

    recentProjectsContainer.innerHTML = projectsHTML;
  }

  // View project details
  async function viewProject(projectId) {
    try {
      // Check session validity first
      if (!authService.redirectIfInvalidSession()) {
        return;
      }

      // Redirect to approved projects page
      window.location.href = `/dashboard/lgu-pmt-mpmec/modules/approved-projects?projectId=${projectId}`;
    } catch (error) {
      console.error('Error viewing project:', error);
    }
  }

  // View project progress
  async function viewProgress(projectId) {
    try {
      // Check session validity first
      if (!authService.redirectIfInvalidSession()) {
        return;
      }

      // Redirect to progress timeline page
      window.location.href = `/dashboard/lgu-pmt-mpmec/modules/progress-timeline?projectId=${projectId}`;
    } catch (error) {
      console.error('Error viewing progress:', error);
    }
  }

  // View project details modal function
  async function viewProjectDetails(projectId) {
    try {
      // Check session validity first
      if (!authService.redirectIfInvalidSession()) {
        return;
      }

      // Use the unified ProjectDetailsModal
      if (window.showProjectDetailsModal) {
        console.log('✅ Using unified ProjectDetailsModal for project:', projectId);
        window.showProjectDetailsModal(projectId);
      } else {
        console.error('❌ ProjectDetailsModal not available');
        // Fallback to redirect to approved projects page
        window.location.href = `/dashboard/lgu-pmt-mpmec/modules/approved-projects?projectId=${projectId}`;
      }
    } catch (error) {
      console.error('Error viewing project details:', error);
    }
  }

  // Make functions globally available
  window.loadDashboard = loadDashboard;
  window.viewProject = viewProject;
  window.viewProgress = viewProgress;
  window.viewProjectDetails = viewProjectDetails;

  // ✅ CRITICAL FIX: Initialize MPMEC profile picture loading on dashboard load
  // This ensures profile pictures are loaded immediately when the dashboard loads,
  // just like EIU and Secretariat dashboards do
  console.log('🎯 MPMEC Dashboard: Initializing profile picture loading...');
  
  // Load profile picture immediately on dashboard load
  loadMPMECProfilePictureFromStorage().then(() => {
    console.log('✅ MPMEC Dashboard: Profile picture loading completed');
    
    // Ensure global manager is synced
    if (window.mpmecProfilePictureManager) {
      console.log('🎯 MPMEC Dashboard: Global manager found, ensuring sync...');
      const storedUrl = localStorage.getItem('mpmec_profile_picture');
      if (storedUrl) {
        window.mpmecProfilePictureManager.setProfilePicture(storedUrl);
        console.log('✅ MPMEC Dashboard: Global manager synced with stored URL');
      }
    } else {
      console.log('⚠️ MPMEC Dashboard: Global manager not found, will retry...');
      // Retry after a short delay to allow manager initialization
      setTimeout(() => {
        if (window.mpmecProfilePictureManager) {
          const storedUrl = localStorage.getItem('mpmec_profile_picture');
          if (storedUrl) {
            window.mpmecProfilePictureManager.setProfilePicture(storedUrl);
            console.log('✅ MPMEC Dashboard: Global manager synced after retry');
          }
        }
      }, 1000);
    }
  }).catch(error => {
    console.error('❌ MPMEC Dashboard: Error during profile picture loading:', error);
  });

  // ✅ CRITICAL: Profile picture loading function for MPMEC dashboard
  // This is the same logic used in committee-profile.astro but adapted for dashboard use
  async function loadMPMECProfilePictureFromStorage() {
    try {
      console.log('🔍 MPMEC Dashboard: Loading profile picture...');
      
      // First try to load from server
      const userData = localStorage.getItem('user');
      if (userData) {
        const user = JSON.parse(userData);
        const employeeId = user.email || user.employeeId || user.username || 'MPMEC-001';
        
        console.log('🔍 MPMEC Dashboard: Loading profile picture from server for:', employeeId);
        try {
          const response = await fetch(`http://localhost:3000/api/profile/picture/${employeeId}`, {
            headers: {
              'Cache-Control': 'no-cache',
              'Pragma': 'no-cache'
            }
          });
          
          if (response.ok) {
            const data = await response.json();
            if (data.success && data.profilePictureUrl) {
              console.log('✅ MPMEC Dashboard: Profile picture loaded from server:', data.profilePictureUrl);
              
              // ✅ CRITICAL FIX: Convert to data URL to bypass CORS issues
              let finalImageUrl = data.profilePictureUrl;
              
              if (data.profilePictureUrl.startsWith('http://localhost:3000/uploads/')) {
                console.log('🔄 MPMEC Dashboard: Converting server URL to data URL to bypass CORS...');
                try {
                  const dataUrl = await convertImageToDataURL(data.profilePictureUrl);
                  if (dataUrl) {
                    finalImageUrl = dataUrl;
                    console.log('✅ MPMEC Dashboard: Successfully converted to data URL');
                  } else {
                    console.log('⚠️ MPMEC Dashboard: Failed to convert to data URL, using original URL');
                  }
                } catch (conversionError) {
                  console.log('⚠️ MPMEC Dashboard: Data URL conversion failed:', conversionError);
                }
              }
              
              // Store the final URL (could be data URL or original URL)
              localStorage.setItem('mpmec_profile_picture', finalImageUrl);
              
              // Dispatch event to update other components (sidebar, topbar, etc.)
              const profileUpdateEvent = new CustomEvent('mpmecProfilePictureUpdated', {
                detail: { profilePictureUrl: finalImageUrl }
              });
              window.dispatchEvent(profileUpdateEvent);
              
              // Also directly call the global manager to ensure immediate update
              if (window.mpmecProfilePictureManager) {
                console.log('🎯 MPMEC Dashboard: Directly calling global manager from server load...');
                window.mpmecProfilePictureManager.setProfilePicture(finalImageUrl);
              }
              
              console.log('📸 MPMEC Dashboard: Profile picture loaded from server and applied to global manager');
              return true;
            }
          }
        } catch (serverError) {
          console.log('⚠️ MPMEC Dashboard: Server fetch failed, trying localStorage:', serverError);
        }
      }
      
      // Fallback to localStorage
      const savedImageUrl = localStorage.getItem('mpmec_profile_picture');
      if (savedImageUrl) {
        console.log('📱 MPMEC Dashboard: Loading profile picture from localStorage:', savedImageUrl.substring(0, 50) + '...');
        
        // Dispatch event to update other components
        const profileUpdateEvent = new CustomEvent('mpmecProfilePictureUpdated', {
          detail: { profilePictureUrl: savedImageUrl }
        });
        window.dispatchEvent(profileUpdateEvent);
        
        // Also directly call the global manager
        if (window.mpmecProfilePictureManager) {
          window.mpmecProfilePictureManager.setProfilePicture(savedImageUrl);
        }
        
        console.log('📸 MPMEC Dashboard: Profile picture loaded from localStorage and applied to global manager');
        return true;
      } else {
        console.log('📸 MPMEC Dashboard: No saved profile picture found, using default');
      }
    } catch (error) {
      console.error('❌ MPMEC Dashboard: Error loading profile picture:', error);
    }
    return false;
  }

  // ✅ NEW: Helper function to convert image URL to data URL
  async function convertImageToDataURL(serverUrl) {
    try {
      console.log('🔄 MPMEC Dashboard: Converting server URL to data URL:', serverUrl);
      
      const response = await fetch(serverUrl, { 
        mode: 'cors',
        credentials: 'same-origin',
        headers: {
          'Cache-Control': 'no-cache'
        }
      });
      
      if (response.ok) {
        const blob = await response.blob();
        const dataUrl = await new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onloadend = () => resolve(reader.result);
          reader.onerror = reject;
          reader.readAsDataURL(blob);
        });
        console.log('✅ MPMEC Dashboard: Successfully converted to data URL');
        return dataUrl;
      } else {
        console.log('❌ MPMEC Dashboard: Failed to fetch image:', response.status, response.statusText);
      }
    } catch (error) {
      console.log('⚠️ MPMEC Dashboard: Failed to convert to data URL:', error);
    }
    return null;
  }
</script> 