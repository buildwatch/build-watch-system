export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import LGUPMTLayout from '../../../../components/LGUPMTLayout.astro';
---

<Layout title="Send Feedback | MPMEC Dashboard">
  <LGUPMTLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Send Feedback to Secretariat</h1>
          <p class="text-gray-600">Communication bridge with the MPMEC Secretariat</p>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="composeFeedback()" class="px-4 py-2 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            New Feedback
          </button>
        </div>
      </div>

      <!-- Feedback Statistics -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Total Sent</p>
              <p class="text-2xl font-bold text-blue-600" id="totalSent">0</p>
            </div>
            <div class="bg-blue-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Pending Response</p>
              <p class="text-2xl font-bold text-yellow-600" id="pendingResponse">0</p>
            </div>
            <div class="bg-yellow-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Received</p>
              <p class="text-2xl font-bold text-green-600" id="totalReceived">0</p>
            </div>
            <div class="bg-green-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Response Rate</p>
              <p class="text-2xl font-bold text-purple-600" id="responseRate">0%</p>
            </div>
            <div class="bg-purple-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Chat Interface for Secretariat -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
        <!-- Secretariat Contacts List -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-xl font-semibold text-gray-800">Secretariat Members</h2>
            <button id="addSecretariatContactBtn" class="px-3 py-1 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-colors text-sm">
              Add Member
            </button>
          </div>
          
          <!-- Search Secretariat Contacts -->
          <div class="relative mb-4">
            <input type="text" id="secretariatContactSearch" placeholder="Search Secretariat members..." class="w-full pl-10 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FE5353] focus:border-transparent">
            <svg class="absolute left-3 top-2.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          
          <!-- Secretariat Contacts List -->
          <div class="space-y-2 max-h-96 overflow-y-auto" id="secretariatContactsList">
            <!-- Secretariat contacts will be loaded here -->
          </div>
        </div>

        <!-- Secretariat Chat Area -->
        <div class="lg:col-span-2 bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-xl font-semibold text-gray-800">Secretariat Chat</h2>
          </div>
          
          <!-- Secretariat Chat Messages -->
          <div class="space-y-4 mb-4 max-h-96 overflow-y-auto" id="secretariatChatMessages">
            <!-- Secretariat chat messages will be loaded here -->
          </div>
          
          <!-- Secretariat Message Input -->
          <div class="flex items-center gap-3">
            <div class="flex-1 relative">
              <input type="text" id="secretariatMessageInput" placeholder="Type your message to Secretariat..." class="w-full pr-12 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FE5353] focus:border-transparent">
              <button id="sendSecretariatMessageBtn" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-[#FE5353] hover:text-[#E54545]">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                </svg>
              </button>
            </div>
            <button id="attachSecretariatFileBtn" class="px-3 py-3 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Structured Communications Section -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-gray-800">Structured Communications</h2>
          <button id="composeStructuredBtn" class="px-4 py-2 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-colors">
            + New Communication
          </button>
        </div>
        
        <!-- Communication Categories Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <!-- Project Communications -->
          <button id="projectCommBtn" class="p-4 bg-blue-50 border border-blue-200 rounded-lg hover:bg-blue-100 transition-colors text-left">
            <div class="flex items-center gap-3">
              <div class="bg-blue-100 p-2 rounded-lg">
                <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-sm font-medium text-gray-800">Project Discussions</h3>
                <p class="text-xs text-gray-600">Discuss specific projects</p>
              </div>
            </div>
          </button>

          <!-- Policy Feedback -->
          <button id="policyFeedbackBtn" class="p-4 bg-green-50 border border-green-200 rounded-lg hover:bg-green-100 transition-colors text-left">
            <div class="flex items-center gap-3">
              <div class="bg-green-100 p-2 rounded-lg">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-sm font-medium text-gray-800">Policy Feedback</h3>
                <p class="text-xs text-gray-600">MPMEC feedback on policies</p>
              </div>
            </div>
          </button>

          <!-- Budget Discussions -->
          <button id="budgetDiscussionsBtn" class="p-4 bg-yellow-50 border border-yellow-200 rounded-lg hover:bg-yellow-100 transition-colors text-left">
            <div class="flex items-center gap-3">
              <div class="bg-yellow-100 p-2 rounded-lg">
                <svg class="w-5 h-5 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-sm font-medium text-gray-800">Budget Discussions</h3>
                <p class="text-xs text-gray-600">Financial matters</p>
              </div>
            </div>
          </button>

          <!-- Compliance Notifications -->
          <button id="complianceNotificationsBtn" class="p-4 bg-purple-50 border border-purple-200 rounded-lg hover:bg-purple-100 transition-colors text-left">
            <div class="flex items-center gap-3">
              <div class="bg-purple-100 p-2 rounded-lg">
                <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-sm font-medium text-gray-800">Compliance Updates</h3>
                <p class="text-xs text-gray-600">Regulatory notifications</p>
              </div>
            </div>
          </button>

          <!-- Training Announcements -->
          <button id="trainingAnnouncementsBtn" class="p-4 bg-indigo-50 border border-indigo-200 rounded-lg hover:bg-indigo-100 transition-colors text-left">
            <div class="flex items-center gap-3">
              <div class="bg-indigo-100 p-2 rounded-lg">
                <svg class="w-5 h-5 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-sm font-medium text-gray-800">Training Announcements</h3>
                <p class="text-xs text-gray-600">Capacity building</p>
              </div>
            </div>
          </button>

          <!-- Document Reviews -->
          <button id="documentReviewsBtn" class="p-4 bg-pink-50 border border-pink-200 rounded-lg hover:bg-pink-100 transition-colors text-left">
            <div class="flex items-center gap-3">
              <div class="bg-pink-100 p-2 rounded-lg">
                <svg class="w-5 h-5 text-pink-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-sm font-medium text-gray-800">Document Reviews</h3>
                <p class="text-xs text-gray-600">Policy/procedure reviews</p>
              </div>
            </div>
          </button>
        </div>
      </div>

      <!-- Communication History -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-semibold text-gray-800">Communication History</h2>
          <div class="flex items-center gap-2">
            <select id="secretariatStatusFilter" class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FE5353] focus:border-transparent">
              <option value="">All Types</option>
              <option value="chat">Chat Messages</option>
              <option value="project">Project Discussions</option>
              <option value="policy">Policy Feedback</option>
              <option value="budget">Budget Discussions</option>
              <option value="compliance">Compliance Updates</option>
              <option value="training">Training Announcements</option>
              <option value="document">Document Reviews</option>
            </select>
            <button onclick="loadSecretariatCommunicationData()" class="px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
            </button>
          </div>
        </div>
        <div class="overflow-x-auto">
          <table class="w-full">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subject</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200" id="secretariatHistoryTable">
              <!-- Secretariat communication history will be loaded here -->
            </tbody>
          </table>
        </div>
      </div>
    </section>
  </LGUPMTLayout>
</Layout>

<!-- Message Detail Modal -->
<div id="messageModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-xl shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
      <div class="p-6 border-b border-gray-200">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-gray-900" id="messageTitle">Message Details</h3>
          <div class="flex items-center gap-2">
            <button onclick="replyToMessage()" class="px-3 py-1 text-sm bg-[#FE5353] text-white rounded hover:bg-[#E54545]">Reply</button>
            <button onclick="closeMessageModal()" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
      
      <div class="p-6" id="messageContent">
        <!-- Message content will be loaded here -->
      </div>
    </div>
  </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 z-50">
  <div class="flex items-center gap-2">
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
    </svg>
    <span id="toastMessage">Success!</span>
  </div>
</div>

<script>
  // Global variables
  let currentUser = null;
  let communications = [];
  let availableUsers = [];
  let selectedSecretariatContactId = null;

  // Function to calculate unread message count for a specific contact
  function getUnreadMessageCount(contactId, communications) {
    return communications.filter(msg => 
      msg.recipientId === currentUser.id && 
      msg.senderId === contactId && 
      !msg.isRead
    ).length;
  }

  document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      window.location.href = '/login/lgu-pmt';
      return;
    }
    
    try {
      currentUser = JSON.parse(userData);
      if (currentUser.role !== 'LGU-PMT' || !currentUser.subRole || !currentUser.subRole.toLowerCase().includes('mpmec')) {
        window.location.href = '/login/lgu-pmt';
        return;
      }
    } catch (error) {
      console.error('Error parsing user data:', error);
      window.location.href = '/login/lgu-pmt';
    }

    // Initialize communication data
    loadCommunicationData();
    loadAvailableUsers();
    
    // Set up periodic refresh and notification checking
    setInterval(loadCommunicationData, 30000); // Refresh every 30 seconds
    setInterval(checkForNewNotifications, 10000); // Check notifications every 10 seconds
  });

  async function loadCommunicationData() {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications?limit=1000', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        // Filter communications between MPMEC and Secretariat only
        communications = data.communications.filter(msg => {
          const isMPMEC = msg.sender?.role === 'LGU-PMT' && msg.sender?.subRole && msg.sender?.subRole.toLowerCase().includes('mpmec');
          const isSecretariat = msg.sender?.role === 'LGU-PMT' && msg.sender?.subRole && msg.sender?.subRole.toLowerCase().includes('secretariat');
          const isRecipientMPMEC = msg.recipient?.role === 'LGU-PMT' && msg.recipient?.subRole && msg.recipient?.subRole.toLowerCase().includes('mpmec');
          const isRecipientSecretariat = msg.recipient?.role === 'LGU-PMT' && msg.recipient?.subRole && msg.recipient?.subRole.toLowerCase().includes('secretariat');
          
          return (isMPMEC && isRecipientSecretariat) || (isSecretariat && isRecipientMPMEC);
        });
        
        updateCommunicationStats(data);
        updateSecretariatHistory(communications);
        
        // Update Secretariat contacts list with notification counts
        const secretariatContactsList = document.getElementById('secretariatContactsList');
        if (secretariatContactsList && window.secretariatUsers && window.secretariatUsers.length > 0) {
          secretariatContactsList.innerHTML = window.secretariatUsers.map(user => {
            const unreadCount = getUnreadMessageCount(user.id, communications);
            return `
              <div class="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors secretariat-contact-item" data-contact-id="${user.id}">
                <div class="w-10 h-10 bg-[#FE5353] rounded-full flex items-center justify-center relative">
                  <span class="text-white font-medium">${user.name.split(' ').map(n => n[0]).join('').toUpperCase()}</span>
                  ${unreadCount > 0 ? `<div class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold">${unreadCount}</div>` : ''}
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-gray-800">${user.name}</p>
                  <p class="text-xs text-gray-600">${user.subRole || user.role}</p>
                </div>
                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              </div>
            `;
          }).join('');
          
          // Auto-select the first Secretariat contact
          selectedSecretariatContactId = window.secretariatUsers[0].id;
          console.log('MPMEC - Auto-selected Secretariat contact:', selectedSecretariatContactId);
          
          // Highlight the first contact
          const firstContact = document.querySelector('.secretariat-contact-item');
          if (firstContact) {
            firstContact.classList.add('bg-gray-100');
          }
          
          // Load conversation with the auto-selected contact
          loadSecretariatConversationWithContact(selectedSecretariatContactId);
        } else if (secretariatContactsList) {
          secretariatContactsList.innerHTML = `
            <div class="text-center py-8 text-gray-500">
              <svg class="w-8 h-8 mx-auto mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
              <p class="text-sm">No Secretariat members available</p>
            </div>
          `;
        }
      } else {
        console.error('Failed to load communications');
      }
    } catch (error) {
      console.error('Error loading communications:', error);
    }
  }

  async function loadAvailableUsers() {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications/users/available', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        availableUsers = data.users;
        
        // Store Secretariat users for later use
        const secretariatUsers = data.users.filter(user => 
          user.role === 'LGU-PMT' && 
          user.subRole && 
          user.subRole.toLowerCase().includes('secretariat') &&
          user.id !== currentUser.id // Exclude current user from contacts
        );
        
        // Store users globally for later use
        window.secretariatUsers = secretariatUsers;
      }
    } catch (error) {
      console.error('Error loading available users:', error);
    }
  }

  function updateCommunicationStats(data) {
    // Filter communications between MPMEC and Secretariat only
    const mpmecSecretariatCommunications = communications.filter(msg => {
      const isMPMEC = msg.sender?.role === 'LGU-PMT' && msg.sender?.subRole && msg.sender?.subRole.toLowerCase().includes('mpmec');
      const isSecretariat = msg.sender?.role === 'LGU-PMT' && msg.sender?.subRole && msg.sender?.subRole.toLowerCase().includes('secretariat');
      const isRecipientMPMEC = msg.recipient?.role === 'LGU-PMT' && msg.recipient?.subRole && msg.recipient?.subRole.toLowerCase().includes('mpmec');
      const isRecipientSecretariat = msg.recipient?.role === 'LGU-PMT' && msg.recipient?.subRole && msg.recipient?.subRole.toLowerCase().includes('secretariat');
      
      return (isMPMEC && isRecipientSecretariat) || (isSecretariat && isRecipientMPMEC);
    });

    const sentMessages = mpmecSecretariatCommunications.filter(msg => msg.senderId === currentUser.id);
    const receivedMessages = mpmecSecretariatCommunications.filter(msg => msg.recipientId === currentUser.id);
    const pendingMessages = sentMessages.filter(msg => msg.status === 'sent' || msg.status === 'delivered');
    const respondedMessages = sentMessages.filter(msg => msg.status === 'responded');
    
    const responseRate = sentMessages.length > 0 ? Math.round((respondedMessages.length / sentMessages.length) * 100) : 0;

    // Update stats with null checks
    const totalSentElement = document.getElementById('totalSent');
    const pendingResponseElement = document.getElementById('pendingResponse');
    const totalReceivedElement = document.getElementById('totalReceived');
    const responseRateElement = document.getElementById('responseRate');
    
    if (totalSentElement) totalSentElement.textContent = sentMessages.length;
    if (pendingResponseElement) pendingResponseElement.textContent = pendingMessages.length;
    if (totalReceivedElement) totalReceivedElement.textContent = receivedMessages.length;
    if (responseRateElement) responseRateElement.textContent = `${responseRate}%`;
  }

  // Function to mark messages as read
  async function markMessagesAsRead(contactId) {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications/mark-read', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          senderId: contactId,
          recipientId: currentUser.id
        })
      });

      if (response.ok) {
        console.log('MPMEC - Messages marked as read for contact:', contactId);
        // Refresh the data to update notification badges
        await loadCommunicationData();
      } else {
        console.error('MPMEC - Failed to mark messages as read');
      }
    } catch (error) {
      console.error('MPMEC - Error marking messages as read:', error);
    }
  }

  // Secretariat Chat functionality
  async function selectSecretariatContact(contactId) {
    // Mark messages from this contact as read
    await markMessagesAsRead(contactId);
    
    selectedSecretariatContactId = contactId;
    console.log('Selected Secretariat contact:', contactId);
    
    // Highlight selected contact
    document.querySelectorAll('.secretariat-contact-item').forEach(item => {
      item.classList.remove('bg-gray-100');
    });
    
    const selectedItem = document.querySelector(`[data-contact-id="${contactId}"]`);
    if (selectedItem) {
      selectedItem.classList.add('bg-gray-100');
    }
    
    // Load conversation with the selected Secretariat contact
    loadSecretariatConversationWithContact(contactId);
  }

  async function loadSecretariatConversationWithContact(contactId) {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/communications/conversation/${contactId}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        console.log('MPMEC - Conversation messages loaded:', data.messages.length);
        console.log('MPMEC - Current user ID:', currentUser.id);
        console.log('MPMEC - Selected Secretariat contact ID:', contactId);
        
        // Messages are already filtered and sorted by the backend
        const conversationMessages = data.messages;
        
        console.log('MPMEC - Conversation messages:', conversationMessages.length);
        
        // Update Secretariat chat messages with the conversation
        updateSecretariatChatMessages(conversationMessages);
        
        // Update chat header to show selected contact name
        updateSecretariatChatHeader(contactId);
      }
    } catch (error) {
      console.error('Error loading Secretariat conversation:', error);
    }
  }

  function updateSecretariatChatMessages(messages) {
    const secretariatChatMessages = document.getElementById('secretariatChatMessages');
    if (!secretariatChatMessages) {
      console.log('Secretariat chat messages container not found');
      return;
    }
    
    if (messages && messages.length > 0) {
      secretariatChatMessages.innerHTML = messages.map(message => {
        const isIncoming = message.recipientId === currentUser.id;
        const senderName = message.sender?.name || 'Unknown';
        const senderInitials = senderName.split(' ').map(n => n[0]).join('').toUpperCase();
        const messageContent = message.message || '';
        const messageTime = new Date(message.createdAt).toLocaleTimeString();
        
        return isIncoming ? (
          `<div class="flex items-start gap-3">
            <div class="w-8 h-8 bg-[#FE5353] rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-white text-xs font-medium">${senderInitials}</span>
            </div>
            <div class="flex-1">
              <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
                <p class="text-sm text-gray-800">${messageContent}</p>
              </div>
              <p class="text-xs text-gray-500 mt-1">${messageTime}</p>
            </div>
          </div>`
        ) : (
          `<div class="flex items-start gap-3 justify-end">
            <div class="flex-1 text-right">
              <div class="bg-[#FE5353] text-white rounded-lg p-3 max-w-xs ml-auto">
                <p class="text-sm">${messageContent}</p>
              </div>
              <p class="text-xs text-gray-500 mt-1">${messageTime}</p>
            </div>
            <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-white text-xs font-medium">MV</span>
            </div>
          </div>`
        );
      }).join('');
    } else {
      secretariatChatMessages.innerHTML = `
        <div class="text-center py-8 text-gray-500">
          <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
          <p class="text-lg font-medium">No messages yet</p>
          <p class="text-sm">Start a conversation with Secretariat members</p>
        </div>
      `;
    }
  }

  function updateSecretariatChatHeader(contactId) {
    // Find the contact name from the contacts list
    const contactItem = document.querySelector(`[data-contact-id="${contactId}"]`);
    if (contactItem) {
      const contactName = contactItem.querySelector('p').textContent;
      const chatHeader = document.querySelector('#secretariatChatMessages').previousElementSibling;
      if (chatHeader && chatHeader.querySelector('h2')) {
        chatHeader.querySelector('h2').textContent = `Secretariat Chat with ${contactName}`;
      }
    }
  }

  async function sendSecretariatChatMessage() {
    const messageInput = document.getElementById('secretariatMessageInput');
    const sendButton = document.getElementById('sendSecretariatMessageBtn');
    const message = messageInput.value.trim();
    
    if (!message) return;
    
    if (!selectedSecretariatContactId) {
      console.error('No Secretariat contact selected');
      return;
    }
    
    // Disable input and show sending state
    messageInput.disabled = true;
    if (sendButton) {
      sendButton.style.opacity = '0.5';
      sendButton.style.pointerEvents = 'none';
    }
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          subject: 'Secretariat Chat Message',
          message: message,
          category: 'general',
          priority: 'medium',
          recipientId: selectedSecretariatContactId,
          isImportant: false,
          requestAcknowledgment: false
        })
      });

      if (response.ok) {
        messageInput.value = '';
        // Reload Secretariat conversation with the selected contact
        loadSecretariatConversationWithContact(selectedSecretariatContactId);
      } else {
        const errorData = await response.json();
        console.error('Failed to send Secretariat message:', errorData.error || 'Unknown error');
      }
    } catch (error) {
      console.error('Error sending Secretariat message:', error);
    } finally {
      // Re-enable input and button
      messageInput.disabled = false;
      if (sendButton) {
        sendButton.style.opacity = '1';
        sendButton.style.pointerEvents = 'auto';
      }
    }
  }

  function updateSecretariatHistory(messages) {
    const secretariatHistoryTable = document.getElementById('secretariatHistoryTable');
    if (messages && messages.length > 0) {
      secretariatHistoryTable.innerHTML = messages.map(message => {
        const messageDate = new Date(message.createdAt).toLocaleDateString();
        const messageType = message.category || 'general';
        const messageSubject = message.subject || 'No subject';
        const messageStatus = message.status || 'sent';
        
        return `
          <tr>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${messageDate}</td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                ${messageType}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${messageSubject}</td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                messageStatus === 'sent' ? 'bg-green-100 text-green-800' :
                messageStatus === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                'bg-gray-100 text-gray-800'
              }">
                ${messageStatus}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
              <button onclick="viewSecretariatMessage('${message.id}')" class="text-[#FE5353] hover:text-[#E54545]">View</button>
            </td>
          </tr>
        `;
      }).join('');
    } else {
      secretariatHistoryTable.innerHTML = `
        <tr>
          <td colspan="5" class="px-6 py-4 text-center text-gray-500">No Secretariat communications found</td>
        </tr>
      `;
    }
  }

  function loadSecretariatCommunicationData() {
    loadCommunicationData();
  }

  function viewSecretariatMessage(messageId) {
    // Implementation for viewing Secretariat message details
    console.log('View Secretariat message:', messageId);
  }

  function addSecretariatContact() {
    console.log('Add Secretariat contact functionality - to be implemented');
    // This could open a modal to add new Secretariat contacts
  }

  // Check for new notifications
  async function checkForNewNotifications() {
    try {
      const response = await fetch('http://localhost:3000/api/notifications/count?isRead=false', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.count > 0) {
          // Show notification badge or alert
          showNotificationAlert(data.count);
        }
      }
    } catch (error) {
      console.error('Error checking notifications:', error);
    }
  }

  // Show notification alert
  function showNotificationAlert(count) {
    // Check if we already showed a notification for this session
    if (sessionStorage.getItem('notificationShown')) return;
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-[#FE5353] text-white px-4 py-3 rounded-lg shadow-lg z-50 flex items-center gap-3';
    notification.innerHTML = `
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
      </svg>
      <span>You have ${count} new notification${count > 1 ? 's' : ''}</span>
      <button onclick="this.parentElement.remove()" class="text-white hover:text-gray-200">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    
    document.body.appendChild(notification);
    
    // Remove notification after 5 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
    
    // Mark as shown for this session
    sessionStorage.setItem('notificationShown', 'true');
    
    // Clear the flag after 30 seconds to allow new notifications
    setTimeout(() => {
      sessionStorage.removeItem('notificationShown');
    }, 30000);
  }

  function composeStructuredMessage(category) {
    console.log('Compose structured message for category:', category);
    
    // Open the compose modal with pre-filled category
    composeFeedback();
    
    // Set the category based on the button clicked
    const categoryMap = {
      'project': 'project',
      'policy': 'policy',
      'budget': 'budget',
      'compliance': 'compliance',
      'training': 'training',
      'document': 'document',
      'general': 'general'
    };
    
    const categorySelect = document.getElementById('category');
    if (categorySelect && categoryMap[category]) {
      categorySelect.value = categoryMap[category];
    }
    
    // Set appropriate subject based on category
    const subjectInput = document.getElementById('subject');
    if (subjectInput) {
      const subjectMap = {
        'project': 'Project Discussion - ',
        'policy': 'Policy Feedback Request - ',
        'budget': 'Budget Discussion - ',
        'compliance': 'Compliance Update - ',
        'training': 'Training Announcement - ',
        'document': 'Document Review Request - ',
        'general': 'General Communication - '
      };
      subjectInput.value = subjectMap[category] || 'General Communication - ';
    }
    
    // Focus on the message field
    const messageInput = document.getElementById('message');
    if (messageInput) {
      messageInput.focus();
    }
  }

  function updateRecentMessages() {
    const container = document.getElementById('recentMessages');
    if (!container) {
      console.log('Recent messages container not found, skipping update');
      return;
    }
    
    const recentMessages = communications.filter(msg => 
      msg.senderId === currentUser.id || msg.recipientId === currentUser.id
    ).slice(0, 3);

    container.innerHTML = recentMessages.map(message => `
      <div class="p-4 border border-gray-200 rounded-lg">
        <div class="flex items-start justify-between mb-2">
          <h3 class="font-medium text-gray-800">${message.subject}</h3>
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            message.status === 'responded' ? 'bg-green-100 text-green-800' :
            message.status === 'read' ? 'bg-blue-100 text-blue-800' :
            'bg-yellow-100 text-yellow-800'
          }">${message.status}</span>
        </div>
        <p class="text-sm text-gray-600 mb-2">${message.message.substring(0, 100)}...</p>
        <div class="flex items-center justify-between text-xs text-gray-500">
          <span>${new Date(message.createdAt).toLocaleDateString()}</span>
          <button onclick="viewMessage('${message.id}')" class="text-[#FE5353] hover:text-[#E54545]">View</button>
        </div>
      </div>
    `).join('');
  }

  function updateMessageHistory() {
    const container = document.getElementById('messageHistoryTable');
    const userMessages = communications.filter(msg => 
      msg.senderId === currentUser.id || msg.recipientId === currentUser.id
    );

    container.innerHTML = userMessages.map(item => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">${new Date(item.createdAt).toLocaleDateString()}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm font-medium text-gray-800">${item.subject}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            ${item.category}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            item.status === 'responded' ? 'bg-green-100 text-green-800' :
            item.status === 'read' ? 'bg-blue-100 text-blue-800' :
            'bg-yellow-100 text-yellow-800'
          }">
            ${item.status}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <button onclick="viewMessage('${item.id}')" class="text-[#FE5353] hover:text-[#E54545]">View</button>
        </td>
      </tr>
    `).join('');
  }

  function composeFeedback() {
    // Clear form
    document.getElementById('feedbackForm').reset();
    document.getElementById('subject').focus();
  }

  async function sendFeedback(event) {
    event.preventDefault();
    
    const formData = new FormData(event.target);
    const feedbackData = {
      subject: formData.get('subject'),
      message: formData.get('message'),
      category: formData.get('category'),
      priority: formData.get('priority'),
      recipientId: availableUsers.find(u => u.subRole?.toLowerCase().includes('secretariat'))?.id,
      isImportant: formData.get('urgent') === 'on',
      requestAcknowledgment: formData.get('acknowledgment') === 'on'
    };

    if (!feedbackData.recipientId) {
      showToast('No Secretariat user found', 'error');
      return;
    }

    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(feedbackData)
      });

      if (response.ok) {
        showToast('Feedback sent successfully!');
        event.target.reset();
        loadCommunicationData();
      } else {
        const error = await response.json();
        showToast(error.error || 'Failed to send feedback', 'error');
      }
    } catch (error) {
      console.error('Error sending feedback:', error);
      showToast('Failed to send feedback', 'error');
    }
  }

  async function viewMessage(id) {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/communications/${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const message = await response.json();
        displayMessageModal(message);
      }
    } catch (error) {
      console.error('Error viewing message:', error);
    }
  }

  function displayMessageModal(message) {
    document.getElementById('messageTitle').textContent = message.subject;
    document.getElementById('messageContent').innerHTML = `
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-gray-600">From: ${message.sender?.name || 'Unknown'}</p>
            <p class="text-sm text-gray-600">To: ${message.recipient?.name || 'Unknown'}</p>
            <p class="text-sm text-gray-600">Date: ${new Date(message.createdAt).toLocaleString()}</p>
          </div>
          <div class="text-right">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
              ${message.category}
            </span>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ml-2 ${
              message.priority === 'urgent' ? 'bg-red-100 text-red-800' :
              message.priority === 'high' ? 'bg-orange-100 text-orange-800' :
              message.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
              'bg-green-100 text-green-800'
            }">
              ${message.priority}
            </span>
          </div>
        </div>
        <div class="border-t pt-4">
          <p class="text-gray-800 whitespace-pre-wrap">${message.message}</p>
        </div>
      </div>
    `;
    
    document.getElementById('messageModal').classList.remove('hidden');
  }

  function closeMessageModal() {
    document.getElementById('messageModal').classList.add('hidden');
  }

  function replyToMessage() {
    // Implementation for replying to messages
    showToast('Reply feature coming soon!');
  }

  function saveDraft() {
    showToast('Draft saved successfully!');
  }

  function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    
    toast.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 z-50 ${
      type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
    }`;
    
    toastMessage.textContent = message;
    toast.classList.remove('translate-x-full');
    
    setTimeout(() => {
      toast.classList.add('translate-x-full');
    }, 3000);
  }

  // Secretariat Chat functionality
  const sendSecretariatMessageBtn = document.getElementById('sendSecretariatMessageBtn');
  const addSecretariatContactBtn = document.getElementById('addSecretariatContactBtn');
  
  if (sendSecretariatMessageBtn) {
    sendSecretariatMessageBtn.addEventListener('click', sendSecretariatChatMessage);
  }
  
  if (addSecretariatContactBtn) {
    addSecretariatContactBtn.addEventListener('click', addSecretariatContact);
  }
  
  // Enter key functionality for Secretariat message input
  const secretariatMessageInput = document.getElementById('secretariatMessageInput');
  if (secretariatMessageInput) {
    secretariatMessageInput.addEventListener('keypress', function(e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        sendSecretariatChatMessage();
      }
    });
  }

  // Structured communication buttons
  const structuredButtons = [
    { id: 'projectCommBtn', category: 'project' },
    { id: 'policyFeedbackBtn', category: 'policy' },
    { id: 'budgetDiscussionsBtn', category: 'budget' },
    { id: 'complianceNotificationsBtn', category: 'compliance' },
    { id: 'trainingAnnouncementsBtn', category: 'training' },
    { id: 'documentReviewsBtn', category: 'document' },
    { id: 'composeStructuredBtn', category: 'general' }
  ];

  structuredButtons.forEach(button => {
    const element = document.getElementById(button.id);
    if (element) {
      element.addEventListener('click', () => composeStructuredMessage(button.category));
    }
  });

  // Event delegation for Secretariat contacts
  document.addEventListener('click', function(e) {
    if (e.target.classList.contains('secretariat-contact-item') || e.target.closest('.secretariat-contact-item')) {
      const contactItem = e.target.classList.contains('secretariat-contact-item') ? e.target : e.target.closest('.secretariat-contact-item');
      const contactId = contactItem.getAttribute('data-contact-id');
      selectSecretariatContact(contactId);
    }
  });

  // Form submission
  const feedbackForm = document.getElementById('feedbackForm');
  if (feedbackForm) {
    feedbackForm.addEventListener('submit', sendFeedback);
  }
</script> 