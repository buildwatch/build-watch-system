---
// Committee Profile Module for MPMEC Account
// Enhanced UI/UX with MPMEC Blue Theme
import Layout from '../../../../layouts/Layout.astro';
import LGUPMTLayout from '../../../../components/LGUPMTLayout.astro';
---

<Layout title="Committee Profile | MPMEC Dashboard">
  <LGUPMTLayout>
    <!-- Enhanced Header Section - Matching System Admin Profile Module Standard -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
    <div class="flex items-center justify-between">
      <div class="flex items-center space-x-4">
        <div class="flex items-center space-x-3">
          <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700 shadow-xl">
            <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
          <div>
            <h1 class="text-3xl font-bold text-black">Committee Profile</h1>
            <p class="text-sm text-gray-600">MPMEC Committee Management & Profile Settings</p>
          </div>
        </div>
      </div>
      <div class="flex items-center space-x-4">
        <div class="text-right">
          <p class="text-sm text-gray-600">Last Updated</p>
                     <p class="text-xs text-black font-semibold" id="currentDateTime">
             Monday, September 1, 2025 at 12:55 AM Philippine Standard Time
           </p>
        </div>
        <div class="w-4 h-4 bg-green-500 rounded-full animate-pulse shadow-lg"></div>
      </div>
    </div>
  </div>

               
       
    <!-- Main Content Wrapper -->
    <section class="bg-gradient-to-br from-gray-50 via-blue-50/30 to-white min-h-screen">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 px-8 py-8">
        <!-- Left Column: Overview + Quick Actions -->
        <div class="lg:col-span-1 space-y-6">
          
          <!-- Profile Card -->
          <div class="profile-card p-6 group">
            <div class="text-center mb-6">
                             <div class="relative inline-block">
                 <div class="avatar-container profile-picture-border w-32 h-32 rounded-2xl overflow-hidden shadow-xl mb-4 cursor-pointer group" id="profilePictureContainer" onclick="openProfilePictureModal()">
                                     <img 
                     src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%233B82F6'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EMV%3C/text%3E%3C/svg%3E"
                     alt="MPMEC Viewer Admin"
                     class="w-full h-full object-cover transition-all duration-300 group-hover:scale-110"
                     id="mainProfilePicture"
                     crossorigin="anonymous"
                   />

                  
                  <!-- Edit Overlay -->
                  <div class="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center">
                    <div class="text-center text-white">
                      <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                      </svg>
                      <p class="text-sm font-medium">Click to Edit</p>
                    </div>
                  </div>
                </div>
                <div class="absolute -bottom-2 -right-2 w-10 h-10 bg-green-500 rounded-full border-4 border-white flex items-center justify-center shadow-lg">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
              </div>
              <h2 class="text-2xl font-bold text-gray-800 mb-2 group-hover:text-blue-600 transition-colors" id="userName">MPMEC Viewer Admin</h2>
              <div class="status-active inline-block mb-3">Active</div>
              <p class="text-sm text-gray-700 font-medium">MPMEC Member</p>
              <p class="text-xs text-gray-600">LGU - Project Monitoring Team</p>
            </div>
            
            <div class="space-y-4">
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-blue-300 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V4a2 2 0 114 0v2m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                  </svg>
                  User ID
                </span>
                <span class="text-sm font-bold text-gray-800" id="userId">LGU-PMT-0003</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-blue-300 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                  </svg>
                  Email
                </span>
                <span class="text-sm font-bold text-gray-800 hover:text-blue-600 transition-colors cursor-pointer" id="userEmail">mpmecadmin@gmail.com</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-blue-300 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                  Contact
                </span>
                <span class="text-sm font-bold text-gray-800" id="userContact">09809408304</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-blue-300 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                  Department
                </span>
                <span class="text-sm font-bold text-gray-800">Municipal Project Monitoring</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-blue-300 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  Location
                </span>
                <span class="text-sm font-bold text-gray-800">Municipal Office</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-blue-300 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  Birthday
                </span>
                <span class="text-sm font-bold text-gray-800">1/17/1996</span>
              </div>
              <div class="flex items-center justify-between py-3">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Timezone
                </span>
                <span class="text-sm font-bold text-gray-800">Asia/Manila</span>
              </div>
            </div>
          </div>
        
                     <!-- Quick Actions -->
           <div class="profile-card p-6">
             <h3 class="text-lg font-bold text-gray-800 mb-4 flex items-center">
               <div class="icon-container-small bg-gradient-to-br from-blue-500 to-blue-600 mr-3">
                 <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                 </svg>
               </div>
               Quick Actions
             </h3>
                           <div class="space-y-3">
                <button onclick="editProfile()" class="quick-action-btn-enhanced">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                 </svg>
                  Edit Profile
               </button>
                <button onclick="changePassword()" class="quick-action-btn-enhanced">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7 7m7-7a6 6 0 00-7-7m-7 7a6 6 0 007 7m7-7H3m3 3h.01M9 6h.01M9 12h.01M9 18h.01"></path>
                 </svg>
                  Change Password
               </button>
                <button onclick="securitySettings()" class="quick-action-btn-enhanced">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                   <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                 </svg>
                  Security Settings
               </button>
             </div>
           </div>
          
          <!-- System Status -->
          <div class="profile-card p-6">
            <h3 class="text-lg font-bold text-gray-800 mb-4 flex items-center">
              <div class="icon-container-small bg-gradient-to-br from-green-600 to-emerald-700 mr-3">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              System Status
            </h3>
            <div class="space-y-3">
              <div class="status-item-enhanced">
                <span class="text-sm text-gray-600">Last Login</span>
                <span class="text-xs text-gray-800 font-semibold" id="lastLogin">2025-08-28 14:39:00</span>
              </div>
              <div class="status-item-enhanced">
                <span class="text-sm text-gray-600">Session Status</span>
                <div class="flex items-center">
                  <div class="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                  <span class="text-xs text-green-600 font-semibold">Active</span>
                </div>
              </div>
              <div class="status-item-enhanced">
                <span class="text-sm text-gray-600">Access Level</span>
                <span class="text-xs text-gray-800 font-bold">MPMEC Dashboard</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Enhanced Profile Details -->
        <div class="lg:col-span-2 space-y-8">

       
          <!-- Enhanced Personal Information -->
          <div class="group profile-card bg-white rounded-2xl shadow-lg border border-gray-100 p-8 hover:shadow-2xl hover:border-blue-200 transition-all duration-300">
            <div class="flex items-center gap-4 mb-6">
              <div class="p-3 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl icon-container">
                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
            </svg>
          </div>
              <h3 class="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors">Personal Information</h3>
          </div>
            <p class="text-sm text-gray-500 mb-6">Complete personal details and contact information</p>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 mb-2">Full Name</label>
            <div class="w-full px-4 py-3 info-field" id="profileName">MPMEC Viewer Admin</div>
          </div>
          
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 mb-2">Email Address</label>
            <div class="w-full px-4 py-3 info-field" id="profileEmail">mpmecadmin@gmail.com</div>
          </div>
          
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 mb-2">Date of Birth</label>
            <div class="w-full px-4 py-3 info-field">
              <span id="profileBirthday">1/17/1996</span>
            </div>
          </div>
          
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 mb-2">Username</label>
            <div class="w-full px-4 py-3 info-field">
              <span id="profileUsername">mpmecadmin@gmail.com</span>
            </div>
          </div>
          
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 mb-2">Contact Number</label>
            <div class="w-full px-4 py-3 info-field">
              <span id="profileContact">09809408304</span>
            </div>
          </div>
          
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 mb-2">User ID</label>
            <div class="w-full px-4 py-3 info-field">
              <span id="profileUserId">LGU-PMT-0003</span>
            </div>
          </div>
        </div>
      </div>

          <!-- Enhanced Committee Information -->
          <div class="group profile-card bg-white rounded-2xl shadow-lg border border-gray-100 p-8 hover:shadow-2xl hover:border-blue-200 transition-all duration-300">
            <div class="flex items-center gap-4 mb-6">
              <div class="p-3 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl icon-container">
                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
              </div>
              <h3 class="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors">Committee Information</h3>
            </div>
            <p class="text-sm text-gray-500 mb-6">MPMEC committee role and access details</p>
        
                 <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
           <div class="space-y-2">
             <label class="block text-sm font-semibold text-gray-700 mb-2">Committee Role</label>
             <div class="w-full px-4 py-3 info-field">
               <span>MPMEC Member</span>
             </div>
           </div>
           
           <div class="space-y-2">
             <label class="block text-sm font-semibold text-gray-700 mb-2">Position</label>
             <div class="w-full px-4 py-3 info-field">
               <span id="profilePosition">Committee Member</span>
             </div>
           </div>
           
           <div class="space-y-2">
             <label class="block text-sm font-semibold text-gray-700 mb-2">Department</label>
             <div class="w-full px-4 py-3 info-field">
               <span id="profileDepartment">Municipal Project Monitoring</span>
             </div>
           </div>
           
           <div class="space-y-2">
             <label class="block text-sm font-semibold text-gray-700 mb-2">Access Level</label>
             <div class="w-full px-4 py-3 info-field">
               <span>MPMEC Dashboard Access</span>
             </div>
           </div>
           
           <div class="space-y-2 md:col-span-2">
             <label class="block text-sm font-semibold text-gray-700 mb-2">Status</label>
             <div class="w-full px-4 py-3 info-field">
               <div class="flex items-center gap-2">
                 <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                 <span>Active</span>
               </div>
             </div>
           </div>
         </div>
      </div>

          <!-- System Statistics -->
          <div class="group profile-card bg-white rounded-2xl shadow-lg border border-gray-100 p-8 hover:shadow-2xl hover:border-blue-200 transition-all duration-300">
            <div class="flex items-center gap-4 mb-6">
              <div class="p-3 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl icon-container">
                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <h3 class="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors">System Statistics</h3>
            </div>
            <p class="text-sm text-gray-500 mb-6">Performance metrics and activity summary</p>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
              <div class="group/stat text-center p-4 stat-card-enhanced cursor-pointer">
                <p class="text-2xl font-bold text-blue-600 group-hover/stat:text-blue-700 transition-colors" id="projectsReviewed">21</p>
                <p class="text-sm font-semibold text-gray-600 group-hover/stat:text-gray-700 transition-colors">Projects Reviewed</p>
              </div>
              <div class="group/stat text-center p-4 stat-card-enhanced cursor-pointer">
                <p class="text-2xl font-bold text-blue-600 group-hover/stat:text-blue-700 transition-colors" id="meetingsAttended">15</p>
                <p class="text-sm font-semibold text-gray-600 group-hover/stat:text-gray-700 transition-colors">Meetings Attended</p>
              </div>
              <div class="group/stat text-center p-4 stat-card-enhanced cursor-pointer">
                <p class="text-2xl font-bold text-blue-600 group-hover/stat:text-blue-700 transition-colors" id="daysActive">43</p>
                <p class="text-sm font-semibold text-gray-600 group-hover/stat:text-gray-700 transition-colors">Days Active</p>
              </div>
              <div class="group/stat text-center p-4 stat-card-enhanced cursor-pointer">
                <p class="text-2xl font-bold text-blue-600 group-hover/stat:text-blue-700 transition-colors" id="performance">95%</p>
                <p class="text-sm font-semibold text-gray-600 group-hover/stat:text-gray-700 transition-colors">Performance</p>
              </div>
              <div class="group/stat text-center p-4 stat-card-enhanced cursor-pointer">
                <p class="text-2xl font-bold text-blue-600 group-hover/stat:text-blue-700 transition-colors" id="attendance">98%</p>
                <p class="text-sm font-semibold text-gray-600 group-hover/stat:text-gray-700 transition-colors">Attendance</p>
              </div>
              <div class="group/stat text-center p-4 stat-card-enhanced cursor-pointer">
                <p class="text-2xl font-bold text-blue-600 group-hover/stat:text-blue-700 transition-colors" id="lastActivity">2 hours ago</p>
                <p class="text-sm font-semibold text-gray-600 group-hover/stat:text-gray-700 transition-colors">Last Activity</p>
              </div>
            </div>
          </div>

          <!-- Permissions & Access Control -->
          <div class="group profile-card bg-white rounded-2xl shadow-lg border border-gray-100 p-8 hover:shadow-2xl hover:border-blue-200 transition-all duration-300">
            <div class="flex items-center gap-4 mb-6">
              <div class="p-3 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl icon-container">
                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
              </div>
              <h3 class="text-2xl font-bold text-gray-800 group-hover:text-blue-600 transition-colors">Permissions & Access Control</h3>
            </div>
            <div class="space-y-3 max-h-64 overflow-y-auto">
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <span class="text-sm font-medium text-gray-800">MPMEC Dashboard Access</span>
              </div>
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <span class="text-sm font-medium text-gray-800">Project Review & Monitoring</span>
              </div>
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <span class="text-sm font-medium text-gray-800">Committee Reports Access</span>
              </div>
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <span class="text-sm font-medium text-gray-800">Meeting Participation</span>
              </div>
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <span class="text-sm font-medium text-gray-800">Document Review</span>
              </div>
              <div class="permission-item-enhanced">
                <div class="w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center">
                  <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <span class="text-sm font-medium text-gray-800">Feedback Submission</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  </LGUPMTLayout>
</Layout>

<!-- Edit Profile Modal -->
<div id="editProfileModal" class="fixed inset-0 bg-black/60 backdrop-blur-md hidden z-50 transition-all duration-500 ease-out">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl max-w-3xl w-full mx-4 transform scale-95 opacity-0 transition-all duration-500 ease-out border border-white/20 overflow-hidden" id="editProfileModalContent">
      <!-- Modal Header -->
      <div class="relative bg-gradient-to-r from-blue-600 via-blue-700 to-blue-800 px-8 py-6 rounded-t-3xl">
        <div class="absolute inset-0 bg-gradient-to-r from-blue-700/20 to-blue-800/20 rounded-t-3xl"></div>
        <div class="relative flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
              </svg>
            </div>
            <div>
              <h2 class="text-2xl font-bold text-white">Edit Profile</h2>
              <p class="text-blue-100 text-sm">Update your personal information and preferences</p>
            </div>
          </div>
          <button id="closeEditProfileModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
            <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Modal Body -->
      <div class="p-8 bg-gradient-to-br from-gray-50 to-white rounded-b-3xl">
        <form id="editProfileForm" class="space-y-8">
        <!-- Personal Information Section -->
        <div class="space-y-6">
          <div class="flex items-center space-x-3 mb-6">
            <div class="w-1 h-8 bg-gradient-to-b from-blue-500 to-blue-600 rounded-full"></div>
            <h3 class="text-lg font-bold text-gray-800">Personal Information</h3>
          </div>
          
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <!-- Full Name -->
            <div class="group">
              <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
                Full Name
              </label>
              <div class="relative">
                <input type="text" id="editFullName" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your full name" required>
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
            </div>
            
            <!-- Email Address -->
            <div class="group">
              <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
                Email Address
              </label>
              <div class="relative">
                <input type="email" id="editEmail" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your email" required>
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
            </div>
            
            <!-- Phone Number -->
            <div class="group">
              <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                </svg>
                Phone Number
              </label>
              <div class="relative">
                <input type="tel" id="editPhone" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your phone number">
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
            </div>
            
            <!-- Location -->
            <div class="group">
              <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                </svg>
                Location
              </label>
              <div class="relative">
                <input type="text" id="editLocation" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your location">
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
            </div>
            
            <!-- Birthday -->
            <div class="group">
              <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                Birthday
              </label>
              <div class="relative">
                <input type="date" id="editBirthday" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 shadow-sm hover:shadow-md text-lg">
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
            </div>
            
            <!-- Timezone -->
            <div class="group">
              <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
                <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                Timezone
              </label>
              <div class="relative">
                <select id="editTimezone" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 shadow-sm hover:shadow-md appearance-none cursor-pointer text-lg">
                  <option value="Asia/Manila" selected>Asia/Manila (UTC+8)</option>
                  <option value="UTC">UTC (UTC+0)</option>
                  <option value="America/New_York">America/New_York (UTC-5)</option>
                  <option value="Europe/London">Europe/London (UTC+0)</option>
                </select>
                <div class="absolute right-5 top-1/2 transform -translate-y-1/2 pointer-events-none">
                  <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </div>
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Enhanced Action Buttons -->
        <div class="flex justify-end space-x-6 pt-8 border-t border-gray-200/60">
          <button type="button" id="cancelEditProfile" class="btn-secondary flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
            <span>Cancel</span>
          </button>
          <button type="submit" class="btn-primary flex items-center space-x-3">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <span>Save Changes</span>
          </button>
        </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Change Password Modal -->
<div id="changePasswordModal" class="fixed inset-0 bg-black/60 backdrop-blur-md hidden z-50 transition-all duration-500 ease-out">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl max-w-2xl w-full mx-4 transform scale-95 opacity-0 transition-all duration-500 ease-out border border-white/20 max-h-[95vh] overflow-hidden" id="changePasswordModalContent">
      <!-- Modal Header -->
      <div class="relative bg-gradient-to-r from-blue-600 via-blue-700 to-blue-800 px-8 py-6 rounded-t-3xl">
        <div class="absolute inset-0 bg-gradient-to-r from-blue-700/20 to-blue-800/20 rounded-t-3xl"></div>
        <div class="relative flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7 7m7-7a6 6 0 00-7-7m-7 7a6 6 0 007 7m7-7H3m3 3h.01M9 6h.01M9 12h.01M9 18h.01"></path>
              </svg>
            </div>
            <div>
              <h2 class="text-2xl font-bold text-white">Change Password</h2>
              <p class="text-blue-100 text-sm">Secure your account with a new password</p>
            </div>
          </div>
          <button id="closeChangePasswordModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
            <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
      
      <!-- Modal Body -->
      <div class="p-8 bg-gradient-to-br from-gray-50 to-white rounded-b-3xl">
        <form id="changePasswordForm" class="space-y-8">
        <!-- Current Password -->
        <div class="group">
          <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
            <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
            </svg>
            Current Password
          </label>
          <div class="relative">
            <input type="password" id="currentPassword" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your current password" required>
            <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
          </div>
        </div>
        
        <!-- New Password -->
        <div class="group">
          <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
            <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            New Password
          </label>
          <div class="relative">
            <input type="password" id="newPassword" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your new password" required>
            <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
          </div>
          
          <!-- Enhanced Password Strength Indicator -->
          <div class="mt-6 p-5 bg-gradient-to-br from-gray-50 to-white rounded-2xl border border-gray-200 shadow-sm">
            <div class="flex items-center justify-between mb-4">
              <span class="text-sm font-bold text-gray-800">Password Strength</span>
              <span id="strengthText" class="text-sm font-bold text-red-500 px-3 py-1 bg-red-50 rounded-full border border-red-200">Weak</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-3 mb-5">
              <div id="strengthBar" class="h-3 rounded-full transition-all duration-500 ease-out bg-red-500 w-0"></div>
            </div>
            <div class="grid grid-cols-2 gap-4 text-sm">
              <div class="flex items-center space-x-3">
                <div id="lengthCheck" class="w-3 h-3 bg-gray-300 rounded-full flex-shrink-0 transition-all duration-300"></div>
                <span class="text-gray-600 font-medium">8+ characters</span>
              </div>
              <div class="flex items-center space-x-3">
                <div id="uppercaseCheck" class="w-3 h-3 bg-gray-300 rounded-full flex-shrink-0 transition-all duration-300"></div>
                <span class="text-gray-600 font-medium">Uppercase letter</span>
              </div>
              <div class="flex items-center space-x-3">
                <div id="lowercaseCheck" class="w-3 h-3 bg-gray-300 rounded-full flex-shrink-0 transition-all duration-300"></div>
                <span class="text-gray-600 font-medium">Lowercase letter</span>
              </div>
              <div class="flex items-center space-x-3">
                <div id="numberCheck" class="w-3 h-3 bg-gray-300 rounded-full flex-shrink-0 transition-all duration-300"></div>
                <span class="text-gray-600 font-medium">Number</span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Confirm New Password -->
        <div class="group">
          <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-blue-600 transition-colors duration-200 flex items-center">
            <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Confirm New Password
          </label>
          <div class="relative">
            <input type="password" id="confirmPassword" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-blue-500/20 focus:border-blue-500 transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Confirm your new password" required>
            <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-blue-500/5 to-blue-600/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
          </div>
        </div>
        
        <!-- Enhanced Action Buttons -->
        <div class="flex justify-end space-x-6 pt-8 border-t border-gray-200/60">
          <button type="button" id="cancelChangePassword" class="btn-secondary flex items-center space-x-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
            <span>Cancel</span>
          </button>
          <button type="submit" class="btn-primary flex items-center space-x-3">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <span>Update Password</span>
          </button>
        </div>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Security Settings Modal -->
<div id="securitySettingsModal" class="fixed inset-0 bg-black/60 backdrop-blur-md z-50 hidden flex items-center justify-center p-4">
  <div class="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 w-full max-w-4xl max-h-[95vh] overflow-hidden transform scale-95 opacity-0 transition-all duration-500 ease-out" id="securitySettingsModalContent">
    <!-- Header with MPMEC theme -->
    <div class="relative bg-gradient-to-r from-blue-600 via-blue-700 to-blue-800 px-8 py-6">
      <div class="absolute inset-0 bg-gradient-to-r from-blue-700/20 to-blue-800/20"></div>
      <div class="relative flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
            </svg>
          </div>
          <div>
            <h2 class="text-2xl font-bold text-white">Security Settings</h2>
            <p class="text-blue-100 text-sm">Manage your account security and privacy preferences</p>
          </div>
        </div>
        <button id="closeSecuritySettingsModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
          <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Content with scrollable area -->
    <div class="overflow-y-auto max-h-[calc(95vh-120px)]">
      <div class="p-8 space-y-8">
        <!-- Two-Factor Authentication -->
        <div class="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200/50 shadow-sm hover:shadow-md transition-all duration-300">
          <div class="flex items-center justify-between mb-6">
            <div class="flex items-center space-x-4">
              <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-gray-900">Two-Factor Authentication</h3>
                <p class="text-sm text-gray-600">Add an extra layer of security to your account</p>
              </div>
            </div>
            <label class="relative inline-flex items-center cursor-pointer group">
              <input type="checkbox" id="twoFactorToggle" class="sr-only peer">
              <div class="w-14 h-7 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-blue-500 peer-checked:to-blue-600 group-hover:shadow-lg transition-all duration-300"></div>
            </label>
          </div>
          <div id="twoFactorSetup" class="hidden space-y-6">
            <div class="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
              <h4 class="font-bold text-gray-900 mb-4 flex items-center space-x-2">
                <svg class="w-5 h-5 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>Setup Instructions</span>
              </h4>
              <ol class="list-decimal list-inside space-y-3 text-sm text-gray-600">
                <li>Download an authenticator app (Google Authenticator, Authy, etc.)</li>
                <li>Scan the QR code below with your authenticator app</li>
                <li>Enter the 6-digit code to verify setup</li>
              </ol>
              <div class="mt-6 text-center">
                <div class="w-40 h-40 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl mx-auto flex items-center justify-center shadow-inner">
                  <div class="text-center">
                    <svg class="w-12 h-12 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
                    </svg>
                    <span class="text-gray-500 text-sm">QR Code</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Login Notifications -->
        <div class="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200/50 shadow-sm hover:shadow-md transition-all duration-300">
          <div class="flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <div class="w-12 h-12 bg-gradient-to-br from-blue-600 to-blue-700 rounded-xl flex items-center justify-center">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4.828 7l2.586 2.586a2 2 0 002.828 0L12 7H4.828zM4.828 17l2.586-2.586a2 2 0 012.828 0L12 17H4.828z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-gray-900">Login Notifications</h3>
                <p class="text-sm text-gray-600">Get notified when someone logs into your account</p>
              </div>
            </div>
            <label class="relative inline-flex items-center cursor-pointer group">
              <input type="checkbox" id="loginNotificationsToggle" class="sr-only peer" checked>
              <div class="w-14 h-7 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-500/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-blue-500 peer-checked:to-blue-600 group-hover:shadow-lg transition-all duration-300"></div>
            </label>
          </div>
        </div>

        <!-- Session Management -->
        <div class="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200/50 shadow-sm hover:shadow-md transition-all duration-300">
          <div class="flex items-center space-x-4 mb-6">
            <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-900">Active Sessions</h3>
              <p class="text-sm text-gray-600">Manage your active login sessions</p>
            </div>
          </div>
          <div class="space-y-4">
            <div class="flex items-center justify-between p-4 bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
              <div class="flex items-center space-x-4">
                <div class="w-10 h-10 bg-gradient-to-br from-green-100 to-emerald-100 rounded-xl flex items-center justify-center">
                  <div class="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                </div>
                <div>
                  <p class="font-semibold text-gray-900">Current Session</p>
                  <p class="text-sm text-gray-600">Chrome on Windows • Manila, PH</p>
                </div>

              </div>
              <span class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">Active</span>
            </div>
            <div class="flex items-center justify-between p-4 bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
              <div class="flex items-center space-x-4">
                <div class="w-10 h-10 bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl flex items-center justify-center">
                  <div class="w-4 h-4 bg-gray-400 rounded-full"></div>
                </div>
                <div>
                  <p class="font-semibold text-gray-900">Mobile App</p>
                  <p class="text-sm text-gray-600">iPhone • 2 hours ago</p>
                </div>
              </div>
              <button class="px-4 py-2 text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg font-medium transition-all duration-200">End Session</button>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-4 pt-8 border-t border-gray-200/60">
          <button id="cancelSecuritySettings" class="btn-secondary">
            Cancel
          </button>
          <button id="saveSecuritySettings" class="btn-primary flex items-center space-x-3">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            <span>Save Settings</span>
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Enhanced Edit Profile Modal -->
<div id="editModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm hidden z-50 transition-all duration-300">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-3xl shadow-2xl max-w-md w-full p-8 transform transition-all duration-300 scale-95 opacity-0" id="modalContent">
      <div class="flex items-center justify-between mb-6">
        <div class="flex items-center gap-3">
          <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center">
            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-bold text-gray-800">Edit Profile</h3>
        </div>
        <button onclick="closeEditModal()" class="text-gray-400 hover:text-gray-600 transition-colors duration-200">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <form id="editForm" class="space-y-6" onsubmit="saveProfileChanges(); return false;">
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">Full Name</label>
          <input type="text" id="editName" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white">
        </div>
        
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">Contact Number</label>
          <input type="tel" id="editContact" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white">
        </div>
        
        <div class="space-y-2">
          <label class="block text-sm font-semibold text-gray-700">Date of Birth</label>
          <input type="date" id="editBirthday" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 bg-gray-50 focus:bg-white">
        </div>
        
        <div class="flex gap-4 pt-6">
          <button type="submit" class="flex-1 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-300 hover:scale-105 font-semibold">
            Save Changes
          </button>
          <button type="button" onclick="closeEditModal()" class="flex-1 px-6 py-3 bg-gray-200 text-gray-700 rounded-xl hover:bg-gray-300 transition-all duration-300 font-semibold">
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Edit Profile Picture Modal - Matching System Admin Module -->
<div id="profilePictureModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-3xl shadow-2xl max-w-lg w-full mx-4 transform transition-all duration-300 scale-95 opacity-0 border border-gray-100" id="profilePictureModalContent">
      <!-- Modal Header -->
      <div class="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-blue-50 to-white rounded-t-3xl">
        <div class="flex items-center gap-3">
          <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg">
            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-2xl font-bold text-gray-800">Edit Profile Picture</h3>
            <p class="text-sm text-gray-600">Update your profile picture</p>
        </div>
        </div>
        <button id="closeProfileModal" class="w-10 h-10 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 transition-all duration-200">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
      
      <!-- Modal Body -->
      <div class="p-6 space-y-8">
        <!-- Current Profile Picture Section -->
        <div class="space-y-4">
          <div class="flex items-center justify-center gap-3">
            <span class="text-base font-semibold text-gray-700">Current Profile Picture</span>
            <button id="refreshCurrentPic" class="p-2 bg-blue-50 hover:bg-blue-100 rounded-full transition-colors duration-200">
              <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            </button>
          </div>
          <div class="flex justify-center items-center w-full">
            <div class="w-28 h-28 rounded-3xl overflow-hidden profile-picture-border shadow-xl flex-shrink-0">
              <img 
                src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%233B82F6'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EMV%3C/text%3E%3C/svg%3E"
                alt="Current Profile Picture"
                class="w-full h-full object-cover"
                 id="currentProfilePic"
                 crossorigin="anonymous"
              />
            </div>
          </div>
        </div>
        
        <!-- Image Upload Area -->
        <div class="space-y-3">
          <div id="dropZone" class="border-2 border-dashed border-gray-300 rounded-2xl p-10 text-center hover:border-blue-500 transition-all duration-300 cursor-pointer bg-gradient-to-br from-blue-50 to-blue-50/30 hover:from-blue-50/50 hover:to-blue-100/50">
            <div class="space-y-4">
              <div class="w-20 h-20 bg-gradient-to-br from-blue-100 to-blue-200 rounded-full mx-auto flex items-center justify-center shadow-lg">
                <svg class="w-10 h-10 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
              </div>
              <div class="space-y-2">
                <p class="text-base font-semibold text-gray-700">Drop your image here</p>
                <p class="text-sm text-gray-600">or click to browse</p>
                <p class="text-xs text-gray-500">PNG, JPG, GIF up to 5MB</p>
              </div>
            </div>
          </div>
          <input type="file" id="profilePictureInput" accept="image/*" class="hidden" />

          <!-- Preview Section -->
          <div id="imagePreview" class="hidden">
            <div class="text-center space-y-4">
              <div class="w-36 h-36 rounded-3xl overflow-hidden profile-picture-border shadow-xl mx-auto">
                <img id="previewImage" src="" alt="Preview" class="w-full h-full object-cover" crossorigin="anonymous" />
              </div>
              <p class="text-sm font-medium text-gray-600">Preview</p>
            </div>
          </div>
        </div>
        
        <!-- Action Buttons -->
        <div class="flex gap-4 pt-6 border-t border-gray-100">
          <button id="saveProfilePicture" class="flex-1 btn-primary">
            <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
            Save Changes
          </button>
          <button id="cancelProfilePicture" class="flex-1 btn-secondary">
            Cancel
          </button>
        </div>
        
        <!-- Reset Button (for testing) -->
        <div class="text-center pt-4 space-y-2">
          <button id="resetProfilePicture" class="text-sm text-red-500 hover:text-red-700 underline">
            Reset to Default Picture
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 MPMEC Committee Profile module loaded!');
    
    // Profile Picture Editing Functionality
    const profilePictureContainer = document.getElementById('profilePictureContainer');
    const profilePictureModal = document.getElementById('profilePictureModal');
    const modalContent = document.getElementById('profilePictureModalContent');
    const closeProfileModal = document.getElementById('closeProfileModal');
    const dropZone = document.getElementById('dropZone');
    const profilePictureInput = document.getElementById('profilePictureInput');
    const imagePreview = document.getElementById('imagePreview');
    const previewImage = document.getElementById('previewImage');
    const currentProfilePic = document.getElementById('currentProfilePic');
    const saveProfilePicture = document.getElementById('saveProfilePicture');
    const cancelProfilePicture = document.getElementById('cancelProfilePicture');
    
    let selectedFile = null;
    
    console.log('🔍 DOM elements found:');
    console.log('🔍 Profile picture container:', profilePictureContainer);
    console.log('🔍 Profile picture modal:', profilePictureModal);
    console.log('🔍 Modal content:', modalContent);
    

    
         // Function to sync modal's current profile picture with main display
     function syncModalCurrentProfilePicture() {
       const currentProfilePic = document.getElementById('currentProfilePic');
       const mainProfilePic = document.getElementById('mainProfilePicture');
       
       if (!currentProfilePic) {
         console.log('❌ Modal current profile picture element not found');
         return;
       }
       
       console.log('🔄 Syncing modal current profile picture...');
       
       // Priority 1: Try to get from MPMEC profile picture manager
       if (window.mpmecProfilePictureManager && window.mpmecProfilePictureManager.profilePictureUrl) {
         const managerUrl = window.mpmecProfilePictureManager.profilePictureUrl;
         console.log('🎯 Using MPMEC manager profile picture:', managerUrl);
         
         // Handle CORS issues by adding error handling and fallback
         currentProfilePic.onerror = () => {
           console.log('⚠️ CORS error loading profile picture, trying alternative approach...');
           // Try to load via fetch and convert to data URL
           fetchProfilePictureAsDataURL(managerUrl).then(dataUrl => {
             if (dataUrl) {
               currentProfilePic.src = dataUrl;
               currentProfilePic.style.display = 'block';
               console.log('✅ Modal profile picture loaded as data URL to avoid CORS');
             } else {
               showModalFallbackProfilePicture();
             }
           }).catch(() => {
             showModalFallbackProfilePicture();
           });
         };
         
         currentProfilePic.onload = () => {
           console.log('✅ Modal profile picture loaded successfully from manager');
           currentProfilePic.style.display = 'block';
         };
         
         currentProfilePic.src = managerUrl;
         return;
       }
       
       // Priority 2: Try to get from main profile picture
       if (mainProfilePic && mainProfilePic.src && !mainProfilePic.src.includes('data:image/svg+xml')) {
         console.log('🔄 Using main profile picture:', mainProfilePic.src);
         
         // Handle CORS issues for main profile picture too
         currentProfilePic.onerror = () => {
           console.log('⚠️ CORS error loading main profile picture, trying alternative approach...');
           fetchProfilePictureAsDataURL(mainProfilePic.src).then(dataUrl => {
             if (dataUrl) {
               currentProfilePic.src = dataUrl;
               currentProfilePic.style.display = 'block';
               console.log('✅ Modal profile picture loaded as data URL from main picture');
      } else {
               showModalFallbackProfilePicture();
             }
           }).catch(() => {
             showModalFallbackProfilePicture();
           });
         };
         
         currentProfilePic.onload = () => {
           console.log('✅ Modal profile picture loaded successfully from main picture');
           currentProfilePic.style.display = 'block';
         };
         
         currentProfilePic.src = mainProfilePic.src;
         return;
       }
       
       // Priority 3: Try to get from localStorage
       const localStorageUrl = localStorage.getItem('mpmec_profile_picture');
       if (localStorageUrl) {
         console.log('🔄 Using localStorage profile picture:', localStorageUrl);
         
         // Handle CORS issues for localStorage URL too
         currentProfilePic.onerror = () => {
           console.log('⚠️ CORS error loading localStorage profile picture, trying alternative approach...');
           if (localStorageUrl.startsWith('data:')) {
             // If it's already a data URL, use it directly
             currentProfilePic.src = localStorageUrl;
             currentProfilePic.style.display = 'block';
             console.log('✅ Modal profile picture loaded from localStorage data URL');
           } else {
             // Try to fetch and convert to data URL
             fetchProfilePictureAsDataURL(localStorageUrl).then(dataUrl => {
               if (dataUrl) {
                 currentProfilePic.src = dataUrl;
                 currentProfilePic.style.display = 'block';
                 console.log('✅ Modal profile picture loaded as data URL from localStorage');
               } else {
                 showModalFallbackProfilePicture();
               }
             }).catch(() => {
               showModalFallbackProfilePicture();
             });
           }
         };
         
         currentProfilePic.onload = () => {
           console.log('✅ Modal profile picture loaded successfully from localStorage');
           currentProfilePic.style.display = 'block';
         };
         
         currentProfilePic.src = localStorageUrl;
         return;
       }
       
       // Priority 4: Try to get from server
    const userData = localStorage.getItem('user');
    if (userData) {
         try {
      const user = JSON.parse(userData);
           const employeeId = user.employeeId || user.username || 'MPMEC-001';
           
           console.log('🔍 Fetching profile picture from server for modal sync:', employeeId);
           fetch(`http://localhost:3000/api/profile/picture/${employeeId}`)
             .then(response => response.json())
             .then(data => {
               if (data.success && data.profilePictureUrl) {
                 console.log('✅ Modal profile picture loaded from server:', data.profilePictureUrl);
                 
                 // Handle CORS issues for server URL
                 currentProfilePic.onerror = () => {
                   console.log('⚠️ CORS error loading server profile picture, converting to data URL...');
                   fetchProfilePictureAsDataURL(data.profilePictureUrl).then(dataUrl => {
                     if (dataUrl) {
                       currentProfilePic.src = dataUrl;
                       currentProfilePic.style.display = 'block';
                       console.log('✅ Modal profile picture loaded as data URL from server');
                     } else {
                       showModalFallbackProfilePicture();
                     }
                   }).catch(() => {
                     showModalFallbackProfilePicture();
                   });
                 };
                 
                 currentProfilePic.onload = () => {
                   console.log('✅ Modal profile picture loaded successfully from server');
                   currentProfilePic.style.display = 'block';
                 };
                 
                 currentProfilePic.src = data.profilePictureUrl;
        } else {
                 console.log('⚠️ No server profile picture, showing fallback');
                 showModalFallbackProfilePicture();
               }
             })
             .catch(error => {
               console.log('⚠️ Server fetch failed for modal sync:', error);
               showModalFallbackProfilePicture();
             });
         } catch (error) {
           console.log('❌ Error parsing user data for modal sync:', error);
           showModalFallbackProfilePicture();
         }
    } else {
         console.log('⚠️ No user data, showing fallback');
         showModalFallbackProfilePicture();
       }
     }
     
     // Function to fetch profile picture and convert to data URL to avoid CORS issues
     async function fetchProfilePictureAsDataURL(url) {
       try {
         console.log('🔄 Fetching profile picture as data URL to avoid CORS:', url);
         
         // If it's already a data URL, return it
         if (url.startsWith('data:')) {
           console.log('✅ URL is already a data URL, using directly');
           return url;
         }
         
         // Fetch the image and convert to data URL
         const response = await fetch(url, {
           mode: 'cors',
           credentials: 'include'
         });
         
         if (!response.ok) {
           throw new Error(`HTTP ${response.status}: ${response.statusText}`);
         }
         
         const blob = await response.blob();
         const dataUrl = URL.createObjectURL(blob);
         
         console.log('✅ Profile picture converted to data URL successfully');
         return dataUrl;
       } catch (error) {
         console.log('❌ Error converting profile picture to data URL:', error);
         
         // Try alternative approach - create a canvas and draw the image
         try {
           console.log('🔄 Trying alternative canvas approach...');
           return await convertImageToDataURLViaCanvas(url);
         } catch (canvasError) {
           console.log('❌ Canvas approach also failed:', canvasError);
           return null;
         }
       }
     }
     
     // Alternative approach using canvas to convert image to data URL
     function convertImageToDataURLViaCanvas(url) {
       return new Promise((resolve, reject) => {
         const img = new Image();
         img.crossOrigin = 'anonymous';
         
         img.onload = () => {
           try {
             const canvas = document.createElement('canvas');
             const ctx = canvas.getContext('2d');
             
             canvas.width = img.width;
             canvas.height = img.height;
             
             ctx.drawImage(img, 0, 0);
             
             const dataUrl = canvas.toDataURL('image/jpeg', 0.8);
             console.log('✅ Profile picture converted to data URL via canvas');
             resolve(dataUrl);
           } catch (error) {
             console.log('❌ Canvas conversion failed:', error);
             reject(error);
           }
         };
         
         img.onerror = () => {
           console.log('❌ Failed to load image for canvas conversion');
           reject(new Error('Image load failed'));
         };
         
         img.src = url;
       });
     }
    
    // Function to show fallback profile picture in modal
    function showModalFallbackProfilePicture() {
      const currentProfilePic = document.getElementById('currentProfilePic');
      if (currentProfilePic) {
        // Show the default MV placeholder
        const defaultImage = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%233B82F6'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EMV%3C/text%3E%3C/svg%3E";
        currentProfilePic.src = defaultImage;
        currentProfilePic.style.display = 'block';
        console.log('🔄 Modal showing fallback profile picture');
      }
    }
    
    // Function to save profile picture to localStorage
    function saveProfilePictureToStorage(imageUrl) {
      try {
        localStorage.setItem('mpmec_profile_picture', imageUrl);
        console.log('💾 Profile picture saved to localStorage:', imageUrl.substring(0, 50) + '...');
      } catch (error) {
        console.error('❌ Error saving to localStorage:', error);
      }
    }
    

    
    // Function to load profile picture from localStorage or server
    async function loadProfilePictureFromStorage() {
      try {
        // First try to load from server
        const userData = localStorage.getItem('user');
        if (userData) {
          const user = JSON.parse(userData);
          const employeeId = user.employeeId || user.username || 'MPMEC-001';
          
          console.log('🔍 Loading MPMEC profile picture from server for:', employeeId);
          try {
            const response = await fetch(`http://localhost:3000/api/profile/picture/${employeeId}`);
            if (response.ok) {
              const data = await response.json();
              if (data.success && data.profilePictureUrl) {
                console.log('✅ Profile picture loaded from server:', data.profilePictureUrl);
                
                // Update main profile picture
                const mainProfilePic = document.getElementById('mainProfilePicture');
                if (mainProfilePic) { mainProfilePic.src = data.profilePictureUrl; }
                
                // Update modal profile picture
                const modalProfilePic = document.getElementById('currentProfilePic');
                if (modalProfilePic) { modalProfilePic.src = data.profilePictureUrl; }
                
                // Store in localStorage for future use
                localStorage.setItem('mpmec_profile_picture', data.profilePictureUrl);
                
                                 // Dispatch event to update other components
                 const profileUpdateEvent = new CustomEvent('mpmecProfilePictureUpdated', {
                   detail: { profilePictureUrl: data.profilePictureUrl }
                 });
                 window.dispatchEvent(profileUpdateEvent);
                 
                 // Also directly call the global manager to ensure immediate update
                 if (window.mpmecProfilePictureManager) {
                   console.log('🎯 Directly calling MPMEC global manager from server load...');
                   window.mpmecProfilePictureManager.setProfilePicture(data.profilePictureUrl);
                 }
                
                console.log('📸 Profile picture loaded from server and applied to main instances');
                return true;
              }
            }
          } catch (serverError) {
            console.log('⚠️ Server fetch failed, trying localStorage:', serverError);
          }
        }
        
        // Fallback to localStorage
        const savedImageUrl = localStorage.getItem('mpmec_profile_picture');
        if (savedImageUrl) {
          // Update main profile picture
          const mainProfilePic = document.getElementById('mainProfilePicture');
          if (mainProfilePic) { mainProfilePic.src = savedImageUrl; }
          
          // Update modal profile picture
          const modalProfilePic = document.getElementById('currentProfilePic');
          if (modalProfilePic) { modalProfilePic.src = savedImageUrl; }
          
          console.log('📸 Profile picture loaded from localStorage and applied to main instances');
          return true;
        } else {
          console.log('📸 No saved profile picture found, using default');
        }
      } catch (error) {
        console.error('❌ Error loading profile picture:', error);
      }
      return false;
    }
    
    // Function to convert file to base64 for storage
    function fileToBase64(file) {
      return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
      });
    }
    
    // Function to reset profile picture to default
    async function resetProfilePicture() {
      try {
        // Try to delete from server first
        const userData = localStorage.getItem('user');
        if (userData) {
          const user = JSON.parse(userData);
          const employeeId = user.employeeId || user.username || 'MPMEC-001';
          
          try {
            console.log('🗑️ Attempting to delete profile picture from server for:', employeeId);
            const deleteResponse = await fetch(`http://localhost:3000/api/profile/picture/${employeeId}`, {
              method: 'DELETE'
            });
            
            if (deleteResponse.ok) {
              console.log('✅ Profile picture deleted from server');
            } else {
              console.log('⚠️ Server deletion failed, but continuing with local reset');
            }
          } catch (serverError) {
            console.log('⚠️ Server deletion error, but continuing with local reset:', serverError);
          }
        }
        
        // Clear from localStorage
        localStorage.removeItem('mpmec_profile_picture');
        
        // Reset to default MV image
        const defaultImage = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%233B82F6'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EMV%3C/text%3E%3C/svg%3E";
        
        // Update main profile picture
        const mainProfilePic = document.getElementById('mainProfilePicture');
        if (mainProfilePic) { mainProfilePic.src = defaultImage; }
        
        // Update modal profile picture
        const modalProfilePic = document.getElementById('currentProfilePic');
        if (modalProfilePic) { modalProfilePic.src = defaultImage; }
        
                 // Dispatch custom event for global manager to handle
         const profileUpdateEvent = new CustomEvent('mpmecProfilePictureUpdated', {
           detail: { profilePictureUrl: defaultImage }
         });
         window.dispatchEvent(profileUpdateEvent);
         
         // Also directly call the global manager to ensure immediate update
         if (window.mpmecProfilePictureManager) {
           console.log('🎯 Directly calling MPMEC global manager from reset...');
           window.mpmecProfilePictureManager.setProfilePicture(defaultImage);
         }
        
        console.log('🔄 Profile picture reset to default');
        alert('Profile picture reset to default');
      } catch (error) {
        console.error('❌ Error resetting profile picture:', error);
      }
    }
    
         // Open modal when profile picture is clicked
     if (profilePictureContainer) {
       profilePictureContainer.addEventListener('click', () => {
         console.log('🚀 Profile picture clicked!');
         
         // Always sync the modal with the current main profile picture BEFORE opening
         syncModalCurrentProfilePicture();
         
         // Now open the modal with enhanced animation
         profilePictureModal.classList.remove('hidden');
         setTimeout(() => {
           modalContent.classList.remove('scale-95', 'opacity-0');
           modalContent.classList.add('scale-100', 'opacity-100');
           // Add a subtle bounce effect
           modalContent.style.transform = 'scale(1.02)';
           setTimeout(() => {
             modalContent.style.transform = 'scale(1)';
           }, 150);
           
           // Additional sync after modal is fully visible to ensure profile picture is correct
           setTimeout(() => {
             syncModalCurrentProfilePicture();
           }, 100);
           
           // Force refresh from MPMEC manager if available
           setTimeout(() => {
             if (window.mpmecProfilePictureManager && window.mpmecProfilePictureManager.profilePictureUrl) {
               console.log('🎯 Force refreshing modal from MPMEC manager...');
               const managerUrl = window.mpmecProfilePictureManager.profilePictureUrl;
               const currentProfilePic = document.getElementById('currentProfilePic');
               if (currentProfilePic) {
                 // Try direct load first
                 currentProfilePic.onerror = () => {
                   console.log('⚠️ Direct load failed, trying data URL conversion...');
                   fetchProfilePictureAsDataURL(managerUrl).then(dataUrl => {
                     if (dataUrl) {
                       currentProfilePic.src = dataUrl;
                       currentProfilePic.style.display = 'block';
                       console.log('✅ Modal profile picture refreshed via data URL');
                     }
                   }).catch(() => {
                     console.log('⚠️ Data URL conversion also failed');
                   });
                 };
                 
                 currentProfilePic.onload = () => {
                   console.log('✅ Modal profile picture refreshed successfully');
                   currentProfilePic.style.display = 'block';
                 };
                 
                 currentProfilePic.src = managerUrl;
               }
             }
           }, 200);
         }, 10);
       });
       console.log('✅ Profile picture click listener added');
     }
    
    // Refresh current picture button
    const refreshCurrentPic = document.getElementById('refreshCurrentPic');
    if (refreshCurrentPic) {
      refreshCurrentPic.addEventListener('click', () => {
        syncModalCurrentProfilePicture();
        console.log('✅ Refresh current picture button listener added');
      });
    }

         
     
     // Listen for MPMEC profile picture updates to sync modal
     window.addEventListener('mpmecProfilePictureUpdated', (e) => {
       console.log('🔄 MPMEC profile picture updated, syncing modal...');
       if (e.detail.profilePictureUrl) {
         // Update modal profile picture immediately
         const currentProfilePic = document.getElementById('currentProfilePic');
         if (currentProfilePic) {
           currentProfilePic.src = e.detail.profilePictureUrl;
           currentProfilePic.style.display = 'block';
           console.log('✅ Modal profile picture synced with update event');
         }
       }
     });
    
    // Close modal
    const closeModal = () => {
      modalContent.classList.add('scale-95', 'opacity-0');
      modalContent.classList.remove('scale-100', 'opacity-100');
      setTimeout(() => {
        profilePictureModal.classList.add('hidden');
        // Reset preview
        if (imagePreview) imagePreview.classList.add('hidden');
        selectedFile = null;
        
        // Clear any temporary file URLs to prevent memory leaks
        if (previewImage && previewImage.src && previewImage.src.startsWith('blob:')) {
          URL.revokeObjectURL(previewImage.src);
        }
      }, 300);
    };
    
    if (closeProfileModal) {
      closeProfileModal.addEventListener('click', closeModal);
      console.log('✅ Close button listener added');
    }
    
    if (cancelProfilePicture) {
      cancelProfilePicture.addEventListener('click', closeModal);
      console.log('✅ Cancel button listener added');
    }
    
      // Close modal when clicking outside
    if (profilePictureModal) {
      profilePictureModal.addEventListener('click', (e) => {
        if (e.target === profilePictureModal) {
          closeModal();
        }
      });
      console.log('✅ Click outside listener added');
    }
    
      // File input change
    if (profilePictureInput) {
      profilePictureInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
          handleFile(file);
        }
      });
      console.log('✅ File input listener added');
    }
    
      // Drag and drop functionality
    if (dropZone) {
      dropZone.addEventListener('click', () => {
        if (profilePictureInput) profilePictureInput.click();
      });
      
      dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
      });
      
      dropZone.addEventListener('dragleave', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
      });
      
      dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
          handleFile(files[0]);
        }
      });
      console.log('✅ Drag and drop listeners added');
    }
  
  // Handle file selection
  function handleFile(file) {
    selectedFile = file;
    
    // Validate file size (5MB limit)
    if (file.size > 5 * 1024 * 1024) {
        alert('File size must be less than 5MB!');
      return;
    }
    
    // Validate file type
    const validTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'];
    if (!validTypes.includes(file.type)) {
        alert('Please select a valid image file (PNG, JPG, GIF)!');
      return;
    }
    
      // Show preview
      if (imagePreview && previewImage) {
      const imageUrl = URL.createObjectURL(file);
        previewImage.src = imageUrl;
        imagePreview.classList.remove('hidden');
        console.log('✅ File preview updated');
      }
    }
    
    // Save profile picture changes
    if (saveProfilePicture) {
      saveProfilePicture.addEventListener('click', () => {
        if (!selectedFile) {
          alert('Please select an image first!');
          return;
        }
        
        // Show loading state
        const originalText = saveProfilePicture.innerHTML;
        saveProfilePicture.innerHTML = `
          <svg class="animate-spin w-4 h-4 inline mr-2" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Saving...
        `;
        saveProfilePicture.disabled = true;
        
        // Process and save the profile picture
        fileToBase64(selectedFile).then(async (base64Data) => {
          try {
            // First, upload to server
            const userData = localStorage.getItem('user');
            const user = userData ? JSON.parse(userData) : {};
            const employeeId = user.employeeId || user.username || 'MPMEC-001';
            
            // Create FormData for upload
            const formData = new FormData();
            formData.append('profilePicture', selectedFile);
            formData.append('userId', employeeId);
            
            console.log('🚀 Uploading profile picture to server for user:', employeeId);
            const uploadResponse = await fetch('http://localhost:3000/api/profile/upload-picture', {
              method: 'POST',
              body: formData
            });
            
            if (uploadResponse.ok) {
              const result = await uploadResponse.json();
              if (result.success && result.profilePictureUrl) {
                console.log('✅ Profile picture uploaded to server:', result.profilePictureUrl);
                
                // Update main profile picture with server URL
                const mainProfilePic = document.getElementById('mainProfilePicture');
                if (mainProfilePic) { mainProfilePic.src = result.profilePictureUrl; }
                
                // Update modal profile picture with server URL
                const modalProfilePic = document.getElementById('currentProfilePic');
                if (modalProfilePic) { modalProfilePic.src = result.profilePictureUrl; }
                
                // Save server URL to localStorage for persistence
                saveProfilePictureToStorage(result.profilePictureUrl);
                
                                 // Dispatch custom event for global manager to handle
                 const profileUpdateEvent = new CustomEvent('mpmecProfilePictureUpdated', {
                   detail: { profilePictureUrl: result.profilePictureUrl }
                 });
                 window.dispatchEvent(profileUpdateEvent);
                 
                 // Also directly call the global manager to ensure immediate update
                 if (window.mpmecProfilePictureManager) {
                   console.log('🎯 Directly calling MPMEC global manager...');
                   window.mpmecProfilePictureManager.setProfilePicture(result.profilePictureUrl);
                 }
                
                // Restore button state
                saveProfilePicture.innerHTML = originalText;
                saveProfilePicture.disabled = false;
                
                alert('Profile picture updated successfully and saved to server!');
                closeModal();
                return;
              }
            }
            
            // If server upload fails, fallback to localStorage only
            console.log('⚠️ Server upload failed, falling back to localStorage only');
            throw new Error('Server upload failed');
            
          } catch (error) {
            console.error('❌ Server upload error, falling back to localStorage:', error);
            
            // Fallback: save to localStorage only
            const mainProfilePic = document.getElementById('mainProfilePicture');
            if (mainProfilePic) { mainProfilePic.src = base64Data; }
            
            const modalProfilePic = document.getElementById('currentProfilePic');
            if (modalProfilePic) { modalProfilePic.src = base64Data; }
            
            saveProfilePictureToStorage(base64Data);
            
                         const profileUpdateEvent = new CustomEvent('mpmecProfilePictureUpdated', {
               detail: { profilePictureUrl: base64Data }
             });
             window.dispatchEvent(profileUpdateEvent);
             
             // Also directly call the global manager to ensure immediate update
             if (window.mpmecProfilePictureManager) {
               console.log('🎯 Directly calling MPMEC global manager from localStorage fallback...');
               window.mpmecProfilePictureManager.setProfilePicture(base64Data);
             }
            
            // Restore button state
            saveProfilePicture.innerHTML = originalText;
            saveProfilePicture.disabled = false;
            
            alert('Profile picture updated locally (server upload failed). Please try again later.');
            closeModal();
          }
        }).catch(error => {
          console.error('❌ Error processing image:', error);
          alert('Error processing image. Please try again.');
          
          // Restore button state on error
          saveProfilePicture.innerHTML = originalText;
          saveProfilePicture.disabled = false;
        });
      });
      console.log('✅ Save button listener added');
    }
    
    // Reset profile picture button
    const resetProfilePictureBtn = document.getElementById('resetProfilePicture');
    if (resetProfilePictureBtn) {
      resetProfilePictureBtn.addEventListener('click', () => {
        resetProfilePicture().then(() => {
          console.log('✅ Profile picture reset completed');
        }).catch(error => {
          console.error('❌ Error during profile picture reset:', error);
        });
      });
      console.log('✅ Reset button listener added');
    }
    

    

    
    // Load saved profile picture on page load
    loadProfilePictureFromStorage().then(() => {
      console.log('✅ Profile picture loading completed');
      
      // Also sync the modal profile picture after loading
      setTimeout(() => {
        syncModalCurrentProfilePicture();
      }, 200);
    }).catch(error => {
      console.error('❌ Error during profile picture loading:', error);
    });
    
         // Additional sync after a longer delay to ensure everything is loaded
     setTimeout(() => {
       syncModalCurrentProfilePicture();
     }, 1000);
     
     // Periodic check to ensure modal profile picture stays updated
     setInterval(() => {
       // Only sync if modal is visible
       const profilePictureModal = document.getElementById('profilePictureModal');
       if (profilePictureModal && !profilePictureModal.classList.contains('hidden')) {
         const currentProfilePic = document.getElementById('currentProfilePic');
         if (currentProfilePic && currentProfilePic.src.includes('data:image/svg+xml')) {
           // If showing placeholder, try to refresh
           console.log('🔄 Modal showing placeholder, attempting refresh...');
           syncModalCurrentProfilePicture();
         }
       }
     }, 2000); // Check every 2 seconds
     
     console.log('✅ MPMEC Committee Profile module initialization complete!');
     
     // Modal functionality for Edit Profile, Change Password, and Security Settings
     initializeModals();
   });
   
   // Modal initialization function
   function initializeModals() {
     console.log('🚀 Initializing MPMEC modals...');
     
     // Edit Profile Modal
     const editProfileModal = document.getElementById('editProfileModal');
     const editProfileModalContent = document.getElementById('editProfileModalContent');
     const closeEditProfileModal = document.getElementById('closeEditProfileModal');
     const cancelEditProfile = document.getElementById('cancelEditProfile');
     const editProfileForm = document.getElementById('editProfileForm');
     
     // Change Password Modal
     const changePasswordModal = document.getElementById('changePasswordModal');
     const changePasswordModalContent = document.getElementById('changePasswordModalContent');
     const closeChangePasswordModal = document.getElementById('closeChangePasswordModal');
     const cancelChangePassword = document.getElementById('cancelChangePassword');
     const changePasswordForm = document.getElementById('changePasswordForm');
     
     // Security Settings Modal
     const securitySettingsModal = document.getElementById('securitySettingsModal');
     const securitySettingsModalContent = document.getElementById('securitySettingsModalContent');
     const closeSecuritySettingsModal = document.getElementById('closeSecuritySettingsModal');
     const cancelSecuritySettings = document.getElementById('cancelSecuritySettings');
     const saveSecuritySettings = document.getElementById('saveSecuritySettings');
     
     // Modal open/close functions - make them globally accessible
     window.openModal = function(modalId) {
       const modal = document.getElementById(modalId);
       const content = document.getElementById(modalId + 'Content');
       
       if (modal && content) {
         modal.classList.remove('hidden');
         setTimeout(() => {
           content.classList.remove('scale-95', 'opacity-0');
           content.classList.add('scale-100', 'opacity-100');
         }, 10);
       }
     };
     
     window.closeModal = function(modalId) {
       const modal = document.getElementById(modalId);
       const content = document.getElementById(modalId + 'Content');
       
       if (modal && content) {
         content.classList.add('scale-95', 'opacity-0');
         content.classList.remove('scale-100', 'opacity-100');
         setTimeout(() => {
           modal.classList.add('hidden');
         }, 300);
       }
     };
     
     // Edit Profile Modal Event Listeners
     if (closeEditProfileModal) {
       closeEditProfileModal.addEventListener('click', () => window.closeModal('editProfileModal'));
     }
     
     if (cancelEditProfile) {
       cancelEditProfile.addEventListener('click', () => window.closeModal('editProfileModal'));
     }
     
     if (editProfileForm) {
       editProfileForm.addEventListener('submit', (e) => {
         e.preventDefault();
         console.log('📝 Edit Profile form submitted');
         // Add form submission logic here
         window.closeModal('editProfileModal');
       });
     }
     
     // Change Password Modal Event Listeners
     if (closeChangePasswordModal) {
       closeChangePasswordModal.addEventListener('click', () => window.closeModal('changePasswordModal'));
     }
     
     if (cancelChangePassword) {
       cancelChangePassword.addEventListener('click', () => window.closeModal('changePasswordModal'));
     }
     
     if (changePasswordForm) {
       changePasswordForm.addEventListener('submit', (e) => {
         e.preventDefault();
         console.log('🔐 Change Password form submitted');
         // Add form submission logic here
         window.closeModal('changePasswordModal');
       });
     }
     
     // Security Settings Modal Event Listeners
     if (closeSecuritySettingsModal) {
       closeSecuritySettingsModal.addEventListener('click', () => window.closeModal('securitySettingsModal'));
     }
     
     if (cancelSecuritySettings) {
       cancelSecuritySettings.addEventListener('click', () => window.closeModal('securitySettingsModal'));
     }
     
     if (saveSecuritySettings) {
       saveSecuritySettings.addEventListener('click', () => {
         console.log('🛡️ Security Settings saved');
         // Add save logic here
         window.closeModal('securitySettingsModal');
       });
     }
     
     // Click outside to close modals
     [editProfileModal, changePasswordModal, securitySettingsModal].forEach(modal => {
       if (modal) {
         modal.addEventListener('click', (e) => {
           if (e.target === modal) {
             const modalId = modal.id;
             window.closeModal(modalId);
           }
         });
       }
     });
     
     console.log('✅ MPMEC modals initialized successfully!');
   }
   
   // Global functions for Quick Actions buttons
   window.editProfile = function() {
     console.log('📝 Edit Profile clicked');
     window.openModal('editProfileModal');
   };
   
   window.changePassword = function() {
     console.log('🔐 Change Password clicked');
     window.openModal('changePasswordModal');
   };
   
   window.securitySettings = function() {
     console.log('🛡️ Security Settings clicked');
     window.openModal('securitySettingsModal');
   };
</script>

<style>
  /* Enhanced Profile Card with Shimmer Effect */
  .profile-card {
    @apply bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 ease-out hover:shadow-2xl hover:border-blue-300 hover:-translate-y-2;
    position: relative;
    overflow: hidden;
  }
  
  .profile-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.6s ease-out;
    z-index: 1;
  }
  
  .profile-card:hover::before {
    left: 100%;
  }
  
  .profile-card:hover {
    @apply transform scale-[1.02];
  }
  
  .profile-card > * {
    position: relative;
    z-index: 2;
  }
  
  /* Enhanced Avatar */
  .avatar-container {
    position: relative;
    transition: all 0.3s ease;
  }
  
  .avatar-container:hover {
    transform: scale(1.05);
  }
  
  .avatar-container::after {
    content: '';
    position: absolute;
    inset: -4px;
    background: linear-gradient(45deg, #3b82f6, #2563eb, #1d4ed8, #3b82f6);
    border-radius: 1rem;
    z-index: -1;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .avatar-container:hover::after {
    opacity: 1;
  }
  
  /* Profile Picture Border */
  .profile-picture-border {
    border: 4px solid #3b82f6 !important;
  }
  
  /* Enhanced Content Hover Effects */
  .info-field {
    @apply bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl text-gray-800 font-medium transition-all duration-300 hover:shadow-lg hover:border-blue-400 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .info-field::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .info-field:hover::before {
    left: 100%;
  }
  
  .info-field:hover {
    @apply transform scale-105;
  }
  
  .info-field > * {
    position: relative;
    z-index: 2;
  }
  
  .stat-card-enhanced {
    @apply bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl transition-all duration-300 hover:shadow-lg hover:border-blue-400 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .stat-card-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .stat-card-enhanced:hover::before {
    left: 100%;
  }
  
  .stat-card-enhanced:hover {
    @apply transform scale-105;
  }
  
  .stat-card-enhanced > * {
    position: relative;
    z-index: 2;
  }
  
  .permission-item-enhanced {
    @apply flex items-center p-3 bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl border border-blue-200 transition-all duration-300 hover:shadow-lg hover:border-blue-400 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .permission-item-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .permission-item-enhanced:hover::before {
    left: 100%;
  }
  
  .permission-item-enhanced:hover {
    @apply transform scale-105;
  }
  
  .permission-item-enhanced > * {
    position: relative;
    z-index: 2;
  }
  
  .quick-action-btn-enhanced {
    @apply w-full bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-4 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 border border-blue-600/20 text-sm;
    position: relative;
    overflow: hidden;
  }
  
  .quick-action-btn-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .quick-action-btn-enhanced:hover::before {
    left: 100%;
  }
  
  .quick-action-btn-enhanced:hover {
    @apply transform scale-105 -translate-y-1;
  }
  
  .quick-action-btn-enhanced > * {
    position: relative;
    z-index: 2;
  }
  
  .status-item-enhanced {
    @apply flex items-center justify-between py-2 px-3 bg-gradient-to-br from-blue-50 to-blue-100 border border-blue-200 rounded-xl transition-all duration-300 hover:shadow-lg hover:border-blue-400 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .status-item-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .status-item-enhanced:hover::before {
    left: 100%;
  }
  
  .status-item-enhanced:hover {
    @apply transform scale-105;
  }
  
  .status-item-enhanced > * {
    position: relative;
    z-index: 2;
  }
  
  .btn-primary {
    @apply bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 border border-blue-600/20;
    position: relative;
    overflow: hidden;
  }
  
  .btn-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .btn-primary:hover::before {
    left: 100%;
  }
  
  .btn-primary > * {
    position: relative;
    z-index: 2;
  }
  
  .status-active {
    @apply bg-gradient-to-r from-green-600 to-emerald-700 text-white px-4 py-2 rounded-full text-xs font-semibold shadow-lg;
    position: relative;
    overflow: hidden;
  }
  
  .status-active::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s ease-out;
    z-index: 1;
  }
  
  .status-active:hover::before {
    left: 100%;
  }
  
  .status-active > * {
    position: relative;
    z-index: 2;
  }
  
  .stat-card {
    @apply bg-gradient-to-br from-blue-50 to-white border border-blue-200 rounded-xl p-4 transition-all duration-300 hover:shadow-lg hover:border-blue-400 hover:-translate-y-1;
    position: relative;
    overflow: hidden;
  }
  
  .stat-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .stat-card:hover::before {
    left: 100%;
  }
  
  .stat-card:hover {
    @apply transform scale-105;
  }
  
  .stat-card > * {
    position: relative;
    z-index: 2;
  }
  
  .permission-item {
    @apply flex items-center p-4 bg-gradient-to-r from-blue-50 to-white rounded-xl border border-blue-200 hover:border-blue-400 hover:shadow-lg transition-all duration-300;
    position: relative;
    overflow: hidden;
  }
  
  .permission-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .permission-item:hover::before {
    left: 100%;
  }
  
  .permission-item:hover {
    @apply transform translate-x-2;
  }
  
  .permission-item > * {
    position: relative;
    z-index: 2;
  }
  
  .icon-container {
    @apply w-14 h-14 rounded-xl flex items-center justify-center transition-all duration-300;
    position: relative;
    overflow: hidden;
  }
  
  .icon-container-small {
    @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
    position: relative;
    overflow: hidden;
  }
  
  .icon-container-small::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .icon-container-small:hover::before {
    left: 100%;
  }
  
  .icon-container-small:hover {
    @apply transform scale-110 rotate-3;
  }
  
  .icon-container-small > * {
    position: relative;
    z-index: 2;
  }
  
  .icon-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .icon-container:hover::before {
    left: 100%;
  }
  
  .icon-container:hover {
    @apply transform scale-110 rotate-3;
  }
  
  .icon-container > * {
    position: relative;
    z-index: 2;
  }
  
  /* Enhanced animations and transitions */
  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }
  
  .group:hover .group-hover\:rotate-12 {
    transform: rotate(12deg);
  }
  
  /* Smooth transitions for all interactive elements */
  * {
    transition-property: all;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }
  
  /* Enhanced hover effects */
  .hover\:scale-105:hover {
    transform: scale(1.05);
  }
  
  .hover\:shadow-xl:hover {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
  }
  
  /* Custom scrollbar */
  .custom-scrollbar::-webkit-scrollbar {
    width: 8px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(59, 130, 246, 0.1);
    border-radius: 4px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(59, 130, 246, 0.5);
    border-radius: 4px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(59, 130, 246, 0.7);
  }
  
  /* Profile picture edit overlay enhancements */
  #profilePictureContainer {
    transition: all 0.3s ease;
  }
  
  #profilePictureContainer:hover {
    transform: scale(1.05);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
  }
  
  /* Enhanced button animations */
  .btn-enhanced {
    position: relative;
    overflow: hidden;
  }
  
  .btn-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }
  
  .btn-enhanced:hover::before {
    left: 100%;
  }
   
   /* Button styles for profile picture modal */
   .btn-primary {
     @apply bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 border border-blue-600/20;
   }
   
  .btn-secondary {
    @apply bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-blue-500/25 border border-blue-600/20;
    position: relative;
    overflow: hidden;
  }
   
   .btn-secondary::before {
     content: '';
     position: absolute;
     top: 0;
     left: -100%;
     width: 100%;
     height: 100%;
     background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
     transition: left 0.5s ease-out;
     z-index: 1;
   }
   
   .btn-secondary:hover::before {
     left: 100%;
   }
   
   .btn-secondary > * {
     position: relative;
     z-index: 2;
   }
   
   /* Enhanced modal styling */
   #profilePictureModal {
     backdrop-filter: blur(8px);
   }
   
   #profilePictureModalContent {
     box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
   }
   
   #profilePictureModalContent:not(.scale-95) {
     transform: scale(1) !important;
     opacity: 1 !important;
   }
   
   /* Enhanced drop zone styling */
   #dropZone {
     transition: all 0.3s ease;
   }
   
   #dropZone:hover {
     transform: translateY(-2px);
     box-shadow: 0 10px 25px -5px rgba(59, 130, 246, 0.1);
   }
   
   /* Enhanced button hover effects */
   #saveProfilePicture:hover {
     transform: translateY(-2px);
     box-shadow: 0 20px 25px -5px rgba(59, 130, 246, 0.25);
   }
   
   #cancelProfilePicture:hover {
     transform: translateY(-2px);
     box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
   }
   
   /* Enhanced refresh button styling */
   #refreshCurrentPic:hover {
     transform: scale(1.1);
     background-color: rgb(219 234 254);
   }
   
   /* Enhanced modal animations */
   #profilePictureModal {
     transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
   }
   
   #profilePictureModalContent {
     transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
   }
   
     /* Enhanced drop zone interactions */
  #dropZone.dragover {
    border-color: rgb(59 130 246);
    background: linear-gradient(135deg, rgb(239 246 255) 0%, rgb(219 234 254) 100%);
    transform: scale(1.02);
  }
</style>

<script>
  // ✅ FIXED: Add JavaScript to fetch and populate actual user profile data
  import authService from '../../../../services/auth.js';

  document.addEventListener('DOMContentLoaded', async function() {
    console.log('🏠 Committee Profile: Loading user profile data...');

    // Check authentication
    if (!authService.redirectIfInvalidSession()) {
      return;
    }

    // Load user profile data
    await loadUserProfileData();
  });

  async function loadUserProfileData() {
    try {
      console.log('📋 Committee Profile: Fetching fresh user data from API...');

      // Get fresh user data from API
      const response = await fetch('http://localhost:3000/api/auth/profile', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`,
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });

      if (response.ok) {
        const responseData = await response.json();
        if (responseData.success && responseData.user) {
          const user = responseData.user;
          console.log('✅ Committee Profile: Fresh user data loaded:', user.fullName || user.name);

          // Update profile elements
          updateProfileElements(user);

          // Update localStorage with fresh data
          localStorage.setItem('user', JSON.stringify(user));
          
          // Also update the auth service's current user
          if (window.authService && typeof window.authService.currentUser !== 'undefined') {
            window.authService.currentUser = user;
          }
        } else {
          console.error('❌ Committee Profile: API returned invalid response');
          // Use fallback data
          const cachedUser = authService.getCurrentUser();
          if (cachedUser) updateProfileElements(cachedUser);
        }
      } else {
        console.error('❌ Committee Profile: API request failed:', response.status);
        // Use fallback data
        const cachedUser = authService.getCurrentUser();
        if (cachedUser) updateProfileElements(cachedUser);
      }
    } catch (error) {
      console.error('❌ Committee Profile: Error fetching user data:', error);
      // Use fallback data
      const cachedUser = authService.getCurrentUser();
      if (cachedUser) updateProfileElements(cachedUser);
    }
  }

  function updateProfileElements(user) {
    console.log('🎯 Committee Profile: Updating profile elements with user data:', user.fullName || user.name);

    // Update profile picture alt text
    const profileImg = document.getElementById('mainProfilePicture');
    if (profileImg) {
      profileImg.alt = user.fullName || user.name || 'MPMEC Member';
    }

    // Update user name
    const userNameEl = document.getElementById('userName');
    if (userNameEl) {
      userNameEl.textContent = user.fullName || user.name || 'MPMEC Member';
    }

    // Update user ID
    const userIdEl = document.getElementById('userId');
    if (userIdEl) {
      userIdEl.textContent = user.userId || 'N/A';
    }

    // Update email
    const userEmailEl = document.getElementById('userEmail');
    if (userEmailEl) {
      userEmailEl.textContent = user.email || 'N/A';
    }

    // Update contact number if element exists
    const contactEl = document.getElementById('userContact');
    if (contactEl) {
      contactEl.textContent = user.contactNumber || 'N/A';
    }

    // Update department if element exists
    const deptEl = document.getElementById('userDepartment');
    if (deptEl) {
      deptEl.textContent = user.department || 'N/A';
    }

    // Update birthdate if element exists
    const birthdateEl = document.getElementById('userBirthdate');
    if (birthdateEl) {
      const birthdate = user.birthdate ? new Date(user.birthdate).toLocaleDateString() : 'N/A';
      birthdateEl.textContent = birthdate;
    }

    // Update role display
    const roleElements = document.querySelectorAll('[data-role-display]');
    roleElements.forEach(el => {
      el.textContent = user.subRole || user.role || 'MPMEC Member';
    });

    // Update any other user-related elements
    const fullNameDisplays = document.querySelectorAll('[data-user-fullname]');
    fullNameDisplays.forEach(el => {
      el.textContent = user.fullName || user.name || 'MPMEC Member';
    });

    console.log('✅ Committee Profile: Profile elements updated successfully');
  }

  // Make functions globally available
  window.loadUserProfileData = loadUserProfileData;
  window.updateProfileElements = updateProfileElements;
</script> 