---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import LGUPMTLayout from '../../../../components/LGUPMTLayout.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let projects = [];
let milestones = [];
let timelineEvents = [];
let projectsByDepartment = {};
let compiledProjects = [];
let stats = {
  activeProjects: 0,
  completedProjects: 0,
  delayedProjects: 0,
  budgetUsed: '₱0',
  onTrackPercentage: 0,
  successRate: 0,
  behindSchedulePercentage: 0,
  budgetPercentage: 0,
  completionRate: 0,
  timelineAdherence: 0,
  budgetEfficiency: 0,
  physicalAccomplishment: 0
};
let loading = true;
let error = '';

// Try to fetch timeline data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch all projects for MPMEC
    const projectsRes = await fetch(`${API_URL}/projects`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        projects = data.projects.filter(p => p.submittedToSecretariat === true);
        
        // Debug: Log progress data for first project
        if (projects.length > 0) {
          const firstProject = projects[0];
          console.log('🔍 Progress data for first project:', {
            name: firstProject.name,
            overallProgress: firstProject.overallProgress,
            timelineProgress: firstProject.timelineProgress,
            budgetProgress: firstProject.budgetProgress,
            physicalProgress: firstProject.physicalProgress,
            workflowStatus: firstProject.workflowStatus,
            approvedBySecretariat: firstProject.approvedBySecretariat
          });
        }
        
        // Filter compiled projects (approved by Secretariat)
        compiledProjects = projects.filter(p => p.workflowStatus === 'compiled_for_secretariat' || p.workflowStatus === 'validated_by_secretariat' || p.workflowStatus === 'secretariat_approved');
        
        // Group projects by department
        projectsByDepartment = {};
        projects.forEach(project => {
          const deptName = project.implementingOfficeName || 'Unknown Department';
          if (!projectsByDepartment[deptName]) {
            projectsByDepartment[deptName] = [];
          }
          projectsByDepartment[deptName].push(project);
        });
        

        
        // Calculate statistics
        stats.activeProjects = projects.filter(p => p.status === 'ongoing').length;
        stats.completedProjects = projects.filter(p => p.status === 'complete').length;
        stats.delayedProjects = projects.filter(p => p.status === 'delayed').length;
        
        // Calculate budget used
        const totalBudget = projects.reduce((sum, p) => sum + (parseFloat(p.totalBudget) || 0), 0);
        const usedBudget = projects.reduce((sum, p) => {
          const budget = parseFloat(p.totalBudget) || 0;
          const progress = parseFloat(p.budgetProgress) || 0;
          return sum + (budget * progress / 100);
        }, 0);
        stats.budgetUsed = `₱${(usedBudget / 1000000).toFixed(1)}M`;
        
        // Calculate percentages
        const totalProjects = projects.length;
        if (totalProjects > 0) {
          stats.onTrackPercentage = Math.round((stats.activeProjects / totalProjects) * 100);
          stats.successRate = Math.round((stats.completedProjects / totalProjects) * 100);
          stats.behindSchedulePercentage = Math.round((stats.delayedProjects / totalProjects) * 100);
          stats.budgetPercentage = Math.round((usedBudget / totalBudget) * 100);
          
          // Calculate completion rate
          const avgProgress = projects.reduce((sum, p) => sum + (parseFloat(p.overallProgress) || 0), 0) / totalProjects;
          stats.completionRate = Math.round(avgProgress);
          
          // Calculate timeline adherence
          const avgTimelineProgress = projects.reduce((sum, p) => sum + (parseFloat(p.timelineProgress) || 0), 0) / totalProjects;
          stats.timelineAdherence = Math.round(avgTimelineProgress);
          
          // Calculate budget efficiency
          const avgBudgetProgress = projects.reduce((sum, p) => sum + (parseFloat(p.budgetProgress) || 0), 0) / totalProjects;
          stats.budgetEfficiency = Math.round(avgBudgetProgress);
          
          // Calculate physical accomplishment (only for compiled projects)
          if (compiledProjects.length > 0) {
            const avgPhysicalProgress = compiledProjects.reduce((sum, p) => sum + (parseFloat(p.physicalProgress) || 0), 0) / compiledProjects.length;
            stats.physicalAccomplishment = Math.round(avgPhysicalProgress);
          }
        }
      }
    }

    // Fetch milestones
    const milestonesRes = await fetch(`${API_URL}/projects/all-milestones`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (milestonesRes.ok) {
      const data = await milestonesRes.json();
      if (data.success) {
        milestones = data.milestones || [];
      }
    }

    // Generate timeline events from projects and milestones
    timelineEvents = generateTimelineEvents(projects, milestones);
  }
} catch (err) {
  console.error('Error fetching timeline data:', err);
  error = 'Failed to fetch timeline data.';
}

loading = false;

// Helper function to generate timeline events
function generateTimelineEvents(projects, milestones) {
  const events = [];
  
  // Add project events
  projects.forEach(project => {
    if (project.submittedToSecretariatDate) {
      events.push({
        date: project.submittedToSecretariatDate,
        title: 'Project Submitted to Secretariat',
        description: `Project "${project.name}" was submitted for Secretariat review`,
        status: 'completed',
        project: project.name,
        type: 'submission'
      });
    }
    
    if (project.secretariatApprovalDate) {
      events.push({
        date: project.secretariatApprovalDate,
        title: 'Project Approved by Secretariat',
        description: `Project "${project.name}" was approved by the Secretariat`,
        status: 'completed',
        project: project.name,
        type: 'approval'
      });
    }
    
    if (project.startDate) {
      events.push({
        date: project.startDate,
        title: 'Project Started',
        description: `Implementation of "${project.name}" began`,
        status: project.status === 'ongoing' ? 'active' : project.status === 'complete' ? 'completed' : 'pending',
        project: project.name,
        type: 'start'
      });
    }
  });
  
  // Add milestone events
  milestones.forEach(milestone => {
    if (milestone.completedAt) {
      events.push({
        date: milestone.completedAt,
        title: `Milestone: ${milestone.title}`,
        description: milestone.description || `Milestone "${milestone.title}" was completed`,
        status: 'completed',
        project: milestone.projectName || 'Unknown Project',
        type: 'milestone'
      });
    }
  });
  
  // Sort events by date (newest first)
  return events.sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 10);
}
---

<Layout title="Progress & Timeline | MPMEC Dashboard">
  <LGUPMTLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Progress & Timeline</h1>
          <p class="text-gray-600">Project progress tracking and timeline visualization</p>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="refreshProgressData()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Refresh Progress
          </button>
          <button onclick="addMilestone()" class="px-4 py-2 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Add Milestone
          </button>
          <button onclick="exportTimeline()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Export
          </button>
        </div>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#FE5353]"></div>
          <span class="ml-3 text-gray-600">Loading timeline data...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12">
          <p class="text-red-600 mb-4">{error}</p>
          <button onclick="loadTimelineData()" class="px-4 py-2 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-all">
            Try Again
          </button>
        </div>
      ) : (
        <>
          <!-- Progress Overview Cards -->
          <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-gray-600">Active Projects</p>
                  <p class="text-2xl font-bold text-blue-600" id="activeProjects">{stats.activeProjects}</p>
                </div>
                <div class="bg-blue-100 p-3 rounded-xl">
                  <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                </div>
              </div>
              <div class="mt-4">
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div class="bg-blue-600 h-2 rounded-full" style={`width: ${stats.onTrackPercentage}%`}></div>
                </div>
                <p class="text-xs text-gray-500 mt-1">{stats.onTrackPercentage}% on track</p>
              </div>
            </div>

            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-gray-600">Completed</p>
                  <p class="text-2xl font-bold text-green-600" id="completedProjects">{stats.completedProjects}</p>
                </div>
                <div class="bg-green-100 p-3 rounded-xl">
                  <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
              <div class="mt-4">
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div class="bg-green-600 h-2 rounded-full" style={`width: ${stats.successRate}%`}></div>
                </div>
                <p class="text-xs text-gray-500 mt-1">{stats.successRate}% success rate</p>
              </div>
            </div>

            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-gray-600">Delayed</p>
                  <p class="text-2xl font-bold text-red-600" id="delayedProjects">{stats.delayedProjects}</p>
                </div>
                <div class="bg-red-100 p-3 rounded-xl">
                  <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
              <div class="mt-4">
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div class="bg-red-600 h-2 rounded-full" style={`width: ${stats.behindSchedulePercentage}%`}></div>
                </div>
                <p class="text-xs text-gray-500 mt-1">{stats.behindSchedulePercentage}% behind schedule</p>
              </div>
            </div>

            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm font-medium text-gray-600">Budget Used</p>
                  <p class="text-2xl font-bold text-purple-600" id="budgetUsed">{stats.budgetUsed}</p>
                </div>
                <div class="bg-purple-100 p-3 rounded-xl">
                  <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                  </svg>
                </div>
              </div>
              <div class="mt-4">
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div class="bg-purple-600 h-2 rounded-full" style={`width: ${stats.budgetPercentage}%`}></div>
                </div>
                <p class="text-xs text-gray-500 mt-1">{stats.budgetPercentage}% of total budget</p>
              </div>
            </div>
          </div>

          <!-- Department Timeline Overview -->
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-xl font-semibold text-gray-800">Department Timeline Overview</h2>
              <div class="flex items-center gap-2">
                <button onclick="expandAllDepartments()" class="px-3 py-2 bg-blue-100 text-blue-700 rounded-lg hover:bg-blue-200 transition-colors text-sm">
                  Expand All
                </button>
                <button onclick="refreshTimeline()" class="px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                  </svg>
                </button>
              </div>
            </div>
            
            <div class="space-y-6" id="departmentTimelineContainer">
              {Object.keys(projectsByDepartment).length === 0 ? (
                <div class="text-center py-8">
                  <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <p class="text-gray-500">No projects available</p>
                </div>
              ) : (
                Object.entries(projectsByDepartment).map(([deptName, deptProjects], index) => {
                  const totalProjects = deptProjects.length;
                  const activeProjects = deptProjects.filter(p => p.status === 'ongoing').length;
                  const completedProjects = deptProjects.filter(p => p.status === 'complete').length;
                  const avgProgress = deptProjects.reduce((sum, p) => sum + (parseFloat(p.overallProgress) || 0), 0) / totalProjects;
                  
                  return (
                    <div class="border border-gray-200 rounded-lg overflow-hidden">
                      <div class="bg-gray-50 px-6 py-4 border-b border-gray-200">
                        <div class="flex items-center justify-between">
                          <div class="flex items-center gap-3">
                            <h3 class="text-lg font-semibold text-gray-800">{deptName}</h3>
                            <span class="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded-full">
                              {totalProjects} project{totalProjects !== 1 ? 's' : ''}
                            </span>
                          </div>
                          <div class="flex items-center gap-4">
                            <div class="text-center">
                              <p class="text-sm text-gray-600">Active</p>
                              <p class="text-lg font-bold text-blue-600">{activeProjects}</p>
                            </div>
                            <div class="text-center">
                              <p class="text-sm text-gray-600">Completed</p>
                              <p class="text-lg font-bold text-green-600">{completedProjects}</p>
                            </div>
                            <div class="text-center">
                              <p class="text-sm text-gray-600">Avg Progress</p>
                              <p class="text-lg font-bold text-purple-600">{Math.round(avgProgress)}%</p>
                            </div>
                            <button class="toggle-dept-btn text-gray-500 hover:text-gray-700 transition-colors" data-dept-index="{index}">
                              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                              </svg>
                            </button>
                          </div>
                        </div>
                      </div>
                      
                      <div class="department-projects hidden" data-dept-index="{index}">
                        <div class="p-6 space-y-4">
                          {deptProjects.length > 0 ? deptProjects.map(project => {
                            const progress = parseFloat(project.overallProgress) || 0;
                            const isCompiled = project.workflowStatus === 'compiled_for_secretariat' || project.workflowStatus === 'validated_by_secretariat' || project.workflowStatus === 'secretariat_approved';
                            console.log('Rendering project:', project.name, 'isCompiled:', isCompiled, 'workflowStatus:', project.workflowStatus);
                            
                            return (
                              <div class="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
                                <div class="flex items-center justify-between mb-3">
                                  <div class="flex-1">
                                    <h4 class="font-semibold text-gray-800 mb-1">{project.name}</h4>
                                    <p class="text-sm text-gray-600">{project.description}</p>
                                  </div>
                                  <div class="flex items-center gap-2">
                                    <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                                      project.status === 'ongoing' ? 'bg-blue-100 text-blue-800' :
                                      project.status === 'complete' ? 'bg-green-100 text-green-800' :
                                      'bg-red-100 text-red-800'
                                    }`}>
                                      {project.status}
                                    </span>
                                    {isCompiled && (
                                      <span class="px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">
                                        Compiled
                                      </span>
                                    )}
                                  </div>
                                </div>
                                
                                <!-- Detailed Progress Metrics -->
                                <div class="grid grid-cols-3 gap-3 mb-4">
                                  <!-- Timeline Progress -->
                                  <div class="text-center">
                                    <div class="relative w-12 h-12 mx-auto mb-2">
                                      <svg class="w-12 h-12 transform -rotate-90">
                                        <circle
                                          cx="24"
                                          cy="24"
                                          r="20"
                                          stroke="#e5e7eb"
                                          stroke-width="3"
                                          fill="transparent"
                                        />
                                        <circle
                                          cx="24"
                                          cy="24"
                                          r="20"
                                          stroke="#3b82f6"
                                          stroke-width="3"
                                          fill="transparent"
                                          stroke-dasharray={`${2 * Math.PI * 20}`}
                                          stroke-dashoffset={`${2 * Math.PI * 20 * (1 - (parseFloat(project.timelineProgress) || 0) / 100)}`}
                                        />
                                      </svg>
                                      <div class="absolute inset-0 flex items-center justify-center">
                                        <span class="text-xs font-bold text-gray-800">{(parseFloat(project.timelineProgress) || 0).toFixed(1)}%</span>
                                      </div>
                                    </div>
                                    <p class="text-xs text-gray-600">Timeline</p>
                                  </div>

                                  <!-- Budget Progress -->
                                  <div class="text-center">
                                    <div class="relative w-12 h-12 mx-auto mb-2">
                                      <svg class="w-12 h-12 transform -rotate-90">
                                        <circle
                                          cx="24"
                                          cy="24"
                                          r="20"
                                          stroke="#e5e7eb"
                                          stroke-width="3"
                                          fill="transparent"
                                        />
                                        <circle
                                          cx="24"
                                          cy="24"
                                          r="20"
                                          stroke="#10b981"
                                          stroke-width="3"
                                          fill="transparent"
                                          stroke-dasharray={`${2 * Math.PI * 20}`}
                                          stroke-dashoffset={`${2 * Math.PI * 20 * (1 - (parseFloat(project.budgetProgress) || 0) / 100)}`}
                                        />
                                      </svg>
                                      <div class="absolute inset-0 flex items-center justify-center">
                                        <span class="text-xs font-bold text-gray-800">{(parseFloat(project.budgetProgress) || 0).toFixed(1)}%</span>
                                      </div>
                                    </div>
                                    <p class="text-xs text-gray-600">Budget</p>
                                  </div>

                                  <!-- Physical Progress -->
                                  <div class="text-center">
                                    <div class="relative w-12 h-12 mx-auto mb-2">
                                      <svg class="w-12 h-12 transform -rotate-90">
                                        <circle
                                          cx="24"
                                          cy="24"
                                          r="20"
                                          stroke="#e5e7eb"
                                          stroke-width="3"
                                          fill="transparent"
                                        />
                                        <circle
                                          cx="24"
                                          cy="24"
                                          r="20"
                                          stroke="#8b5cf6"
                                          stroke-width="3"
                                          fill="transparent"
                                          stroke-dasharray={`${2 * Math.PI * 20}`}
                                          stroke-dashoffset={`${2 * Math.PI * 20 * (1 - (parseFloat(project.physicalProgress) || 0) / 100)}`}
                                        />
                                      </svg>
                                      <div class="absolute inset-0 flex items-center justify-center">
                                        <span class="text-xs font-bold text-gray-800">{(parseFloat(project.physicalProgress) || 0).toFixed(1)}%</span>
                                      </div>
                                    </div>
                                    <p class="text-xs text-gray-600">Physical</p>
                                  </div>
                                </div>

                                <!-- Overall Progress Ring -->
                                <div class="flex items-center justify-center mb-4">
                                  <div class="relative w-16 h-16">
                                    <svg class="w-16 h-16 progress-ring">
                                      <circle
                                        cx="32"
                                        cy="32"
                                        r="28"
                                        stroke="#e5e7eb"
                                        stroke-width="4"
                                        fill="transparent"
                                      />
                                      <circle
                                        cx="32"
                                        cy="32"
                                        r="28"
                                        stroke={progress > 50 ? '#10b981' : progress > 25 ? '#f59e0b' : '#ef4444'}
                                        stroke-width="4"
                                        fill="transparent"
                                        stroke-dasharray={`${2 * Math.PI * 28}`}
                                        stroke-dashoffset={`${2 * Math.PI * 28 * (1 - progress / 100)}`}
                                        transform="rotate(-90 32 32)"
                                      />
                                    </svg>
                                    <div class="absolute inset-0 flex items-center justify-center">
                                      <span class="text-sm font-bold text-gray-800">{Math.round(progress)}%</span>
                                    </div>
                                  </div>
                                </div>
                                
                                <!-- Horizontal Timeline (only for compiled projects) -->
                                {isCompiled && project.startDate && project.endDate && (
                                  <div class="mt-4">
                                    <div class="text-sm font-medium text-gray-700 mb-2">Project Timeline</div>
                                    <div class="timeline-container h-8 bg-gray-100 rounded-lg relative overflow-hidden" 
                                         data-project-id="{project.id}" 
                                         data-start-date="{project.startDate}" 
                                         data-end-date="{project.endDate}">
                                      <div class="timeline-track absolute inset-0 bg-gradient-to-r from-gray-200 to-gray-300"></div>
                                      <div class="timeline-grid absolute inset-0 flex">
                                        {Array.from({length: 12}, (_, i) => (
                                          <div class="timeline-grid-line flex-1 border-r border-dashed border-gray-400"></div>
                                        ))}
                                      </div>
                                      <div class="timeline-milestones absolute inset-0"></div>
                                    </div>
                                    <div class="text-xs text-gray-500 mt-1">
                                      {new Date(project.startDate).toLocaleDateString()} - {new Date(project.endDate).toLocaleDateString()}
                                    </div>
                                  </div>
                                )}
                                
                                {!isCompiled && (
                                  <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                                    <div class="flex items-center gap-2">
                                      <svg class="w-4 h-4 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                      </svg>
                                      <span class="text-sm text-yellow-800">Timeline will be available after Secretariat compilation approval</span>
                                    </div>
                                  </div>
                                )}
                                
                                <!-- Project Details Summary -->
                                <div class="mt-4 p-3 bg-gray-50 rounded-lg">
                                  <div class="grid grid-cols-2 gap-4 text-sm">
                                    <div>
                                      <span class="font-medium text-gray-700">Project Code:</span>
                                      <p class="text-gray-600">{project.projectCode}</p>
                                    </div>
                                    <div>
                                      <span class="font-medium text-gray-700">Location:</span>
                                      <p class="text-gray-600">{project.location}</p>
                                    </div>
                                    <div>
                                      <span class="font-medium text-gray-700">Category:</span>
                                      <p class="text-gray-600 capitalize">{project.category}</p>
                                    </div>
                                    <div>
                                      <span class="font-medium text-gray-700">Budget:</span>
                                      <p class="text-gray-600">₱{(parseFloat(project.totalBudget) / 1000000).toFixed(1)}M</p>
                                    </div>
                                    <div>
                                      <span class="font-medium text-gray-700">Start Date:</span>
                                      <p class="text-gray-600">{project.startDate ? new Date(project.startDate).toLocaleDateString() : 'Not set'}</p>
                                    </div>
                                    <div>
                                      <span class="font-medium text-gray-700">End Date:</span>
                                      <p class="text-gray-600">{project.endDate ? new Date(project.endDate).toLocaleDateString() : 'Not set'}</p>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            );
                          }) : (
                            <div class="text-center py-4">
                              <p class="text-gray-500">No projects found in this department</p>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })
              )}
            </div>
          </div>

          <!-- Project Progress Details -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
            <!-- Recent Milestones -->
            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
              <div class="flex items-center justify-between mb-6">
                <h3 class="text-lg font-semibold text-gray-800">Recent Milestones</h3>
                <a href="#" class="text-[#FE5353] hover:text-[#E54545] text-sm font-medium">View All</a>
              </div>
              <div class="space-y-4" id="recentMilestones">
                {milestones.filter(m => m.completedAt).slice(0, 3).map(milestone => {
                  const completedDate = new Date(milestone.completedAt);
                  const daysAgo = Math.floor((new Date() - completedDate) / (1000 * 60 * 60 * 24));
                  
                  return (
                    <div class="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
                      <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                      <div class="flex-1">
                        <p class="text-sm font-medium text-gray-800">{milestone.title}</p>
                        <p class="text-xs text-gray-500">{milestone.projectName || 'Unknown Project'}</p>
                      </div>
                      <span class="text-xs text-gray-400">{daysAgo === 0 ? 'Today' : `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`}</span>
                    </div>
                  );
                })}
                {milestones.filter(m => m.completedAt).length === 0 && (
                  <div class="text-center py-4">
                    <p class="text-gray-500 text-sm">No recent milestones</p>
                  </div>
                )}
              </div>
            </div>

            <!-- Upcoming Deadlines -->
            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
              <div class="flex items-center justify-between mb-6">
                <h3 class="text-lg font-semibold text-gray-800">Upcoming Deadlines</h3>
                <a href="#" class="text-[#FE5353] hover:text-[#E54545] text-sm font-medium">View All</a>
              </div>
              <div class="space-y-4" id="upcomingDeadlines">
                {milestones.filter(m => !m.completedAt && m.dueDate).slice(0, 3).map(milestone => {
                  const dueDate = new Date(milestone.dueDate);
                  const daysUntil = Math.floor((dueDate - new Date()) / (1000 * 60 * 60 * 24));
                  const isOverdue = daysUntil < 0;
                  
                  return (
                    <div class={`flex items-center gap-3 p-3 rounded-lg ${isOverdue ? 'bg-red-50' : 'bg-yellow-50'}`}>
                      <div class={`w-2 h-2 rounded-full ${isOverdue ? 'bg-red-500' : 'bg-yellow-500'}`}></div>
                      <div class="flex-1">
                        <p class="text-sm font-medium text-gray-800">{milestone.title}</p>
                        <p class="text-xs text-gray-500">{milestone.projectName || 'Unknown Project'}</p>
                      </div>
                      <span class={`text-xs ${isOverdue ? 'text-red-400' : 'text-gray-400'}`}>
                        {isOverdue ? `${Math.abs(daysUntil)} day${Math.abs(daysUntil) > 1 ? 's' : ''} overdue` : `${daysUntil} day${daysUntil > 1 ? 's' : ''}`}
                      </span>
                    </div>
                  );
                })}
                {milestones.filter(m => !m.completedAt && m.dueDate).length === 0 && (
                  <div class="text-center py-4">
                    <p class="text-gray-500 text-sm">No upcoming deadlines</p>
                  </div>
                )}
              </div>
            </div>
          </div>

          <!-- Progress Analytics -->
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-6">Progress Analytics</h3>
            <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
              <div>
                <h4 class="text-sm font-medium text-gray-700 mb-3">Project Completion Rate</h4>
                <div class="relative">
                  <svg class="w-24 h-24 mx-auto" viewBox="0 0 36 36">
                    <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke="#e5e7eb" stroke-width="2"/>
                    <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke="#10b981" stroke-width="2" stroke-dasharray={`${stats.completionRate}, 100`}/>
                  </svg>
                  <div class="absolute inset-0 flex items-center justify-center">
                    <span class="text-lg font-bold text-gray-800">{stats.completionRate}%</span>
                  </div>
                </div>
              </div>
              
              <div>
                <h4 class="text-sm font-medium text-gray-700 mb-3">Timeline Adherence</h4>
                <div class="relative">
                  <svg class="w-24 h-24 mx-auto" viewBox="0 0 36 36">
                    <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke="#e5e7eb" stroke-width="2"/>
                    <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke="#3b82f6" stroke-width="2" stroke-dasharray={`${stats.timelineAdherence}, 100`}/>
                  </svg>
                  <div class="absolute inset-0 flex items-center justify-center">
                    <span class="text-lg font-bold text-gray-800">{stats.timelineAdherence}%</span>
                  </div>
                </div>
              </div>
              
              <div>
                <h4 class="text-sm font-medium text-gray-700 mb-3">Budget Efficiency</h4>
                <div class="relative">
                  <svg class="w-24 h-24 mx-auto" viewBox="0 0 36 36">
                    <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke="#e5e7eb" stroke-width="2"/>
                    <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke="#8b5cf6" stroke-width="2" stroke-dasharray={`${stats.budgetEfficiency}, 100`}/>
                  </svg>
                  <div class="absolute inset-0 flex items-center justify-center">
                    <span class="text-lg font-bold text-gray-800">{stats.budgetEfficiency}%</span>
                  </div>
                </div>
              </div>
              
              <div>
                <h4 class="text-sm font-medium text-gray-700 mb-3">Physical Accomplishment</h4>
                <div class="relative">
                  <svg class="w-24 h-24 mx-auto" viewBox="0 0 36 36">
                    <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke="#e5e7eb" stroke-width="2"/>
                    <path d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke="#f59e0b" stroke-width="2" stroke-dasharray={`${stats.physicalAccomplishment}, 100`}/>
                  </svg>
                  <div class="absolute inset-0 flex items-center justify-center">
                    <span class="text-lg font-bold text-gray-800">{stats.physicalAccomplishment}%</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </section>
  </LGUPMTLayout>
</Layout>

<style>
  .progress-ring circle {
    transition: stroke-dashoffset 0.35s;
    transform-origin: 50% 50%;
  }
  
  /* Horizontal Timeline Styles */
  .timeline-container {
    position: relative;
  }
  
  .timeline-track {
    position: relative;
    background: linear-gradient(to right, #e5e7eb, #d1d5db);
  }
  
  .timeline-grid {
    position: absolute;
    inset: 0;
    display: flex;
  }
  
  .timeline-grid-line {
    flex: 1;
    border-right: 1px dashed #9ca3af;
  }
  
  .timeline-grid-line:last-child {
    border-right: none;
  }
  
  .timeline-milestones {
    position: absolute;
    inset: 0;
  }
  
  .timeline-milestone {
    position: absolute;
    height: 100%;
    background: linear-gradient(45deg, #10b981, #059669);
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
    opacity: 0.8;
  }
  
  .timeline-milestone:hover {
    opacity: 1;
    transform: scaleY(1.1);
    box-shadow: 0 2px 8px rgba(16, 185, 129, 0.3);
  }
  
  .timeline-milestone.completed {
    background: linear-gradient(45deg, #10b981, #059669);
  }
  
  .timeline-milestone.in-progress {
    background: linear-gradient(45deg, #f59e0b, #d97706);
  }
  
  .timeline-milestone.pending {
    background: linear-gradient(45deg, #6b7280, #4b5563);
  }
  
  .timeline-popup {
    position: absolute;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 12px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    z-index: 1000;
    min-width: 200px;
    opacity: 0;
    transform: translateY(-10px);
    transition: all 0.3s ease;
    pointer-events: none;
  }
  
  .timeline-popup.show {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }
  
  .timeline-popup::before {
    content: '';
    position: absolute;
    top: -6px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-bottom: 6px solid white;
  }
  
  .timeline-popup::after {
    content: '';
    position: absolute;
    top: -7px;
    left: 50%;
    transform: translateX(-50%);
    width: 0;
    height: 0;
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-bottom: 6px solid #e5e7eb;
  }
</style>

<script>
  // API Configuration
  const API_URL = 'http://localhost:3000/api';
  
  // Global variables
  let projects = [];
  let milestones = [];
  let timelineEvents = [];
  let projectsByDepartment = {};
  let compiledProjects = [];
  let currentUser = null;

  // Initialize the page
  async function initializePage() {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // Fetch user data for authentication
        const userRes = await fetch(`${API_URL}/auth/profile`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (userRes.ok) {
          const userDataResponse = await userRes.json();
          if (userDataResponse.success && userDataResponse.user) {
            currentUser = userDataResponse.user;
          }
        }

        // Fetch all projects from the API
        const projectsRes = await fetch(`${API_URL}/projects`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (projectsRes.ok) {
          const data = await projectsRes.json();
          if (data.success) {
            projects = data.projects.filter(p => p.submittedToSecretariat === true);
            
            // Filter compiled projects (approved by Secretariat)
            compiledProjects = projects.filter(p => p.workflowStatus === 'compiled_for_secretariat' || p.workflowStatus === 'validated_by_secretariat');
            
            // Group projects by department
            projectsByDepartment = {};
            projects.forEach(project => {
              const deptName = project.implementingOfficeName || 'Unknown Department';
              if (!projectsByDepartment[deptName]) {
                projectsByDepartment[deptName] = [];
              }
              projectsByDepartment[deptName].push(project);
            });
          }
        }

        // Fetch milestones
        const milestonesRes = await fetch(`${API_URL}/projects/milestones`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (milestonesRes.ok) {
          const data = await milestonesRes.json();
          if (data.success) {
            milestones = data.milestones || [];
          }
        }

        // Generate timeline events
        timelineEvents = generateTimelineEvents(projects, milestones);
        updateTimelineUI();
        
        // Load timelines for compiled projects
        setTimeout(() => {
          loadAllProjectTimelines();
        }, 500);
        
        // Add event listeners for department toggle buttons
        addDepartmentToggleListeners();
      }
    } catch (error) {
      console.error('Error fetching timeline data:', error);
    }
  }

  // Initialize the page when the script loads
  initializePage();

  // Generate timeline events
  function generateTimelineEvents(projects, milestones) {
    const events = [];
    
    // Add project events
    projects.forEach(project => {
      if (project.submittedToSecretariatDate) {
        events.push({
          date: project.submittedToSecretariatDate,
          title: 'Project Submitted to Secretariat',
          description: `Project "${project.name}" was submitted for Secretariat review`,
          status: 'completed',
          project: project.name,
          type: 'submission'
        });
      }
      
      if (project.secretariatApprovalDate) {
        events.push({
          date: project.secretariatApprovalDate,
          title: 'Project Approved by Secretariat',
          description: `Project "${project.name}" was approved by the Secretariat`,
          status: 'completed',
          project: project.name,
          type: 'approval'
        });
      }
      
      if (project.startDate) {
        events.push({
          date: project.startDate,
          title: 'Project Started',
          description: `Implementation of "${project.name}" began`,
          status: project.status === 'ongoing' ? 'active' : project.status === 'complete' ? 'completed' : 'pending',
          project: project.name,
          type: 'start'
        });
      }
    });
    
    // Add milestone events
    milestones.forEach(milestone => {
      if (milestone.completedAt) {
        events.push({
          date: milestone.completedAt,
          title: `Milestone: ${milestone.title}`,
          description: milestone.description || `Milestone "${milestone.title}" was completed`,
          status: 'completed',
          project: milestone.projectName || 'Unknown Project',
          type: 'milestone'
        });
      }
    });
    
    // Sort events by date (newest first)
    return events.sort((a, b) => new Date(b.date) - new Date(a.date)).slice(0, 10);
  }

  // Update timeline UI
  function updateTimelineUI() {
    updateTimelineContainer();
    updateRecentMilestones();
    updateUpcomingDeadlines();
  }

  // Update timeline container
  function updateTimelineContainer() {
    const container = document.getElementById('timelineContainer');
    if (!container) return;

    if (timelineEvents.length === 0) {
      container.innerHTML = `
        <div class="text-center py-8">
          <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
          <p class="text-gray-500">No timeline events available</p>
        </div>
      `;
      return;
    }

    container.innerHTML = timelineEvents.map(event => {
      const eventDate = new Date(event.date);
      const statusColor = event.status === 'completed' ? 'green' : 
                        event.status === 'active' ? 'blue' : 'yellow';
      
      return `
        <div class="relative flex items-start">
          <div class="absolute left-6 top-4 w-4 h-4 bg-${statusColor}-500 rounded-full border-4 border-white shadow-lg"></div>
          <div class="ml-16 bg-white rounded-lg border border-gray-200 p-4 shadow-sm flex-1">
            <div class="flex items-center justify-between mb-2">
              <h4 class="font-semibold text-gray-800">${event.title}</h4>
              <span class="text-sm text-gray-500">${eventDate.toLocaleDateString()}</span>
            </div>
            <p class="text-gray-600 mb-2">${event.description}</p>
            <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-${statusColor}-100 text-${statusColor}-800">
              ${event.project}
            </span>
          </div>
        </div>
      `;
    }).join('');
  }

  // Update recent milestones
  function updateRecentMilestones() {
    const container = document.getElementById('recentMilestones');
    if (!container) return;

    const recentMilestones = milestones.filter(m => m.completedAt).slice(0, 3);
    
    if (recentMilestones.length === 0) {
      container.innerHTML = `
        <div class="text-center py-4">
          <p class="text-gray-500 text-sm">No recent milestones</p>
        </div>
      `;
      return;
    }

    container.innerHTML = recentMilestones.map(milestone => {
      const completedDate = new Date(milestone.completedAt);
      const daysAgo = Math.floor((new Date() - completedDate) / (1000 * 60 * 60 * 24));
      
      return `
        <div class="flex items-center gap-3 p-3 bg-green-50 rounded-lg">
          <div class="w-2 h-2 bg-green-500 rounded-full"></div>
          <div class="flex-1">
            <p class="text-sm font-medium text-gray-800">${milestone.title}</p>
            <p class="text-xs text-gray-500">${milestone.projectName || 'Unknown Project'}</p>
          </div>
          <span class="text-xs text-gray-400">${daysAgo === 0 ? 'Today' : `${daysAgo} day${daysAgo > 1 ? 's' : ''} ago`}</span>
        </div>
      `;
    }).join('');
  }

  // Update upcoming deadlines
  function updateUpcomingDeadlines() {
    const container = document.getElementById('upcomingDeadlines');
    if (!container) return;

    const upcomingDeadlines = milestones.filter(m => !m.completedAt && m.dueDate).slice(0, 3);
    
    if (upcomingDeadlines.length === 0) {
      container.innerHTML = `
        <div class="text-center py-4">
          <p class="text-gray-500 text-sm">No upcoming deadlines</p>
        </div>
      `;
      return;
    }

    container.innerHTML = upcomingDeadlines.map(milestone => {
      const dueDate = new Date(milestone.dueDate);
      const daysUntil = Math.floor((dueDate - new Date()) / (1000 * 60 * 60 * 24));
      const isOverdue = daysUntil < 0;
      
      return `
        <div class="flex items-center gap-3 p-3 rounded-lg ${isOverdue ? 'bg-red-50' : 'bg-yellow-50'}">
          <div class="w-2 h-2 rounded-full ${isOverdue ? 'bg-red-500' : 'bg-yellow-500'}"></div>
          <div class="flex-1">
            <p class="text-sm font-medium text-gray-800">${milestone.title}</p>
            <p class="text-xs text-gray-500">${milestone.projectName || 'Unknown Project'}</p>
          </div>
          <span class="text-xs ${isOverdue ? 'text-red-400' : 'text-gray-400'}">
            ${isOverdue ? `${Math.abs(daysUntil)} day${Math.abs(daysUntil) > 1 ? 's' : ''} overdue` : `${daysUntil} day${daysUntil > 1 ? 's' : ''}`}
          </span>
        </div>
      `;
    }).join('');
  }

  // Filter timeline
  function filterTimeline() {
    const filter = document.getElementById('timelineFilter').value;
    let filteredEvents = timelineEvents;
    
    if (filter !== 'all') {
      filteredEvents = timelineEvents.filter(event => {
        if (filter === 'active') return event.status === 'active';
        if (filter === 'completed') return event.status === 'completed';
        if (filter === 'delayed') return event.status === 'delayed';
        return true;
      });
    }
    
    updateTimelineContainer(filteredEvents);
  }

  // Load timeline data
  async function loadTimelineData() {
    await initializePage();
  }

  // Add milestone
  function addMilestone() {
    // TODO: Implement add milestone functionality
    console.log('Adding milestone...');
    alert('Milestone added successfully!');
  }

  // Export timeline
  function exportTimeline() {
    // TODO: Implement export functionality
    console.log('Exporting timeline...');
    alert('Timeline exported successfully!');
  }

  // Refresh timeline
  async function refreshTimeline() {
    await loadTimelineData();
  }

  // Refresh progress data from backend
  async function refreshProgressData() {
    try {
      console.log('🔄 Refreshing progress data from backend...');
      
      // Show loading state
      const refreshButton = document.querySelector('button[onclick="refreshProgressData()"]');
      if (refreshButton) {
        refreshButton.disabled = true;
        refreshButton.innerHTML = `
          <svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          Refreshing...
        `;
      }
      
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('No authentication token found');
        return;
      }

      // Fetch updated project data
      const response = await fetch(`${API_URL}/projects`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          console.log('✅ Progress data refreshed successfully');
          
          // Update the projects data
          projects = data.projects.filter(p => p.submittedToSecretariat === true);
          compiledProjects = projects.filter(p => p.workflowStatus === 'compiled_for_secretariat' || p.workflowStatus === 'validated_by_secretariat' || p.workflowStatus === 'secretariat_approved');
          
          // Recalculate statistics
          updateStatistics();
          
          // Show success message
          showNotification('Progress data updated successfully!', 'success');
          
          // Refresh the UI
          location.reload();
        }
      } else {
        console.error('❌ Failed to refresh progress data:', response.status);
        showNotification('Failed to refresh progress data', 'error');
      }
    } catch (error) {
      console.error('❌ Error refreshing progress data:', error);
      showNotification('Error refreshing progress data', 'error');
    } finally {
      // Reset button state
      const refreshButton = document.querySelector('button[onclick="refreshProgressData()"]');
      if (refreshButton) {
        refreshButton.disabled = false;
        refreshButton.innerHTML = `
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          Refresh Progress
        `;
      }
    }
  }

  // Show notification
  function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg transition-all duration-300 ${
      type === 'success' ? 'bg-green-500 text-white' :
      type === 'error' ? 'bg-red-500 text-white' :
      'bg-blue-500 text-white'
    }`;
    notification.textContent = message;
    
    document.body.appendChild(notification);
    
    // Auto-remove after 3 seconds
    setTimeout(() => {
      notification.remove();
    }, 3000);
  }

  // Update statistics based on current project data
  function updateStatistics() {
    stats.activeProjects = projects.filter(p => p.status === 'ongoing').length;
    stats.completedProjects = projects.filter(p => p.status === 'complete').length;
    stats.delayedProjects = projects.filter(p => p.status === 'delayed').length;
    
    // Calculate budget used
    const totalBudget = projects.reduce((sum, p) => sum + (parseFloat(p.totalBudget) || 0), 0);
    const usedBudget = projects.reduce((sum, p) => {
      const budget = parseFloat(p.totalBudget) || 0;
      const progress = parseFloat(p.budgetProgress) || 0;
      return sum + (budget * progress / 100);
    }, 0);
    stats.budgetUsed = `₱${(usedBudget / 1000000).toFixed(1)}M`;
    
    // Calculate percentages
    const totalProjects = projects.length;
    if (totalProjects > 0) {
      stats.onTrackPercentage = Math.round((stats.activeProjects / totalProjects) * 100);
      stats.successRate = Math.round((stats.completedProjects / totalProjects) * 100);
      stats.behindSchedulePercentage = Math.round((stats.delayedProjects / totalProjects) * 100);
      stats.budgetPercentage = Math.round((usedBudget / totalBudget) * 100);
      
      // Calculate completion rate
      const avgProgress = projects.reduce((sum, p) => sum + (parseFloat(p.overallProgress) || 0), 0) / totalProjects;
      stats.completionRate = Math.round(avgProgress);
      
      // Calculate timeline adherence
      const avgTimelineProgress = projects.reduce((sum, p) => sum + (parseFloat(p.timelineProgress) || 0), 0) / totalProjects;
      stats.timelineAdherence = Math.round(avgTimelineProgress);
      
      // Calculate budget efficiency
      const avgBudgetProgress = projects.reduce((sum, p) => sum + (parseFloat(p.budgetProgress) || 0), 0) / totalProjects;
      stats.budgetEfficiency = Math.round(avgBudgetProgress);
      
      // Calculate physical accomplishment
      if (compiledProjects.length > 0) {
        const avgPhysicalProgress = compiledProjects.reduce((sum, p) => sum + (parseFloat(p.physicalProgress) || 0), 0) / compiledProjects.length;
        stats.physicalAccomplishment = Math.round(avgPhysicalProgress);
      }
    }
    
    console.log('📊 Statistics updated:', stats);
  }

  // Auto-refresh progress data every 30 seconds
  setInterval(refreshProgressData, 30000);

  // ===== HORIZONTAL TIMELINE FUNCTIONS =====
  
  // Load timeline for a specific project
  async function loadProjectTimeline(projectId, startDate, endDate) {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;
      
      const response = await fetch(`${API_URL}/projects/${projectId}/milestones`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.milestones) {
          renderProjectTimeline(projectId, startDate, endDate, data.milestones);
        }
      }
    } catch (error) {
      console.error('Error loading project timeline:', error);
    }
  }
  
  // Render timeline for a project
  function renderProjectTimeline(projectId, startDate, endDate, milestones) {
    const container = document.querySelector(`[data-project-id="${projectId}"] .timeline-milestones`);
    if (!container) return;
    
    const projectStart = new Date(startDate);
    const projectEnd = new Date(endDate);
    const totalDuration = projectEnd - projectStart;
    
    container.innerHTML = '';
    
    milestones.forEach(milestone => {
      if (milestone.timelineStartDate && milestone.timelineEndDate) {
        const milestoneStart = new Date(milestone.timelineStartDate);
        const milestoneEnd = new Date(milestone.timelineEndDate);
        
        const startPosition = ((milestoneStart - projectStart) / totalDuration) * 100;
        const width = ((milestoneEnd - milestoneStart) / totalDuration) * 100;
        
        const milestoneElement = document.createElement('div');
        milestoneElement.className = `timeline-milestone ${milestone.timelineStatus || 'pending'}`;
        milestoneElement.style.left = `${startPosition}%`;
        milestoneElement.style.width = `${width}%`;
        milestoneElement.setAttribute('data-milestone', JSON.stringify(milestone));
        
        // Add hover popup
        milestoneElement.addEventListener('mouseenter', (e) => showTimelinePopup(e, milestone));
        milestoneElement.addEventListener('mouseleave', hideTimelinePopup);
        
        container.appendChild(milestoneElement);
      }
    });
  }
  
  // Load timelines for all compiled projects
  function loadAllProjectTimelines() {
    const timelineContainers = document.querySelectorAll('.timeline-container');
    timelineContainers.forEach(container => {
      const projectId = container.getAttribute('data-project-id');
      const startDate = container.getAttribute('data-start-date');
      const endDate = container.getAttribute('data-end-date');
      
      if (projectId && startDate && endDate) {
        loadProjectTimeline(projectId, startDate, endDate);
      }
    });
  }
  
  // Show timeline popup
  function showTimelinePopup(event, milestone) {
    const popup = document.createElement('div');
    popup.className = 'timeline-popup';
    popup.innerHTML = `
      <div class="font-semibold text-gray-800 mb-2">${milestone.title}</div>
      <div class="text-sm text-gray-600 mb-1">${milestone.timelineDescription || 'No description'}</div>
      <div class="text-xs text-gray-500">
        <div>Start: ${new Date(milestone.timelineStartDate).toLocaleDateString()}</div>
        <div>End: ${new Date(milestone.timelineEndDate).toLocaleDateString()}</div>
        <div>Status: ${milestone.timelineStatus || 'Pending'}</div>
        <div>Weight: ${milestone.timelineWeight || 0}%</div>
      </div>
    `;
    
    document.body.appendChild(popup);
    
    const rect = event.target.getBoundingClientRect();
    popup.style.left = `${rect.left + rect.width / 2 - popup.offsetWidth / 2}px`;
    popup.style.top = `${rect.top - popup.offsetHeight - 10}px`;
    
    setTimeout(() => popup.classList.add('show'), 10);
  }
  
  // Hide timeline popup
  function hideTimelinePopup() {
    const popup = document.querySelector('.timeline-popup');
    if (popup) {
      popup.classList.remove('show');
      setTimeout(() => popup.remove(), 300);
    }
  }
  
  // ===== DEPARTMENT MANAGEMENT FUNCTIONS =====
  
  // Add event listeners for department toggle buttons
  function addDepartmentToggleListeners() {
    const toggleButtons = document.querySelectorAll('.toggle-dept-btn');
    
    toggleButtons.forEach(button => {
      button.addEventListener('click', function(e) {
        e.preventDefault();
        const deptIndex = this.getAttribute('data-dept-index');
        toggleDepartment(deptIndex, this);
      });
    });
  }
  
  // Toggle department expansion
  function toggleDepartment(deptIndex, button) {
    console.log('Toggling department with index:', deptIndex);
    const deptSection = document.querySelector(`.department-projects[data-dept-index="${deptIndex}"]`);
    console.log('Found department section:', !!deptSection);
    
    if (deptSection) {
      const isHidden = deptSection.classList.contains('hidden');
      console.log('Section is hidden:', isHidden);
      console.log('Section content:', deptSection.innerHTML.substring(0, 200) + '...');
      
      if (isHidden) {
        deptSection.classList.remove('hidden');
        button.querySelector('svg').style.transform = 'rotate(180deg)';
        console.log('Section expanded');
      } else {
        deptSection.classList.add('hidden');
        button.querySelector('svg').style.transform = 'rotate(0deg)';
        console.log('Section collapsed');
      }
    } else {
      console.error('Department section not found for index:', deptIndex);
    }
  }
  
  // Expand all departments
  function expandAllDepartments() {
    const deptSections = document.querySelectorAll('.department-projects');
    const buttons = document.querySelectorAll('.toggle-dept-btn');
    
    console.log('Expanding all departments. Found sections:', deptSections.length);
    
    deptSections.forEach(section => {
      section.classList.remove('hidden');
    });
    
    buttons.forEach(button => {
      button.querySelector('svg').style.transform = 'rotate(180deg)';
    });
  }
  
  // Make functions globally available
  window.loadTimelineData = loadTimelineData;
  window.addMilestone = addMilestone;
  window.exportTimeline = exportTimeline;
  window.refreshTimeline = refreshTimeline;
  window.refreshProgressData = refreshProgressData;
  window.filterTimeline = filterTimeline;
  window.toggleDepartment = toggleDepartment;
  window.expandAllDepartments = expandAllDepartments;
</script> 