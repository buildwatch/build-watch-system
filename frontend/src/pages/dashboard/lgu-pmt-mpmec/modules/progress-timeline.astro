---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import LGUPMTLayout from '../../../../components/LGUPMTLayout.astro';
import ProjectCard from '../../../../components/ProjectCard.astro';
import ProjectDetailsModal from '../../../../components/ProjectDetailsModal.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let projectsByDepartment = {};
let allProjects = [];
let stats = {
  totalProjects: 0,
  budgetUtilized: 0,
  avgProgress: 0,
  totalDepartments: 0,
  ongoing: 0,
  pending: 0,
  delayed: 0,
  completed: 0,
  totalBudget: '₱0',
  budgetUtilizedFormatted: '₱0'
};
let loading = true;
let error = '';
let departments = [];
let categories = ['infrastructure', 'social services', 'environment', 'economic development'];

// Try to fetch data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch all projects for MPMEC
    const timestamp = new Date().getTime();
    const projectsRes = await fetch(`${API_URL}/projects?_t=${timestamp}`, {
      headers: { 
        'Authorization': `Bearer ${token}`,
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        allProjects = data.projects.filter(p => p.submittedToSecretariat === true);
        
        // Calculate comprehensive statistics
        stats.totalProjects = allProjects.length;
        stats.ongoing = allProjects.filter(p => p.status === 'ongoing').length;
        stats.pending = allProjects.filter(p => p.status === 'pending').length;
        stats.delayed = allProjects.filter(p => p.status === 'delayed').length;
        stats.completed = allProjects.filter(p => p.status === 'complete').length;
        
        // Calculate total budget
        const totalBudget = allProjects.reduce((sum, p) => sum + (parseFloat(p.totalBudget) || 0), 0);
        stats.totalBudget = `₱${totalBudget.toLocaleString()}`;
        
        // Calculate budget utilized (based on budget progress)
        const budgetUtilized = allProjects.reduce((sum, p) => {
          const budget = parseFloat(p.totalBudget) || 0;
          const progress = parseFloat(p.budgetProgress) || 0;
          return sum + (budget * (progress / 100));
        }, 0);
        stats.budgetUtilized = budgetUtilized;
        stats.budgetUtilizedFormatted = `₱${budgetUtilized.toLocaleString()}`;
        
        // Calculate average progress
        const totalProgress = allProjects.reduce((sum, p) => sum + (parseFloat(p.overallProgress) || 0), 0);
        stats.avgProgress = allProjects.length > 0 ? (totalProgress / allProjects.length).toFixed(1) : 0;
        
        // Calculate total departments
        stats.totalDepartments = departments.length;
        
        // Group projects by department and sort by latest first
        projectsByDepartment = {};
        departments = [];
        allProjects.forEach(project => {
          const deptName = project.implementingOfficeName || 'Unknown Department';
          if (!projectsByDepartment[deptName]) {
            projectsByDepartment[deptName] = [];
            departments.push(deptName);
          }
          projectsByDepartment[deptName].push(project);
        });
        
        // Sort projects within each department by creation date (latest first)
        Object.keys(projectsByDepartment).forEach(dept => {
          projectsByDepartment[dept].sort((a, b) => 
            new Date(b.createdDate || b.createdAt) - new Date(a.createdDate || a.createdAt)
          );
        });
      }
    }
  }
} catch (err) {
  console.error('Error fetching timeline data:', err);
  error = 'Failed to fetch timeline data.';
}

loading = false;

// Helper function to format currency
const formatCurrency = (amount) => {
  if (!amount || isNaN(amount)) return '₱0.00';
  const num = parseFloat(amount);
  if (num >= 1000000) {
    return `₱${(num / 1000000).toFixed(1)}M`;
  } else if (num >= 1000) {
    return `₱${(num / 1000).toFixed(1)}K`;
  }
  return `₱${num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
};
---

<Layout title="Progress & Timeline | MPMEC Dashboard">
  <LGUPMTLayout>
    <style>
      /* Icon Container Styles - Matching User Management */
      .icon-container {
        @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .icon-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .icon-container > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container:hover::before {
        left: 100%;
      }
      
      .icon-container:hover {
        @apply transform scale-110 rotate-3;
      }
      
      .icon-container-small {
        @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .icon-container-small::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .icon-container-small > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container-small:hover::before {
        left: 100%;
      }
      
      .icon-container-small:hover {
        @apply transform scale-110 rotate-3;
      }
      
      /* Modern Profile Card Styles - Matching User Management */
      .profile-card {
        @apply bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 ease-out hover:shadow-2xl hover:border-blue-600/20 hover:-translate-y-2;
        position: relative;
        overflow: visible; /* Allow content to expand properly */
      }
      
      .profile-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.08), transparent);
        transition: left 0.6s ease-out;
        z-index: 1;
      }
      
      .profile-card > * {
        position: relative;
        z-index: 2;
      }
      
      .profile-card:hover::before {
        left: 100%;
      }

      /* Enhanced Action Button Styles with Lifting and Shining Effects */
      .btn-action {
        @apply text-sm font-semibold rounded-lg transition-all duration-300 transform hover:scale-105 hover:shadow-lg flex items-center gap-2;
        position: relative;
        overflow: hidden;
      }

      .btn-action::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }

      .btn-action > * {
        position: relative;
        z-index: 2;
      }

      .btn-action:hover::before {
        left: 100%;
      }
      
      /* Department Section Enhancements */
      .toggle-chevron.expanded svg {
        transform: rotate(180deg);
      }
      
      .department-section {
        margin-bottom: 1.5rem;
      }
      
      /* Timeline Filter Button Enhancements */
      .timeline-filter-btn.active {
        opacity: 1 !important;
        transform: scale(1.05);
        box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
      }
      
      .timeline-filter-btn:not(.active):hover {
        transform: scale(1.02);
      }
    </style>
    
    <!-- Page Header - Matching User Management Structure -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-black">Progress & Timeline</h1>
              <p class="text-sm text-gray-600">Municipal Project Monitoring and Evaluation Committee</p>
            </div>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Total Projects</p>
            <p class="text-xs text-black font-semibold" id="headerProjectCount">{stats.totalProjects} Active Projects</p>
          </div>
          <div class="w-4 h-4 bg-green-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <main class="bg-gradient-to-br from-gray-50 to-white min-h-screen px-8 py-8">
      <!-- Action Buttons -->
      <div class="flex items-center justify-end gap-3 mb-8">
        <button onclick="exportTimeline()" class="btn-action bg-green-600 hover:bg-green-700 text-white px-4 py-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Export Timeline
        </button>
        <button onclick="refreshData()" class="btn-action bg-[#FE5353] hover:bg-[#E54545] text-white px-4 py-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          Refresh Data
        </button>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span class="ml-3 text-gray-600">Loading projects...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12">
          <p class="text-red-600 mb-4">{error}</p>
          <button onclick="location.reload()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all">
            Try Again
          </button>
        </div>
      ) : (
        <>
          <!-- Enhanced Progress & Timeline Overview Cards - MPMEC Theme -->
          <div class="space-y-6 mb-8">
            <!-- Top Row: Primary Metrics -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <!-- Total Projects/Budget - MPMEC Theme -->
              <div class="profile-card p-6">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm text-gray-600">Total Projects</p>
                    <p class="text-2xl font-bold text-black">{stats.totalProjects}</p>
                    <p class="text-xs text-gray-500 mt-1">{stats.totalBudget}</p>
                  </div>
                  <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 7a2 2 0 012-2h10a2 2 0 012 2v2M7 7h10"></path>
                    </svg>
                  </div>
                </div>
              </div>

              <!-- Budget Utilized - Professional Light Green -->
              <div class="profile-card p-6">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm text-gray-600">Budget Utilized</p>
                    <p class="text-2xl font-bold text-black">{stats.budgetUtilizedFormatted}</p>
                    <p class="text-xs text-green-600 mt-1">{stats.budgetUtilized > 0 ? `${((stats.budgetUtilized / (parseFloat(stats.totalBudget.replace(/[₱,]/g, '')) || 1)) * 100).toFixed(1)}% utilized` : '0% utilized'}</p>
                  </div>
                  <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 8h6m-5 0a3 3 0 110 6H9l3 3-3-3h1m1 0h6m-6 0a3 3 0 110-6H9l3-3-3 3h1m1 0h6"></path>
                    </svg>
                  </div>
                </div>
              </div>

              <!-- Average Progress - Professional Light Gold -->
              <div class="profile-card p-6">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm text-gray-600">Avg Progress</p>
                    <p class="text-2xl font-bold text-black">{stats.avgProgress}%</p>
                    <p class="text-xs text-amber-600 mt-1">Overall completion</p>
                  </div>
                  <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                  </div>
                </div>
              </div>

              <!-- Total Departments - MPMEC Theme -->
              <div class="profile-card p-6">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm text-gray-600">Total Departments</p>
                    <p class="text-2xl font-bold text-black">{stats.totalDepartments}</p>
                    <p class="text-xs text-blue-600 mt-1">Active departments</p>
                  </div>
                  <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                    </svg>
                  </div>
                </div>
              </div>
            </div>

            <!-- Bottom Row: Status Metrics -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <!-- Ongoing - MPMEC Theme -->
              <div class="profile-card p-6">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm text-gray-600">Ongoing</p>
                    <p class="text-2xl font-bold text-black">{stats.ongoing}</p>
                    <p class="text-xs text-blue-600 mt-1">In progress</p>
                  </div>
                  <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                </div>
              </div>

              <!-- Pending - Professional Light Gold -->
              <div class="profile-card p-6">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm text-gray-600">Pending</p>
                    <p class="text-2xl font-bold text-black">{stats.pending}</p>
                    <p class="text-xs text-amber-600 mt-1">Awaiting review</p>
                  </div>
                  <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                </div>
              </div>

              <!-- Delayed - Professional Light Red -->
              <div class="profile-card p-6">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm text-gray-600">Delayed</p>
                    <p class="text-2xl font-bold text-black">{stats.delayed}</p>
                    <p class="text-xs text-red-600 mt-1">Behind schedule</p>
                  </div>
                  <div class="icon-container bg-gradient-to-br from-red-500 to-red-600">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                    </svg>
                  </div>
                </div>
              </div>

              <!-- Completed - Professional Light Green -->
              <div class="profile-card p-6">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-sm text-gray-600">Completed</p>
                    <p class="text-2xl font-bold text-black">{stats.completed}</p>
                    <p class="text-xs text-green-600 mt-1">Successfully finished</p>
                  </div>
                  <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Main Progress Timeline Section -->
          <div class="profile-card p-8 mb-8">
            <!-- Enhanced Filters Section -->
            <div class="mb-8">
              <div class="flex items-center gap-3 mb-6">
                <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700" style="width: 40px; height: 40px; border-radius: 12px;">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                  </svg>
                </div>
                <h3 class="text-xl font-bold text-black">Filters & Sorting</h3>
              </div>
              
              <div class="bg-gradient-to-br from-gray-50 to-gray-100/50 rounded-2xl p-6 border border-gray-200">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                  <div class="space-y-2">
                    <label class="block text-sm font-semibold text-gray-700">Department</label>
                    <select id="departmentFilter" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md">
                      <option value="">All Departments</option>
                      {departments.map(dept => (
                        <option value={dept}>{dept}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div class="space-y-2">
                    <label class="block text-sm font-semibold text-gray-700">Status</label>
                    <select id="statusFilter" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md">
                      <option value="">All Status</option>
                      <option value="ongoing">Ongoing</option>
                      <option value="complete">Completed</option>
                      <option value="delayed">Delayed</option>
                      <option value="pending">Pending</option>
                    </select>
                  </div>
                  
                  <div class="space-y-2">
                    <label class="block text-sm font-semibold text-gray-700">Category</label>
                    <select id="categoryFilter" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md">
                      <option value="">All Categories</option>
                      {categories.map(cat => (
                        <option value={cat}>{cat.charAt(0).toUpperCase() + cat.slice(1)}</option>
                      ))}
                    </select>
                  </div>
                  
                  <div class="space-y-2">
                    <label class="block text-sm font-semibold text-gray-700">Sort By</label>
                    <select class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-blue-600 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md">
                      <option value="latest">Latest First</option>
                      <option value="oldest">Oldest First</option>
                      <option value="budget">Budget Amount</option>
                      <option value="progress">Progress %</option>
                    </select>
                  </div>
                </div>
                
                <div class="flex flex-wrap items-center gap-3 mt-6">
                  <button onclick="applyFilters()" class="btn-action bg-blue-600 hover:bg-blue-700 text-white px-6 py-3">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                    </svg>
                    Apply Filters
                  </button>
                  <button onclick="clearFilters()" class="btn-action bg-gray-600 hover:bg-gray-700 text-white px-6 py-3">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    Clear Filters
                  </button>
                  <button onclick="expandAllDepartments()" class="btn-action bg-green-600 hover:bg-green-700 text-white px-6 py-3">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                    Expand All
                  </button>
                  <button onclick="collapseAllDepartments()" class="btn-action bg-red-600 hover:bg-red-700 text-white px-6 py-3">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                    </svg>
                    Collapse All
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Department Projects Section -->
            <div class="space-y-6" id="departmentAccordion">
              {Object.keys(projectsByDepartment).length === 0 ? (
                <div class="text-center py-12">
                  <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  <p class="text-gray-500">No projects available</p>
                </div>
              ) : (
                Object.entries(projectsByDepartment).map(([deptName, deptProjects], index) => {
                  const totalProjects = deptProjects.length;
                  const activeProjects = deptProjects.filter(p => p.status === 'ongoing').length;
                  const completedProjects = deptProjects.filter(p => p.status === 'complete').length;
                  const delayedProjects = deptProjects.filter(p => p.status === 'delayed').length;
                  const deptTotalBudget = deptProjects.reduce((sum, p) => sum + (parseFloat(p.totalBudget) || 0), 0);
                  const deptAvgProgress = deptProjects.reduce((sum, p) => sum + (parseFloat(p.overallProgress) || 0), 0) / (totalProjects || 1);
                  
                  return (
                    <div class="profile-card department-section" data-dept-index={index}>
                      <!-- Enhanced Department Header with Professional Styling -->
                      <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-8 py-6 border-b border-gray-200 cursor-pointer hover:from-blue-100 hover:to-indigo-100 transition-all duration-300 group" 
                           onclick={`toggleDepartment(${index})`}>
                        <div class="flex items-center justify-between">
                          <div class="flex items-center gap-6">
                            <div class="flex items-center gap-4">
                              <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700 group-hover:from-blue-700 group-hover:to-blue-800">
                                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                </svg>
                              </div>
                              <div>
                                <h3 class="text-xl font-bold text-black group-hover:text-blue-800 transition-colors duration-300">{deptName}</h3>
                                <div class="flex items-center gap-6 text-sm text-gray-600 mt-2">
                                  <span class="flex items-center gap-2 bg-white/70 px-3 py-1 rounded-lg">
                                    <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                                    {totalProjects} Projects
                                  </span>
                                  <span class="flex items-center gap-2 bg-white/70 px-3 py-1 rounded-lg">
                                    <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
                                    {formatCurrency(deptTotalBudget)}
                                  </span>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="flex items-center gap-8">
                            <!-- Enhanced Department Statistics with Icons -->
                            <div class="hidden lg:flex items-center gap-8">
                              <div class="text-center bg-white/80 px-4 py-3 rounded-xl shadow-sm border border-white/50 hover:bg-white transition-all duration-300">
                                <div class="flex items-center justify-center gap-2 mb-1">
                                  <div class="w-3 h-3 bg-blue-500 rounded-full animate-pulse"></div>
                                  <p class="text-xs font-semibold text-gray-700">Active</p>
                                </div>
                                <p class="text-2xl font-bold text-blue-600">{activeProjects}</p>
                              </div>
                              <div class="text-center bg-white/80 px-4 py-3 rounded-xl shadow-sm border border-white/50 hover:bg-white transition-all duration-300">
                                <div class="flex items-center justify-center gap-2 mb-1">
                                  <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                                  <p class="text-xs font-semibold text-gray-700">Completed</p>
                                </div>
                                <p class="text-2xl font-bold text-green-600">{completedProjects}</p>
                              </div>
                              <div class="text-center bg-white/80 px-4 py-3 rounded-xl shadow-sm border border-white/50 hover:bg-white transition-all duration-300">
                                <div class="flex items-center justify-center gap-2 mb-1">
                                  <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                                  <p class="text-xs font-semibold text-gray-700">Delayed</p>
                                </div>
                                <p class="text-2xl font-bold text-red-600">{delayedProjects}</p>
                              </div>
                              <div class="text-center bg-white/80 px-4 py-3 rounded-xl shadow-sm border border-white/50 hover:bg-white transition-all duration-300">
                                <div class="flex items-center justify-center gap-2 mb-1">
                                  <div class="w-3 h-3 bg-orange-500 rounded-full"></div>
                                  <p class="text-xs font-semibold text-gray-700">Progress</p>
                                </div>
                                <p class="text-2xl font-bold text-orange-600">{Math.round(deptAvgProgress)}%</p>
                              </div>
                            </div>
                            <div class="icon-container bg-gradient-to-br from-gray-600 to-gray-700 group-hover:from-gray-700 group-hover:to-gray-800 toggle-chevron" 
                                 data-dept-index={index} style="width: 48px; height: 48px;">
                              <svg class="w-6 h-6 text-white transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                              </svg>
                            </div>
                          </div>
                        </div>
                      </div>
                      
                      <!-- Department Projects Slider -->
                      <div class="department-projects hidden" data-dept-index={index}>
                        <div class="p-6">
                          <!-- Enhanced Mobile Department Stats -->
                          <div class="lg:hidden grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                            <div class="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl border border-blue-200 text-center">
                              <div class="flex items-center justify-center gap-2 mb-2">
                                <div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
                                <p class="text-xs font-semibold text-blue-700">Active</p>
                              </div>
                              <p class="text-xl font-bold text-blue-600">{activeProjects}</p>
                            </div>
                            <div class="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl border border-green-200 text-center">
                              <div class="flex items-center justify-center gap-2 mb-2">
                                <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                                <p class="text-xs font-semibold text-green-700">Completed</p>
                              </div>
                              <p class="text-xl font-bold text-green-600">{completedProjects}</p>
                            </div>
                            <div class="bg-gradient-to-br from-red-50 to-red-100 p-4 rounded-xl border border-red-200 text-center">
                              <div class="flex items-center justify-center gap-2 mb-2">
                                <div class="w-2 h-2 bg-red-500 rounded-full"></div>
                                <p class="text-xs font-semibold text-red-700">Delayed</p>
                              </div>
                              <p class="text-xl font-bold text-red-600">{delayedProjects}</p>
                            </div>
                            <div class="bg-gradient-to-br from-orange-50 to-orange-100 p-4 rounded-xl border border-orange-200 text-center">
                              <div class="flex items-center justify-center gap-2 mb-2">
                                <div class="w-2 h-2 bg-orange-500 rounded-full"></div>
                                <p class="text-xs font-semibold text-orange-700">Progress</p>
                              </div>
                              <p class="text-xl font-bold text-orange-600">{Math.round(deptAvgProgress)}%</p>
                            </div>
                          </div>

                          <!-- Enhanced Slider Controls -->
                          <div class="flex items-center justify-between mb-6 bg-gradient-to-r from-gray-50 to-blue-50 p-4 rounded-xl border border-gray-200">
                            <div class="flex items-center gap-3">
                              <div class="w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center">
                                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 7a2 2 0 012-2h10a2 2 0 012 2v2M7 7h10"></path>
                                </svg>
                              </div>
                              <h4 class="text-xl font-bold text-black">Projects ({totalProjects})</h4>
                            </div>
                            <div class="flex items-center gap-3">
                              <div class="bg-white/80 px-3 py-1 rounded-lg border border-white/50">
                                <span class="text-sm font-medium text-gray-600">Scroll to navigate</span>
                              </div>
                              <button onclick={`scrollSlider(${index}, -1)`} 
                                      class="btn-action bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-xl"
                                      aria-label="Previous projects">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                                </svg>
                              </button>
                              <button onclick={`scrollSlider(${index}, 1)`} 
                                      class="btn-action bg-blue-600 hover:bg-blue-700 text-white p-3 rounded-xl"
                                      aria-label="Next projects">
                                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                                </svg>
                              </button>
                            </div>
                          </div>
                          
                          <!-- Enhanced Project Cards Horizontal Slider -->
                          <div class="project-slider-container relative">
                            <div class="project-slider overflow-x-auto scroll-smooth pb-4" 
                                 data-dept-index={index} 
                                 style="scroll-snap-type: x mandatory;">
                              <div class="flex gap-6" style="width: max-content;">
                                {deptProjects.map((project) => (
                                  <div class="project-card-wrapper flex-shrink-0 w-96" 
                                       style="scroll-snap-align: start;"
                                       data-project-id={project.id}
                                       onmouseenter="showProjectPreview(this, event)"
                                       onmouseleave="hideProjectPreview()">
                                    <ProjectCard 
                                      project={project} 
                                      userTheme="mpmec" 
                                      onClick="selectProjectForTimeline"
                                      showModal={false}
                                    />
                                    <!-- Progress Bar Overlay -->
                                    <div class="absolute top-2 left-2 right-2 bg-white/90 backdrop-blur-sm rounded-lg p-2 opacity-0 hover:opacity-100 transition-opacity duration-300">
                                      <div class="text-xs font-medium text-gray-700 mb-1">Milestone Progress</div>
                                      <div class="w-full bg-gray-200 rounded-full h-2">
                                        <div class="bg-blue-600 h-2 rounded-full transition-all duration-1000" 
                                             style={`width: ${project.overallProgress || 0}%`}></div>
                                      </div>
                                      <div class="flex justify-between text-xs text-gray-600 mt-1">
                                        <span>Timeline: {project.timelineProgress || 0}%</span>
                                        <span>Budget: {project.budgetProgress || 0}%</span>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  );
                })
              )}
            </div>
          </div>

          <!-- Enhanced Selected Project Timeline Area - Hidden by default -->
          <div id="timelineArea" class="hidden">
            <div class="profile-card" style="overflow: visible;">
              <!-- Professional Timeline Header -->
              <div class="bg-gradient-to-r from-blue-50 to-indigo-50 px-8 py-6 border-b border-gray-200">
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-6">
                    <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700">
                      <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                    </div>
                    <div>
                      <h3 class="text-2xl font-bold text-black" id="timelineProjectTitle">Project Timeline</h3>
                      <p class="text-gray-600 mt-1" id="timelineProjectCode">Select a project to view its timeline</p>
                    </div>
                  </div>
                  <div class="flex items-center gap-4">
                    <div class="bg-white/90 backdrop-blur-sm border border-blue-200/50 text-blue-800 rounded-xl px-6 py-3 shadow-sm">
                      <div class="flex items-center gap-2">
                        <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
                        <span class="text-sm font-semibold">Total Budget</span>
                      </div>
                      <div class="text-xl font-bold" id="timelineBudget">₱0.00</div>
                    </div>
                    <button onclick="clearSelectedProject()" class="icon-container bg-gradient-to-br from-gray-600 to-gray-700 hover:from-gray-700 hover:to-gray-800" style="width: 48px; height: 48px;">
                      <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                    </button>
                  </div>
                </div>
              </div>

              <!-- Enhanced Progress Overview -->
              <div class="p-8 border-b border-gray-200">
                <div class="flex items-center gap-3 mb-6">
                  <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700" style="width: 40px; height: 40px; border-radius: 12px;">
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                  </div>
                  <h4 class="text-xl font-bold text-black">Progress Overview</h4>
                </div>
                <div class="grid grid-cols-2 lg:grid-cols-4 gap-6">
                  <div class="bg-gradient-to-br from-blue-50 to-blue-100 p-6 rounded-xl border border-blue-200 text-center hover:shadow-lg transition-all duration-300">
                    <div class="flex items-center justify-center gap-2 mb-3">
                      <div class="w-3 h-3 bg-blue-500 rounded-full animate-pulse"></div>
                      <span class="text-sm font-semibold text-blue-700">Overall</span>
                    </div>
                    <div class="text-3xl font-bold text-blue-600 mb-2" id="overallProgress">0%</div>
                    <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                      <div 
                        class="h-3 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                        id="overallProgressBar"
                        style="width: 0%"
                        data-progress="0"
                        data-progress-color="bg-gray-500"
                      ></div>
                    </div>
                  </div>
                  <div class="bg-gradient-to-br from-green-50 to-green-100 p-6 rounded-xl border border-green-200 text-center hover:shadow-lg transition-all duration-300">
                    <div class="flex items-center justify-center gap-2 mb-3">
                      <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span class="text-sm font-semibold text-green-700">Timeline</span>
                    </div>
                    <div class="text-3xl font-bold text-green-600 mb-2" id="timelineProgressDisplay">0%</div>
                    <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                      <div 
                        class="h-3 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                        id="timelineProgressBar"
                        style="width: 0%"
                        data-progress="0"
                        data-progress-color="bg-gray-500"
                      ></div>
                    </div>
                  </div>
                  <div class="bg-gradient-to-br from-purple-50 to-purple-100 p-6 rounded-xl border border-purple-200 text-center hover:shadow-lg transition-all duration-300">
                    <div class="flex items-center justify-center gap-2 mb-3">
                      <div class="w-3 h-3 bg-purple-500 rounded-full"></div>
                      <span class="text-sm font-semibold text-purple-700">Budget</span>
                    </div>
                    <div class="text-3xl font-bold text-purple-600 mb-2" id="budgetProgress">0%</div>
                    <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                      <div 
                        class="h-3 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                        id="budgetProgressBar"
                        style="width: 0%"
                        data-progress="0"
                        data-progress-color="bg-gray-500"
                      ></div>
                    </div>
                  </div>
                  <div class="bg-gradient-to-br from-orange-50 to-orange-100 p-6 rounded-xl border border-orange-200 text-center hover:shadow-lg transition-all duration-300">
                    <div class="flex items-center justify-center gap-2 mb-3">
                      <div class="w-3 h-3 bg-orange-500 rounded-full"></div>
                      <span class="text-sm font-semibold text-orange-700">Physical</span>
                    </div>
                    <div class="text-3xl font-bold text-orange-600 mb-2" id="physicalProgress">0%</div>
                    <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                      <div 
                        class="h-3 rounded-full transition-all duration-2000 ease-out dashboard-progress-bar-fill"
                        id="physicalProgressBar"
                        style="width: 0%"
                        data-progress="0"
                        data-progress-color="bg-gray-500"
                      ></div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Enhanced Timeline Filtering Controls -->
              <div class="p-8 border-b border-gray-200 bg-gradient-to-r from-gray-50 to-blue-50">
                <div class="flex flex-wrap items-center justify-between gap-6">
                  <div class="flex items-center gap-3">
                    <div class="icon-container bg-gradient-to-br from-gray-600 to-gray-700" style="width: 40px; height: 40px; border-radius: 12px;">
                      <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                      </svg>
                    </div>
                    <h4 class="text-xl font-bold text-black">Timeline Filters</h4>
                  </div>
                  <div class="flex items-center gap-3">
                    <button onclick="filterTimeline('all')" class="timeline-filter-btn active btn-action bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-xl">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                      </svg>
                      All Milestones
                    </button>
                    <button onclick="filterTimeline('completed')" class="timeline-filter-btn btn-action bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-xl opacity-60 hover:opacity-100">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      Completed
                    </button>
                    <button onclick="filterTimeline('ongoing')" class="timeline-filter-btn btn-action bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-xl opacity-60 hover:opacity-100">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      Ongoing
                    </button>
                    <button onclick="filterTimeline('delayed')" class="timeline-filter-btn btn-action bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-xl opacity-60 hover:opacity-100">
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                      </svg>
                      Delayed
                    </button>
                  </div>
                </div>
              </div>

              <div class="p-8" style="min-height: auto; overflow: visible;">
                <!-- Enhanced Loading State -->
                <div id="timelineLoading" class="hidden text-center py-16">
                  <div class="relative">
                    <div class="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600 mx-auto mb-6"></div>
                    <div class="absolute inset-0 flex items-center justify-center">
                      <div class="w-6 h-6 bg-blue-600 rounded-full animate-pulse"></div>
                    </div>
                  </div>
                  <h3 class="text-xl font-semibold text-gray-800 mb-2">Loading Project Timeline</h3>
                  <p class="text-gray-600">Fetching milestone data and progress updates...</p>
                </div>

                <!-- Enhanced Timeline Content -->
                <div id="timelineContent" class="hidden" style="max-height: none; overflow: visible;">
                  <!-- Milestone Timeline will be populated here with enhanced styling -->
                </div>

                <!-- Enhanced Empty State -->
                <div id="timelineEmpty" class="text-center py-16">
                  <div class="bg-gradient-to-br from-blue-50 to-indigo-100 rounded-2xl p-8 max-w-md mx-auto">
                    <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700 mx-auto mb-6" style="width: 80px; height: 80px;">
                      <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                      </svg>
                    </div>
                    <h3 class="text-2xl font-bold text-black mb-3">Select a Project</h3>
                    <p class="text-gray-600 text-lg mb-2">Choose any project card to view its detailed timeline</p>
                    <p class="text-gray-500 text-sm">Track milestone progress, budget utilization, and Secretariat verdicts</p>
                    <div class="flex items-center justify-center gap-4 mt-6">
                      <div class="flex items-center gap-2">
                        <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                        <span class="text-xs text-gray-600">Milestones</span>
                      </div>
                      <div class="flex items-center gap-2">
                        <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                        <span class="text-xs text-gray-600">Progress</span>
                      </div>
                      <div class="flex items-center gap-2">
                        <div class="w-2 h-2 bg-purple-500 rounded-full"></div>
                        <span class="text-xs text-gray-600">Verdicts</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Project Preview Tooltip -->
          <div id="projectPreview" class="hidden fixed z-50 bg-white border border-gray-200 rounded-lg shadow-xl p-4 max-w-sm">
            <div class="space-y-2">
              <h5 class="font-semibold text-gray-800" id="previewTitle"></h5>
              <div class="text-sm text-gray-600">
                <div id="previewBudget"></div>
                <div id="previewImplementer"></div>
                <div id="previewLastUpdate"></div>
              </div>
            </div>
          </div>
        </>
      )}
    </main>
    
    <!-- Project Details Modal -->
    <ProjectDetailsModal userTheme="mpmec" />
  </LGUPMTLayout>
</Layout>

<style>
  /* Department accordion styles */
  .department-projects {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
  }
  
  .toggle-chevron {
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .toggle-chevron.expanded {
    transform: rotate(180deg);
  }

  /* Enhanced project slider styles */
  .project-slider {
    scrollbar-width: thin;
    scrollbar-color: #cbd5e0 #f7fafc;
  }
  
  .project-slider::-webkit-scrollbar {
    height: 8px;
  }
  
  .project-slider::-webkit-scrollbar-track {
    background: #f7fafc;
    border-radius: 4px;
  }
  
  .project-slider::-webkit-scrollbar-thumb {
    background: linear-gradient(90deg, #cbd5e0, #a0aec0);
    border-radius: 4px;
  }
  
  .project-slider::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(90deg, #a0aec0, #718096);
  }

  /* Enhanced selected project card highlight */
  .project-card-wrapper {
    position: relative;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .project-card-wrapper.selected {
    transform: scale(1.03);
    z-index: 10;
  }
  
  .project-card-wrapper.selected > div {
    border-color: #3b82f6;
    box-shadow: 0 20px 40px rgba(59, 130, 246, 0.2), 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  /* Timeline styles */
  .milestone-item {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  .milestone-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.12);
  }

  /* Timeline filter buttons */
  .timeline-filter-btn.active {
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
  }

  /* Enhanced hover effects */
  .department-section:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
  }

  /* Progress bar animations */
  @keyframes progressFill {
    from { width: 0%; }
    to { width: var(--progress-width); }
  }

  .progress-bar-animated {
    animation: progressFill 1.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Dashboard Progress Bar Animation */
  .dashboard-progress-bar-fill {
    transform-origin: left;
    animation: fillDashboardProgress 2s ease-out forwards;
  }
  
  @keyframes fillDashboardProgress {
    from {
      width: 0%;
    }
    to {
      width: var(--dashboard-progress-width);
    }
  }

  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .project-card-wrapper {
      width: 350px;
    }
  }

  @media (max-width: 768px) {
    .project-card-wrapper {
      width: 320px;
    }
    
    .grid-cols-2 {
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
    }
    
    .project-slider {
      padding-bottom: 1rem;
    }
  }

  @media (max-width: 640px) {
    .project-card-wrapper {
      width: 280px;
    }
    
    .lg\\:grid-cols-4 {
      grid-template-columns: repeat(2, 1fr);
    }
  }

  /* Enhanced card hover effects */
  .project-card-wrapper:hover .absolute {
    opacity: 1;
  }

  /* Collapsible Section Styles - Matching submit-update.astro */
  .section-content {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.5s ease-out, opacity 0.3s ease-out;
    opacity: 0;
  }
  
  .section-content.expanded {
    max-height: 5000px;
    opacity: 1;
    transition: max-height 0.5s ease-in, opacity 0.3s ease-in;
  }

  /* Enhanced Milestone Toggle Animation */
  .section-content {
    max-height: 0;
    overflow: hidden;
    opacity: 0;
    transition: max-height 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s ease;
    transform: translateY(-10px);
  }
  
  .section-content.expanded {
    max-height: 6000px;
    opacity: 1;
    transform: translateY(0);
    transition: max-height 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), opacity 0.3s ease, transform 0.3s ease;
  }

  /* Force collapsed state */
  .section-content:not(.expanded) {
    max-height: 0 !important;
    opacity: 0 !important;
    transform: translateY(-10px) !important;
    overflow: hidden !important;
  }

  /* Force expanded state */
  .section-content.expanded {
    max-height: 6000px !important;
    opacity: 1 !important;
    transform: translateY(0) !important;
  }

  /* Responsive improvements */
  @media (max-width: 768px) {
    .section-content.expanded {
      max-height: 8000px !important;
    }
  }

  /* Enhanced Milestone Cards */
  .milestone-card {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 1rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    margin-bottom: 1.5rem;
    overflow: visible; /* Allow content to expand properly */
    transition: all 0.3s ease;
  }

  .milestone-card:hover {
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    transform: translateY(-2px);
  }

  /* Milestone item container improvements */
  .milestone-item {
    overflow: visible !important; /* Ensure content is not clipped */
    min-height: auto; /* Allow natural height expansion */
  }

  /* Icon rotation animation - Matching submit-update.astro */
  .milestone-icon {
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .milestone-icon.rotated {
    transform: rotate(180deg);
  }
</style>

<script>
  // API Configuration
  const API_URL = 'http://localhost:3000/api';
  
  // Global variables
  let selectedProjectId = null;
  let projectsByDepartment = {};
  let allProjects = [];
  let currentUser = null;
  let currentTimelineFilter = 'all';

  // Initialize the page - Matching submit-update.astro behavior
  async function initializePage() {
    try {
      console.log('🚀 DEBUG: Initializing progress-timeline page');
      
      const token = localStorage.getItem('token');
      if (token) {
        // Fetch user data
        const userRes = await fetch(`${API_URL}/auth/profile`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (userRes.ok) {
          const userDataResponse = await userRes.json();
          if (userDataResponse.success && userDataResponse.user) {
            currentUser = userDataResponse.user;
          }
        }

        // Fetch projects and group by department
        await loadProjectsByDepartment();
        
        // Setup event listeners
        setupEventListeners();
        
        // Ensure timeline area is hidden initially - matching submit-update.astro
        const timelineArea = document.getElementById('timelineArea');
        if (timelineArea) {
          timelineArea.classList.add('hidden');
          console.log('✅ DEBUG: Ensured timeline area is hidden initially');
        }
        
        // Ensure no project is selected initially - matching submit-update.astro
        selectedProjectId = null;
        document.querySelectorAll('.project-card-wrapper').forEach(wrapper => {
          wrapper.classList.remove('selected');
        });
        console.log('✅ DEBUG: Ensured no project is selected initially');
      }
    } catch (error) {
      console.error('Error initializing page:', error);
    }
  }

  // Setup event listeners
  function setupEventListeners() {
    // Filter event listeners
    document.getElementById('departmentFilter')?.addEventListener('change', applyFilters);
    document.getElementById('statusFilter')?.addEventListener('change', applyFilters);
    document.getElementById('categoryFilter')?.addEventListener('change', applyFilters);
  }

  // Load projects grouped by department
  async function loadProjectsByDepartment() {
    try {
      const token = localStorage.getItem('token');
      const timestamp = new Date().getTime();
      const response = await fetch(`${API_URL}/projects?_t=${timestamp}`, {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          allProjects = data.projects.filter(p => p.submittedToSecretariat === true);
          updateProjectsByDepartment();
        }
      }
    } catch (error) {
      console.error('Error loading projects by department:', error);
    }
  }

  // Update projects by department based on filters
  function updateProjectsByDepartment() {
    const deptFilter = document.getElementById('departmentFilter')?.value || '';
    const statusFilter = document.getElementById('statusFilter')?.value || '';
    const categoryFilter = document.getElementById('categoryFilter')?.value || '';
    
    let filteredProjects = allProjects;
    
    if (statusFilter) {
      filteredProjects = filteredProjects.filter(p => p.status === statusFilter);
    }
    
    if (categoryFilter) {
      filteredProjects = filteredProjects.filter(p => p.category === categoryFilter);
    }
    
    // Group by department
    projectsByDepartment = {};
    filteredProjects.forEach(project => {
      const deptName = project.implementingOfficeName || 'Unknown Department';
      if (!deptFilter || deptName === deptFilter) {
        if (!projectsByDepartment[deptName]) {
          projectsByDepartment[deptName] = [];
        }
        projectsByDepartment[deptName].push(project);
      }
    });
    
    // Sort projects within each department by creation date (latest first)
    Object.keys(projectsByDepartment).forEach(dept => {
      projectsByDepartment[dept].sort((a, b) => 
        new Date(b.createdDate || b.createdAt) - new Date(a.createdDate || a.createdAt)
      );
    });
    
    // Update header project count
    const totalFilteredProjects = filteredProjects.length;
    const headerCount = document.getElementById('headerProjectCount');
    if (headerCount) {
      headerCount.textContent = `${totalFilteredProjects} Active Projects`;
    }
    
    // Update UI
    updateDepartmentAccordion();
  }

  // Apply filters
  function applyFilters() {
    updateProjectsByDepartment();
  }
  
  // Clear all filters
  function clearFilters() {
    document.getElementById('departmentFilter').value = '';
    document.getElementById('statusFilter').value = '';
    document.getElementById('categoryFilter').value = '';
    updateProjectsByDepartment();
  }

  // Update department accordion
  function updateDepartmentAccordion() {
    // This would be implemented to dynamically update the accordion
    // For now, we'll use a simple page reload approach
    // In a production app, this would be more sophisticated
  }

  // Toggle department accordion
  function toggleDepartment(deptIndex) {
    const deptSection = document.querySelector(`.department-projects[data-dept-index="${deptIndex}"]`);
    const chevron = document.querySelector(`.toggle-chevron[data-dept-index="${deptIndex}"]`);
    
    if (deptSection && chevron) {
      const isHidden = deptSection.classList.contains('hidden');
      
      if (isHidden) {
        deptSection.classList.remove('hidden');
        chevron.classList.add('expanded');
      } else {
        deptSection.classList.add('hidden');
        chevron.classList.remove('expanded');
        
        // Close timeline if it's open and belongs to a project in this department
        const timelineArea = document.getElementById('timelineArea');
        if (timelineArea && !timelineArea.classList.contains('hidden') && selectedProjectId) {
          // Check if the selected project belongs to this department
          const projectCards = deptSection.querySelectorAll('[data-project-id]');
          const belongsToThisDept = Array.from(projectCards).some(card => 
            card.getAttribute('data-project-id') === selectedProjectId
          );
          
          if (belongsToThisDept) {
            clearSelectedProject();
          }
        }
      }
    }
  }

  // Expand all departments
  function expandAllDepartments() {
    const deptSections = document.querySelectorAll('.department-projects');
    const chevrons = document.querySelectorAll('.toggle-chevron');
    
    deptSections.forEach(section => {
      section.classList.remove('hidden');
    });
    
    chevrons.forEach(chevron => {
      chevron.classList.add('expanded');
    });
  }

  // Collapse all departments
  function collapseAllDepartments() {
    const deptSections = document.querySelectorAll('.department-projects');
    const chevrons = document.querySelectorAll('.toggle-chevron');
    
    deptSections.forEach(section => {
      section.classList.add('hidden');
    });
    
    chevrons.forEach(chevron => {
      chevron.classList.remove('expanded');
    });
  }

  // Scroll project slider
  function scrollSlider(deptIndex, direction) {
    const slider = document.querySelector(`.project-slider[data-dept-index="${deptIndex}"]`);
    if (slider) {
      const cardWidth = 408; // 96 * 4 (w-96 + gap)
      const scrollAmount = cardWidth * direction;
      slider.scrollBy({
        left: scrollAmount,
        behavior: 'smooth'
      });
    }
  }

  // Show project preview tooltip
  function showProjectPreview(element, event) {
    const projectId = element.getAttribute('data-project-id');
    const project = allProjects.find(p => p.id === projectId);
    
    if (project) {
      const preview = document.getElementById('projectPreview');
      const title = document.getElementById('previewTitle');
      const budget = document.getElementById('previewBudget');
      const implementer = document.getElementById('previewImplementer');
      const lastUpdate = document.getElementById('previewLastUpdate');
      
      title.textContent = project.name;
      budget.textContent = `Budget: ${formatBudget(project.totalBudget)}`;
      implementer.textContent = `Implementer: ${project.implementingOfficeName}`;
      lastUpdate.textContent = `Last Updated: ${project.updatedAt ? new Date(project.updatedAt).toLocaleDateString() : 'N/A'}`;
      
      preview.style.left = `${event.pageX + 10}px`;
      preview.style.top = `${event.pageY - 50}px`;
      preview.classList.remove('hidden');
    }
  }

  // Hide project preview tooltip
  function hideProjectPreview() {
    document.getElementById('projectPreview').classList.add('hidden');
  }

  // Select project for timeline view - Matching submit-update.astro behavior
  async function selectProjectForTimeline(projectId) {
    console.log('🎯 DEBUG: User clicked project for timeline:', projectId);
    
    // Update selected project highlighting
    document.querySelectorAll('.project-card-wrapper').forEach(wrapper => {
      wrapper.classList.remove('selected');
    });
    
    const selectedWrapper = document.querySelector(`.project-card-wrapper[data-project-id="${projectId}"]`);
    if (selectedWrapper) {
      selectedWrapper.classList.add('selected');
    }
    
    selectedProjectId = projectId;
    
    // Show timeline area and loading state
    const timelineArea = document.getElementById('timelineArea');
    const timelineLoading = document.getElementById('timelineLoading');
    const timelineContent = document.getElementById('timelineContent');
    const timelineEmpty = document.getElementById('timelineEmpty');
    
    console.log('📦 DEBUG: Showing timeline area and setting loading state');
    timelineArea.classList.remove('hidden');
    timelineArea.style.display = 'block'; // Force show with inline style
    timelineLoading.classList.remove('hidden');
    timelineContent.classList.add('hidden');
    timelineEmpty.classList.add('hidden');
    
    // Scroll to timeline area with delay - matching submit-update.astro
    setTimeout(() => {
      console.log('🎯 DEBUG: Auto-scrolling to timeline area');
      timelineArea.scrollIntoView({ behavior: 'smooth', block: 'start' });
    }, 300);
    
    // Fetch project details and timeline
    await loadProjectTimeline(projectId);
  }

  // Load project timeline
  async function loadProjectTimeline(projectId) {
    try {
      console.log('🚀 DEBUG: loadProjectTimeline called for project:', projectId);
      
      // Debug container elements
      const timelineArea = document.getElementById('timelineArea');
      const timelineContent = document.getElementById('timelineContent');
      console.log('🏗️ DEBUG: Container elements:', {
        timelineArea: !!timelineArea,
        timelineContent: !!timelineContent,
        timelineAreaClasses: timelineArea?.className,
        timelineContentClasses: timelineContent?.className,
        timelineAreaStyle: timelineArea?.style.cssText,
        timelineContentStyle: timelineContent?.style.cssText
      });
      
      const token = localStorage.getItem('token');
      
      // Fetch project details with progress
      const progressResponse = await fetch(`${API_URL}/projects/progress/${projectId}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (!progressResponse.ok) {
        throw new Error('Failed to fetch project progress');
      }
      
      const progressData = await progressResponse.json();
      if (!progressData.success) {
        throw new Error(progressData.error || 'Failed to fetch project progress');
      }
      
      const project = progressData.data.project;
      const progress = progressData.data.progress;
      const milestones = progressData.data.projectMilestones || [];
      
      // Update timeline header
      document.getElementById('timelineProjectTitle').textContent = project.name;
      document.getElementById('timelineProjectCode').textContent = `Code: ${project.projectCode}`;
      document.getElementById('timelineBudget').textContent = formatBudget(project.totalBudget);
      
      // Update progress displays with animations
      updateProgressDisplay('overallProgress', 'overallProgressBar', progress.overall || 0);
      updateProgressDisplay('timelineProgressDisplay', 'timelineProgressBar', progress.internalTimeline || 0);
      updateProgressDisplay('budgetProgress', 'budgetProgressBar', progress.internalBudget || 0);
      updateProgressDisplay('physicalProgress', 'physicalProgressBar', progress.internalPhysical || 0);
      
      // Fetch project updates for milestone details
      const updatesResponse = await fetch(`${API_URL}/project-updates/project/${projectId}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      let updates = [];
      if (updatesResponse.ok) {
        const updatesData = await updatesResponse.json();
        if (updatesData.success) {
          updates = updatesData.updates || [];
        }
      }
      
      // Render timeline
      renderProjectTimeline(project, milestones, updates, progress);
      
      // Hide loading and show content
      document.getElementById('timelineLoading').classList.add('hidden');
      document.getElementById('timelineContent').classList.remove('hidden');
      
      // Ensure all milestone cards are collapsed initially - matching submit-update.astro behavior
      setTimeout(() => {
        console.log('🔒 DEBUG: Ensuring all milestone cards are collapsed initially');
        const milestoneContents = document.querySelectorAll('[id^="milestone-"][id$="-content"]');
        const milestoneIcons = document.querySelectorAll('[id^="milestone-"][id$="-icon"]');
        
        console.log('🔍 DEBUG: Found milestone contents for initial collapse:', milestoneContents.length);
        
        milestoneContents.forEach(content => {
          content.classList.remove('expanded');
          content.style.maxHeight = '0px';
          content.style.opacity = '0';
          content.style.transform = 'translateY(-10px)';
        });
        
        milestoneIcons.forEach(icon => {
          icon.classList.remove('rotated');
          icon.style.transform = 'rotate(0deg)';
        });
        
        console.log('✅ DEBUG: All milestone cards set to collapsed state');
      }, 100);
      
    } catch (error) {
      console.error('Error loading project timeline:', error);
      
      // Hide loading and show error
      document.getElementById('timelineLoading').classList.add('hidden');
      document.getElementById('timelineEmpty').classList.remove('hidden');
      document.getElementById('timelineEmpty').innerHTML = `
        <svg class="w-20 h-20 text-red-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        <p class="text-red-500 text-lg">Error loading project timeline</p>
        <p class="text-gray-500 text-sm mt-2">${error.message}</p>
      `;
    }
  }

  // Update progress display with animation
  function updateProgressDisplay(textId, barId, value) {
    const textElement = document.getElementById(textId);
    const barElement = document.getElementById(barId);
    
    if (textElement) {
      textElement.textContent = `${value.toFixed(1)}%`;
    }
    
    if (barElement) {
      // Determine color based on progress percentage
      const colorClass = value >= 0 && value <= 25 ? 'bg-red-500' : 
                        value >= 26 && value <= 50 ? 'bg-yellow-500' : 
                        value >= 51 && value <= 75 ? 'bg-blue-500' : 
                        value >= 76 && value <= 100 ? 'bg-green-500' : 'bg-gray-500';

      // Apply the color class
      barElement.className = barElement.className.replace(/bg-\w+-\d+/, '');
      barElement.classList.add(colorClass);

      // Update data attributes
      barElement.setAttribute('data-progress', value);
      barElement.setAttribute('data-progress-color', colorClass);

      // Set the progress width for animation
      barElement.style.setProperty('--dashboard-progress-width', `${value}%`);

      // Reset and start animation
      barElement.style.width = '0%';
      barElement.style.animation = 'none';
      barElement.offsetHeight; // Trigger reflow
      barElement.style.animation = 'fillDashboardProgress 2s ease-out forwards';
    }
  }

  // Render project timeline
  function renderProjectTimeline(project, milestones, updates, progress) {
    const timelineContent = document.getElementById('timelineContent');
    
    console.log('🎯 DEBUG: renderProjectTimeline called');
    console.log('📦 DEBUG: timelineContent element:', timelineContent);
    console.log('📊 DEBUG: milestones count:', milestones.length);
    console.log('📋 DEBUG: milestones data:', milestones);
    
    if (milestones.length === 0) {
      timelineContent.innerHTML = `
        <div class="text-center py-12">
          <svg class="w-20 h-20 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          <p class="text-gray-500 text-lg">No milestones configured for this project</p>
        </div>
      `;
      return;
    }
    
    // Group updates by milestone
    const updatesByMilestone = {};
    updates.forEach(update => {
      if (update.milestoneId) {
        if (!updatesByMilestone[update.milestoneId]) {
          updatesByMilestone[update.milestoneId] = [];
        }
        updatesByMilestone[update.milestoneId].push(update);
      }
    });
    
    const timelineHTML = milestones.map((milestone, index) => {
      const milestoneUpdates = updatesByMilestone[milestone.id] || [];
      const latestUpdate = milestoneUpdates.length > 0 ? milestoneUpdates[0] : null;
      
      // Determine milestone status
      let statusColor = 'gray';
      let statusText = 'Not Started';
      let statusBgColor = 'bg-gray-100';
      
      if (latestUpdate) {
        if (latestUpdate.secretariatVerdict) {
          switch (latestUpdate.secretariatVerdict.toLowerCase()) {
            case 'approved':
              statusColor = 'green';
              statusText = 'Approved';
              statusBgColor = 'bg-green-100';
              break;
            case 'rejected':
              statusColor = 'red';
              statusText = 'Rejected';
              statusBgColor = 'bg-red-100';
              break;
            case 'needs_revision':
              statusColor = 'yellow';
              statusText = 'Needs Revision';
              statusBgColor = 'bg-yellow-100';
              break;
            default:
              statusColor = 'blue';
              statusText = 'Under Review';
              statusBgColor = 'bg-blue-100';
          }
        } else {
          statusColor = 'blue';
          statusText = 'Submitted';
          statusBgColor = 'bg-blue-100';
        }
      }
      
      return `
        <!-- Individual Milestone Collapsible Card - Matching submit-update.astro -->
        <div class="bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-300 hover:shadow-xl hover:border-blue-200 hover:-translate-y-1 mb-4 overflow-visible milestone-${statusColor}" data-status="${statusText.toLowerCase()}">
          <div class="bg-gradient-to-r from-blue-50 to-gray-50 px-6 py-4 border-b border-blue-200 cursor-pointer hover:from-blue-100 hover:to-gray-100 transition-all duration-300 group" 
               onclick="toggleMilestoneCard('milestone-${milestone.id}')">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-4">
                <div class="w-12 h-12 ${statusBgColor} text-${statusColor}-600 rounded-xl flex items-center justify-center font-bold text-lg">
                  ${index + 1}
                </div>
                <div>
                  <h4 class="text-xl font-bold text-gray-800">${milestone.title || `Milestone ${index + 1}`}</h4>
                  <div class="flex flex-wrap items-center gap-3 mt-2">
                    <span class="px-3 py-1 ${statusBgColor} text-${statusColor}-700 rounded-full text-xs font-semibold">
                      ${statusText}
                    </span>
                    <span class="text-sm text-gray-600 bg-white/70 px-2 py-1 rounded-lg">Weight: ${(milestone.weight || 0)}%</span>
                    <span class="text-sm text-gray-500 bg-gray-50 px-2 py-1 rounded-lg">Due: ${milestone.dueDate ? new Date(milestone.dueDate).toLocaleDateString() : 'Not set'}</span>
                    <span class="text-sm text-gray-500 bg-gray-50 px-2 py-1 rounded-lg">Budget: ${formatBudget(milestone.plannedBudget)}</span>
                  </div>
                </div>
              </div>
              <div class="flex items-center gap-3">
                <div class="icon-container-small bg-gradient-to-br from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 milestone-icon" id="milestone-${milestone.id}-icon">
                  <svg class="w-4 h-4 text-white transition-transform duration-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>
          
          <div id="milestone-${milestone.id}-content" class="section-content">
            <div class="p-6 space-y-6">
              <!-- Enhanced Milestone Information Display - Matching submit-update.astro -->
              <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-6 mb-6 border border-gray-200">
                <h6 class="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                  <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                  </svg>
                  Milestone Information
                </h6>
                
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                  <div class="space-y-3">
                    <div class="bg-white rounded-lg p-4 border border-gray-200">
                      <label class="block text-sm font-medium text-gray-600 mb-1">Milestone Name (Item of Work)</label>
                      <div class="text-lg font-bold text-gray-900">${milestone.title || `Milestone ${index + 1}`}</div>
                    </div>
                    <div class="grid grid-cols-2 gap-3">
                      <div class="bg-white rounded-lg p-3 border border-gray-200">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Weight (%)</label>
                        <div class="text-xl font-bold text-blue-800">${(milestone.weight || 0)}%</div>
                      </div>
                      <div class="bg-white rounded-lg p-3 border border-gray-200">
                        <label class="block text-sm font-medium text-gray-600 mb-1">Due Date</label>
                        <div class="text-sm font-semibold text-gray-700">${milestone.dueDate ? new Date(milestone.dueDate).toLocaleDateString() : 'Not set'}</div>
                      </div>
                    </div>
                    <div class="bg-white rounded-lg p-3 border border-gray-200">
                      <label class="block text-sm font-medium text-gray-600 mb-1">Planned Budget</label>
                      <div class="text-lg font-bold text-emerald-600">${formatBudget(milestone.plannedBudget)}</div>
                    </div>
                  </div>
                  
                  <div class="space-y-3">
                    <div class="bg-white rounded-lg p-4 border border-gray-200">
                      <label class="block text-sm font-medium text-gray-600 mb-2">Description</label>
                      <div class="text-sm text-gray-700 leading-relaxed">${milestone.description || 'No description available'}</div>
                    </div>
                    <div class="grid grid-cols-3 gap-2">
                      <div class="bg-blue-50 rounded-lg p-3 border border-blue-200">
                        <label class="block text-xs font-medium text-blue-700 mb-1">Timeline</label>
                        <div class="text-sm font-bold text-blue-800">${milestone.timelineStartDate ? new Date(milestone.timelineStartDate).toLocaleDateString() : 'Not set'}</div>
                        <div class="text-xs text-blue-600">Start Date</div>
                      </div>
                      <div class="bg-blue-50 rounded-lg p-3 border border-blue-200">
                        <label class="block text-xs font-medium text-blue-700 mb-1">to</label>
                        <div class="text-sm font-bold text-blue-800">${milestone.timelineEndDate ? new Date(milestone.timelineEndDate).toLocaleDateString() : 'Not set'}</div>
                        <div class="text-xs text-blue-600">End Date</div>
                      </div>
                      <div class="bg-green-50 rounded-lg p-3 border border-green-200">
                        <label class="block text-xs font-medium text-green-700 mb-1">Budget</label>
                        <div class="text-sm font-bold text-green-800">${(milestone.budgetWeight || 0)}%</div>
                        <div class="text-xs text-green-600">Weight</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
          
              <!-- Enhanced Milestone Progress -->
              <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
                <div class="bg-gray-50 rounded-lg p-4">
                  <div class="flex items-center justify-between mb-2">
                    <span class="text-sm font-medium text-gray-700">Timeline Progress</span>
                    <span class="text-sm font-bold text-blue-600">${(milestone.timelineProgress || 0).toFixed(1)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-3">
                    <div class="bg-blue-500 h-3 rounded-full transition-all duration-1000" style="width: ${milestone.timelineProgress || 0}%"></div>
                  </div>
                </div>
                <div class="bg-gray-50 rounded-lg p-4">
                  <div class="flex items-center justify-between mb-2">
                    <span class="text-sm font-medium text-gray-700">Budget Progress</span>
                    <span class="text-sm font-bold text-green-600">${(milestone.budgetProgress || 0).toFixed(1)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-3">
                    <div class="bg-green-500 h-3 rounded-full transition-all duration-1000" style="width: ${milestone.budgetProgress || 0}%"></div>
                  </div>
                </div>
                <div class="bg-gray-50 rounded-lg p-4">
                  <div class="flex items-center justify-between mb-2">
                    <span class="text-sm font-medium text-gray-700">Physical Progress</span>
                    <span class="text-sm font-bold text-purple-600">${(milestone.physicalProgress || 0).toFixed(1)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-3">
                    <div class="bg-purple-500 h-3 rounded-full transition-all duration-1000" style="width: ${milestone.physicalProgress || 0}%"></div>
                  </div>
                </div>
              </div>
          
              <!-- Enhanced Updates Section -->
          ${milestoneUpdates.length > 0 ? `
            <div class="border-t border-gray-200 pt-6">
              <h5 class="text-lg font-semibold text-gray-800 mb-4 flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Update History (${milestoneUpdates.length})
              </h5>
              <div class="space-y-4">
                ${milestoneUpdates.map(update => `
                  <div class="bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg p-4 border-l-4 border-blue-500">
                    <div class="flex justify-between items-start mb-3">
                      <div class="flex items-center gap-2">
                        <div class="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center">
                          <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                        </div>
                        <div>
                          <div class="text-sm font-semibold text-gray-800">
                            ${update.updateType || 'Milestone Update'}
                          </div>
                          <div class="text-xs text-gray-500">
                            Submitted: ${new Date(update.createdAt).toLocaleDateString()}
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    ${update.description ? `
                      <p class="text-sm text-gray-700 mb-3 bg-white p-3 rounded-lg">${update.description}</p>
                    ` : ''}
                    
                    ${update.amountSpent ? `
                      <div class="flex items-center gap-2 text-sm text-gray-700 mb-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                        </svg>
                        <span class="font-medium">Amount Spent:</span> 
                        <span class="font-semibold text-green-600">${formatBudget(update.amountSpent)}</span>
                      </div>
                    ` : ''}
                    
                    ${update.secretariatVerdict ? `
                      <div class="mt-4 pt-4 border-t border-gray-200 bg-white rounded-lg p-3">
                        <div class="flex items-center gap-3 mb-2">
                          <svg class="w-5 h-5 text-${statusColor}-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                          <span class="text-sm font-semibold text-gray-800">Secretariat Verdict:</span>
                          <span class="px-3 py-1 ${statusBgColor} text-${statusColor}-700 rounded text-xs font-semibold">
                            ${update.secretariatVerdict.replace('_', ' ').toUpperCase()}
                          </span>
                        </div>
                        ${update.secretariatRemarks ? `
                          <p class="text-sm text-gray-700 italic bg-gray-50 p-3 rounded-lg">"${update.secretariatRemarks}"</p>
                        ` : ''}
                        ${update.secretariatVerifiedAt ? `
                          <div class="text-xs text-gray-500 mt-2 flex items-center gap-1">
                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            Verified: ${new Date(update.secretariatVerifiedAt).toLocaleDateString()}
                          </div>
                        ` : ''}
                      </div>
                    ` : `
                      <div class="mt-4 pt-4 border-t border-gray-200 bg-yellow-50 rounded-lg p-3">
                        <div class="flex items-center gap-2 text-yellow-800">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                          <span class="text-sm font-medium">Awaiting Secretariat Review</span>
                        </div>
                      </div>
                    `}
                  </div>
                `).join('')}
              </div>
            </div>
          ` : `
            <div class="border-t border-gray-200 pt-6 text-center">
              <div class="bg-gray-50 rounded-lg p-6">
                <svg class="w-12 h-12 text-gray-400 mx-auto mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <p class="text-gray-500 font-medium">No updates submitted for this milestone</p>
                <p class="text-gray-400 text-sm mt-1">Updates will appear here once EIU submits milestone progress</p>
              </div>
            </div>
          `}
            </div>
          </div>
        </div>
      `;
    }).join('');
    
    console.log('🎯 DEBUG: Setting timeline HTML');
    console.log('📄 DEBUG: Generated HTML length:', timelineHTML.length);
    console.log('📄 DEBUG: First 500 chars of HTML:', timelineHTML.substring(0, 500));
    
    timelineContent.innerHTML = timelineHTML;
    
    console.log('✅ DEBUG: HTML set, checking elements');
    const milestoneCards = document.querySelectorAll('[id^="milestone-"][id$="-content"]');
    console.log('🔍 DEBUG: Found milestone content elements:', milestoneCards.length);
    milestoneCards.forEach(card => {
      console.log('📋 DEBUG: Milestone card:', {
        id: card.id,
        classes: card.className,
        style: card.style.cssText,
        computedStyle: {
          maxHeight: window.getComputedStyle(card).maxHeight,
          opacity: window.getComputedStyle(card).opacity,
          overflow: window.getComputedStyle(card).overflow
        }
      });
    });
    
    // Apply current filter
    filterTimeline(currentTimelineFilter);
  }

  // Filter timeline milestones
  function filterTimeline(filter) {
    currentTimelineFilter = filter;
    
    // Update filter button states
    document.querySelectorAll('.timeline-filter-btn').forEach(btn => {
      btn.classList.remove('active');
      btn.classList.add('bg-gray-200', 'text-gray-700');
      btn.classList.remove('bg-blue-600', 'text-white');
    });
    
    const activeBtn = document.querySelector(`[onclick="filterTimeline('${filter}')"]`);
    if (activeBtn) {
      activeBtn.classList.add('active');
      activeBtn.classList.remove('bg-gray-200', 'text-gray-700');
      activeBtn.classList.add('bg-blue-600', 'text-white');
    }
    
    // Filter milestone items
    const milestoneItems = document.querySelectorAll('.milestone-item');
    milestoneItems.forEach(item => {
      const status = item.getAttribute('data-status');
      
      if (filter === 'all') {
        item.style.display = 'block';
      } else if (filter === 'completed' && (status === 'approved')) {
        item.style.display = 'block';
      } else if (filter === 'ongoing' && (status === 'submitted' || status === 'under review')) {
        item.style.display = 'block';
      } else if (filter === 'delayed' && (status === 'rejected' || status === 'needs revision')) {
        item.style.display = 'block';
      } else {
        item.style.display = 'none';
      }
    });
  }

  // Clear selected project
  function clearSelectedProject() {
    selectedProjectId = null;
    
    // Remove highlighting from all project cards
    document.querySelectorAll('.project-card-wrapper').forEach(wrapper => {
      wrapper.classList.remove('selected');
    });
    
    // Hide timeline area
    document.getElementById('timelineArea').classList.add('hidden');
  }

  // Format budget helper function
  function formatBudget(amount) {
    if (!amount || isNaN(amount)) return '₱0.00';
    const num = parseFloat(amount);
    
    if (num >= 1000000) {
      return `₱${num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    } else if (num >= 1000) {
      return `₱${num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    }
    return `₱${num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
  }

  // Export timeline
  function exportTimeline() {
    // TODO: Implement export functionality
    console.log('Exporting timeline...');
    alert('Timeline export functionality will be implemented soon!');
  }

  // Refresh data
  async function refreshData() {
    const refreshButton = event.target.closest('button');
    const originalHTML = refreshButton.innerHTML;
    
    refreshButton.innerHTML = `
      <svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
      </svg>
      Refreshing...
    `;
    
    try {
      await loadProjectsByDepartment();
      setTimeout(() => {
        refreshButton.innerHTML = originalHTML;
      }, 1000);
    } catch (error) {
      console.error('Error refreshing data:', error);
      refreshButton.innerHTML = originalHTML;
    }
  }

  // Initialize page on load - Matching submit-update.astro behavior
  document.addEventListener('DOMContentLoaded', function() {
    console.log('📋 DEBUG: DOM Content Loaded - starting initialization');
    
    // FORCE RESET - Prevent auto-selection
    selectedProjectId = null;
    
    // Immediately ensure timeline is hidden before any other initialization
    const timelineArea = document.getElementById('timelineArea');
    if (timelineArea) {
      timelineArea.classList.add('hidden');
      timelineArea.style.display = 'none'; // Force hidden with inline style
      console.log('🔒 DEBUG: Timeline area forced hidden with both class and inline style');
    }
    
    // Clear any selected project cards with delay to ensure DOM is fully loaded
    setTimeout(() => {
      document.querySelectorAll('.project-card-wrapper').forEach(wrapper => {
        wrapper.classList.remove('selected');
        console.log('🔒 DEBUG: Removed selected class from wrapper:', wrapper.dataset.projectId);
      });
      
      // Also ensure timeline stays hidden after DOM manipulation
      if (timelineArea) {
        timelineArea.classList.add('hidden');
        timelineArea.style.display = 'none';
        console.log('✅ DEBUG: Timeline area confirmed hidden after DOM manipulation');
      }
      
      console.log('✅ DEBUG: All project cards deselected after DOM load');
    }, 100);
    
    // Initialize the page
    initializePage();
    
    // Add keyboard navigation for project cards
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && selectedProjectId) {
        clearSelectedProject();
      }
    });
  });

  // Toggle milestone cards - Matching submit-update.astro
  window.toggleMilestoneCard = function(milestoneId) {
    console.log('🎯 DEBUG: Toggle milestone card called:', milestoneId);
    const sectionContent = document.getElementById(`${milestoneId}-content`);
    const icon = document.getElementById(`${milestoneId}-icon`);
    
    console.log('📦 DEBUG: Elements found:', { 
      sectionContent: !!sectionContent, 
      icon: !!icon,
      currentClasses: sectionContent ? sectionContent.className : 'not found',
      currentStyle: sectionContent ? sectionContent.style.cssText : 'not found',
      computedStyle: sectionContent ? {
        maxHeight: window.getComputedStyle(sectionContent).maxHeight,
        opacity: window.getComputedStyle(sectionContent).opacity,
        overflow: window.getComputedStyle(sectionContent).overflow,
        display: window.getComputedStyle(sectionContent).display
      } : 'not found'
    });
    
    if (sectionContent) {
      const isExpanded = sectionContent.classList.contains('expanded');
      console.log('📊 Current state - isExpanded:', isExpanded);
      
      if (isExpanded) {
        // Collapse
        console.log('🔒 Attempting to collapse...');
        sectionContent.classList.remove('expanded');
        
        // Force immediate style update
        sectionContent.style.maxHeight = '0px';
        sectionContent.style.opacity = '0';
        sectionContent.style.transform = 'translateY(-10px)';
        
        if (icon) {
          icon.classList.remove('rotated');
          icon.style.transform = 'rotate(0deg)';
        }
        
        console.log('🔒 Milestone collapsed - new classes:', sectionContent.className);
        
      } else {
        // Expand - but first close all other milestones
        console.log('🔓 Attempting to expand...');
        
        // Close all other open milestone submission forms only
        const allMilestoneContents = document.querySelectorAll('[id^="milestone-"][id$="-content"].section-content.expanded');
        const allMilestoneIcons = document.querySelectorAll('[id^="milestone-"][id$="-icon"].milestone-icon.rotated');
        
        console.log('🔍 Found milestone contents to potentially close:', allMilestoneContents.length);
        console.log('🔍 Current milestone content ID:', sectionContent.id);
        
        allMilestoneContents.forEach(content => {
          if (content.id !== sectionContent.id) {
            console.log('🔒 Auto-closing milestone:', content.id);
            content.classList.remove('expanded');
            content.style.maxHeight = '0px';
            content.style.opacity = '0';
            content.style.transform = 'translateY(-10px)';
          }
        });
        
        allMilestoneIcons.forEach(iconEl => {
          if (iconEl.id !== icon?.id) {
            console.log('🔒 Auto-rotating milestone icon:', iconEl.id);
            iconEl.classList.remove('rotated');
            iconEl.style.transform = 'rotate(0deg)';
          }
        });
        
        sectionContent.classList.add('expanded');
        
        // Force immediate style update
        sectionContent.style.maxHeight = '6000px';
        sectionContent.style.opacity = '1';
        sectionContent.style.transform = 'translateY(0)';
        
        if (icon) {
          icon.classList.add('rotated');
          icon.style.transform = 'rotate(180deg)';
        }
        
        console.log('🔓 Milestone expanded - new classes:', sectionContent.className);
      }
    }
  };

  // Debug function to test milestone expansion
  window.debugMilestoneExpansion = function() {
    console.log('🔧 DEBUG: Testing milestone expansion');
    const milestoneContents = document.querySelectorAll('[id^="milestone-"][id$="-content"]');
    console.log('🔍 DEBUG: Found milestone contents:', milestoneContents.length);
    
    milestoneContents.forEach((content, index) => {
      console.log(`🔍 DEBUG: Milestone ${index + 1}:`, {
        id: content.id,
        classes: content.className,
        style: content.style.cssText,
        computedStyle: {
          maxHeight: window.getComputedStyle(content).maxHeight,
          opacity: window.getComputedStyle(content).opacity,
          overflow: window.getComputedStyle(content).overflow,
          display: window.getComputedStyle(content).display,
          height: window.getComputedStyle(content).height
        },
        scrollHeight: content.scrollHeight,
        offsetHeight: content.offsetHeight
      });
      
      // Test manual expansion
      if (index === 0) {
        console.log('🧪 DEBUG: Testing manual expansion of first milestone');
        content.classList.add('expanded');
        content.style.maxHeight = '6000px';
        content.style.opacity = '1';
        content.style.transform = 'translateY(0)';
        
        setTimeout(() => {
          console.log('🧪 DEBUG: After manual expansion:', {
            classes: content.className,
            style: content.style.cssText,
            computedStyle: {
              maxHeight: window.getComputedStyle(content).maxHeight,
              opacity: window.getComputedStyle(content).opacity,
              height: window.getComputedStyle(content).height
            },
            scrollHeight: content.scrollHeight,
            offsetHeight: content.offsetHeight
          });
        }, 100);
      }
    });
  };

  // Force reset page state - Debug function
  window.forceResetPageState = function() {
    console.log('🔧 DEBUG: Force resetting page state');
    
    // Hide timeline area
    const timelineArea = document.getElementById('timelineArea');
    if (timelineArea) {
      timelineArea.classList.add('hidden');
      console.log('✅ DEBUG: Timeline area hidden');
    }
    
    // Clear all selected project cards
    selectedProjectId = null;
    document.querySelectorAll('.project-card-wrapper').forEach(wrapper => {
      wrapper.classList.remove('selected');
    });
    console.log('✅ DEBUG: All project cards deselected');
    
    // Check final state
    setTimeout(() => {
      console.log('🔍 DEBUG: Final state check:', {
        timelineAreaHidden: document.getElementById('timelineArea')?.classList.contains('hidden'),
        selectedProjectId: selectedProjectId,
        selectedCards: document.querySelectorAll('.project-card-wrapper.selected').length
      });
    }, 100);
  };

  // Add missing functions to prevent errors
  window.toggleMilestonesSection = function(sectionId) {
    console.log('🎯 DEBUG: toggleMilestonesSection called for:', sectionId);
    const content = document.getElementById(sectionId + '-content');
    const icon = document.getElementById(sectionId + '-icon');
    
    if (content && icon) {
      const isExpanded = content.classList.contains('expanded');
      if (isExpanded) {
        content.classList.remove('expanded');
        icon.classList.remove('rotated');
      } else {
        content.classList.add('expanded');
        icon.classList.add('rotated');
      }
    }
  };

  // Make functions globally available
  window.toggleDepartment = toggleDepartment;
  window.expandAllDepartments = expandAllDepartments;
  window.collapseAllDepartments = collapseAllDepartments;
  window.scrollSlider = scrollSlider;
  window.selectProjectForTimeline = selectProjectForTimeline;
  window.clearSelectedProject = clearSelectedProject;
  window.refreshData = refreshData;
  window.exportTimeline = exportTimeline;
  window.filterTimeline = filterTimeline;
  window.showProjectPreview = showProjectPreview;
  window.hideProjectPreview = hideProjectPreview;

  // Dashboard progress bar animation function
  function animateDashboardProgressBars(progressData = null) {
    if (progressData) {
      // Use provided progress data
      progressData.forEach(({ element, progress }) => {
        const bar = document.getElementById(element);
        if (!bar) return;

        // Determine color based on progress percentage
        const colorClass = progress >= 0 && progress <= 25 ? 'bg-red-500' : 
                          progress >= 26 && progress <= 50 ? 'bg-yellow-500' : 
                          progress >= 51 && progress <= 75 ? 'bg-blue-500' : 
                          progress >= 76 && progress <= 100 ? 'bg-green-500' : 'bg-gray-500';

        // Apply the color class
        bar.className = bar.className.replace(/bg-\w+-\d+/, '');
        bar.classList.add(colorClass);

        // Update data attributes
        bar.setAttribute('data-progress', progress);
        bar.setAttribute('data-progress-color', colorClass);

        // Set the progress width for animation
        bar.style.setProperty('--dashboard-progress-width', `${progress}%`);

        // Reset and start animation
        bar.style.width = '0%';
        bar.style.animation = 'none';
        bar.offsetHeight; // Trigger reflow
        bar.style.animation = 'fillDashboardProgress 2s ease-out forwards';
      });
    } else {
      // Fallback to original method for backward compatibility
      const progressBars = document.querySelectorAll('.dashboard-progress-bar-fill');
      progressBars.forEach((bar, index) => {
        const progress = parseFloat(bar.getAttribute('data-progress')) || 0;
        const colorClass = bar.getAttribute('data-progress-color') || 'bg-gray-500';
        
        // Apply the color class
        bar.className = bar.className.replace(/bg-\w+-\d+/, '');
        bar.classList.add(colorClass);
        
        // Set the progress width for animation
        bar.style.setProperty('--dashboard-progress-width', `${progress}%`);
        
        // Reset and start animation
        bar.style.width = '0%';
        bar.style.animation = 'none';
        bar.offsetHeight; // Trigger reflow
        bar.style.animation = 'fillDashboardProgress 2s ease-out forwards';
      });
    }
  }

  // Initialize dashboard progress bar animation when DOM is ready
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(animateDashboardProgressBars, 500);
  });

  // Also run on window load
  window.addEventListener('load', function() {
    setTimeout(animateDashboardProgressBars, 800);
  });

  // Export function globally
  window.animateDashboardProgressBars = animateDashboardProgressBars;
</script> 