---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import SecretariatLayout from '../../../../components/SecretariatLayout.astro';
import ProjectCard from '../../../../components/ProjectCard.astro';
import ProjectDetailsModal from '../../../../components/ProjectDetailsModal.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let submissions = [];
let stats = {
  totalSubmissions: 0,
  pendingReview: 0,
  approved: 0,
  overdue: 0
};
let loading = true;
let error = '';

// Try to fetch submissions data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch submissions for Secretariat review using dedicated endpoint
    const projectsRes = await fetch(`${API_URL}/projects/secretariat/submissions`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        submissions = data.projects;
        
        // Use statistics from API response
        if (data.stats) {
          stats = data.stats;
        } else {
          // Fallback calculation if stats not provided
          stats.totalSubmissions = submissions.length;
          stats.pendingReview = submissions.filter(p => p.workflowStatus === 'submitted').length;
          stats.approved = submissions.filter(p => p.workflowStatus === 'secretariat_approved' || p.workflowStatus === 'ongoing').length;
          
          // Calculate delayed projects and milestones with milestone-level detection
          const today = new Date();
          today.setHours(0, 0, 0, 0);
          let delayedMilestonesCount = 0;
          
          stats.overdue = submissions.filter(p => {
            let projectHasDelayedMilestones = false;
            
            // Check project-level overdue status
            if (p.workflowStatus === 'submitted' && p.endDate) {
              if (new Date(p.endDate) < new Date()) {
                projectHasDelayedMilestones = true;
              }
            }
            
            // Check milestone-level delays
            if (p.milestones && Array.isArray(p.milestones)) {
              p.milestones.forEach(milestone => {
                const dueDate = milestone.dueDate || milestone.deadline || milestone.targetDate || milestone.completionDate;
                const status = milestone.status || 'pending';
                
                if (dueDate && status !== 'completed' && status !== 'under_approval' && status !== 'revision_request') {
                  const milestoneDate = new Date(dueDate);
                  milestoneDate.setHours(0, 0, 0, 0);
                  if (milestoneDate < today && status === 'pending') {
                    delayedMilestonesCount++;
                    projectHasDelayedMilestones = true;
                  }
                }
              });
            }
            
            return projectHasDelayedMilestones;
          }).length;
          
          // Store delayed milestones count for use in the UI
          stats.delayedMilestones = delayedMilestonesCount;
        }
      }
    }
  }
} catch (err) {
  console.error('Error fetching submissions data:', err);
  error = 'Failed to fetch submissions data.';
}

loading = false;
---

<style>
  /* Icon Container Styles - Matching User Management Standard */
  .icon-container {
    @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
    position: relative;
    overflow: hidden;
  }
  
  .icon-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .icon-container > * {
    position: relative;
    z-index: 2;
  }
  
  .icon-container:hover::before {
    left: 100%;
  }
  
  .icon-container:hover {
    @apply transform scale-110 rotate-3;
  }
  
  /* Circular Progress Animation */
  .circular-progress-fill {
    stroke-dashoffset: var(--circular-progress-full, 175.9);
    transition: stroke-dashoffset 2s ease-out;
  }
  
  @keyframes fillCircularProgress {
    from {
      stroke-dashoffset: var(--circular-progress-full, 175.9);
    }
    to {
      stroke-dashoffset: var(--circular-progress-offset, 141.4);
    }
  }
  
  .circular-progress-fill.animate {
    animation: fillCircularProgress 2s ease-out forwards;
  }

  /* Table Progress Bar Animation */
  .table-progress-bar-fill {
    transform-origin: left;
    animation: fillTableProgress 2s ease-out forwards;
  }
  
  @keyframes fillTableProgress {
    from {
      width: 0%;
    }
    to {
      width: var(--table-progress-width);
    }
  }

  .icon-container-small {
    @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
    position: relative;
    overflow: hidden;
  }
  
  .icon-container-small::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .icon-container-small > * {
    position: relative;
    z-index: 2;
  }
  
  .icon-container-small:hover::before {
    left: 100%;
  }
  
  .icon-container-small:hover {
    @apply transform scale-110 rotate-3;
  }

  /* Modern Profile Card Styles - Matching User Management Standard */
  .profile-card {
    @apply bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 ease-out hover:shadow-2xl hover:border-sky-500/20 hover:-translate-y-2;
    position: relative;
    overflow: hidden;
  }
  
  .profile-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(14, 165, 233, 0.08), transparent);
    transition: left 0.6s ease-out;
    z-index: 1;
  }
  
  .profile-card > * {
    position: relative;
    z-index: 2;
  }
  
  .profile-card:hover::before {
    left: 100%;
  }

  /* Modern Button Styles - SECRETARIAT Theme */
  .btn-primary {
    @apply bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-sky-500/25 border border-sky-500/20;
    position: relative;
    overflow: hidden;
  }
  
  .btn-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .btn-primary > * {
    position: relative;
    z-index: 2;
  }
  
  .btn-primary:hover::before {
    left: 100%;
  }

  .btn-secondary {
    @apply bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl border border-gray-600 hover:border-gray-800;
    position: relative;
    overflow: hidden;
  }
  
  .btn-secondary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .btn-secondary > * {
    position: relative;
    z-index: 2;
  }
  
  .btn-secondary:hover::before {
    left: 100%;
  }

  .btn-success {
    @apply bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/25 border border-emerald-500/20;
    position: relative;
    overflow: hidden;
  }
  
  .btn-success::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .btn-success > * {
    position: relative;
    z-index: 2;
  }
  
  .btn-success:hover::before {
    left: 100%;
  }

  .btn-warning {
    @apply bg-gradient-to-r from-amber-500 to-amber-600 hover:from-amber-600 hover:to-amber-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-amber-500/25 border border-amber-500/20;
    position: relative;
    overflow: hidden;
  }
  
  .btn-warning::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .btn-warning > * {
    position: relative;
    z-index: 2;
  }
  
  .btn-warning:hover::before {
    left: 100%;
  }

  .btn-danger {
    @apply bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-red-500/25 border border-red-500/20;
    position: relative;
    overflow: hidden;
  }
  
  .btn-danger::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .btn-danger > * {
    position: relative;
    z-index: 2;
  }
  
  .btn-danger:hover::before {
    left: 100%;
  }

  /* Small Button Variants */
  .btn-sm {
    @apply px-4 py-2 text-sm;
  }

  /* Tab Button Enhancements - SECRETARIAT Theme */
  .tab-button {
    @apply flex-1 px-6 py-3 text-sm font-semibold transition-all duration-300 relative;
    backdrop-filter: blur(10px);
    position: relative;
    overflow: hidden;
  }

  .tab-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .tab-button > * {
    position: relative;
    z-index: 2;
  }
  
  .tab-button:hover::before {
    left: 100%;
  }

  .tab-button.active {
    @apply bg-sky-500 text-white shadow-lg transform scale-105;
    background: linear-gradient(135deg, #0ea5e9, #0284c7);
    box-shadow: 0 10px 25px -5px rgba(14, 165, 233, 0.4), 0 10px 10px -5px rgba(14, 165, 233, 0.04);
  }

  .tab-button:not(.active) {
    @apply text-gray-600 hover:text-sky-600 hover:bg-sky-50 hover:scale-105;
  }

  /* Modern Timeline Styles */
  .timeline-container {
    position: relative;
  }
  
  .timeline-line {
    position: absolute;
    left: 50%;
    top: 0;
    bottom: 0;
    width: 4px;
    background: linear-gradient(135deg, #3b82f6, #8b5cf6, #06b6d4);
    transform: translateX(-50%);
    border-radius: 2px;
  }
  
  .timeline-item {
    position: relative;
    margin-bottom: 2rem;
  }
  
  .timeline-item:nth-child(odd) .timeline-content {
    margin-left: 0;
    margin-right: 50%;
    padding-right: 2rem;
  }
  
  .timeline-item:nth-child(even) .timeline-content {
    margin-left: 50%;
    margin-right: 0;
    padding-left: 2rem;
  }
  
  /* Modern Timeline Animations */
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
  
  @keyframes bounce {
    0%, 20%, 53%, 80%, 100% {
      transform: translate3d(0,0,0);
    }
    40%, 43% {
      transform: translate3d(0, -8px, 0);
    }
    70% {
      transform: translate3d(0, -4px, 0);
    }
    90% {
      transform: translate3d(0, -2px, 0);
    }
  }
  
  .milestone-card {
    animation: slideInUp 0.6s ease-out;
  }
  
  .milestone-card:hover {
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }
  
  /* REMOVED: .timeline-progress transition that was interfering with JavaScript updates */
  
  .stat-card {
    transition: all 0.3s ease;
  }
  
  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .timeline-view-toggle {
    transition: all 0.3s ease;
  }
  
  .timeline-view-toggle:hover {
    transform: scale(1.05);
  }
  
  /* Status indicator animations */
  .bg-green-500 {
    animation: pulse 2s infinite;
  }
  
  .bg-yellow-500 {
    animation: bounce 1s infinite;
  }
  
  .bg-red-500 {
    animation: pulse 1s infinite;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Horizontal Timeline Styles */
  .timeline-container {
    position: relative;
  }
  
  .timeline-track {
    position: relative;
    background: linear-gradient(to right, #e5e7eb, #d1d5db);
  }
  
  .timeline-grid {
    position: absolute;
    inset: 0;
    display: flex;
  }
  
  .timeline-grid-line {
    flex: 1;
    border-right: 1px dashed #9ca3af;
  }
  
  .timeline-grid-line:last-child {
    border-right: none;
  }
  
  .timeline-milestones {
    position: absolute;
    inset: 0;
  }
  
  .timeline-milestone {
    position: absolute;
    height: 100%;
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    border-radius: 2px;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
  }
  
  .timeline-milestone:hover {
    transform: scaleY(1.2);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
  }
  
  .timeline-milestone.completed {
    background: linear-gradient(135deg, #10b981, #059669);
  }
  
  .timeline-milestone.in-progress {
    background: linear-gradient(135deg, #f59e0b, #d97706);
  }
  
  .timeline-milestone.pending {
    background: linear-gradient(135deg, #6b7280, #4b5563);
  }
  
  .timeline-popup {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    min-width: 250px;
    max-width: 300px;
    z-index: 50;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    margin-bottom: 8px;
  }
  
  .timeline-milestone:hover .timeline-popup {
    opacity: 1;
    visibility: visible;
  }
  
  .timeline-popup::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 6px solid transparent;
    border-top-color: white;
  }
  
  .timeline-popup-title {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 8px;
    font-size: 14px;
  }
  
  .timeline-popup-division {
    margin-bottom: 6px;
  }
  
  .timeline-popup-division-label {
    font-size: 12px;
    color: #6b7280;
    font-weight: 500;
  }
  
  .timeline-popup-division-value {
    font-size: 12px;
    color: #374151;
    margin-left: 4px;
  }
  
  .timeline-dot {
    position: absolute;
    left: 50%;
    top: 1rem;
    width: 20px;
    height: 20px;
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    border: 4px solid white;
    border-radius: 50%;
    transform: translateX(-50%);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    z-index: 10;
  }
  
  .timeline-content {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    transition: all 0.3s ease;
  }
  
  .timeline-content:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
  }
  
  .progress-ring {
    transform: rotate(-90deg);
  }
  
  .progress-ring-circle {
    transition: stroke-dasharray 0.35s;
    transform-origin: 50% 50%;
  }
  
  .department-card {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    transition: all 0.3s ease;
  }
  
  .department-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }
  
  .project-card {
    background: white;
    border-radius: 0.75rem;
    border: 1px solid #e5e7eb;
    transition: all 0.3s ease;
  }
  
  .project-card:hover {
    border-color: #3b82f6;
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.1);
  }
  
  .milestone-progress {
    background: linear-gradient(90deg, #e5e7eb 0%, #f3f4f6 100%);
    border-radius: 0.5rem;
    overflow: hidden;
  }
  
  .milestone-progress-fill {
    height: 100%;
    border-radius: 0.5rem;
    /* Removed transition that was interfering with progress bar updates */
  }
  
  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .status-ongoing {
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    color: white;
  }
  
  .status-complete {
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
  }
  
  .status-pending {
    background: linear-gradient(135deg, #f59e0b, #d97706);
    color: white;
  }
  
  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    border-radius: 3px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #2563eb, #7c3aed);
  }
  
  /* Enhanced Tab Switching Animations */
  .tab-content {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1;
    transform: translateY(0);
  }
  
  .tab-content.hidden {
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
  }
  
  .tab-content.fade-in {
    animation: fadeInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  .tab-content.fade-out {
    animation: fadeOutDown 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fadeOutDown {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  }
  
  /* Modern Tab Button Design */
  .tab-button {
    position: relative;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    width: 140px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    flex-grow: 0;
    border: none;
    outline: none;
    cursor: pointer;
  }
  
  .tab-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }
  
  .tab-button:hover::before {
    left: 100%;
  }
  
  .tab-button.active {
    background: linear-gradient(135deg, #FE5353, #E54545);
    color: white;
    font-weight: 600;
  }
  
  .tab-button:not(.active):hover {
    background: #f8f9fa;
    transform: translateY(-1px);
  }
  
  /* Sink and pop animation for tab switching */
  .tab-button.switching {
    animation: sinkAndPop 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes sinkAndPop {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(2px);
    }
    100% {
      transform: translateY(0);
    }
  }
  
  /* Card Grid Animation */
  .card-grid {
    animation: slideInUp 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Staggered Card Animation */
  .submission-card {
    animation: cardSlideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
    transform: translateY(20px);
  }
  
  .submission-card:nth-child(1) { animation-delay: 0.1s; }
  .submission-card:nth-child(2) { animation-delay: 0.2s; }
  .submission-card:nth-child(3) { animation-delay: 0.3s; }
  .submission-card:nth-child(4) { animation-delay: 0.4s; }
  .submission-card:nth-child(5) { animation-delay: 0.5s; }
  .submission-card:nth-child(6) { animation-delay: 0.6s; }
  
  @keyframes cardSlideIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Subtle Ripple Effect */
  .tab-button {
    position: relative;
    overflow: hidden;
  }
  
  .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    transform: scale(0);
    animation: ripple 0.6s ease-out;
    pointer-events: none;
  }
  
  @keyframes ripple {
    to {
      transform: scale(2);
      opacity: 0;
    }
  }
  
  /* Shimmer Animation for Enhanced Effects */
  @keyframes shimmer {
    0% {
      transform: translateX(-100%) skewX(-12deg);
    }
    100% {
      transform: translateX(200%) skewX(-12deg);
    }
  }
  
  .animate-shimmer {
    animation: shimmer 1.5s ease-in-out infinite;
  }
</style>

<Layout title="Submissions & Tracker | MPMEC Secretariat">
  <SecretariatLayout>
    <!-- Page Header - Matching MPMEC Structure -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-black">Submissions & Tracker</h1>
              <p class="text-sm text-gray-600">Municipal Project Monitoring and Evaluation Committee - Secretariat</p>
            </div>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Total Submissions</p>
            <p class="text-xs text-black font-semibold" id="headerSubmissionCount">{stats.totalSubmissions} Active Submissions</p>
          </div>
          <div class="w-4 h-4 bg-sky-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <main class="bg-gradient-to-br from-gray-50 to-white min-h-screen px-8 py-8">
      <!-- Action Buttons -->
      <div class="flex items-center justify-end gap-3 mb-8">
        <button onclick="exportData()" class="btn-success btn-sm inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          Export Data
        </button>
        <button onclick="refreshSubmissions()" class="btn-primary btn-sm inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
          Refresh Data
        </button>
      </div>

      <!-- Enhanced Submissions Overview Cards - SECRETARIAT Theme -->
      <div class="space-y-6 mb-8">
        <!-- Top Row: Primary Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Total Projects/Budget - SECRETARIAT Theme -->
          <div class="profile-card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Total Projects</p>
                <p class="text-2xl font-bold text-black" id="totalSubmissions">{stats.totalSubmissions}</p>
                <p class="text-xs text-gray-500 mt-1">Project submissions</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Budget Utilized - Professional Light Green -->
          <div class="profile-card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Budget Utilized</p>
                <p class="text-2xl font-bold text-black">₱0</p>
                <p class="text-xs text-green-600 mt-1">0% utilized</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 8h6m-5 0a3 3 0 110 6H9l3 3-3-3h1m1 0h6m-6 0a3 3 0 110-6H9l3-3-3 3h1m1 0h6"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Average Progress - Professional Light Gold -->
          <div class="profile-card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Avg Progress</p>
                <p class="text-2xl font-bold text-black">0%</p>
                <p class="text-xs text-amber-600 mt-1">Overall completion</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Total Departments - MPMEC Theme -->
          <div class="profile-card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Total Departments</p>
                <p class="text-2xl font-bold text-black">1</p>
                <p class="text-xs text-blue-600 mt-1">Active departments</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>

        <!-- Bottom Row: Status Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Ongoing/Approved - MPMEC Theme -->
          <div class="profile-card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Approved</p>
                <p class="text-2xl font-bold text-black" id="approved">{stats.approved}</p>
                <p class="text-xs text-blue-600 mt-1">Successfully approved</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-blue-600 to-blue-700">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Pending Review - Professional Light Gold -->
          <div class="profile-card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">P.Review</p>
                <p class="text-2xl font-bold text-black" id="pendingReview">{stats.pendingReview}</p>
                <p class="text-xs text-amber-600 mt-1">Awaiting decision</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Delayed - Professional Light Red -->
          <div class="profile-card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Delayed</p>
                <p class="text-2xl font-bold text-black" id="delayedCount">{stats.overdue}</p>
                <p class="text-xs text-red-600 mt-1">Behind schedule</p>
                <p class="text-xs text-gray-500 mt-1">Delayed Milestones: <span>{stats.delayedMilestones || 0}</span></p>
              </div>
              <div class="icon-container bg-gradient-to-br from-red-500 to-red-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Completed - Professional Light Green -->
          <div class="profile-card p-6">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Completed</p>
                <p class="text-2xl font-bold text-black" id="overdue">{stats.overdue}</p>
                <p class="text-xs text-green-600 mt-1">Successfully finished</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Filters Section -->
      <div class="profile-card p-8 mb-8">
        <div class="mb-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="icon-container-small bg-gradient-to-br from-sky-500 to-sky-600">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-bold text-black">Search & Filters</h3>
          </div>
          
          <div class="bg-gradient-to-br from-gray-50 to-gray-100/50 rounded-2xl p-6 border border-gray-200">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Search Submissions</label>
                <div class="relative">
                  <input 
                    type="text" 
                    id="searchInput" 
                    placeholder="Search by project name..." 
                    class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                  >
                  <svg class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Status</label>
                <select 
                  id="statusFilter" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                >
                  <option value="">All Status</option>
                  <option value="pending">Pending</option>
                  <option value="ongoing">Ongoing</option>
                  <option value="complete">Complete</option>
                </select>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Office</label>
                <select 
                  id="officeFilter" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                >
                  <option value="">All Offices</option>
                  <option value="Municipal Engineer Office">Municipal Engineer Office</option>
                  <option value="Health Department">Health Department</option>
                  <option value="Finance Department">Finance Department</option>
                  <option value="Planning Office">Planning Office</option>
                </select>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Category</label>
                <select 
                  id="categoryFilter" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                >
                  <option value="">All Categories</option>
                  <option value="infrastructure">Infrastructure</option>
                  <option value="health">Health</option>
                  <option value="education">Education</option>
                  <option value="agriculture">Agriculture</option>
                  <option value="social">Social Services</option>
                  <option value="environment">Environment</option>
                  <option value="transportation">Transportation</option>
                </select>
              </div>
            </div>
            
            <div class="flex flex-wrap items-center gap-3 mt-6">
              <button onclick="applyFilters()" class="btn-primary inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                </svg>
                Apply Filters
              </button>
              <button onclick="clearFilters()" class="btn-secondary inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Clear Filters
              </button>
            </div>
          </div>
        </div>
      </div>

      {loading ? (
        <!-- Enhanced Loading State -->
        <div class="profile-card p-16 text-center">
          <div class="relative">
            <div class="animate-spin rounded-full h-16 w-16 border-4 border-sky-200 border-t-sky-500 mx-auto mb-6"></div>
            <div class="absolute inset-0 flex items-center justify-center">
              <div class="w-6 h-6 bg-sky-500 rounded-full animate-pulse"></div>
            </div>
          </div>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">Loading Submissions</h3>
          <p class="text-gray-600">Fetching project submissions and status updates...</p>
        </div>
      ) : error ? (
        <!-- Enhanced Error State -->
        <div class="profile-card p-16 text-center">
          <div class="icon-container bg-gradient-to-br from-red-500 to-red-600 mx-auto mb-6" style="width: 80px; height: 80px;">
            <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-black mb-3">Error Loading Submissions</h3>
          <p class="text-red-600 mb-6">{error}</p>
          <button onclick="refreshSubmissions()" class="btn-primary inline-flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Try Again
          </button>
        </div>
      ) : submissions.length === 0 ? (
        <!-- Enhanced Empty State -->
        <div class="profile-card p-16 text-center">
          <div class="bg-gradient-to-br from-sky-50 to-blue-100 rounded-2xl p-8 max-w-md mx-auto">
            <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600 mx-auto mb-6" style="width: 80px; height: 80px;">
              <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
            <h3 class="text-2xl font-bold text-black mb-3">No Submissions Found</h3>
            <p class="text-gray-600 text-lg mb-2">No project submissions have been received yet</p>
            <p class="text-gray-500 text-sm">Projects will appear here once they are submitted by Implementing Offices</p>
                          <div class="flex items-center justify-center gap-4 mt-6">
                <div class="flex items-center gap-2">
                  <div class="w-2 h-2 bg-sky-500 rounded-full"></div>
                  <span class="text-xs text-gray-600">Submissions</span>
                </div>
                <div class="flex items-center gap-2">
                  <div class="w-2 h-2 bg-amber-500 rounded-full"></div>
                  <span class="text-xs text-gray-600">Reviews</span>
                </div>
                <div class="flex items-center gap-2">
                  <div class="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span class="text-xs text-gray-600">Approvals</span>
                </div>
              </div>
          </div>
        </div>
      ) : (
        <!-- Enhanced Submissions View -->
        <div class="profile-card overflow-hidden">
          <!-- Professional Tab Navigation -->
          <div class="bg-gradient-to-r from-sky-50 to-blue-50 px-8 py-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-6">
                <div class="flex items-center gap-4">
                  <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600">
                    <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                    </svg>
                  </div>
                  <div>
                    <h2 class="text-2xl font-bold text-black">All Submissions</h2>
                    <p class="text-gray-600 mt-1">Review and manage project submissions</p>
                  </div>
                </div>
              </div>
              <!-- All Action Buttons Row -->
              <div class="flex items-center justify-between gap-4">
                <!-- Left side - Action Buttons -->
                <div class="flex items-center gap-3">
                  <button onclick="markAllReviewed()" class="btn-warning btn-sm inline-flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Mark All Reviewed
                  </button>
                  <button onclick="bulkActions()" class="btn-primary btn-sm inline-flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
                    </svg>
                    Bulk Actions
                  </button>
                </div>
                
                <!-- Right side - View Toggle Tabs (Single Container) -->
                <div class="flex bg-white/90 backdrop-blur-sm border border-sky-200/50 rounded-xl shadow-sm overflow-hidden">
                  <button id="tableTab" class="btn-primary btn-sm inline-flex items-center gap-2 rounded-none">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                    Table View
                  </button>
                  <button id="cardTab" class="bg-white hover:bg-gray-50 text-gray-700 hover:text-sky-600 font-semibold px-4 py-2 transition-all duration-300 btn-sm inline-flex items-center gap-2 rounded-none border-l border-sky-200/50">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                    </svg>
                    Card View
                  </button>
                </div>
              </div>
            </div>
          </div>

          <!-- Table View Content -->
          <div id="tableView" class="tab-content block">
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      <input type="checkbox" id="selectAll" class="h-4 w-4 text-[#FE5353] focus:ring-[#FE5353] border-gray-300 rounded">
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Office</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Submitted</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" id="submissionsTable">
                {submissions.map(submission => {
                  const progress = parseFloat(submission.progress?.overallProgress || submission.overallProgress || 0);
                  const isOverdue = submission.status === 'pending' && submission.endDate && new Date(submission.endDate) < new Date();
                  
                  return (
                    <tr class="group hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 transition-all duration-300 transform hover:scale-[1.01] cursor-pointer">
                      <td class="px-6 py-4 whitespace-nowrap">
                        <input type="checkbox" class="submission-checkbox h-4 w-4 text-[#FE5353] focus:ring-[#FE5353] border-gray-300 rounded" value={submission.id}>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div class="text-sm font-medium text-gray-900">{submission.name}</div>
                          <div class="text-sm text-gray-500">{submission.projectCode}</div>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{submission.implementingOfficeName}</div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class={`px-2 py-1 text-xs font-medium rounded-full capitalize ${
                          submission.category === 'infrastructure' ? 'bg-blue-100 text-blue-700' :
                          submission.category === 'health' ? 'bg-green-100 text-green-700' :
                          submission.category === 'education' ? 'bg-purple-100 text-purple-700' :
                          submission.category === 'agriculture' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {submission.category}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {new Date(submission.createdAt).toLocaleDateString()}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                          submission.status === 'complete' ? 'bg-green-100 text-green-700' :
                          submission.status === 'ongoing' ? 'bg-blue-100 text-blue-700' :
                          submission.status === 'pending' ? 'bg-yellow-100 text-yellow-700' :
                          submission.status === 'delayed' ? 'bg-red-100 text-red-700 animate-pulse' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {submission.status}
                          {isOverdue && <span class="ml-1 text-red-600">(Overdue)</span>}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                          <div class="w-20 bg-gray-200 rounded-full h-3 mr-3 group-hover:bg-gray-300 transition-colors overflow-hidden">
                            <div 
                              class="h-3 rounded-full transition-all duration-2000 ease-out table-progress-bar-fill"
                              style="width: 0%"
                              data-progress={progress}
                              data-progress-color={progress >= 0 && progress <= 25 ? 'bg-red-500' : progress >= 26 && progress <= 50 ? 'bg-yellow-500' : progress >= 51 && progress <= 75 ? 'bg-blue-500' : progress >= 76 && progress <= 100 ? 'bg-green-500' : 'bg-gray-500'}
                            ></div>
                          </div>
                          <span class="text-sm font-semibold text-gray-900 group-hover:text-blue-600 transition-colors">{progress.toFixed(2)}%</span>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div class="flex items-center gap-2">
                          <button 
                            onclick={`viewProjectDetails('${submission.id}')`} 
                            class="btn-primary btn-sm inline-flex items-center gap-1 px-3 py-1.5 text-xs"
                          >
                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                            </svg>
                            View
                          </button>
                          {submission.status === 'pending' && (
                            <>
                              <button 
                                onclick={`approveSubmission('${submission.id}')`} 
                                class="btn-success btn-sm inline-flex items-center gap-1 px-3 py-1.5 text-xs"
                              >
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                Approve
                              </button>
                              <button 
                                onclick={`rejectSubmission('${submission.id}')`} 
                                class="btn-danger btn-sm inline-flex items-center gap-1 px-3 py-1.5 text-xs"
                              >
                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                Reject
                              </button>
                            </>
                          )}
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
          <div class="px-6 py-4 border-t border-gray-200">
            <div class="flex items-center justify-between">
              <p class="text-sm text-gray-700">Showing <span id="showingCount">{submissions.length}</span> of <span id="totalCount">{submissions.length}</span> submissions</p>
            </div>
          </div>
        </div>

          <!-- Card View Content -->
          <div id="cardView" class="tab-content hidden p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 card-grid" id="submissionsCardGrid">
              {submissions.map(submission => (
                  <div class="submission-card-wrapper relative" data-submission-id={submission.id}>
                    <ProjectCard 
                      project={submission}
                      userTheme="secretariat"
                      onClick="viewProjectDetails"
                    />
                    <!-- Selection Checkbox Overlay -->
                    <div class="absolute top-3 right-3 z-10">
                      <input 
                        type="checkbox" 
                        class="submission-checkbox h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded bg-white shadow-sm" 
                        value={submission.id}
                        onclick="event.stopPropagation()"
                      />
                    </div>
                  </div>
                ))}
            </div>
            <div class="px-6 py-4 border-t border-gray-200">
              <div class="flex items-center justify-between">
                <p class="text-sm text-gray-700">Showing <span id="showingCount">{submissions.length}</span> of <span id="totalCount">{submissions.length}</span> submissions</p>
              </div>
            </div>
          </div>
        </div>
      )}
      
      <!-- Department Timeline Overview -->
      {submissions.length > 0 && (
        <div class="mt-12">
          <div class="profile-card">
            <!-- Enhanced Header with SECRETARIAT Theme -->
            <div class="px-8 py-6 bg-gradient-to-r from-sky-50 to-sky-100 border-b border-sky-200/50">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-4">
                  <div class="icon-container-small">
                    <svg class="w-7 h-7 text-sky-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                  </div>
                  <div>
                    <h2 class="text-2xl font-bold text-black">Department Timeline Overview</h2>
                    <p class="text-gray-600 mt-1">Interactive project timeline and progress visualization</p>
                  </div>
                </div>
                <div class="flex items-center gap-3">
                  <select id="departmentFilter" class="form-control">
                    <option value="">All Departments</option>
                  </select>
                  <button onclick="toggleAllDepartments()" class="btn-secondary btn-sm inline-flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                    </svg>
                    Toggle All
                  </button>
                  <button onclick="expandAllDepartments()" class="btn-primary btn-sm inline-flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
                    </svg>
                    Expand All
                  </button>
                </div>
              </div>
            </div>
            
            <div class="p-8">
              <div id="departmentTimelines" class="space-y-6">
                <!-- Department timelines will be loaded here -->
              </div>
              
              <!-- Loading State -->
              <div id="timelineLoading" class="flex items-center justify-center py-12">
                <div class="text-center">
                  <div class="animate-spin w-8 h-8 border-4 border-sky-200 border-t-sky-500 rounded-full mx-auto mb-4"></div>
                  <p class="text-gray-600">Loading department timelines...</p>
                </div>
              </div>
              
              <!-- Empty State -->
              <div id="timelineEmpty" class="hidden text-center py-12">
                <div class="icon-container-small mx-auto mb-4">
                  <svg class="w-7 h-7 text-sky-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                  </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-800 mb-2">No Department Data</h3>
                <p class="text-gray-600">No project submissions found for timeline visualization.</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </main>

    

    <!-- Project Details Modal -->
    <ProjectDetailsModal userTheme="secretariat" />
  </SecretariatLayout>
</Layout>

<script>
  // API Configuration
  const API_URL = 'http://localhost:3000/api';
  
  // Global variables
  let submissions = [];
  let currentUser = null;

  // Initialize the page
  async function initializePage() {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // Fetch user data for authentication
        const userRes = await fetch(`${API_URL}/auth/profile`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (userRes.ok) {
          const userDataResponse = await userRes.json();
          if (userDataResponse.success && userDataResponse.user) {
            currentUser = userDataResponse.user;
          }
        }

        // Fetch submissions from the API using dedicated endpoint
        const submissionsRes = await fetch(`${API_URL}/projects/secretariat/submissions`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (submissionsRes.ok) {
          const data = await submissionsRes.json();
          if (data.success) {
            submissions = data.projects;
            updateSubmissionsUI();
          }
        }
      }
    } catch (error) {
      console.error('Error fetching submissions data:', error);
    }
  }

  // Initialize the page when the script loads
  initializePage();

  // Render department timelines on page load
  document.addEventListener('DOMContentLoaded', function() {
    if (submissions.length > 0) {
      renderDepartmentTimelines();
    }
  });

  // Load submissions function
  async function loadSubmissions() {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      const response = await fetch(`${API_URL}/projects/secretariat/submissions`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          submissions = data.projects;
          updateSubmissionsUI();
          location.reload(); // Refresh the page to update statistics
        }
      }
    } catch (error) {
      console.error('Error loading submissions:', error);
    }
  }

  // Update submissions UI
  function updateSubmissionsUI() {
    console.log('📋 Submissions updated:', {
      count: submissions.length,
      submissions: submissions.map(sub => ({
        id: sub.id,
        name: sub.name || sub.projectName,
        implementingOfficeName: sub.implementingOfficeName,
        status: sub.status
      }))
    });
    renderDepartmentTimelines();
    
    // Load timelines after UI update
    // Note: loadAllProjectTimelines function removed to fix ReferenceError
    // setTimeout(() => {
    //   loadAllProjectTimelines();
    // }, 1000);
  }

  // Render department timelines
  function renderDepartmentTimelines() {
    const container = document.getElementById('departmentTimelines');
    if (!container) return;
    
    console.log('🚀 Starting renderDepartmentTimelines with submissions:', {
      submissionsCount: submissions.length,
      submissions: submissions.map(sub => ({
        id: sub.id,
        name: sub.name || sub.projectName,
        implementingOfficeName: sub.implementingOfficeName,
        status: sub.status
      }))
    });

    // Function to get department-specific logos
    function getDepartmentLogo(deptName) {
      const dept = deptName.toLowerCase();
      
      if (dept.includes('engineer') || dept.includes('meo') || dept.includes('municipal engineer')) {
        return `<img src="/meo-logo.jfif" alt="Municipal Engineer Office" class="w-full h-full object-contain" />`;
      } else if (dept.includes('environment') || dept.includes('natural') || dept.includes('menro') || dept.includes('Municipal Environment And Natural Resources Office')) {
        return `<img src="/menro-logo.jfif" alt="Municipal Environment and Natural Resources Office" class="w-full h-full object-contain" />`;
      } else if (dept.includes('disaster') || dept.includes('risk') || dept.includes('mdrrmo') || dept.includes('Municipal Disaster and Risk Reduction Management Office')) {
        return `<img src="/mdrrmo-logo.jfif" alt="Municipal Disaster and Risk Reduction Management Office" class="w-full h-full object-contain" />`;
      } else if (dept.includes('agriculture') || dept.includes('mao') || dept.includes('Municipal Agriculturist')) {
        return `<img src="/mao-logo.jfif" alt="Municipal Agriculturist's Office" class="w-full h-full object-contain" />`;
      } else if (dept.includes('social') || dept.includes('welfare') || dept.includes('mswdo') || dept.includes('Municipal Social Welfare and Development Office')) {
        return `<img src="/mswdo-logo.jfif" alt="Municipal Social Welfare and Development Office" class="w-full h-full object-contain" />`;
      } else {
        // Default logo for general departments
        return `<svg class="w-full h-full text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>`;
      }
    }

    // Group projects by department
    const departments = {};
    submissions.forEach(project => {
      const dept = project.implementingOfficeName || 'Unknown Department';
      if (!departments[dept]) {
        departments[dept] = [];
      }
      departments[dept].push(project);
    });
    
    console.log('📊 Department grouping results:', {
      totalSubmissions: submissions.length,
      departments: Object.keys(departments),
      departmentCount: Object.keys(departments).length,
      departmentDetails: Object.keys(departments).map(dept => ({
        name: dept,
        projectCount: departments[dept].length
      }))
    });

    // Calculate department statistics
    const departmentStats = {};
    Object.keys(departments).forEach(dept => {
      const projects = departments[dept];
      const totalProjects = projects.length;
      const completedProjects = projects.filter(p => p.status === 'complete').length;
      const ongoingProjects = projects.filter(p => p.status === 'ongoing').length;
      const pendingProjects = projects.filter(p => p.status === 'pending').length;
      const delayedProjects = projects.filter(p => p.status === 'delayed').length;
      const avgProgress = projects.reduce((sum, p) => sum + (parseFloat(p.progress?.overallProgress || p.overallProgress || 0)), 0) / totalProjects;
      const totalBudget = projects.reduce((sum, p) => sum + parseFloat(p.totalBudget || 0), 0);

      departmentStats[dept] = {
        totalProjects,
        completedProjects,
        ongoingProjects,
        pendingProjects,
        delayedProjects,
        avgProgress: Math.round(avgProgress * 10) / 10,
        totalBudget
      };
    });

    // Hide loading, show content
    const loadingEl = document.getElementById('timelineLoading');
    const emptyEl = document.getElementById('timelineEmpty');
    if (loadingEl) loadingEl.style.display = 'none';
    if (emptyEl) emptyEl.classList.add('hidden');

    // Populate department filter
    const filterSelect = document.getElementById('departmentFilter');
    if (filterSelect) {
      filterSelect.innerHTML = '<option value="">All Departments</option>' +
        Object.keys(departments).map(dept => 
          `<option value="${dept}">${dept}</option>`
        ).join('');
    }

    // Render each department with enhanced design
    const departmentKeys = Object.keys(departments);
    console.log('🎨 Starting to render departments:', {
      totalDepartments: departmentKeys.length,
      departmentNames: departmentKeys
    });
    
    // Clear container first
    container.innerHTML = '';
    
    // Render each department individually to ensure all are added
    departmentKeys.forEach((dept, deptIndex) => {
      const projects = departments[dept];
      const stats = departmentStats[dept];
      const progressColor = stats.avgProgress >= 75 ? 'text-green-600' : 
                           stats.avgProgress >= 50 ? 'text-yellow-600' : 'text-red-600';
      
      // Ensure departments are collapsed by default
      console.log(`🎨 Rendering department ${deptIndex}: ${dept} - should be collapsed by default`);
      
      const departmentHTML = `
        <div class="department-timeline-card bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden transition-all duration-500 hover:shadow-2xl hover:border-sky-300 hover:-translate-y-1 group" data-department="${deptIndex}" data-dept-name="${dept}">
          <!-- Enhanced Department Header with Gradient Background -->
          <div class="relative bg-gradient-to-r from-sky-50 via-blue-50 to-indigo-50 border-b border-sky-200/50 overflow-hidden">
            <!-- Animated Background Pattern -->
            <div class="absolute inset-0 bg-gradient-to-r from-sky-100/20 via-blue-100/20 to-indigo-100/20 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            
            <div class="relative flex items-center justify-between p-6 cursor-pointer transition-all duration-300 hover:bg-gradient-to-r hover:from-sky-100/50 hover:to-blue-100/50" onclick="toggleDepartment(${deptIndex})">
              <div class="flex items-center gap-6">
                <!-- Enhanced Department Logo Container -->
                <div class="relative">
                  <div class="w-16 h-16 rounded-2xl bg-gradient-to-br from-sky-100 to-blue-100 p-3 shadow-lg transition-all duration-500 group-hover:scale-110 group-hover:rotate-3 group-hover:shadow-xl border-2 border-transparent group-hover:border-sky-300">
                    ${getDepartmentLogo(dept)}
                    <!-- Shimmer Effect -->
                    <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-transparent via-white/30 to-transparent -skew-x-12 opacity-0 group-hover:opacity-100 group-hover:animate-shimmer transition-all duration-500"></div>
                  </div>
                </div>
                
                <!-- Enhanced Department Information -->
                <div class="flex-1">
                  <div class="flex items-center gap-4 mb-2">
                    <h3 class="text-2xl font-bold text-gray-900 group-hover:text-sky-700 transition-colors duration-300">${dept}</h3>
                    <!-- Enhanced Status Indicator -->
                    <div class="flex items-center gap-2 px-3 py-1 bg-white/80 backdrop-blur-sm rounded-full border border-sky-200/50 shadow-sm">
                      <div class="w-2 h-2 rounded-full bg-sky-500 animate-pulse"></div>
                      <span class="text-xs font-semibold text-sky-700">Active Department</span>
                    </div>
                  </div>
                  
                  <!-- Enhanced Stats Row -->
                  <div class="flex items-center gap-6">
                    <div class="flex items-center gap-2">
                      <div class="w-8 h-8 bg-gradient-to-br from-sky-400 to-sky-600 rounded-lg flex items-center justify-center">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                        </svg>
                      </div>
                      <span class="text-sm font-semibold text-gray-700">${stats.totalProjects} project${stats.totalProjects !== 1 ? 's' : ''}</span>
                    </div>
                    
                    <div class="flex items-center gap-2">
                      <div class="w-8 h-8 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-lg flex items-center justify-center">
                        <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                      </div>
                      <span class="text-sm font-semibold ${progressColor}">${stats.avgProgress.toFixed(1)}% avg progress</span>
                    </div>
                  </div>
                </div>
              </div>
              <!-- Enhanced Budget and Action Section -->
              <div class="flex items-center gap-6">
                <!-- Enhanced Budget Display -->
                <div class="text-right bg-white/60 backdrop-blur-sm rounded-xl px-4 py-3 border border-sky-200/50 shadow-sm">
                  <p class="text-xs font-medium text-gray-600 uppercase tracking-wide">Total Budget</p>
                  <p class="text-xl font-bold text-gray-900">₱${stats.totalBudget.toLocaleString()}</p>
                </div>
                
                <!-- Enhanced Toggle Button -->
                <button onclick="event.stopPropagation(); toggleDepartment(${deptIndex})" 
                        class="group relative flex items-center justify-center w-14 h-14 bg-gradient-to-br from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-110 border border-sky-400/20 hover:border-sky-500/40 overflow-hidden"
                        title="Click to expand/collapse department">
                  <!-- Button Background Animation -->
                  <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 opacity-0 group-hover:opacity-100 group-hover:animate-shimmer transition-all duration-500"></div>
                  
                  <!-- Icon Container -->
                  <div class="relative w-8 h-8 bg-white/20 rounded-xl flex items-center justify-center">
                    <svg class="w-5 h-5 text-white transform transition-transform duration-300 group-hover:scale-110" 
                         id="toggle-icon-${deptIndex}" 
                         fill="none" 
                         stroke="currentColor" 
                         viewBox="0 0 24 24"
                         style="transform: rotate(0deg);">
                      <path stroke-linecap="round" 
                            stroke-linejoin="round" 
                            stroke-width="2.5" 
                            d="M19 9l-7 7-7-7"></path>
                    </svg>
                  </div>
                  
                  <!-- Floating Decorative Elements -->
                  <div class="absolute -top-1 -right-1 w-3 h-3 bg-yellow-400 rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-bounce transition-all duration-300"></div>
                  <div class="absolute -bottom-1 -left-1 w-2 h-2 bg-green-400 rounded-full opacity-0 group-hover:opacity-100 group-hover:animate-pulse transition-all duration-300"></div>
                </button>
              </div>
            </div>
          </div>

          <!-- Enhanced Department Statistics Section -->
          <div class="relative bg-gradient-to-r from-sky-50/30 via-blue-50/30 to-indigo-50/30 border-t border-sky-200/50 overflow-hidden">
            <!-- Animated Background Pattern -->
            <div class="absolute inset-0 bg-gradient-to-r from-sky-100/10 via-blue-100/10 to-indigo-100/10 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            
            <div class="relative grid grid-cols-2 md:grid-cols-4 gap-4 p-6">
              <!-- Delayed Projects Card -->
              <div class="group bg-white/80 backdrop-blur-sm rounded-xl p-4 border border-red-200/50 shadow-sm hover:shadow-lg hover:scale-105 transition-all duration-300">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-xs font-medium text-gray-600 uppercase tracking-wide mb-1">Delayed</p>
                    <p class="text-2xl font-bold text-red-600">${stats.delayedProjects || 0}</p>
                  </div>
                  <div class="w-12 h-12 bg-gradient-to-br from-red-400 to-red-600 rounded-xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-3 transition-all duration-300 shadow-lg">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                  </div>
                </div>
              </div>
              <!-- Ongoing Projects Card -->
              <div class="group bg-white/80 backdrop-blur-sm rounded-xl p-4 border border-blue-200/50 shadow-sm hover:shadow-lg hover:scale-105 transition-all duration-300">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-xs font-medium text-gray-600 uppercase tracking-wide mb-1">Ongoing</p>
                    <p class="text-2xl font-bold text-blue-600">${stats.ongoingProjects}</p>
                  </div>
                  <div class="w-12 h-12 bg-gradient-to-br from-blue-400 to-blue-600 rounded-xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-3 transition-all duration-300 shadow-lg">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                    </svg>
                  </div>
                </div>
              </div>
              
              <!-- Completed Projects Card -->
              <div class="group bg-white/80 backdrop-blur-sm rounded-xl p-4 border border-green-200/50 shadow-sm hover:shadow-lg hover:scale-105 transition-all duration-300">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-xs font-medium text-gray-600 uppercase tracking-wide mb-1">Completed</p>
                    <p class="text-2xl font-bold text-green-600">${stats.completedProjects}</p>
                  </div>
                  <div class="w-12 h-12 bg-gradient-to-br from-green-400 to-green-600 rounded-xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-3 transition-all duration-300 shadow-lg">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                </div>
              </div>
              
              <!-- Pending Projects Card -->
              <div class="group bg-white/80 backdrop-blur-sm rounded-xl p-4 border border-yellow-200/50 shadow-sm hover:shadow-lg hover:scale-105 transition-all duration-300">
                <div class="flex items-center justify-between">
                  <div>
                    <p class="text-xs font-medium text-gray-600 uppercase tracking-wide mb-1">Pending</p>
                    <p class="text-2xl font-bold text-yellow-600">${stats.pendingProjects || 0}</p>
                  </div>
                  <div class="w-12 h-12 bg-gradient-to-br from-yellow-400 to-yellow-600 rounded-xl flex items-center justify-center group-hover:scale-110 group-hover:rotate-3 transition-all duration-300 shadow-lg">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Enhanced Projects Timeline Section -->
          <div class="department-projects hidden transition-all duration-500 ease-in-out" id="department-projects-${deptIndex}">
            <div class="relative bg-gradient-to-r from-sky-50/20 via-blue-50/20 to-indigo-50/20 border-t border-sky-200/50 overflow-hidden">
              <!-- Animated Background Pattern -->
              <div class="absolute inset-0 bg-gradient-to-r from-sky-100/5 via-blue-100/5 to-indigo-100/5 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
              
              <div class="relative p-6">
                <!-- Enhanced Section Header -->
                <div class="flex items-center justify-between mb-8">
                  <div class="flex items-center gap-4">
                    <div class="w-12 h-12 bg-gradient-to-br from-sky-400 to-sky-600 rounded-xl flex items-center justify-center shadow-lg">
                      <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                      </svg>
                    </div>
                    <div>
                      <h4 class="text-xl font-bold text-gray-900">Project Timeline & Progress Visualization</h4>
                      <p class="text-sm text-gray-600 mt-1">Detailed project progress and milestone tracking</p>
                    </div>
                  </div>
                  
                  <!-- Enhanced Action Buttons -->
                  <div class="flex items-center gap-3">
                    <button onclick="exportDepartmentTimeline('${dept}')" class="group bg-white/80 backdrop-blur-sm border border-sky-200/50 text-sky-700 hover:bg-sky-50 hover:border-sky-300 font-semibold px-4 py-2 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-lg inline-flex items-center gap-2">
                      <svg class="w-4 h-4 group-hover:scale-110 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      Export Timeline
                    </button>
                  </div>
                </div>
              
              <div class="horizontal-timeline-container">
                <div class="horizontal-timeline-track">
                  ${projects.map((project, projectIndex) => {
                    const progress = parseFloat(project.progress?.overallProgress || project.overallProgress || 0);
                    
                    // Check if project has delayed milestones
                    let actualStatus = project.status;
                    const today = new Date();
                    today.setHours(0, 0, 0, 0);
                    
                    if (actualStatus !== 'complete' && actualStatus !== 'ongoing' && project.milestones && Array.isArray(project.milestones)) {
                      const hasDelayedMilestones = project.milestones.some(milestone => {
                        const dueDate = milestone.dueDate || milestone.deadline || milestone.targetDate || milestone.completionDate;
                        const status = milestone.status || 'pending';
                        
                        if (dueDate && status !== 'completed' && status !== 'under_approval' && status !== 'revision_request') {
                          const milestoneDate = new Date(dueDate);
                          milestoneDate.setHours(0, 0, 0, 0);
                          return milestoneDate < today && status === 'pending';
                        }
                        return false;
                      });
                      
                      if (hasDelayedMilestones) {
                        actualStatus = 'delayed';
                      }
                    }
                    
                    const statusClass = actualStatus === 'complete' ? 'bg-green-500' : 
                                      actualStatus === 'ongoing' ? 'bg-sky-500' : 
                                      actualStatus === 'delayed' ? 'bg-red-500' : 'bg-yellow-500';
                    const statusText = actualStatus === 'complete' ? 'Complete' : 
                                     actualStatus === 'ongoing' ? 'Ongoing' : 
                                     actualStatus === 'delayed' ? 'Delayed' : 'Pending';
                    
                    return `
                      <div class="horizontal-timeline-item" data-project-id="${project.id}">
                        <div class="project-timeline-card profile-card hover:shadow-xl transition-all duration-300 cursor-pointer" onclick="toggleProjectMilestones('${project.id}', ${deptIndex}, ${projectIndex})">
                          <div class="p-5">
                            <div class="flex items-start justify-between mb-4">
                              <div class="flex-1">
                                <div class="flex items-center gap-3 mb-2">
                                  <div class="w-3 h-3 rounded-full ${statusClass}"></div>
                                  <span class="text-xs font-medium text-gray-600 uppercase tracking-wider">${project.projectCode}</span>
                                </div>
                                <h5 class="text-lg font-bold text-black mb-2 leading-tight">${project.name}</h5>
                                <div class="flex items-center gap-4 mb-3">
                                  <span class="inline-flex items-center px-2.5 py-1 rounded-full text-xs font-medium ${statusClass} text-white">
                                    ${statusText}
                                  </span>
                                  <span class="text-sm font-semibold text-gray-700">₱${parseFloat(project.totalBudget || 0).toLocaleString()}</span>
                                </div>
                              </div>
                              <div class="flex flex-col items-end gap-2">
                                <button onclick="event.stopPropagation(); viewProjectDetails('${project.id}')" class="btn-primary btn-sm inline-flex items-center gap-1">
                                  <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                  </svg>
                                  View
                                </button>
                              </div>
                            </div>
                        
                        <!-- Progress Overview -->
                        <div class="grid grid-cols-3 gap-4 mb-4">
                          <div>
                            <p class="text-xs text-gray-600 mb-1">Timeline</p>
                            <div class="milestone-progress h-2">
                              <div class="milestone-progress-fill bg-blue-500" style="width: ${(parseFloat(project.progress?.timelineProgress || 0) || 0)}%"></div>
                            </div>
                            <p class="text-xs text-gray-800 mt-1">${(parseFloat(project.progress?.timelineProgress || 0) || 0).toFixed(2)}%</p>
                          </div>
                          <div>
                            <p class="text-xs text-gray-600 mb-1">Budget</p>
                            <div class="milestone-progress h-2">
                              <div class="milestone-progress-fill bg-green-500" style="width: ${(parseFloat(project.progress?.budgetProgress || 0) || 0)}%"></div>
                            </div>
                            <p class="text-xs text-gray-800 mt-1">${(parseFloat(project.progress?.budgetProgress || 0) || 0).toFixed(2)}%</p>
                          </div>
                          <div>
                            <p class="text-xs text-gray-600 mb-1">Physical</p>
                            <div class="milestone-progress h-2">
                              <div class="milestone-progress-fill bg-purple-500" style="width: ${(parseFloat(project.progress?.physicalProgress || 0) || 0)}%"></div>
                            </div>
                            <p class="text-xs text-gray-800 mt-1">${(parseFloat(project.progress?.physicalProgress || 0) || 0).toFixed(2)}%</p>
                          </div>
                        </div>
                        
                        <!-- Overall Progress Ring -->
                        <div class="flex items-center justify-center">
                          <div class="relative w-16 h-16">
                            <svg class="w-16 h-16 progress-ring">
                              <circle
                                cx="32"
                                cy="32"
                                r="28"
                                stroke="#e5e7eb"
                                stroke-width="4"
                                fill="transparent"
                              />
                              <circle
                                cx="32"
                                cy="32"
                                r="28"
                                stroke="${(parseFloat(progress) || 0) >= 0 && (parseFloat(progress) || 0) <= 25 ? '#dc2626' : (parseFloat(progress) || 0) >= 26 && (parseFloat(progress) || 0) <= 50 ? '#eab308' : (parseFloat(progress) || 0) >= 51 && (parseFloat(progress) || 0) <= 75 ? '#3b82f6' : (parseFloat(progress) || 0) >= 76 && (parseFloat(progress) || 0) <= 100 ? '#22c55e' : '#6b7280'}"
                                stroke-width="4"
                                fill="transparent"
                                stroke-dasharray="${2 * Math.PI * 28}"
                                stroke-dashoffset="${2 * Math.PI * 28}"
                                class="progress-ring-circle circular-progress-fill"
                                data-progress="${parseFloat(progress) || 0}"
                                data-progress-color="${(parseFloat(progress) || 0) >= 0 && (parseFloat(progress) || 0) <= 25 ? '#dc2626' : (parseFloat(progress) || 0) >= 26 && (parseFloat(progress) || 0) <= 50 ? '#eab308' : (parseFloat(progress) || 0) >= 51 && (parseFloat(progress) || 0) <= 75 ? '#3b82f6' : (parseFloat(progress) || 0) >= 76 && (parseFloat(progress) || 0) <= 100 ? '#22c55e' : '#6b7280'}"
                              />
                            </svg>
                            <div class="absolute inset-0 flex items-center justify-center">
                              <span class="text-sm font-bold text-gray-800">${(parseFloat(progress) || 0).toFixed(2)}%</span>
                            </div>
                          </div>
                        </div>
                        
                        <!-- Modern Interactive Timeline (only show if project is compiled) -->
                        <div id="timeline-${project.id}" class="mt-6 timeline-container" style="display: none;">
                          <div class="timeline-header mb-4">
                            <div class="flex items-center justify-between">
                              <div>
                                <h5 class="text-lg font-bold text-gray-800 flex items-center gap-2">
                                  <i class="fas fa-calendar-alt text-blue-500"></i>
                                  Project Timeline
                                </h5>
                                <p class="text-sm text-gray-600 mt-1">
                                  <i class="fas fa-clock text-orange-500 mr-1"></i>
                                  ${new Date(project.startDate).toLocaleDateString()} - ${project.endDate ? new Date(project.endDate).toLocaleDateString() : 'Ongoing'}
                                </p>
                              </div>
                              <div class="flex items-center gap-2">
                                <button onclick="toggleTimelineView('${project.id}')" class="timeline-view-toggle px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors">
                                  <i class="fas fa-th-large mr-1"></i>Card View
                                </button>
                                <button onclick="refreshTimeline('${project.id}')" class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full hover:bg-gray-200 transition-colors">
                                  <i class="fas fa-sync-alt"></i>
                                </button>
                              </div>
                            </div>
                          </div>
                          
                          <!-- Modern Timeline Track -->
                          <div class="timeline-track-container relative bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4 border border-gray-200">
                            <div class="timeline-track relative h-6 bg-white rounded-full overflow-hidden shadow-inner border border-gray-300">
                              <div class="timeline-progress absolute h-full bg-gradient-to-r from-blue-500 to-purple-600 rounded-full"></div>
                              <div class="timeline-grid absolute inset-0 flex">
                                <!-- Timeline grid will be populated by JavaScript -->
                              </div>
                              <div class="timeline-milestones absolute inset-0">
                                <!-- Milestone markers will be populated by JavaScript -->
                              </div>
                            </div>
                            
                            <!-- Timeline Labels -->
                            <div class="timeline-labels mt-3 flex justify-between text-xs text-gray-600 font-medium">
                              <span class="flex items-center gap-1">
                                <i class="fas fa-play text-green-500"></i>
                                Start
                              </span>
                              <span class="flex items-center gap-1">
                                <i class="fas fa-flag-checkered text-red-500"></i>
                                End
                              </span>
                            </div>
                          </div>
                          
                          <!-- Milestone Cards Container -->
                          <div class="milestone-cards-container mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            <!-- Milestone cards will be populated by JavaScript -->
                          </div>
                          
                          <!-- Timeline Statistics -->
                          <div class="timeline-stats mt-4 grid grid-cols-2 md:grid-cols-4 gap-3">
                            <div class="stat-card bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                              <div class="flex items-center gap-2">
                                <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
                                <span class="text-xs font-medium text-gray-600">Total Milestones</span>
                              </div>
                              <div class="text-lg font-bold text-gray-800 mt-1 milestone-count">0</div>
                            </div>
                            <div class="stat-card bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                              <div class="flex items-center gap-2">
                                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                                <span class="text-xs font-medium text-gray-600">Completed</span>
                              </div>
                              <div class="text-lg font-bold text-green-600 mt-1 completed-count">0</div>
                            </div>
                            <div class="stat-card bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                              <div class="flex items-center gap-2">
                                <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
                                <span class="text-xs font-medium text-gray-600">In Progress</span>
                              </div>
                              <div class="text-lg font-bold text-yellow-600 mt-1 in-progress-count">0</div>
                            </div>
                            <div class="stat-card bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                              <div class="flex items-center gap-2">
                                <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                                <span class="text-xs font-medium text-gray-600">Overdue</span>
                              </div>
                              <div class="text-lg font-bold text-red-600 mt-1 overdue-count">0</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                `;
              }).join('')}
            </div>
          </div>
        </div>
      `;
      
      // Append this department to the container
      container.insertAdjacentHTML('beforeend', departmentHTML);
      console.log(`✅ Department ${deptIndex} (${dept}) added to container`);
    });
    
    console.log('✅ Department rendering completed:', {
      totalRendered: departmentKeys.length,
      containerHTML: container.innerHTML.length,
      departmentElements: document.querySelectorAll('.department-timeline-card').length
    });
    
    // Trigger circular progress animation for newly rendered timeline sections
    setTimeout(() => {
      setupCircularProgressAnimation();
      animateCircularProgress(); // Also run immediately
    }, 100);
    
    // Ensure all departments are collapsed by default
    setTimeout(() => {
      const containers = document.querySelectorAll('.department-projects');
      const icons = document.querySelectorAll('[id^="toggle-icon-"]');
      const headerIcons = document.querySelectorAll('[id^="header-toggle-icon-"]');
      
      containers.forEach((container, index) => {
        container.classList.add('hidden');
        if (icons[index]) {
          icons[index].style.transform = 'rotate(0deg)';
        }
        if (headerIcons[index]) {
          headerIcons[index].style.transform = 'rotate(0deg)';
        }
      });
      
      console.log('All departments collapsed by default');
    }, 100);
    
    // Load timelines for all projects after rendering
    // Note: loadAllProjectTimelines function removed to fix ReferenceError
    // setTimeout(() => {
    //   loadAllProjectTimelines();
    // }, 500);
  }

  // Toggle department visibility
  function toggleDepartment(deptIndex) {
    const projectsContainer = document.getElementById(`department-projects-${deptIndex}`);
    const toggleIcon = document.getElementById(`toggle-icon-${deptIndex}`);
    const headerToggleIcon = document.getElementById(`header-toggle-icon-${deptIndex}`);
    
    if (!projectsContainer) {
      console.error(`Department container not found for index ${deptIndex}`);
      return;
    }
    
    const isCurrentlyHidden = projectsContainer.classList.contains('hidden');
    console.log(`Toggling department ${deptIndex}:`, {
      container: projectsContainer,
      icon: toggleIcon,
      headerIcon: headerToggleIcon,
      isHidden: isCurrentlyHidden,
      classes: projectsContainer.className
    });
    
    if (isCurrentlyHidden) {
      // Expand the department
      projectsContainer.classList.remove('hidden');
      if (toggleIcon) toggleIcon.style.transform = 'rotate(180deg)';
      if (headerToggleIcon) headerToggleIcon.style.transform = 'rotate(180deg)';
      console.log(`✅ Department ${deptIndex} EXPANDED - hidden class removed`);
    } else {
      // Collapse the department
      projectsContainer.classList.add('hidden');
      if (toggleIcon) toggleIcon.style.transform = 'rotate(0deg)';
      if (headerToggleIcon) headerToggleIcon.style.transform = 'rotate(0deg)';
      console.log(`✅ Department ${deptIndex} COLLAPSED - hidden class added`);
    }
    
    // Verify the final state
    setTimeout(() => {
      const finalState = projectsContainer.classList.contains('hidden');
      console.log(`🔍 Department ${deptIndex} final state: ${finalState ? 'HIDDEN' : 'VISIBLE'}`);
    }, 100);
  }

  // Toggle all departments
  function toggleAllDepartments() {
    const containers = document.querySelectorAll('.department-projects');
    const icons = document.querySelectorAll('[id^="toggle-icon-"]');
    const headerIcons = document.querySelectorAll('[id^="header-toggle-icon-"]');
    
    const allHidden = Array.from(containers).every(container => container.classList.contains('hidden'));
    
    containers.forEach((container, index) => {
      if (allHidden) {
        container.classList.remove('hidden');
        icons[index].style.transform = 'rotate(180deg)';
        if (headerIcons[index]) headerIcons[index].style.transform = 'rotate(180deg)';
      } else {
        container.classList.add('hidden');
        icons[index].style.transform = 'rotate(0deg)';
        if (headerIcons[index]) headerIcons[index].style.transform = 'rotate(0deg)';
      }
    });
  }

  // Expand all departments
  function expandAllDepartments() {
    const containers = document.querySelectorAll('.department-projects');
    const icons = document.querySelectorAll('[id^="toggle-icon-"]');
    const headerIcons = document.querySelectorAll('[id^="header-toggle-icon-"]');
    
    containers.forEach((container, index) => {
      container.classList.remove('hidden');
      icons[index].style.transform = 'rotate(180deg)';
      if (headerIcons[index]) headerIcons[index].style.transform = 'rotate(180deg)';
    });
  }

  // View project timeline
  function viewProjectTimeline(projectId) {
    // Redirect to compilation page with timeline modal
    window.location.href = `/dashboard/lgu-pmt-mpmec-secretariat/modules/compilation?project=${projectId}&showTimeline=true`;
  }

  // Refresh submissions
  async function refreshSubmissions() {
    await loadSubmissions();
  }

  // Export data
  function exportData() {
    // TODO: Implement export functionality
    console.log('Exporting submissions data...');
  }

  // Mark all reviewed
  function markAllReviewed() {
    // TODO: Implement bulk review functionality
    console.log('Marking all submissions as reviewed...');
  }

  // Bulk action
  function bulkAction() {
    // TODO: Implement bulk actions
    console.log('Performing bulk action...');
  }

  // View submission details (updated to use unified modal)
  function viewSubmission(submissionId) {
    console.log('🚀 viewSubmission called with submissionId:', submissionId);
    
    // Check session validity first
    if (!authService.redirectIfInvalidSession()) {
      return;
    }
    
    // Use the unified ProjectDetailsModal
    if (window.showProjectDetailsModal) {
      console.log('✅ Using unified ProjectDetailsModal');
      window.showProjectDetailsModal(submissionId);
    } else {
      console.error('❌ ProjectDetailsModal not available');
      alert('Unable to load project details. Please refresh the page.');
    }
  }

  // View project details using unified modal (simplified to match SECRETARIATDashboard)
  function viewProjectDetails(projectId) {
    console.log('🚀 === SUBMISSIONS viewProjectDetails CALLED ===');
    console.log('🔍 viewProjectDetails called with projectId:', projectId);
    
    // Check session validity first
    if (!authService.redirectIfInvalidSession()) {
      return;
    }
    
    // Use the unified ProjectDetailsModal
    if (window.showProjectDetailsModal) {
      console.log('✅ Using unified ProjectDetailsModal');
      window.showProjectDetailsModal(projectId);
    } else {
      console.error('❌ ProjectDetailsModal not available');
      alert('Unable to load project details. Please refresh the page.');
    }
  }






  // Approve submission
  async function approveSubmission(submissionId) {
    if (confirm('Are you sure you want to approve this project?')) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/login/lgu-pmt';
          return;
        }

        const response = await fetch(`${API_URL}/projects/${submissionId}/approve`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ approved: true })
        });
        
        if (response.ok) {
          alert('Project approved successfully!');
          loadSubmissions();
        } else {
          alert('Error approving project. Please try again.');
        }
      } catch (error) {
        console.error('Error approving submission:', error);
        alert('Error approving project. Please try again.');
      }
    }
  }

  // Reject submission
  async function rejectSubmission(submissionId) {
    const comments = prompt('Please provide a reason for rejection:');
    if (comments !== null) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/login/lgu-pmt';
          return;
        }

        const response = await fetch(`${API_URL}/projects/${submissionId}/approve`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ approved: false, comments })
        });
        
        if (response.ok) {
          alert('Project rejected successfully!');
          loadSubmissions();
        } else {
          alert('Error rejecting project. Please try again.');
        }
      } catch (error) {
        console.error('Error rejecting submission:', error);
        alert('Error rejecting project. Please try again.');
      }
    }
  }




    

  // Export project report
  function exportProjectReport(projectId) {
    // Redirect to compilation page with export functionality
    window.location.href = `/dashboard/lgu-pmt-mpmec-secretariat/modules/compilation?project=${projectId}&exportReport=true`;
    }

    

  

  // ===== HORIZONTAL TIMELINE FUNCTIONS =====
  
  // Load timeline for a project
  async function loadProjectTimeline(projectId) {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      // Check if project is compiled first
      const projectRes = await fetch(`${API_URL}/projects/${projectId}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (!projectRes.ok) return;
      
      const projectData = await projectRes.json();
      if (!projectData.success || !projectData.project) return;
      
      const project = projectData.project;
      const milestones = project.milestones || [];

      renderModernTimeline(document.getElementById(`timeline-${projectId}`), project, milestones);
    } catch (error) {
      console.error('Error loading timeline:', error);
    }
  }

  // Render modern timeline with milestones
  function renderModernTimeline(container, project, milestones) {
    if (!container) {
      console.error('Timeline container not found');
      return;
    }
    // Timeline rendering logic would go here
    console.log('Timeline rendered for project:', project.name);
    }

  // View project history
  function viewProjectHistory(projectId) {
    // Redirect to compilation page with history modal
    window.location.href = `/dashboard/lgu-pmt-mpmec-secretariat/modules/compilation?project=${projectId}&showHistory=true`;
  }

  // Tab switching functions
  function switchToTableView() {
    const tableTab = document.getElementById('tableTab');
    const cardTab = document.getElementById('cardTab');
    const tableView = document.getElementById('tableView');
    const cardView = document.getElementById('cardView');

    if (!tableTab || !cardTab || !tableView || !cardView) {
      console.error('Tab switching elements not found');
      return;
    }

    // Update tab styles
    tableTab.className = 'btn-primary btn-sm inline-flex items-center gap-2 rounded-none';
    cardTab.className = 'bg-white hover:bg-gray-50 text-gray-700 hover:text-sky-600 font-semibold px-4 py-2 transition-all duration-300 btn-sm inline-flex items-center gap-2 rounded-none border-l border-sky-200/50';

    // Switch views
    cardView.classList.add('hidden');
    cardView.classList.remove('block');
    tableView.classList.remove('hidden');
    tableView.classList.add('block');
  }

  function switchToCardView() {
    const tableTab = document.getElementById('tableTab');
    const cardTab = document.getElementById('cardTab');
    const tableView = document.getElementById('tableView');
    const cardView = document.getElementById('cardView');

    if (!tableTab || !cardTab || !tableView || !cardView) {
      console.error('Tab switching elements not found');
      return;
    }

    // Update tab styles
    cardTab.className = 'btn-primary btn-sm inline-flex items-center gap-2 rounded-none border-l border-sky-200/50';
    tableTab.className = 'bg-white hover:bg-gray-50 text-gray-700 hover:text-sky-600 font-semibold px-4 py-2 transition-all duration-300 btn-sm inline-flex items-center gap-2 rounded-none';

    // Switch views
    tableView.classList.add('hidden');
    tableView.classList.remove('block');
    cardView.classList.remove('hidden');
    cardView.classList.add('block');
  }

  // Add event listeners for tab switching
  document.addEventListener('DOMContentLoaded', function() {
    const tableTab = document.getElementById('tableTab');
    const cardTab = document.getElementById('cardTab');
    
    if (tableTab) {
      tableTab.addEventListener('click', switchToTableView);
    }
    
    if (cardTab) {
      cardTab.addEventListener('click', switchToCardView);
    }
  });

  // Timeline view toggle functions
  function toggleTimelineView(projectId) {
    const container = document.getElementById(`timeline-${projectId}`);
    const cardsContainer = container?.querySelector('.milestone-cards-container');
    const toggleBtn = container?.querySelector('.timeline-view-toggle');
    
    if (!cardsContainer || !toggleBtn) {
      console.log('Timeline elements not found for project:', projectId);
      return;
    }
    
    if (cardsContainer.classList.contains('hidden')) {
      cardsContainer.classList.remove('hidden');
      toggleBtn.innerHTML = '<i class="fas fa-th-large mr-1"></i>Card View';
    } else {
      cardsContainer.classList.add('hidden');
      toggleBtn.innerHTML = '<i class="fas fa-list mr-1"></i>List View';
    }
  }

  function refreshTimeline(projectId) {
    const container = document.getElementById(`timeline-${projectId}`);
    const refreshBtn = container?.querySelector('button[onclick*="refreshTimeline"]');
    
    if (!refreshBtn) {
      console.log('Refresh button not found for project:', projectId);
      return;
    }
    
    const originalContent = refreshBtn.innerHTML;
    refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    refreshBtn.disabled = true;
    
    setTimeout(() => {
      loadProjectTimeline(projectId);
      refreshBtn.innerHTML = originalContent;
      refreshBtn.disabled = false;
    }, 1000);
  }

  // Export window functions
  window.viewProjectDetails = viewProjectDetails;
  window.viewSubmission = viewSubmission;
  window.switchToTableView = switchToTableView;
  window.switchToCardView = switchToCardView;
  window.refreshSubmissions = refreshSubmissions;
  window.exportData = exportData;
  window.loadSubmissions = loadSubmissions;
  window.markAllReviewed = markAllReviewed;
  window.bulkAction = bulkAction;
  window.approveSubmission = approveSubmission;
  window.rejectSubmission = rejectSubmission;
  window.toggleDepartment = toggleDepartment;
  window.toggleAllDepartments = toggleAllDepartments;
  window.expandAllDepartments = expandAllDepartments;
  window.viewProjectTimeline = viewProjectTimeline;
  window.toggleTimelineView = toggleTimelineView;
  window.refreshTimeline = refreshTimeline;

  // Import and make auth service globally available
  import authService from '../../../../services/auth.js';
    window.authService = authService;
    console.log('Auth service loaded and made globally available');
  
  // Circular Progress Animation Functions
  function animateCircularProgress() {
    const circularProgressBars = document.querySelectorAll('.circular-progress-fill');
    
    circularProgressBars.forEach(bar => {
      const progress = parseFloat(bar.getAttribute('data-progress')) || 0;
      const color = bar.getAttribute('data-progress-color') || '#6b7280';
      const radius = 28;
      const circumference = 2 * Math.PI * radius;
      
      // Set CSS variables for animation
      bar.style.setProperty('--circular-progress-full', circumference.toString());
      bar.style.setProperty('--circular-progress-offset', (circumference * (1 - progress / 100)).toString());
      
      // Apply color
      bar.style.stroke = color;
      
      // Reset and start animation
      bar.style.strokeDashoffset = circumference.toString();
      bar.offsetHeight; // Trigger reflow
      setTimeout(() => {
        bar.style.strokeDashoffset = (circumference * (1 - progress / 100)).toString();
      }, 50);
    });
  }
  
  // Intersection Observer for scroll-triggered animation
  function setupCircularProgressAnimation() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const progressBar = entry.target.querySelector('.circular-progress-fill');
          if (progressBar) {
            const progress = parseFloat(progressBar.getAttribute('data-progress')) || 0;
            const color = progressBar.getAttribute('data-progress-color') || '#6b7280';
            const radius = 28;
            const circumference = 2 * Math.PI * radius;
            
            // Set CSS variables for animation
            progressBar.style.setProperty('--circular-progress-full', circumference.toString());
            progressBar.style.setProperty('--circular-progress-offset', (circumference * (1 - progress / 100)).toString());
            
            // Apply color
            progressBar.style.stroke = color;
            
            // Reset and start animation
            progressBar.style.strokeDashoffset = circumference.toString();
            progressBar.offsetHeight; // Trigger reflow
            setTimeout(() => {
              progressBar.style.strokeDashoffset = (circumference * (1 - progress / 100)).toString();
            }, 50);
          }
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });
    
    // Observe all project timeline sections
    const timelineSections = document.querySelectorAll('.horizontal-timeline-container');
    timelineSections.forEach(section => observer.observe(section));
  }
  
  // Initialize circular progress animation when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(() => {
        setupCircularProgressAnimation();
        animateCircularProgress(); // Also run immediately
      }, 100);
    });
  } else {
    setTimeout(() => {
      setupCircularProgressAnimation();
      animateCircularProgress(); // Also run immediately
    }, 100);
  }
  
  // Also run on window load for any dynamically loaded content
  window.addEventListener('load', () => {
    setTimeout(setupCircularProgressAnimation, 200);
  });
  
  // Table Progress Bar Animation Functions
  function animateTableProgressBars() {
    const tableProgressBars = document.querySelectorAll('.table-progress-bar-fill');
    tableProgressBars.forEach((bar, index) => {
      const progress = parseFloat(bar.getAttribute('data-progress')) || 0;
      const colorClass = bar.getAttribute('data-progress-color') || 'bg-gray-500';
      
      // Apply the color class
      bar.className = bar.className.replace(/bg-\w+-\d+/, '');
      bar.classList.add(colorClass);
      
      // Set the progress width
      bar.style.setProperty('--table-progress-width', `${progress}%`);
      
      // Reset and start animation
      bar.style.width = '0%';
      bar.style.animation = 'none';
      bar.offsetHeight; // Trigger reflow
      bar.style.animation = 'fillTableProgress 2s ease-out forwards';
    });
  }

  // Initialize table progress bar animation when page loads
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(animateTableProgressBars, 500);
  });

  // Also run on window load
  window.addEventListener('load', function() {
    setTimeout(animateTableProgressBars, 800);
  });

  // Export functions to global scope
  window.animateCircularProgress = animateCircularProgress;
  window.setupCircularProgressAnimation = setupCircularProgressAnimation;
  window.animateTableProgressBars = animateTableProgressBars;
</script> 