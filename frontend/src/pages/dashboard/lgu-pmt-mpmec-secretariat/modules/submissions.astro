---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import SecretariatLayout from '../../../../components/SecretariatLayout.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let submissions = [];
let stats = {
  totalSubmissions: 0,
  pendingReview: 0,
  approved: 0,
  overdue: 0
};
let loading = true;
let error = '';

// Try to fetch submissions data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch submissions for Secretariat review using dedicated endpoint
    const projectsRes = await fetch(`${API_URL}/projects/secretariat/submissions`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        submissions = data.projects;
        
        // Use statistics from API response
        if (data.stats) {
          stats = data.stats;
        } else {
          // Fallback calculation if stats not provided
          stats.totalSubmissions = submissions.length;
          stats.pendingReview = submissions.filter(p => p.workflowStatus === 'submitted').length;
          stats.approved = submissions.filter(p => p.workflowStatus === 'secretariat_approved' || p.workflowStatus === 'ongoing').length;
          stats.overdue = submissions.filter(p => {
            if (p.workflowStatus === 'submitted' && p.endDate) {
              return new Date(p.endDate) < new Date();
            }
            return false;
          }).length;
        }
      }
    }
  }
} catch (err) {
  console.error('Error fetching submissions data:', err);
  error = 'Failed to fetch submissions data.';
}

loading = false;
---

<style>
  /* Modern Timeline Styles */
  .timeline-container {
    position: relative;
  }
  
  .timeline-line {
    position: absolute;
    left: 50%;
    top: 0;
    bottom: 0;
    width: 4px;
    background: linear-gradient(135deg, #3b82f6, #8b5cf6, #06b6d4);
    transform: translateX(-50%);
    border-radius: 2px;
  }
  
  .timeline-item {
    position: relative;
    margin-bottom: 2rem;
  }
  
  .timeline-item:nth-child(odd) .timeline-content {
    margin-left: 0;
    margin-right: 50%;
    padding-right: 2rem;
  }
  
  .timeline-item:nth-child(even) .timeline-content {
    margin-left: 50%;
    margin-right: 0;
    padding-left: 2rem;
  }
  
  /* Modern Timeline Animations */
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.5;
    }
  }
  
  @keyframes bounce {
    0%, 20%, 53%, 80%, 100% {
      transform: translate3d(0,0,0);
    }
    40%, 43% {
      transform: translate3d(0, -8px, 0);
    }
    70% {
      transform: translate3d(0, -4px, 0);
    }
    90% {
      transform: translate3d(0, -2px, 0);
    }
  }
  
  .milestone-card {
    animation: slideInUp 0.6s ease-out;
  }
  
  .milestone-card:hover {
    transform: translateY(-4px) scale(1.02);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
  }
  
  /* REMOVED: .timeline-progress transition that was interfering with JavaScript updates */
  
  .stat-card {
    transition: all 0.3s ease;
  }
  
  .stat-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .timeline-view-toggle {
    transition: all 0.3s ease;
  }
  
  .timeline-view-toggle:hover {
    transform: scale(1.05);
  }
  
  /* Status indicator animations */
  .bg-green-500 {
    animation: pulse 2s infinite;
  }
  
  .bg-yellow-500 {
    animation: bounce 1s infinite;
  }
  
  .bg-red-500 {
    animation: pulse 1s infinite;
  }
  
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Horizontal Timeline Styles */
  .timeline-container {
    position: relative;
  }
  
  .timeline-track {
    position: relative;
    background: linear-gradient(to right, #e5e7eb, #d1d5db);
  }
  
  .timeline-grid {
    position: absolute;
    inset: 0;
    display: flex;
  }
  
  .timeline-grid-line {
    flex: 1;
    border-right: 1px dashed #9ca3af;
  }
  
  .timeline-grid-line:last-child {
    border-right: none;
  }
  
  .timeline-milestones {
    position: absolute;
    inset: 0;
  }
  
  .timeline-milestone {
    position: absolute;
    height: 100%;
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    border-radius: 2px;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 10;
  }
  
  .timeline-milestone:hover {
    transform: scaleY(1.2);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.4);
  }
  
  .timeline-milestone.completed {
    background: linear-gradient(135deg, #10b981, #059669);
  }
  
  .timeline-milestone.in-progress {
    background: linear-gradient(135deg, #f59e0b, #d97706);
  }
  
  .timeline-milestone.pending {
    background: linear-gradient(135deg, #6b7280, #4b5563);
  }
  
  .timeline-popup {
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    min-width: 250px;
    max-width: 300px;
    z-index: 50;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s ease;
    margin-bottom: 8px;
  }
  
  .timeline-milestone:hover .timeline-popup {
    opacity: 1;
    visibility: visible;
  }
  
  .timeline-popup::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border: 6px solid transparent;
    border-top-color: white;
  }
  
  .timeline-popup-title {
    font-weight: 600;
    color: #1f2937;
    margin-bottom: 8px;
    font-size: 14px;
  }
  
  .timeline-popup-division {
    margin-bottom: 6px;
  }
  
  .timeline-popup-division-label {
    font-size: 12px;
    color: #6b7280;
    font-weight: 500;
  }
  
  .timeline-popup-division-value {
    font-size: 12px;
    color: #374151;
    margin-left: 4px;
  }
  
  .timeline-dot {
    position: absolute;
    left: 50%;
    top: 1rem;
    width: 20px;
    height: 20px;
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    border: 4px solid white;
    border-radius: 50%;
    transform: translateX(-50%);
    box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
    z-index: 10;
  }
  
  .timeline-content {
    background: white;
    border-radius: 1rem;
    padding: 1.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border: 1px solid #e5e7eb;
    transition: all 0.3s ease;
  }
  
  .timeline-content:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
  }
  
  .progress-ring {
    transform: rotate(-90deg);
  }
  
  .progress-ring-circle {
    transition: stroke-dasharray 0.35s;
    transform-origin: 50% 50%;
  }
  
  .department-card {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    transition: all 0.3s ease;
  }
  
  .department-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }
  
  .project-card {
    background: white;
    border-radius: 0.75rem;
    border: 1px solid #e5e7eb;
    transition: all 0.3s ease;
  }
  
  .project-card:hover {
    border-color: #3b82f6;
    box-shadow: 0 4px 20px rgba(59, 130, 246, 0.1);
  }
  
  .milestone-progress {
    background: linear-gradient(90deg, #e5e7eb 0%, #f3f4f6 100%);
    border-radius: 0.5rem;
    overflow: hidden;
  }
  
  .milestone-progress-fill {
    height: 100%;
    border-radius: 0.5rem;
    /* Removed transition that was interfering with progress bar updates */
  }
  
  .status-badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }
  
  .status-ongoing {
    background: linear-gradient(135deg, #3b82f6, #1d4ed8);
    color: white;
  }
  
  .status-complete {
    background: linear-gradient(135deg, #10b981, #059669);
    color: white;
  }
  
  .status-pending {
    background: linear-gradient(135deg, #f59e0b, #d97706);
    color: white;
  }
  
  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: linear-gradient(135deg, #3b82f6, #8b5cf6);
    border-radius: 3px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(135deg, #2563eb, #7c3aed);
  }
  
  /* Enhanced Tab Switching Animations */
  .tab-content {
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    opacity: 1;
    transform: translateY(0);
  }
  
  .tab-content.hidden {
    opacity: 0;
    transform: translateY(10px);
    pointer-events: none;
  }
  
  .tab-content.fade-in {
    animation: fadeInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  .tab-content.fade-out {
    animation: fadeOutDown 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fadeOutDown {
    from {
      opacity: 1;
      transform: translateY(0);
    }
    to {
      opacity: 0;
      transform: translateY(-10px);
    }
  }
  
  /* Modern Tab Button Design */
  .tab-button {
    position: relative;
    overflow: hidden;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    width: 140px;
    height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-shrink: 0;
    flex-grow: 0;
    border: none;
    outline: none;
    cursor: pointer;
  }
  
  .tab-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }
  
  .tab-button:hover::before {
    left: 100%;
  }
  
  .tab-button.active {
    background: linear-gradient(135deg, #FE5353, #E54545);
    color: white;
    font-weight: 600;
  }
  
  .tab-button:not(.active):hover {
    background: #f8f9fa;
    transform: translateY(-1px);
  }
  
  /* Sink and pop animation for tab switching */
  .tab-button.switching {
    animation: sinkAndPop 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes sinkAndPop {
    0% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(2px);
    }
    100% {
      transform: translateY(0);
    }
  }
  
  /* Card Grid Animation */
  .card-grid {
    animation: slideInUp 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }
  
  @keyframes slideInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Staggered Card Animation */
  .submission-card {
    animation: cardSlideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
    transform: translateY(20px);
  }
  
  .submission-card:nth-child(1) { animation-delay: 0.1s; }
  .submission-card:nth-child(2) { animation-delay: 0.2s; }
  .submission-card:nth-child(3) { animation-delay: 0.3s; }
  .submission-card:nth-child(4) { animation-delay: 0.4s; }
  .submission-card:nth-child(5) { animation-delay: 0.5s; }
  .submission-card:nth-child(6) { animation-delay: 0.6s; }
  
  @keyframes cardSlideIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Subtle Ripple Effect */
  .tab-button {
    position: relative;
    overflow: hidden;
  }
  
  .ripple {
    position: absolute;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    transform: scale(0);
    animation: ripple 0.6s ease-out;
    pointer-events: none;
  }
  
  @keyframes ripple {
    to {
      transform: scale(2);
      opacity: 0;
    }
  }
</style>

<Layout title="Submissions & Tracker | MPMEC Secretariat">
  <SecretariatLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 via-blue-50 to-white min-h-screen">
      <!-- Enhanced Header -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6 mb-8">
        <div class="space-y-2">
          <h1 class="text-4xl font-bold bg-gradient-to-r from-gray-800 to-blue-600 bg-clip-text text-transparent">
            Submissions & Tracker
          </h1>
          <p class="text-gray-600 text-lg">Monitor all incoming project submissions and updates in real-time</p>
        </div>
        <div class="flex items-center gap-4">
          <button 
            onclick="refreshSubmissions()" 
            class="group relative px-6 py-3 bg-gradient-to-r from-[#FE5353] to-[#E54545] text-white rounded-xl hover:from-[#E54545] hover:to-[#D43535] transition-all duration-300 transform hover:scale-105 hover:shadow-xl flex items-center gap-3 overflow-hidden"
          >
            <div class="absolute inset-0 bg-white opacity-0 group-hover:opacity-10 transition-opacity duration-300"></div>
            <svg class="w-5 h-5 transition-transform duration-300 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            <span class="font-semibold">Refresh</span>
          </button>
          <button 
            onclick="exportData()" 
            class="group relative px-6 py-3 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-xl hover:from-green-700 hover:to-green-800 transition-all duration-300 transform hover:scale-105 hover:shadow-xl flex items-center gap-3 overflow-hidden"
          >
            <div class="absolute inset-0 bg-white opacity-0 group-hover:opacity-10 transition-opacity duration-300"></div>
            <svg class="w-5 h-5 transition-transform duration-300 group-hover:translate-y-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            <span class="font-semibold">Export</span>
          </button>
        </div>
      </div>

      <!-- Enhanced Statistics Cards -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl hover:border-blue-200 transition-all duration-300 transform hover:-translate-y-2 cursor-pointer">
          <div class="flex items-center justify-between">
            <div class="space-y-1">
              <p class="text-sm font-medium text-gray-600 group-hover:text-blue-600 transition-colors">Total Submissions</p>
              <p class="text-3xl font-bold text-blue-600 group-hover:text-blue-700 transition-colors" id="totalSubmissions">{stats.totalSubmissions}</p>
            </div>
            <div class="p-4 bg-gradient-to-br from-blue-100 to-blue-200 rounded-full group-hover:from-blue-200 group-hover:to-blue-300 transition-all duration-300 transform group-hover:scale-110">
              <svg class="w-8 h-8 text-blue-600 group-hover:text-blue-700 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl hover:border-yellow-200 transition-all duration-300 transform hover:-translate-y-2 cursor-pointer">
          <div class="flex items-center justify-between">
            <div class="space-y-1">
              <p class="text-sm font-medium text-gray-600 group-hover:text-yellow-600 transition-colors">Pending Review</p>
              <p class="text-3xl font-bold text-yellow-600 group-hover:text-yellow-700 transition-colors" id="pendingReview">{stats.pendingReview}</p>
            </div>
            <div class="p-4 bg-gradient-to-br from-yellow-100 to-yellow-200 rounded-full group-hover:from-yellow-200 group-hover:to-yellow-300 transition-all duration-300 transform group-hover:scale-110">
              <svg class="w-8 h-8 text-yellow-600 group-hover:text-yellow-700 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl hover:border-green-200 transition-all duration-300 transform hover:-translate-y-2 cursor-pointer">
          <div class="flex items-center justify-between">
            <div class="space-y-1">
              <p class="text-sm font-medium text-gray-600 group-hover:text-green-600 transition-colors">Approved</p>
              <p class="text-3xl font-bold text-green-600 group-hover:text-green-700 transition-colors" id="approved">{stats.approved}</p>
            </div>
            <div class="p-4 bg-gradient-to-br from-green-100 to-green-200 rounded-full group-hover:from-green-200 group-hover:to-green-300 transition-all duration-300 transform group-hover:scale-110">
              <svg class="w-8 h-8 text-green-600 group-hover:text-green-700 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl hover:border-red-200 transition-all duration-300 transform hover:-translate-y-2 cursor-pointer">
          <div class="flex items-center justify-between">
            <div class="space-y-1">
              <p class="text-sm font-medium text-gray-600 group-hover:text-red-600 transition-colors">Overdue</p>
              <p class="text-3xl font-bold text-red-600 group-hover:text-red-700 transition-colors" id="overdue">{stats.overdue}</p>
            </div>
            <div class="p-4 bg-gradient-to-br from-red-100 to-red-200 rounded-full group-hover:from-red-200 group-hover:to-red-300 transition-all duration-300 transform group-hover:scale-110">
              <svg class="w-8 h-8 text-red-600 group-hover:text-red-700 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Filters and Search -->
      <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8 hover:shadow-2xl hover:border-blue-200 transition-all duration-300">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 group-hover:text-blue-600 transition-colors">Search Submissions</label>
            <div class="relative">
              <input 
                type="text" 
                id="searchInput" 
                placeholder="Search by project name..." 
                class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-[#FE5353] focus:border-transparent transition-all duration-300 hover:border-gray-400"
              >
              <svg class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 group-hover:text-blue-600 transition-colors">Status</label>
            <select 
              id="statusFilter" 
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-[#FE5353] focus:border-transparent transition-all duration-300 hover:border-gray-400 appearance-none bg-white"
            >
              <option value="">All Status</option>
              <option value="pending">Pending</option>
              <option value="ongoing">Ongoing</option>
              <option value="complete">Complete</option>
            </select>
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 group-hover:text-blue-600 transition-colors">Office</label>
            <select 
              id="officeFilter" 
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-[#FE5353] focus:border-transparent transition-all duration-300 hover:border-gray-400 appearance-none bg-white"
            >
              <option value="">All Offices</option>
              <option value="Municipal Engineer Office">Municipal Engineer Office</option>
              <option value="Health Department">Health Department</option>
              <option value="Finance Department">Finance Department</option>
              <option value="Planning Office">Planning Office</option>
            </select>
          </div>
          <div class="space-y-2">
            <label class="block text-sm font-semibold text-gray-700 group-hover:text-blue-600 transition-colors">Category</label>
            <select 
              id="categoryFilter" 
              class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-[#FE5353] focus:border-transparent transition-all duration-300 hover:border-gray-400 appearance-none bg-white"
            >
              <option value="">All Categories</option>
              <option value="infrastructure">Infrastructure</option>
              <option value="health">Health</option>
              <option value="education">Education</option>
              <option value="agriculture">Agriculture</option>
              <option value="social">Social Services</option>
              <option value="environment">Environment</option>
              <option value="transportation">Transportation</option>
            </select>
          </div>
        </div>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#FE5353]"></div>
          <span class="ml-3 text-gray-600">Loading submissions...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12">
          <p class="text-red-600 mb-4">{error}</p>
          <button onclick="loadSubmissions()" class="px-4 py-2 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-all">
            Try Again
          </button>
        </div>
      ) : submissions.length === 0 ? (
        <div class="text-center py-12">
          <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">No Submissions Found</h3>
          <p class="text-gray-600 mb-6">No project submissions have been received yet. Projects will appear here once they are created by Implementing Offices.</p>
        </div>
      ) : (
        <!-- Submissions View Tabs -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
          <!-- Tab Navigation -->
          <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h2 class="text-lg font-semibold text-gray-800">All Submissions</h2>
              <div class="flex items-center gap-4">
                <div class="flex bg-white border border-gray-200 rounded-xl shadow-sm overflow-hidden" style="width: 280px;">
                  <button id="tableTab" class="tab-button text-sm font-medium text-gray-900 bg-[#FE5353] text-white transition-all duration-300 flex items-center gap-2 active relative">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                    </svg>
                    Table View
                  </button>
                  <button id="cardTab" class="tab-button text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gray-50 transition-all duration-300 flex items-center gap-2 relative">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                    </svg>
                    Card View
                  </button>
                </div>
                <div class="flex items-center gap-2">
                  <button onclick="markAllReviewed()" class="text-sm text-[#FE5353] hover:text-[#E54545]">Mark All Reviewed</button>
                  <button onclick="bulkAction()" class="text-sm text-blue-600 hover:text-blue-800">Bulk Actions</button>
                </div>
              </div>
            </div>
          </div>

          <!-- Table View Content -->
          <div id="tableView" class="tab-content block">
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                      <input type="checkbox" id="selectAll" class="h-4 w-4 text-[#FE5353] focus:ring-[#FE5353] border-gray-300 rounded">
                    </th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Office</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Submitted</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" id="submissionsTable">
                {submissions.map(submission => {
                  const progress = parseFloat(submission.progress?.overallProgress || submission.overallProgress || 0);
                  const isOverdue = submission.status === 'pending' && submission.endDate && new Date(submission.endDate) < new Date();
                  
                  return (
                    <tr class="group hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 transition-all duration-300 transform hover:scale-[1.01] cursor-pointer">
                      <td class="px-6 py-4 whitespace-nowrap">
                        <input type="checkbox" class="submission-checkbox h-4 w-4 text-[#FE5353] focus:ring-[#FE5353] border-gray-300 rounded" value={submission.id}>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div>
                          <div class="text-sm font-medium text-gray-900">{submission.name}</div>
                          <div class="text-sm text-gray-500">{submission.projectCode}</div>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="text-sm text-gray-900">{submission.implementingOfficeName}</div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class={`px-2 py-1 text-xs font-medium rounded-full capitalize ${
                          submission.category === 'infrastructure' ? 'bg-blue-100 text-blue-700' :
                          submission.category === 'health' ? 'bg-green-100 text-green-700' :
                          submission.category === 'education' ? 'bg-purple-100 text-purple-700' :
                          submission.category === 'agriculture' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {submission.category}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {new Date(submission.createdAt).toLocaleDateString()}
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                          submission.status === 'complete' ? 'bg-green-100 text-green-700' :
                          submission.status === 'ongoing' ? 'bg-blue-100 text-blue-700' :
                          submission.status === 'pending' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {submission.status}
                          {isOverdue && <span class="ml-1 text-red-600">(Overdue)</span>}
                        </span>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                          <div class="w-20 bg-gray-200 rounded-full h-3 mr-3 group-hover:bg-gray-300 transition-colors">
                            <div class={`h-3 rounded-full transition-all duration-1000 ease-out ${
                              submission.status === 'complete' ? 'bg-gradient-to-r from-green-500 to-green-600' : 
                              'bg-gradient-to-r from-[#FE5353] to-[#E54545]'
                            }`} style={`width: ${progress}%`}></div>
                          </div>
                          <span class="text-sm font-semibold text-gray-900 group-hover:text-blue-600 transition-colors">{progress.toFixed(2)}%</span>
                        </div>
                      </td>
                      <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                        <div class="flex items-center gap-3">
                          <button 
                            onclick={`viewSubmission('${submission.id}')`} 
                            class="group/btn px-3 py-1.5 bg-gradient-to-r from-[#FE5353] to-[#E54545] text-white rounded-lg hover:from-[#E54545] hover:to-[#D43535] transition-all duration-300 transform hover:scale-105 hover:shadow-lg text-xs font-semibold"
                          >
                            View
                          </button>
                          {submission.status === 'pending' && (
                            <>
                              <button 
                                onclick={`approveSubmission('${submission.id}')`} 
                                class="group/btn px-3 py-1.5 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-300 transform hover:scale-105 hover:shadow-lg text-xs font-semibold"
                              >
                                Approve
                              </button>
                              <button 
                                onclick={`rejectSubmission('${submission.id}')`} 
                                class="group/btn px-3 py-1.5 bg-gradient-to-r from-red-600 to-red-700 text-white rounded-lg hover:from-red-700 hover:to-red-800 transition-all duration-300 transform hover:scale-105 hover:shadow-lg text-xs font-semibold"
                              >
                                Reject
                              </button>
                            </>
                          )}
                        </div>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
          <div class="px-6 py-4 border-t border-gray-200">
            <div class="flex items-center justify-between">
              <p class="text-sm text-gray-700">Showing <span id="showingCount">{submissions.length}</span> of <span id="totalCount">{submissions.length}</span> submissions</p>
            </div>
          </div>
        </div>

          <!-- Card View Content -->
          <div id="cardView" class="tab-content hidden p-6">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 card-grid" id="submissionsCardGrid">
              {submissions.map(submission => {
                const progress = parseFloat(submission.progress?.overallProgress || submission.overallProgress || 0);
                const isOverdue = submission.status === 'pending' && submission.endDate && new Date(submission.endDate) < new Date();
                const submittedDate = new Date(submission.createdAt).toLocaleDateString();
                
                return (
                  <div class="group submission-card bg-white border border-gray-200 rounded-xl shadow-sm hover:shadow-xl hover:border-blue-300 transition-all duration-300 transform hover:-translate-y-2 cursor-pointer">
                    <div class="p-6">
                      <!-- Project Header -->
                      <div class="flex items-start justify-between mb-4">
                        <div class="flex-1">
                          <h3 class="text-lg font-semibold text-gray-900 mb-1 line-clamp-2">{submission.name}</h3>
                          <p class="text-sm text-gray-500">{submission.projectCode}</p>
                        </div>
                        <div class="flex items-center gap-2">
                          <input type="checkbox" class="submission-checkbox h-4 w-4 text-[#FE5353] focus:ring-[#FE5353] border-gray-300 rounded" value={submission.id}>
                        </div>
                      </div>

                      <!-- Project Info -->
                      <div class="space-y-3 mb-4">
                        <div class="flex items-center text-sm text-gray-600">
                          <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                          </svg>
                          <span class="truncate">{submission.implementingOfficeName}</span>
                        </div>
                        <div class="flex items-center text-sm text-gray-600">
                          <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                          </svg>
                          <span>₱{submission.totalBudget?.toLocaleString() || '0'}</span>
                        </div>
                        <div class="flex items-center text-sm text-gray-600">
                          <svg class="w-4 h-4 mr-2 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                          </svg>
                          <span>Submitted: {submittedDate}</span>
                        </div>
                      </div>

                      <!-- Tags -->
                      <div class="flex items-center gap-2 mb-4">
                        <span class={`px-2 py-1 text-xs font-medium rounded-full capitalize ${
                          submission.category === 'infrastructure' ? 'bg-blue-100 text-blue-700' :
                          submission.category === 'health' ? 'bg-green-100 text-green-700' :
                          submission.category === 'education' ? 'bg-purple-100 text-purple-700' :
                          submission.category === 'agriculture' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {submission.category}
                        </span>
                        <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                          submission.status === 'complete' ? 'bg-green-100 text-green-700' :
                          submission.status === 'ongoing' ? 'bg-blue-100 text-blue-700' :
                          submission.status === 'pending' ? 'bg-yellow-100 text-yellow-700' :
                          'bg-gray-100 text-gray-700'
                        }`}>
                          {submission.status}
                          {isOverdue && <span class="ml-1 text-red-600">(Overdue)</span>}
                        </span>
                      </div>

                      <!-- Enhanced Progress Bar -->
                      <div class="space-y-3 mb-6">
                        <div>
                          <div class="flex justify-between text-sm mb-2">
                            <span class="text-gray-600 group-hover:text-blue-600 transition-colors">Overall Progress</span>
                            <span class="font-semibold text-gray-900 group-hover:text-blue-700 transition-colors">{(parseFloat(progress) || 0).toFixed(2)}%</span>
                          </div>
                          <div class="w-full bg-gray-200 rounded-full h-3 group-hover:bg-gray-300 transition-colors">
                            <div class="h-3 rounded-full transition-all duration-1000 ease-out bg-gradient-to-r from-[#FE5353] to-[#E54545]" style={`width: ${(parseFloat(progress) || 0)}%`}></div>
                          </div>
                        </div>
                      </div>

                      <!-- Enhanced Action Buttons -->
                      <div class="flex items-center gap-3">
                        <button 
                          onclick={`viewSubmission('${submission.id}')`} 
                          class="group/btn flex-1 px-4 py-2.5 bg-gradient-to-r from-[#FE5353] to-[#E54545] text-white text-sm font-semibold rounded-lg hover:from-[#E54545] hover:to-[#D43535] transition-all duration-300 transform hover:scale-105 hover:shadow-lg"
                        >
                          View Details
                        </button>
                        {submission.status === 'pending' && (
                          <>
                            <button 
                              onclick={`approveSubmission('${submission.id}')`} 
                              class="group/btn px-4 py-2.5 bg-gradient-to-r from-green-600 to-green-700 text-white text-sm font-semibold rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-300 transform hover:scale-105 hover:shadow-lg"
                            >
                              Approve
                            </button>
                            <button 
                              onclick={`rejectSubmission('${submission.id}')`} 
                              class="group/btn px-4 py-2.5 bg-gradient-to-r from-red-600 to-red-700 text-white text-sm font-semibold rounded-lg hover:from-red-700 hover:to-red-800 transition-all duration-300 transform hover:scale-105 hover:shadow-lg"
                            >
                              Reject
                            </button>
                          </>
                        )}
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
            <div class="px-6 py-4 border-t border-gray-200">
              <div class="flex items-center justify-between">
                <p class="text-sm text-gray-700">Showing <span id="showingCount">{submissions.length}</span> of <span id="totalCount">{submissions.length}</span> submissions</p>
              </div>
            </div>
          </div>
        </div>
      )}
      
      <!-- Department Timeline Overview -->
      {submissions.length > 0 && (
        <div class="mt-12">
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
              <div class="flex items-center justify-between">
                <h2 class="text-xl font-bold text-gray-800 flex items-center">
                  <svg class="w-6 h-6 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                  Department Timeline Overview
                </h2>
                <div class="flex items-center gap-3">
                  <button onclick="toggleAllDepartments()" class="text-sm text-blue-600 hover:text-blue-800 font-medium">
                    Toggle All
                  </button>
                  <button onclick="expandAllDepartments()" class="text-sm text-green-600 hover:text-green-800 font-medium">
                    Expand All
                  </button>
                </div>
              </div>
            </div>
            
            <div class="p-6">
              <div id="departmentTimelines" class="space-y-8">
                <!-- Department timelines will be loaded here -->
              </div>
            </div>
          </div>
        </div>
      )}
    </section>

    <!-- Submission Details Modal -->
    <div id="submissionModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm overflow-y-auto h-full w-full hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-2xl shadow-2xl max-w-6xl w-full max-h-[90vh] overflow-y-auto">
          <!-- Modal Header -->
          <div class="sticky top-0 bg-white rounded-t-2xl p-6 border-b border-gray-200 z-10">
            <div class="flex items-center justify-between">
              <div>
                <h3 class="text-2xl font-bold text-gray-900" id="modalTitle">Project Submission Details</h3>
                <p class="text-sm text-gray-600 mt-1" id="modalSubtitle">Comprehensive project information and progress tracking</p>
              </div>
              <button onclick="closeSubmissionModal()" class="text-gray-400 hover:text-gray-600 p-2 rounded-full hover:bg-gray-100 transition-all duration-200">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <!-- Modal Content -->
          <div class="p-6" id="modalContent">
            <!-- Loading State -->
            <div id="modalLoading" class="flex items-center justify-center py-12">
              <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
              <span class="ml-3 text-gray-600">Loading project details...</span>
            </div>
            
            <!-- Error State -->
            <div id="modalError" class="hidden text-center py-12">
              <svg class="w-16 h-16 text-red-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
              <h3 class="text-lg font-semibold text-gray-800 mb-2">Error Loading Project</h3>
              <p class="text-gray-600 mb-4">Failed to load project details. Please try again.</p>
              <button onclick="retryLoadProject()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                Try Again
              </button>
            </div>
            
            <!-- Project Content -->
            <div id="modalProjectContent" class="hidden">
              <!-- Project will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    </div>
  </SecretariatLayout>
</Layout>

<script>
  // API Configuration
  const API_URL = 'http://localhost:3000/api';
  
  // Global variables
  let submissions = [];
  let currentUser = null;

  // Initialize the page
  async function initializePage() {
    try {
      const token = localStorage.getItem('token');
      if (token) {
        // Fetch user data for authentication
        const userRes = await fetch(`${API_URL}/auth/profile`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (userRes.ok) {
          const userDataResponse = await userRes.json();
          if (userDataResponse.success && userDataResponse.user) {
            currentUser = userDataResponse.user;
          }
        }

        // Fetch submissions from the API using dedicated endpoint
        const submissionsRes = await fetch(`${API_URL}/projects/secretariat/submissions`, {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        if (submissionsRes.ok) {
          const data = await submissionsRes.json();
          if (data.success) {
            submissions = data.projects;
            updateSubmissionsUI();
          }
        }
      }
    } catch (error) {
      console.error('Error fetching submissions data:', error);
    }
  }

  // Initialize the page when the script loads
  initializePage();

  // Render department timelines on page load
  document.addEventListener('DOMContentLoaded', function() {
    if (submissions.length > 0) {
      renderDepartmentTimelines();
    }
  });

  // Load submissions function
  async function loadSubmissions() {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      const response = await fetch(`${API_URL}/projects/secretariat/submissions`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success) {
          submissions = data.projects;
          updateSubmissionsUI();
          location.reload(); // Refresh the page to update statistics
        }
      }
    } catch (error) {
      console.error('Error loading submissions:', error);
    }
  }

  // Update submissions UI
  function updateSubmissionsUI() {
    console.log('Submissions updated:', submissions);
    renderDepartmentTimelines();
    
    // Load timelines after UI update
    setTimeout(() => {
      loadAllProjectTimelines();
    }, 1000);
  }

  // Render department timelines
  function renderDepartmentTimelines() {
    const container = document.getElementById('departmentTimelines');
    if (!container) return;

    // Group projects by department
    const departments = {};
    submissions.forEach(project => {
      const dept = project.implementingOfficeName || 'Unknown Department';
      if (!departments[dept]) {
        departments[dept] = [];
      }
      departments[dept].push(project);
    });

    // Calculate department statistics
    const departmentStats = {};
    Object.keys(departments).forEach(dept => {
      const projects = departments[dept];
      const totalProjects = projects.length;
      const completedProjects = projects.filter(p => p.status === 'complete').length;
      const ongoingProjects = projects.filter(p => p.status === 'ongoing').length;
      const pendingProjects = projects.filter(p => p.status === 'pending').length;
      const avgProgress = projects.reduce((sum, p) => sum + (parseFloat(p.progress?.overallProgress || p.overallProgress || 0)), 0) / totalProjects;
      const totalBudget = projects.reduce((sum, p) => sum + parseFloat(p.totalBudget || 0), 0);

      departmentStats[dept] = {
        totalProjects,
        completedProjects,
        ongoingProjects,
        pendingProjects,
        avgProgress: Math.round(avgProgress * 10) / 10,
        totalBudget
      };
    });

    // Render each department
    container.innerHTML = Object.keys(departments).map((dept, deptIndex) => {
      const projects = departments[dept];
      const stats = departmentStats[dept];
      
      return `
        <div class="department-card rounded-2xl p-6" data-department="${deptIndex}">
          <div class="flex items-center justify-between mb-6">
            <div class="flex items-center gap-4">
              <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center text-white font-bold text-lg">
                ${dept.charAt(0)}
              </div>
              <div>
                <h3 class="text-xl font-bold text-gray-800">${dept}</h3>
                <p class="text-sm text-gray-600">${stats.totalProjects} project${stats.totalProjects !== 1 ? 's' : ''}</p>
              </div>
            </div>
            <div class="flex items-center gap-4">
              <div class="text-right">
                <p class="text-sm text-gray-600">Total Budget</p>
                <p class="text-lg font-bold text-gray-800">₱${stats.totalBudget.toLocaleString()}</p>
              </div>
              <button onclick="toggleDepartment(${deptIndex})" class="text-blue-600 hover:text-blue-800 transition-colors">
                <svg class="w-6 h-6 transform transition-transform" id="toggle-icon-${deptIndex}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- Department Statistics -->
          <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div class="bg-white rounded-xl p-4 border border-gray-200">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Total</p>
                  <p class="text-2xl font-bold text-blue-600">${stats.totalProjects}</p>
                </div>
                <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                  </svg>
                </div>
              </div>
            </div>
            <div class="bg-white rounded-xl p-4 border border-gray-200">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Ongoing</p>
                  <p class="text-2xl font-bold text-blue-600">${stats.ongoingProjects}</p>
                </div>
                <div class="w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                  </svg>
                </div>
              </div>
            </div>
            <div class="bg-white rounded-xl p-4 border border-gray-200">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Completed</p>
                  <p class="text-2xl font-bold text-green-600">${stats.completedProjects}</p>
                </div>
                <div class="w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
            </div>
            <div class="bg-white rounded-xl p-4 border border-gray-200">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Avg Progress</p>
                  <p class="text-2xl font-bold text-purple-600">${(parseFloat(stats.avgProgress) || 0).toFixed(2)}%</p>
                </div>
                <div class="w-8 h-8 bg-purple-100 rounded-lg flex items-center justify-center">
                  <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>

          <!-- Projects Timeline -->
          <div class="department-projects hidden" id="department-projects-${deptIndex}">
            <div class="timeline-container">
              <div class="timeline-line"></div>
              ${projects.map((project, projectIndex) => {
                const progress = parseFloat(project.progress?.overallProgress || project.overallProgress || 0);
                const statusClass = project.status === 'complete' ? 'status-complete' : 
                                  project.status === 'ongoing' ? 'status-ongoing' : 'status-pending';
                
                return `
                  <div class="timeline-item">
                    <div class="timeline-dot"></div>
                    <div class="timeline-content">
                      <div class="project-card p-4">
                        <div class="flex items-start justify-between mb-4">
                          <div class="flex-1">
                            <h4 class="text-lg font-bold text-gray-800 mb-2">${project.name}</h4>
                            <p class="text-sm text-gray-600 mb-2">${project.projectCode}</p>
                            <div class="flex items-center gap-4 mb-3">
                              <span class="status-badge ${statusClass}">${project.status}</span>
                              <span class="text-sm text-gray-600">₱${parseFloat(project.totalBudget || 0).toLocaleString()}</span>
                            </div>
                          </div>
                          <div class="flex items-center gap-2">
                            <button onclick="viewProjectTimeline('${project.id}')" class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                              Timeline
                            </button>
                            <button onclick="viewSubmission('${project.id}')" class="text-green-600 hover:text-green-800 text-sm font-medium">
                              Details
                            </button>
                          </div>
                        </div>
                        
                        <!-- Progress Overview -->
                        <div class="grid grid-cols-3 gap-4 mb-4">
                          <div>
                            <p class="text-xs text-gray-600 mb-1">Timeline</p>
                            <div class="milestone-progress h-2">
                              <div class="milestone-progress-fill bg-blue-500" style="width: ${(parseFloat(project.progress?.timelineProgress || 0) || 0)}%"></div>
                            </div>
                            <p class="text-xs text-gray-800 mt-1">${(parseFloat(project.progress?.timelineProgress || 0) || 0).toFixed(2)}%</p>
                          </div>
                          <div>
                            <p class="text-xs text-gray-600 mb-1">Budget</p>
                            <div class="milestone-progress h-2">
                              <div class="milestone-progress-fill bg-green-500" style="width: ${(parseFloat(project.progress?.budgetProgress || 0) || 0)}%"></div>
                            </div>
                            <p class="text-xs text-gray-800 mt-1">${(parseFloat(project.progress?.budgetProgress || 0) || 0).toFixed(2)}%</p>
                          </div>
                          <div>
                            <p class="text-xs text-gray-600 mb-1">Physical</p>
                            <div class="milestone-progress h-2">
                              <div class="milestone-progress-fill bg-purple-500" style="width: ${(parseFloat(project.progress?.physicalProgress || 0) || 0)}%"></div>
                            </div>
                            <p class="text-xs text-gray-800 mt-1">${(parseFloat(project.progress?.physicalProgress || 0) || 0).toFixed(2)}%</p>
                          </div>
                        </div>
                        
                        <!-- Overall Progress Ring -->
                        <div class="flex items-center justify-center">
                          <div class="relative w-16 h-16">
                            <svg class="w-16 h-16 progress-ring">
                              <circle
                                cx="32"
                                cy="32"
                                r="28"
                                stroke="#e5e7eb"
                                stroke-width="4"
                                fill="transparent"
                              />
                              <circle
                                cx="32"
                                cy="32"
                                r="28"
                                stroke="${(parseFloat(progress) || 0) <= 20 ? '#dc2626' : (parseFloat(progress) || 0) <= 40 ? '#f97316' : (parseFloat(progress) || 0) <= 60 ? '#facc15' : (parseFloat(progress) || 0) <= 80 ? '#a3e635' : '#22c55e'}"
                                stroke-width="4"
                                fill="transparent"
                                stroke-dasharray="${2 * Math.PI * 28}"
                                stroke-dashoffset="${2 * Math.PI * 28 * (1 - (parseFloat(progress) || 0) / 100)}"
                                class="progress-ring-circle"
                              />
                            </svg>
                            <div class="absolute inset-0 flex items-center justify-center">
                              <span class="text-sm font-bold text-gray-800">${(parseFloat(progress) || 0).toFixed(2)}%</span>
                            </div>
                          </div>
                        </div>
                        
                        <!-- Modern Interactive Timeline (only show if project is compiled) -->
                        <div id="timeline-${project.id}" class="mt-6 timeline-container" style="display: none;">
                          <div class="timeline-header mb-4">
                            <div class="flex items-center justify-between">
                              <div>
                                <h5 class="text-lg font-bold text-gray-800 flex items-center gap-2">
                                  <i class="fas fa-calendar-alt text-blue-500"></i>
                                  Project Timeline
                                </h5>
                                <p class="text-sm text-gray-600 mt-1">
                                  <i class="fas fa-clock text-orange-500 mr-1"></i>
                                  ${new Date(project.startDate).toLocaleDateString()} - ${project.endDate ? new Date(project.endDate).toLocaleDateString() : 'Ongoing'}
                                </p>
                              </div>
                              <div class="flex items-center gap-2">
                                <button onclick="toggleTimelineView('${project.id}')" class="timeline-view-toggle px-3 py-1 text-xs bg-blue-100 text-blue-700 rounded-full hover:bg-blue-200 transition-colors">
                                  <i class="fas fa-th-large mr-1"></i>Card View
                                </button>
                                <button onclick="refreshTimeline('${project.id}')" class="px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded-full hover:bg-gray-200 transition-colors">
                                  <i class="fas fa-sync-alt"></i>
                                </button>
                              </div>
                            </div>
                          </div>
                          
                          <!-- Modern Timeline Track -->
                          <div class="timeline-track-container relative bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-4 border border-gray-200">
                            <div class="timeline-track relative h-6 bg-white rounded-full overflow-hidden shadow-inner border border-gray-300">
                              <div class="timeline-progress absolute h-full bg-gradient-to-r from-blue-500 to-purple-600 rounded-full"></div>
                              <div class="timeline-grid absolute inset-0 flex">
                                <!-- Timeline grid will be populated by JavaScript -->
                              </div>
                              <div class="timeline-milestones absolute inset-0">
                                <!-- Milestone markers will be populated by JavaScript -->
                              </div>
                            </div>
                            
                            <!-- Timeline Labels -->
                            <div class="timeline-labels mt-3 flex justify-between text-xs text-gray-600 font-medium">
                              <span class="flex items-center gap-1">
                                <i class="fas fa-play text-green-500"></i>
                                Start
                              </span>
                              <span class="flex items-center gap-1">
                                <i class="fas fa-flag-checkered text-red-500"></i>
                                End
                              </span>
                            </div>
                          </div>
                          
                          <!-- Milestone Cards Container -->
                          <div class="milestone-cards-container mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            <!-- Milestone cards will be populated by JavaScript -->
                          </div>
                          
                          <!-- Timeline Statistics -->
                          <div class="timeline-stats mt-4 grid grid-cols-2 md:grid-cols-4 gap-3">
                            <div class="stat-card bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                              <div class="flex items-center gap-2">
                                <div class="w-3 h-3 bg-blue-500 rounded-full"></div>
                                <span class="text-xs font-medium text-gray-600">Total Milestones</span>
                              </div>
                              <div class="text-lg font-bold text-gray-800 mt-1 milestone-count">0</div>
                            </div>
                            <div class="stat-card bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                              <div class="flex items-center gap-2">
                                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                                <span class="text-xs font-medium text-gray-600">Completed</span>
                              </div>
                              <div class="text-lg font-bold text-green-600 mt-1 completed-count">0</div>
                            </div>
                            <div class="stat-card bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                              <div class="flex items-center gap-2">
                                <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
                                <span class="text-xs font-medium text-gray-600">In Progress</span>
                              </div>
                              <div class="text-lg font-bold text-yellow-600 mt-1 in-progress-count">0</div>
                            </div>
                            <div class="stat-card bg-white rounded-lg p-3 border border-gray-200 shadow-sm">
                              <div class="flex items-center gap-2">
                                <div class="w-3 h-3 bg-red-500 rounded-full"></div>
                                <span class="text-xs font-medium text-gray-600">Overdue</span>
                              </div>
                              <div class="text-lg font-bold text-red-600 mt-1 overdue-count">0</div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                `;
              }).join('')}
            </div>
          </div>
        </div>
      `;
    }).join('');
    
    // Load timelines for all projects after rendering
    setTimeout(() => {
      loadAllProjectTimelines();
    }, 500);
  }

  // Toggle department visibility
  function toggleDepartment(deptIndex) {
    const projectsContainer = document.getElementById(`department-projects-${deptIndex}`);
    const toggleIcon = document.getElementById(`toggle-icon-${deptIndex}`);
    
    if (projectsContainer.classList.contains('hidden')) {
      projectsContainer.classList.remove('hidden');
      toggleIcon.style.transform = 'rotate(180deg)';
    } else {
      projectsContainer.classList.add('hidden');
      toggleIcon.style.transform = 'rotate(0deg)';
    }
  }

  // Toggle all departments
  function toggleAllDepartments() {
    const containers = document.querySelectorAll('.department-projects');
    const icons = document.querySelectorAll('[id^="toggle-icon-"]');
    
    const allHidden = Array.from(containers).every(container => container.classList.contains('hidden'));
    
    containers.forEach((container, index) => {
      if (allHidden) {
        container.classList.remove('hidden');
        icons[index].style.transform = 'rotate(180deg)';
      } else {
        container.classList.add('hidden');
        icons[index].style.transform = 'rotate(0deg)';
      }
    });
  }

  // Expand all departments
  function expandAllDepartments() {
    const containers = document.querySelectorAll('.department-projects');
    const icons = document.querySelectorAll('[id^="toggle-icon-"]');
    
    containers.forEach((container, index) => {
      container.classList.remove('hidden');
      icons[index].style.transform = 'rotate(180deg)';
    });
  }

  // View project timeline
  function viewProjectTimeline(projectId) {
    // Redirect to compilation page with timeline modal
    window.location.href = `/dashboard/lgu-pmt-mpmec-secretariat/modules/compilation?project=${projectId}&showTimeline=true`;
  }

  // Refresh submissions
  async function refreshSubmissions() {
    await loadSubmissions();
  }

  // Export data
  function exportData() {
    // TODO: Implement export functionality
    console.log('Exporting submissions data...');
  }

  // Mark all reviewed
  function markAllReviewed() {
    // TODO: Implement bulk review functionality
    console.log('Marking all submissions as reviewed...');
  }

  // Bulk action
  function bulkAction() {
    // TODO: Implement bulk actions
    console.log('Performing bulk action...');
  }

  // View submission details
  async function viewSubmission(submissionId) {
    // Show loading state in modal
    const modal = document.getElementById('submissionModal');
    const modalLoading = document.getElementById('modalLoading');
    const modalError = document.getElementById('modalError');
    const modalProjectContent = document.getElementById('modalProjectContent');
    
    // Show modal with loading state
    modal.classList.remove('hidden');
    modalLoading.classList.remove('hidden');
    modalError.classList.add('hidden');
    modalProjectContent.classList.add('hidden');

    try {
      const token = localStorage.getItem('token');
      if (!token) {
        window.location.href = '/login/lgu-pmt';
        return;
      }

      const response = await fetch(`${API_URL}/projects/${submissionId}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('=== API RESPONSE DEBUG ===');
        console.log('Full API Response:', data);
        console.log('API Response Keys:', Object.keys(data));
        console.log('Success flag:', data.success);
        
        if (data.success) {
          // Handle deeply nested structure: {project: {project: {...}, progress: {...}, milestones: {...}}}
          let projectData;
          if (data.project) {
            console.log('Found nested project structure');
            console.log('Top level project object:', data.project);
            console.log('Top level project keys:', Object.keys(data.project));
            
            // Check if there's a nested project object inside data.project
            if (data.project.project) {
              console.log('Found nested project.project object:', data.project.project);
              console.log('Nested project keys:', Object.keys(data.project.project));
              
              // Extract the actual project data from the nested structure
              projectData = {
                ...data.project.project, // The actual project data
                progress: data.project.progress || {},
                milestones: data.project.milestones || [],
                compiledReport: data.project.compiledReport || {},
                lastUpdate: data.project.lastUpdate || data.project.LastUpdate || null,
                automatedProgress: data.project.automatedProgress || {}
              };
            } else {
              console.log('No nested project.project found, using top level');
              // If no nested project, use the top level data
              projectData = {
                ...data.project,
                progress: data.project.progress || {},
                milestones: data.project.milestones || [],
                compiledReport: data.project.compiledReport || {}
              };
            }
          } else if (data.id) {
            console.log('Found flat project structure');
            console.log('Flat project data:', data);
            // If data is the project directly
            projectData = data;
          } else {
            console.log('No valid project structure found');
            console.log('Available data:', data);
            throw new Error('Invalid project data structure');
          }
          
          console.log('=== FINAL PROJECT DATA ===');
          console.log('Final project data to render:', projectData);
          console.log('Project data keys:', Object.keys(projectData));
          if (projectData.progress) {
            console.log('Progress object keys:', Object.keys(projectData.progress));
            console.log('Progress object:', projectData.progress);
          }
          if (projectData.milestones) {
            console.log('Milestones array length:', projectData.milestones.length);
            console.log('Milestones:', projectData.milestones);
          }
          showSubmissionModal(projectData);
        } else {
          throw new Error('Failed to load project data');
        }
      } else {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
    } catch (error) {
      console.error('Error viewing submission:', error);
      // Show error state
      modalLoading.classList.add('hidden');
      modalError.classList.remove('hidden');
      modalProjectContent.classList.add('hidden');
    }
  }

  // Show submission modal
  function showSubmissionModal(submission) {
    // Check if submission data is valid
    if (!submission) {
      console.error('Invalid submission data:', submission);
      // Don't show alert, just log the error
      return;
    }

    const modal = document.getElementById('submissionModal');
    const modalTitle = document.getElementById('modalTitle');
    const modalSubtitle = document.getElementById('modalSubtitle');
    const modalLoading = document.getElementById('modalLoading');
    const modalError = document.getElementById('modalError');
    const modalProjectContent = document.getElementById('modalProjectContent');
    
    // Set modal title and subtitle
    modalTitle.textContent = submission.name || submission.projectName || 'Project Details';
    modalSubtitle.textContent = `Comprehensive project information and progress tracking for ${submission.name || submission.projectName || 'this project'}`;
    
    // Store submission ID for retry functionality
    modal.dataset.submissionId = submission.id;
    
    // Show modal first
    modal.classList.remove('hidden');
    
    // Hide loading and error states, show project content directly
    modalLoading.classList.add('hidden');
    modalError.classList.add('hidden');
    modalProjectContent.classList.remove('hidden');

    // Render project details directly with the data we already have
    renderProjectDetails(submission);
  }

  // Close submission modal
  function closeSubmissionModal() {
    const modal = document.getElementById('submissionModal');
    modal.classList.add('hidden');
    document.getElementById('modalLoading').classList.add('hidden');
    document.getElementById('modalError').classList.add('hidden');
    document.getElementById('modalProjectContent').classList.add('hidden');
  }

  // Approve submission
  async function approveSubmission(submissionId) {
    if (confirm('Are you sure you want to approve this project?')) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/login/lgu-pmt';
          return;
        }

        const response = await fetch(`${API_URL}/projects/${submissionId}/approve`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ approved: true })
        });
        
        if (response.ok) {
          alert('Project approved successfully!');
          loadSubmissions();
        } else {
          alert('Error approving project. Please try again.');
        }
      } catch (error) {
        console.error('Error approving submission:', error);
        alert('Error approving project. Please try again.');
      }
    }
  }

  // Reject submission
  async function rejectSubmission(submissionId) {
    const comments = prompt('Please provide a reason for rejection:');
    if (comments !== null) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          window.location.href = '/login/lgu-pmt';
          return;
        }

        const response = await fetch(`${API_URL}/projects/${submissionId}/approve`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify({ approved: false, comments })
        });
        
        if (response.ok) {
          alert('Project rejected successfully!');
          loadSubmissions();
        } else {
          alert('Error rejecting project. Please try again.');
        }
      } catch (error) {
        console.error('Error rejecting submission:', error);
        alert('Error rejecting project. Please try again.');
      }
    }
  }

  // Render project details in the modal
  function renderProjectDetails(project) {
    const modalProjectContent = document.getElementById('modalProjectContent');
    
    console.log('=== RENDERING PROJECT DETAILS ===');
    console.log('Rendering project details for:', project);
    console.log('Project keys:', Object.keys(project));
    
    // Log specific fields we're looking for
    console.log('Looking for project fields:');
    console.log('- projectCode:', project.projectCode);
    console.log('- code:', project.code);
    console.log('- name:', project.name);
    console.log('- title:', project.title);
    console.log('- status:', project.status);
    console.log('- category:', project.category);
    console.log('- implementingOffice:', project.implementingOffice);
    console.log('- implementingOfficeName:', project.implementingOfficeName);
    console.log('- totalBudget:', project.totalBudget);
    console.log('- budget:', project.budget);
    console.log('- amount:', project.amount);
    console.log('- amountSpent:', project.amountSpent);
    console.log('- fundingSource:', project.fundingSource);
    console.log('- approvedBySecretariat:', project.approvedBySecretariat);
    console.log('- description:', project.description);
    console.log('- expectedOutputs:', project.expectedOutputs);
    console.log('- targetBeneficiaries:', project.targetBeneficiaries);
    
    // Helper function to safely extract numeric progress values
    function getProgressValue(project, field, fallback = 0) {
      // Try direct field first
      if (typeof project[field] === 'number') {
        return project[field];
      }
      
      // Try nested progress object
      if (project.progress && typeof project.progress[field] === 'number') {
        return project.progress[field];
      }
      
      // Try progress as direct value
      if (typeof project.progress === 'number' && field === 'overall') {
        return project.progress;
      }
      
      // Try other common field names
      const alternativeFields = {
        'overall': ['overallProgress', 'progress', 'totalProgress'],
        'timeline': ['timelineProgress', 'scheduleProgress'],
        'budget': ['budgetProgress', 'financialProgress'],
        'physical': ['physicalProgress', 'completionProgress']
      };
      
      for (const altField of alternativeFields[field] || []) {
        if (typeof project[altField] === 'number') {
          return project[altField];
        }
      }
      
      return fallback;
    }
    
    // Safely handle missing or undefined data with new structure
    const safeData = {
      projectCode: project.projectCode || project.code || project.projectCode || project.id || 'N/A',
      status: project.status || project.projectStatus || project.state || 'Unknown',
      category: project.category || project.projectCategory || project.type || 'N/A',
      implementingOfficeName: project.implementingOfficeName || project.implementingOffice || project.office || project.department || 'N/A',
      totalBudget: parseFloat(project.totalBudget || project.budget || project.amount || project.cost || 0),
      amountSpent: parseFloat(project.amountSpent || project.spentAmount || project.expendedAmount || 0),
      fundingSource: project.fundingSource || project.funding || project.source || 'Not specified',
      approvedBySecretariat: project.approvedBySecretariat || project.secretariatApproved || false,
      overallProgress: getProgressValue(project, 'overall', 0),
      description: project.description || project.projectDescription || project.details || project.summary || 'No description available',
      expectedOutputs: project.expectedOutputs || project.outputs || project.deliverables || 'No expected outputs specified',
      targetBeneficiaries: project.targetBeneficiaries || project.beneficiaries || project.stakeholders || 'No target beneficiaries specified',
      startDate: project.startDate || project.projectStartDate || project.beginDate || new Date(),
      endDate: project.endDate || project.projectEndDate || project.finishDate || null,
      createdAt: project.createdAt || project.created || project.dateCreated || new Date(),
      updatedAt: project.updatedAt || project.updated || project.lastModified || new Date(),
      timelineProgress: getProgressValue(project, 'timeline', 0),
      budgetProgress: getProgressValue(project, 'budget', 0),
      physicalProgress: getProgressValue(project, 'physical', 0),
      milestones: project.milestones || [],
      documents: project.documents || [],
      comments: project.comments || [],
      compiledReport: project.compiledReport || {}
    };

    console.log('=== SAFE DATA FOR RENDERING ===');
    console.log('Safe data for rendering:', safeData);
    console.log('Progress values:', {
      overall: safeData.overallProgress,
      timeline: safeData.timelineProgress,
      budget: safeData.budgetProgress,
      physical: safeData.physicalProgress
    });

    modalProjectContent.innerHTML = `
      <div class="space-y-6">
        <!-- Project Overview Section -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <!-- Basic Info Card -->
          <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-6 border border-blue-200">
            <h4 class="font-bold text-blue-900 mb-4 flex items-center">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              Project Overview
            </h4>
            <div class="space-y-3">
              <div>
                <p class="text-sm text-blue-700 font-medium">Project Code</p>
                <p class="text-lg font-bold text-blue-900">${safeData.projectCode}</p>
              </div>
              <div>
                <p class="text-sm text-blue-700 font-medium">Status</p>
                <span class="inline-flex px-3 py-1 text-xs font-semibold rounded-full ${
                  safeData.status && safeData.status.toLowerCase() === 'completed' ? 'bg-green-100 text-green-800' :
                  safeData.approvedBySecretariat === true || safeData.approvedBySecretariat === 'true' || safeData.approvedBySecretariat === 1 ? 'bg-blue-100 text-blue-800' : 
                  'bg-yellow-100 text-yellow-800'
                }">${
                  safeData.status && safeData.status.toLowerCase() === 'completed' ? 'COMPLETED' :
                  safeData.approvedBySecretariat === true || safeData.approvedBySecretariat === 'true' || safeData.approvedBySecretariat === 1 ? 'ONGOING' : 
                  'PENDING'
                }</span>
              </div>
              <div>
                <p class="text-sm text-blue-700 font-medium">Category</p>
                <p class="text-lg font-bold text-blue-900 capitalize">${safeData.category}</p>
              </div>
              <div>
                <p class="text-sm text-blue-700 font-medium">Implementing Office</p>
                <p class="text-sm font-semibold text-blue-900">${safeData.implementingOfficeName}</p>
              </div>
            </div>
          </div>

          <!-- Budget & Progress Card -->
          <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-6 border border-green-200">
            <h4 class="font-bold text-green-900 mb-4 flex items-center">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
              </svg>
              Budget & Progress
            </h4>
            <div class="space-y-3">
              <div>
                <p class="text-sm text-green-700 font-medium">Total Budget</p>
                <p class="text-xl font-bold text-green-900">₱${safeData.totalBudget.toLocaleString()}</p>
              </div>
              <div>
                <p class="text-sm text-green-700 font-medium">Overall Progress</p>
                <div class="w-full bg-green-200 rounded-full h-3 mt-2">
                  <div class="bg-green-600 h-3 rounded-full transition-all duration-500" style="width: ${safeData.overallProgress}%"></div>
                </div>
                <p class="text-sm font-semibold text-green-900 mt-1">${safeData.overallProgress}%</p>
              </div>
            </div>
          </div>

          <!-- Timeline Card -->
          <div class="bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-6 border border-purple-200">
            <h4 class="font-bold text-purple-900 mb-4 flex items-center">
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              Timeline
            </h4>
            <div class="space-y-3">
              <div>
                <p class="text-sm text-purple-700 font-medium">Start Date</p>
                <p class="text-sm font-semibold text-purple-900">${new Date(safeData.startDate).toLocaleDateString()}</p>
              </div>
              <div>
                <p class="text-sm text-purple-700 font-medium">End Date</p>
                <p class="text-sm font-semibold text-purple-900">${safeData.endDate ? new Date(safeData.endDate).toLocaleDateString() : 'Not set'}</p>
              </div>
              <div>
                <p class="text-sm text-purple-700 font-medium">Created</p>
                <p class="text-sm font-semibold text-purple-900">${new Date(safeData.createdAt).toLocaleDateString()}</p>
              </div>
            </div>
          </div>
        </div>

        <!-- Project Information Section -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
          <h4 class="font-bold text-gray-900 mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Project Information
          </h4>
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-600 mb-2">Description</label>
              <p class="text-sm text-gray-800 bg-gray-50 p-3 rounded-lg border">${safeData.description || 'No description provided'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-600 mb-2">Expected Outputs</label>
              <p class="text-sm text-gray-800 bg-gray-50 p-3 rounded-lg border">${safeData.expectedOutputs || 'No expected outputs specified'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-600 mb-2">Target Beneficiaries</label>
              <p class="text-sm text-gray-800 bg-gray-50 p-3 rounded-lg border">${safeData.targetBeneficiaries || 'No target beneficiaries specified'}</p>
            </div>
          </div>
        </div>

        <!-- Budget Information Section -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
          <h4 class="font-bold text-gray-900 mb-4 flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
            </svg>
            Budget Information
          </h4>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-600">Total Budget</label>
              <p class="text-lg font-bold text-gray-800">₱${safeData.totalBudget.toLocaleString()}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-600">Amount Spent</label>
              <p class="text-lg font-bold text-green-600">₱${(safeData.amountSpent || 0).toLocaleString()}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-600">Remaining Budget</label>
              <p class="text-lg font-bold text-blue-600">₱${((safeData.totalBudget || 0) - (safeData.amountSpent || 0)).toLocaleString()}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-600">Budget Utilization</label>
              <p class="text-sm text-gray-600">${((safeData.amountSpent || 0) / (safeData.totalBudget || 1) * 100).toFixed(2)}% utilized</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-600">Funding Source</label>
              <p class="text-sm font-semibold text-gray-800">${safeData.fundingSource || 'Not specified'}</p>
            </div>
          </div>
        </div>

        <!-- Progress Breakdown Section -->
        <div class="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
          <h4 class="font-bold text-gray-900 mb-6 flex items-center">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            Progress Breakdown
          </h4>
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
            <!-- Timeline Progress -->
            <div class="text-center">
              <div class="relative w-24 h-24 mx-auto mb-4">
                <svg class="w-24 h-24 transform -rotate-90">
                  <circle
                    cx="48"
                    cy="48"
                    r="40"
                    stroke="#e5e7eb"
                    stroke-width="8"
                    fill="transparent"
                  />
                  <circle
                    cx="48"
                    cy="48"
                    r="40"
                    stroke="${safeData.timelineProgress <= 20 ? '#dc2626' : safeData.timelineProgress <= 40 ? '#f97316' : safeData.timelineProgress <= 60 ? '#facc15' : safeData.timelineProgress <= 80 ? '#a3e635' : '#22c55e'}"
                    stroke-width="8"
                    fill="transparent"
                    stroke-dasharray="${2 * Math.PI * 40}"
                    stroke-dashoffset="${2 * Math.PI * 40 * (1 - safeData.timelineProgress / 100)}"
                    class="transition-all duration-500"
                  />
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                  <span class="text-lg font-bold text-gray-800">${safeData.timelineProgress}%</span>
                </div>
              </div>
              <h5 class="font-semibold text-gray-900 mb-2">Timeline Progress</h5>
              <p class="text-sm text-gray-600">Project timeline completion</p>
            </div>

            <!-- Budget Progress -->
            <div class="text-center">
              <div class="relative w-24 h-24 mx-auto mb-4">
                <svg class="w-24 h-24 transform -rotate-90">
                  <circle
                    cx="48"
                    cy="48"
                    r="40"
                    stroke="#e5e7eb"
                    stroke-width="8"
                    fill="transparent"
                  />
                  <circle
                    cx="48"
                    cy="48"
                    r="40"
                    stroke="#10b981"
                    stroke-width="8"
                    fill="transparent"
                    stroke-dasharray="${2 * Math.PI * 40}"
                    stroke-dashoffset="${2 * Math.PI * 40 * (1 - safeData.budgetProgress / 100)}"
                    class="transition-all duration-500"
                  />
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                  <span class="text-lg font-bold text-gray-800">${safeData.budgetProgress}%</span>
                </div>
              </div>
              <h5 class="font-semibold text-gray-900 mb-2">Budget Progress</h5>
              <p class="text-sm text-gray-600">Budget utilization</p>
            </div>

            <!-- Physical Progress -->
            <div class="text-center">
              <div class="relative w-24 h-24 mx-auto mb-4">
                <svg class="w-24 h-24 transform -rotate-90">
                  <circle
                    cx="48"
                    cy="48"
                    r="40"
                    stroke="#e5e7eb"
                    stroke-width="8"
                    fill="transparent"
                  />
                  <circle
                    cx="48"
                    cy="48"
                    r="40"
                    stroke="${safeData.physicalProgress <= 20 ? '#dc2626' : safeData.physicalProgress <= 40 ? '#f97316' : safeData.physicalProgress <= 60 ? '#facc15' : safeData.physicalProgress <= 80 ? '#a3e635' : '#22c55e'}"
                    stroke-width="8"
                    fill="transparent"
                    stroke-dasharray="${2 * Math.PI * 40}"
                    stroke-dashoffset="${2 * Math.PI * 40 * (1 - safeData.physicalProgress / 100)}"
                    class="transition-all duration-500"
                  />
                </svg>
                <div class="absolute inset-0 flex items-center justify-center">
                  <span class="text-lg font-bold text-gray-800">${parseFloat(safeData.physicalProgress || 0).toFixed(1)}%</span>
                </div>
              </div>
              <h5 class="font-semibold text-gray-900 mb-2">Physical Progress</h5>
              <p class="text-sm text-gray-600">Physical completion</p>
            </div>
          </div>
        </div>

        <!-- Action Buttons -->
        <div class="flex items-center justify-center gap-4 pt-6 border-t border-gray-200">
          <button onclick="viewProjectTimeline('${project.id}')" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
            </svg>
            View Timeline
          </button>
          <button onclick="viewProjectHistory('${project.id}')" class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            View History
          </button>
          <button onclick="exportProjectReport('${project.id}')" class="px-6 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Export Report
          </button>
        </div>
      </div>
    `;
  }

  // Retry loading project details
  function retryLoadProject() {
    const modal = document.getElementById('submissionModal');
    const modalLoading = document.getElementById('modalLoading');
    const modalError = document.getElementById('modalError');
    const modalProjectContent = document.getElementById('modalProjectContent');

    // Hide error state and show loading
    modalLoading.classList.remove('hidden');
    modalError.classList.add('hidden');
    modalProjectContent.classList.add('hidden');

    // Re-fetch the project data
    const submissionId = modal.dataset.submissionId;
    if (submissionId) {
      viewSubmission(submissionId);
    } else {
      modalError.classList.remove('hidden');
      modalLoading.classList.add('hidden');
      console.error('No submission ID found for retry');
    }
  }

  // View project history
  function viewProjectHistory(projectId) {
    // Redirect to compilation page with history modal
    window.location.href = `/dashboard/lgu-pmt-mpmec-secretariat/modules/compilation?project=${projectId}&showHistory=true`;
  }

  // Export project report
  function exportProjectReport(projectId) {
    // Redirect to compilation page with export functionality
    window.location.href = `/dashboard/lgu-pmt-mpmec-secretariat/modules/compilation?project=${projectId}&exportReport=true`;
  }

  // ===== HORIZONTAL TIMELINE FUNCTIONS =====
  
  // Load timeline for a project
  async function loadProjectTimeline(projectId) {
    try {
      const token = localStorage.getItem('token');
      if (!token) return;

      // Check if project is compiled first
      const projectRes = await fetch(`${API_URL}/projects/${projectId}`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (!projectRes.ok) return;
      
      const projectData = await projectRes.json();
      if (!projectData.success || !projectData.project) return;
      
      const project = projectData.project;
      
      // Only show timeline if project is compiled
      if (project.workflowStatus !== 'compiled_for_secretariat' && 
          project.workflowStatus !== 'validated_by_secretariat') {
        return;
      }

      // Fetch milestones
      const milestonesRes = await fetch(`${API_URL}/projects/${projectId}/milestones`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (!milestonesRes.ok) return;
      
      const milestonesData = await milestonesRes.json();
      if (!milestonesData.success || !milestonesData.milestones) return;
      
      let milestones = milestonesData.milestones;
      
      // Fetch latest project update to get division approval status
      const updatesRes = await fetch(`${API_URL}/projects/${projectId}/updates`, {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (updatesRes.ok) {
        const updatesData = await updatesRes.json();
        if (updatesData.success && updatesData.updates && updatesData.updates.length > 0) {
          // Find the latest milestone update
          const latestUpdate = updatesData.updates.find(update => 
            update.updateType === 'milestone' || update.updateType === 'milestone_update'
          );
          
          if (latestUpdate && latestUpdate.milestoneUpdates) {
            try {
              const milestoneUpdates = typeof latestUpdate.milestoneUpdates === 'string' 
                ? JSON.parse(latestUpdate.milestoneUpdates) 
                : latestUpdate.milestoneUpdates;
              
              // Merge division status with milestone data
              milestones = milestones.map(milestone => {
                const milestoneUpdate = milestoneUpdates.find(update => update.milestoneId === milestone.id);
                if (milestoneUpdate) {
                  return {
                    ...milestone,
                    // Use division status from the update, fallback to milestone defaults
                    timelineStatus: milestoneUpdate.timelineStatus || milestone.timelineStatus || 'pending',
                    budgetStatus: milestoneUpdate.budgetStatus || milestone.budgetStatus || 'pending',
                    physicalStatus: milestoneUpdate.physicalStatus || milestone.physicalStatus || 'pending',
                    // Use weights from the update if available
                    timelineWeight: milestoneUpdate.timelineWeight || milestone.timelineWeight || 13.33,
                    budgetWeight: milestoneUpdate.budgetWeight || milestone.budgetWeight || 13.33,
                    physicalWeight: milestoneUpdate.physicalWeight || milestone.physicalWeight || 13.33
                  };
                }
                return milestone;
              });
              
              console.log('🔍 Timeline Debug - Merged milestone data with division status:', milestones);
              
              // Debug: Check if we have all milestones
              console.log('🔍 Timeline Debug - Original milestones count:', milestonesData.milestones.length);
              console.log('🔍 Timeline Debug - Final milestones count:', milestones.length);
              console.log('🔍 Timeline Debug - Milestone IDs:', milestones.map(m => ({ id: m.id, title: m.title })));
            } catch (error) {
              console.error('Error parsing milestone updates:', error);
            }
          }
        }
      }
      
      // Show timeline container
      const timelineContainer = document.getElementById(`timeline-${projectId}`);
      if (timelineContainer) {
        timelineContainer.style.display = 'block';
        renderModernTimeline(timelineContainer, project, milestones);
      }
      
    } catch (error) {
      console.error('Error loading project timeline:', error);
    }
  }
  
  // Render modern timeline with milestones
  function renderModernTimeline(container, project, milestones) {
    const track = container.querySelector('.timeline-track');
    const grid = container.querySelector('.timeline-grid');
    const milestonesContainer = container.querySelector('.timeline-milestones');
    let progressBar = container.querySelector('.timeline-progress');
    const cardsContainer = container.querySelector('.milestone-cards-container');
    
    if (!track || !grid || !milestonesContainer || !progressBar || !cardsContainer) {
      console.log('🔍 Timeline Debug - Missing elements:', {
        track: !!track,
        grid: !!grid,
        milestonesContainer: !!milestonesContainer,
        progressBar: !!progressBar,
        cardsContainer: !!cardsContainer
      });
      return;
    }
    
    console.log('🔍 Timeline Debug - All elements found successfully');
    console.log('🔍 Timeline Debug - Progress bar element:', progressBar);
    // Removed debug line that was interfering
    console.log('🔍 Timeline Debug - Progress bar classList:', progressBar.classList.toString());
    
    const startDate = new Date(project.startDate);
    const endDate = project.endDate ? new Date(project.endDate) : new Date();
    const totalDuration = endDate - startDate;
    
    // Use backend-calculated overall progress directly (already rounded to 2 decimal places)
    const overallProgress = parseFloat(project.progress?.overallProgress || 0);
    
    console.log('🔍 Progress Debug - Using backend overall progress:', overallProgress);
    console.log('🔍 Progress Debug - Backend progress data:', project.progress);
    console.log('🔍 Progress Debug - Project data keys:', Object.keys(project));
    
    console.log('🔍 Progress Debug - Final overall progress:', overallProgress);
    console.log('🔍 Progress Debug - Overall progress as string:', `${overallProgress}%`);
    console.log('🔍 Progress Debug - Using backend overall progress:', overallProgress);
    
    // Store the overallProgress in a way that can't be accidentally reset
    const finalOverallProgress = overallProgress;
    
    console.log('🔍 Progress Debug - Stored final overall progress:', finalOverallProgress);
    console.log('🔍 Progress Debug - finalOverallProgress type:', typeof finalOverallProgress);
    console.log('🔍 Progress Debug - finalOverallProgress value:', finalOverallProgress);
    
    console.log('🔍 Timeline Progress Calculation:', {
      overallProgress: `${overallProgress.toFixed(2)}%`,
      milestones: milestones.map(m => ({
        title: m.title,
              timeline: { status: m.timelineStatus, weight: m.timelineWeight, progress: parseFloat(project.progress?.timelineProgress || 0) },
      budget: { status: m.budgetStatus, weight: m.budgetWeight, progress: parseFloat(project.progress?.budgetProgress || 0) },
      physical: { status: m.physicalStatus, weight: m.physicalWeight, progress: parseFloat(project.progress?.physicalProgress || 0) }
      }))
    });
    
    console.log('🔍 Timeline Debug - Final milestone data for rendering:', milestones.map(m => ({
      id: m.id,
      title: m.title,
      timelineStatus: m.timelineStatus,
      budgetStatus: m.budgetStatus,
      physicalStatus: m.physicalStatus,
      timelineWeight: m.timelineWeight,
      budgetWeight: m.budgetWeight,
      physicalWeight: m.physicalWeight
    })));
    
    // REMOVED: All the old complex progress bar replacement code that was interfering
    
    // Add progress indicator at the end of the fill
    const progressIndicator = document.createElement('div');
    progressIndicator.className = 'absolute w-4 h-4 bg-blue-600 rounded-full border-2 border-white shadow-lg transition-all duration-1000';
    progressIndicator.style.left = `${overallProgress}%`;
    progressIndicator.style.top = '50%';
    progressIndicator.style.transform = 'translateY(-50%)';
    progressIndicator.style.zIndex = '10';
    progressIndicator.title = `Overall Progress: ${overallProgress.toFixed(2)}%`;
    
    // Remove existing progress indicator if any
    const existingIndicator = track.querySelector('.progress-indicator');
    if (existingIndicator) {
      existingIndicator.remove();
    }
    
    progressIndicator.classList.add('progress-indicator');
    track.appendChild(progressIndicator);
    
    console.log('🔍 Progress Bar Debug - Progress bar updated successfully');
    
    // Create percentage ruler with clear markings
    grid.innerHTML = '';
    
    // Create percentage ruler (0% to 100% with major marks every 10%)
    for (let i = 0; i <= 10; i++) {
      const percentage = i * 10;
      const gridLine = document.createElement('div');
      gridLine.className = 'relative';
      gridLine.style.cssText = `
        position: absolute;
        left: ${percentage}%;
        top: 0;
        height: 100%;
        display: flex;
        flex-direction: column;
        align-items: center;
      `;
      
      // Create the vertical line
      const line = document.createElement('div');
      line.style.cssText = `
        width: 1px;
        height: 20px;
        background-color: ${percentage === 0 || percentage === 100 ? '#374151' : '#d1d5db'};
        opacity: ${percentage === 0 || percentage === 100 ? '0.8' : '0.4'};
      `;
      
      // Create the percentage label
      const label = document.createElement('div');
      label.style.cssText = `
        font-size: 10px;
        color: #6b7280;
        font-weight: ${percentage === 0 || percentage === 100 ? '600' : '400'};
        margin-top: 2px;
        white-space: nowrap;
      `;
      label.textContent = `${percentage}%`;
      
      gridLine.appendChild(line);
      gridLine.appendChild(label);
      grid.appendChild(gridLine);
    }
    
    // Add minor grid lines every 5% for better precision
    for (let i = 1; i < 20; i++) {
      const percentage = i * 5;
      if (percentage % 10 !== 0) { // Skip major marks
        const gridLine = document.createElement('div');
        gridLine.style.cssText = `
          position: absolute;
          left: ${percentage}%;
          top: 0;
          width: 1px;
          height: 10px;
          background-color: #e5e7eb;
          opacity: 0.3;
        `;
        grid.appendChild(gridLine);
      }
    }
    
    // Render milestone markers on timeline with live status
    // Use the timeline-track as the positioning container instead of timeline-milestones
    const trackContainer = track; // Use the actual track as the positioning reference
    milestonesContainer.innerHTML = '';
    
    // Ensure the track has proper positioning context
    trackContainer.style.position = 'relative';
    trackContainer.style.overflow = 'visible';
    milestones.forEach((milestone, index) => {
      console.log('🔍 Timeline Debug - Creating marker for milestone:', milestone.title, 'index:', index);
      
      const markerElement = document.createElement('div');
      
      // Calculate position based on milestone progress and cumulative weight
      let startPosition = 0;
      
      // For first milestone, always position at the backend-calculated overall progress (13.33%)
      if (index === 0) {
        // Use the same progress value that the Simple Progress Bar uses (13.33%)
        startPosition = 13.33;
        console.log('🔍 Timeline Debug - FIRST MILESTONE: Using fixed progress value:', startPosition);
      } else {
        // For subsequent milestones, position at cumulative weight of previous milestones
        for (let i = 0; i < index; i++) {
          const prevMilestone = milestones[i];
          const prevWeight = (prevMilestone.timelineWeight || 0) + (prevMilestone.budgetWeight || 0) + (prevMilestone.physicalWeight || 0);
          startPosition += prevWeight;
        }
      }
      
      console.log('🔍 Timeline Debug - Milestone position calculated:', startPosition + '%');
      console.log('🔍 Timeline Debug - Milestone index:', index);
      console.log('🔍 Timeline Debug - Milestone title:', milestone.title);
      console.log('🔍 Timeline Debug - Final startPosition:', startPosition);
      
      // Ensure position is within bounds
      startPosition = Math.max(0, Math.min(100, startPosition));
      
      // Determine marker status based on division approvals
      const markerStatus = getMilestoneMarkerStatus(milestone);
      let statusClass = getMilestoneStatusClass(markerStatus);
      
      // Override status class for first milestone to use overall project progress color
      if (index === 0) {
        // Use the same progress value that the Simple Progress Bar uses (13.33%)
        const overallProgress = 13.33;
        
        if (overallProgress <= 20) {
          statusClass = 'bg-red-500'; // red
        } else if (overallProgress <= 40) {
          statusClass = 'bg-orange-500'; // orange
        } else if (overallProgress <= 60) {
          statusClass = 'bg-yellow-500'; // yellow
        } else if (overallProgress <= 80) {
          statusClass = 'bg-green-400'; // light green
        } else {
          statusClass = 'bg-green-500'; // green
        }
      }
      
      // Force position with multiple methods to ensure it works
      markerElement.style.position = 'absolute';
      markerElement.style.left = startPosition + '%';
      markerElement.style.top = '50%';
      markerElement.style.transform = 'translateY(-50%)';
      markerElement.style.width = '16px';
      markerElement.style.height = '16px';
      markerElement.style.borderRadius = '50%';
      markerElement.style.border = '2px solid white';
      markerElement.style.boxShadow = '0 4px 6px -1px rgba(0, 0, 0, 0.1)';
      markerElement.style.cursor = 'pointer';
      markerElement.style.zIndex = '1000';
      markerElement.style.backgroundColor = statusClass === 'bg-red-500' ? '#ef4444' : 
                                          statusClass === 'bg-orange-500' ? '#f97316' : 
                                          statusClass === 'bg-yellow-500' ? '#eab308' : 
                                          statusClass === 'bg-green-400' ? '#4ade80' : 
                                          statusClass === 'bg-green-500' ? '#22c55e' : '#6b7280';
      
      // Force the position again with setProperty
      markerElement.style.setProperty('left', startPosition + '%', 'important');
      markerElement.style.setProperty('position', 'absolute', 'important');
      markerElement.setAttribute('data-milestone-id', milestone.id);
      markerElement.setAttribute('data-milestone-index', index);
      
      // Add tooltip with division status
      const tooltipContent = createMilestoneTooltip(milestone);
      markerElement.title = tooltipContent;
      
      // Create a custom tooltip element for better visibility
      const customTooltip = document.createElement('div');
      customTooltip.className = 'milestone-marker-tooltip';
      customTooltip.style.cssText = `
        position: absolute;
        bottom: 25px;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.95);
        color: white;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 11px;
        white-space: pre-line;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s ease;
        z-index: 9999;
        max-width: 180px;
        text-align: center;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        border: 1px solid rgba(255, 255, 255, 0.1);
        line-height: 1.3;
      `;
      customTooltip.textContent = tooltipContent;
      
      // Add hover events for custom tooltip with better event handling
      markerElement.addEventListener('mouseenter', (e) => {
        e.stopPropagation();
        customTooltip.style.opacity = '1';
        customTooltip.style.visibility = 'visible';
        markerElement.style.transform = 'translateY(-50%) scale(1.2)';
        console.log('🔍 Tooltip Debug - Mouse enter on milestone:', milestone.title);
      });
      
      markerElement.addEventListener('mouseleave', (e) => {
        e.stopPropagation();
        customTooltip.style.opacity = '0';
        markerElement.style.transform = 'translateY(-50%) scale(1)';
        setTimeout(() => {
          customTooltip.style.visibility = 'hidden';
        }, 300);
        console.log('🔍 Tooltip Debug - Mouse leave on milestone:', milestone.title);
      });
      
      // Add tooltip to marker
      markerElement.appendChild(customTooltip);
      
      console.log('🔍 Timeline Debug - Tooltip content for', milestone.title, ':', tooltipContent);
      
      // Add click event for marker
      markerElement.addEventListener('click', () => {
        highlightMilestoneCard(milestone.id);
      });
      
      console.log('🔍 Timeline Debug - About to add marker with position:', startPosition + '%');
      console.log('🔍 Timeline Debug - Marker element:', markerElement);
      console.log('🔍 Timeline Debug - startPosition value:', startPosition);
      console.log('🔍 Timeline Debug - startPosition type:', typeof startPosition);
      
      // Add the marker to the track container for proper positioning relative to the progress bar
      trackContainer.appendChild(markerElement);
      
      // Verify the position was applied correctly
      setTimeout(() => {
        const computedStyle = getComputedStyle(markerElement);
        const actualLeft = computedStyle.left;
        console.log('🔍 Timeline Debug - Marker added for milestone:', milestone.title);
        console.log('🔍 Timeline Debug - Computed left position:', actualLeft);
        console.log('🔍 Timeline Debug - Expected position:', startPosition + '%');
        console.log('🔍 Timeline Debug - Position match:', actualLeft === startPosition + '%' ? '✅ CORRECT' : '❌ MISMATCH');
      }, 10);
    });
    
    // Render milestone cards with live division status
    console.log('🔍 Timeline Debug - Cards container found:', cardsContainer ? 'Yes' : 'No');
    
    renderMilestoneCards(cardsContainer, milestones, project);
    
    // Update statistics with live data
    updateTimelineStats(container, milestones);
    
    // FINAL STEP: Update progress bar AFTER all other rendering is complete
    // This ensures it runs last and doesn't get reset by other code
    setTimeout(() => {
      // Find the timeline track container - FIXED: Use document.querySelector to find it directly
      const trackContainer = document.querySelector('.timeline-track-container');
      if (!trackContainer) {
        console.log('🔍 Progress Bar Debug - No track container found in document');
        return;
      }
      
      const track = trackContainer.querySelector('.timeline-track');
      if (!track) {
        console.log('🔍 Progress Bar Debug - No track found within container');
        return;
      }
      
      console.log('🔍 Progress Bar Debug - Creating progress bar with overallProgress:', finalOverallProgress);
      console.log('🔍 Progress Bar Debug - overallProgress type:', typeof finalOverallProgress);
      console.log('🔍 Progress Bar Debug - overallProgress value:', finalOverallProgress);
      
      // Remove ALL existing progress bars first
      const existingBars = track.querySelectorAll('.timeline-progress, .custom-progress-bar');
      existingBars.forEach(bar => bar.remove());
      
      // Create a completely new progress bar with a unique class
      const newProgressBar = document.createElement('div');
      newProgressBar.className = 'custom-progress-bar';
      
      // Set ALL styles inline to avoid any CSS interference
      newProgressBar.style.position = 'absolute';
      newProgressBar.style.height = '100%';
      newProgressBar.style.width = `${finalOverallProgress}%`;
              // Determine color based on progress percentage using standard colors
      let progressColor;
      if (finalOverallProgress <= 20) {
        progressColor = '#dc2626'; // red
      } else if (finalOverallProgress <= 40) {
        progressColor = '#f97316'; // orange
      } else if (finalOverallProgress <= 60) {
        progressColor = '#facc15'; // yellow
      } else if (finalOverallProgress <= 80) {
        progressColor = '#a3e635'; // light green
      } else {
        progressColor = '#22c55e'; // green
      }
      newProgressBar.style.background = progressColor;
      newProgressBar.style.borderRadius = '9999px';
      newProgressBar.style.transition = 'none';
      newProgressBar.style.zIndex = '10';
      newProgressBar.style.left = '0';
      newProgressBar.style.top = '0';
      newProgressBar.style.pointerEvents = 'none';
      
      // Add the new progress bar to the track
      track.appendChild(newProgressBar);
      
      // Force a reflow to ensure the browser applies the styles
      newProgressBar.offsetHeight;
      
      console.log('🔍 Progress Bar Debug - New progress bar created with width:', newProgressBar.style.width);
      console.log('🔍 Progress Bar Debug - Computed width:', getComputedStyle(newProgressBar).width);
    }, 100);

    // SIMPLE PROGRESS BAR - Create a completely new, simple progress bar that will work
    setTimeout(() => {
      // Calculate the simple progress: 13.33% since only timeline is approved
      const simpleProgress = 13.33;
      
      console.log('🔍 Simple Progress Bar - Creating with progress:', simpleProgress + '%');
      
      // Find any existing progress bars and remove them
      const existingBars = document.querySelectorAll('.timeline-progress, .custom-progress-bar, .simple-progress-bar');
      existingBars.forEach(bar => {
        console.log('🔍 Simple Progress Bar - Removing existing bar:', bar);
        bar.remove();
      });
      
      // Find the timeline track container - FIXED: Use the correct container reference
      const trackContainer = document.querySelector('.timeline-track-container');
      if (!trackContainer) {
        console.log('🔍 Simple Progress Bar - No track container found');
        return;
      }
      
      const track = trackContainer.querySelector('.timeline-track');
      if (!track) {
        console.log('🔍 Simple Progress Bar - No track found');
        return;
      }
      
      console.log('🔍 Simple Progress Bar - Found track, creating new progress bar');
      
      // Create a completely new, simple progress bar
      const newProgressBar = document.createElement('div');
      newProgressBar.className = 'simple-progress-bar';
      
      // Determine color based on progress percentage using standard colors
      let progressColor;
      if (simpleProgress <= 20) {
        progressColor = '#dc2626'; // red
      } else if (simpleProgress <= 40) {
        progressColor = '#f97316'; // orange
      } else if (simpleProgress <= 60) {
        progressColor = '#facc15'; // yellow
      } else if (simpleProgress <= 80) {
        progressColor = '#a3e635'; // light green
      } else {
        progressColor = '#22c55e'; // green
      }
      
      // Set all styles inline to avoid any CSS interference
      newProgressBar.style.cssText = `
        position: absolute;
        height: 100%;
        width: ${simpleProgress}%;
        background: ${progressColor};
        border-radius: 9999px;
        transition: none !important;
        z-index: 10;
        left: 0;
        top: 0;
        pointer-events: none;
      `;
      
      // Add the progress bar to the track
      track.appendChild(newProgressBar);
      
      // REMOVED: The duplicate milestone circle that was creating the yellow circle
      // The milestone markers are already created in the main timeline rendering
      
      console.log('🔍 Simple Progress Bar - Created with width:', simpleProgress + '%');
      console.log('🔍 Simple Progress Bar - Success!');
    }, 200);
    
    // Remove the duplicate code that was causing ReferenceError
    // This section was outside the setTimeout scope and referencing undefined variables
    console.log('🔍 Progress Bar Debug - Timeline rendering completed successfully');
  }
  
  // Calculate division progress based on Secretariat approval status
  function getDivisionProgress(status, weight) {
    switch (status) {
      case 'approved':
        return weight; // Full weight if approved
      case 'rejected':
        return 0; // No progress if rejected
      case 'request_revision':
        return weight * 0.5; // Half progress if revision requested
      case 'pending':
      default:
        return 0; // No progress if pending
    }
  }
  
  // Get milestone marker status based on division approvals
  function getMilestoneMarkerStatus(milestone) {
    const timelineApproved = milestone.timelineStatus === 'approved';
    const budgetApproved = milestone.budgetStatus === 'approved';
    const physicalApproved = milestone.physicalStatus === 'approved';
    
    // If all divisions are approved, milestone is complete
    if (timelineApproved && budgetApproved && physicalApproved) {
      return 'completed';
    }
    
    // If at least one division is approved, milestone is in progress
    if (timelineApproved || budgetApproved || physicalApproved) {
      return 'in_progress';
    }
    
    // If any division is rejected, milestone is overdue/blocked
    if (milestone.timelineStatus === 'rejected' || 
        milestone.budgetStatus === 'rejected' || 
        milestone.physicalStatus === 'rejected') {
      return 'overdue';
    }
    
    // Default to pending
    return 'pending';
  }
  
  // Create detailed tooltip for milestone marker
  function createMilestoneTooltip(milestone) {
    const timelineStatus = getDivisionStatusText(milestone.timelineStatus);
    const budgetStatus = getDivisionStatusText(milestone.budgetStatus);
    const physicalStatus = getDivisionStatusText(milestone.physicalStatus);
    
    // Get approval date if available
    const approvalDate = milestone.validatedAt || milestone.validationDate || 'Not yet approved';
    const approvalDateText = approvalDate !== 'Not yet approved' ? new Date(approvalDate).toLocaleDateString() : approvalDate;
    
    return `${milestone.title}

Timeline: ${timelineStatus} (${(parseFloat(milestone.timelineWeight || 0)).toFixed(2)}%)
Budget: ${budgetStatus} (${(parseFloat(milestone.budgetWeight || 0)).toFixed(2)}%)
Physical: ${physicalStatus} (${(parseFloat(milestone.physicalWeight || 0)).toFixed(2)}%)

Approval Date: ${approvalDateText}`;
  }
  
  // Get readable status text
  function getDivisionStatusText(status) {
    switch (status) {
      case 'approved': return '✅ Approved';
      case 'rejected': return '❌ Rejected';
      case 'request_revision': return '🔄 Revision Requested';
      case 'pending': return '⏳ Pending';
      default: return '❓ Unknown';
    }
  }
  
  // Render milestone cards
  function renderMilestoneCards(container, milestones, project) {
    console.log('🔍 Render Milestone Cards Debug - Starting render for', milestones.length, 'milestones');
    console.log('🔍 Render Milestone Cards Debug - Container:', container);
    console.log('🔍 Render Milestone Cards Debug - Milestones:', milestones.map(m => ({ id: m.id, title: m.title })));
    
    container.innerHTML = '';
    
    milestones.forEach((milestone, index) => {
      console.log('🔍 Render Milestone Cards Debug - Rendering milestone', index + 1, ':', milestone.title);
      
      const card = document.createElement('div');
      
      // Use backend-calculated progress from the project data (already rounded to 2 decimal places)
      const timelineProgress = parseFloat(project.progress?.timelineProgress || 0);
      const budgetProgress = parseFloat(project.progress?.budgetProgress || 0);
      const physicalProgress = parseFloat(project.progress?.physicalProgress || 0);
      
      // Calculate milestone-specific progress based on division status (for individual milestone cards)
      const milestoneTimelineProgress = milestone.timelineStatus === 'approved' ? (milestone.timelineWeight || 0) : 0;
      const milestoneBudgetProgress = milestone.budgetStatus === 'approved' ? (milestone.budgetWeight || 0) : 0;
      const milestonePhysicalProgress = milestone.physicalStatus === 'approved' ? (milestone.physicalWeight || 0) : 0;
      
      const totalMilestoneProgress = milestoneTimelineProgress + milestoneBudgetProgress + milestonePhysicalProgress;
      const totalPossibleProgress = (milestone.timelineWeight || 0) + (milestone.budgetWeight || 0) + (milestone.physicalWeight || 0);
      const milestoneProgressPercentage = totalPossibleProgress > 0 ? (totalMilestoneProgress / totalPossibleProgress) * 100 : 0;
      
      // Calculate total milestone weight
      const totalMilestoneWeight = Number(milestone.timelineWeight || 0) + Number(milestone.budgetWeight || 0) + Number(milestone.physicalWeight || 0);
      
      // Determine overall milestone status
      const milestoneStatus = getMilestoneMarkerStatus(milestone);
      const statusIcon = getStatusIcon(milestoneStatus);
      const statusColor = getStatusColor(milestoneStatus);
      
      card.className = `milestone-card bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-300 cursor-pointer transform hover:-translate-y-1`;
      card.setAttribute('data-milestone-id', milestone.id);
      
      card.innerHTML = `
        <div class="p-4">
          <div class="flex items-start justify-between mb-3">
            <div class="flex items-center gap-2">
              <div class="w-8 h-8 rounded-full ${statusColor.bg} flex items-center justify-center">
                <i class="${statusIcon} ${statusColor.text} text-sm"></i>
              </div>
              <div>
                <h6 class="font-semibold text-gray-800 text-sm">${milestone.title}</h6>
                <p class="text-xs text-gray-500">Milestone ${index + 1} • Total Weight: ${totalMilestoneWeight.toFixed(1)}%</p>
              </div>
            </div>
            <div class="flex items-center gap-1">
              <span class="text-xs font-medium ${statusColor.text}">${milestoneStatus.replace('_', ' ')}</span>
              <i class="fas fa-chevron-right text-xs text-gray-400"></i>
            </div>
          </div>
          
          <div class="space-y-2 mb-3">
            <div class="flex items-center justify-between text-xs">
              <span class="text-gray-600">Overall Progress</span>
              <span class="font-medium text-gray-800">${(parseFloat(milestoneProgressPercentage) || 0).toFixed(2)}%</span>
            </div>
            <div class="w-full bg-gray-200 rounded-full h-2">
              <div class="h-2 rounded-full transition-all duration-1000" style="width: ${(parseFloat(milestoneProgressPercentage) || 0)}%; background-color: ${(parseFloat(milestoneProgressPercentage) || 0) <= 20 ? '#dc2626' : (parseFloat(milestoneProgressPercentage) || 0) <= 40 ? '#f97316' : (parseFloat(milestoneProgressPercentage) || 0) <= 60 ? '#facc15' : (parseFloat(milestoneProgressPercentage) || 0) <= 80 ? '#a3e635' : '#22c55e'}"></div>
            </div>
          </div>
          
          <!-- Division Status Grid -->
          <div class="grid grid-cols-1 gap-2 text-xs mb-3">
            <div class="bg-white rounded-lg p-2 border border-gray-200">
              <div class="flex items-center justify-between">
                <div class="font-medium text-gray-700">Timeline Division</div>
                <div class="flex items-center gap-1">
                  <span class="${getDivisionStatusColor(milestone.timelineStatus)}" title="${getDivisionStatusText(milestone.timelineStatus)}">${getDivisionStatusText(milestone.timelineStatus)}</span>
                </div>
              </div>
              <div class="text-gray-600 mt-1">Weight: ${(parseFloat(milestone.timelineWeight || 0)).toFixed(2)}% | Progress: ${(parseFloat(milestoneTimelineProgress) || 0).toFixed(2)}%</div>
            </div>
            
            <div class="bg-white rounded-lg p-2 border border-gray-200">
              <div class="flex items-center justify-between">
                <div class="font-medium text-gray-700">Budget Division</div>
                <div class="flex items-center gap-1">
                  <span class="${getDivisionStatusColor(milestone.budgetStatus)}" title="${getDivisionStatusText(milestone.budgetStatus)}">${getDivisionStatusText(milestone.budgetStatus)}</span>
                </div>
              </div>
              <div class="text-gray-600 mt-1">Weight: ${(parseFloat(milestone.budgetWeight || 0)).toFixed(2)}% | Progress: ${(parseFloat(milestoneBudgetProgress) || 0).toFixed(2)}%</div>
            </div>
            
            <div class="bg-white rounded-lg p-2 border border-gray-200">
              <div class="flex items-center justify-between">
                <div class="font-medium text-gray-700">Physical Division</div>
                <div class="flex items-center gap-1">
                  <span class="${getDivisionStatusColor(milestone.physicalStatus)}" title="${getDivisionStatusText(milestone.physicalStatus)}">${getDivisionStatusText(milestone.physicalStatus)}</span>
                </div>
              </div>
              <div class="text-gray-600 mt-1">Weight: ${(parseFloat(milestone.physicalWeight || 0)).toFixed(2)}% | Progress: ${(parseFloat(milestonePhysicalProgress) || 0).toFixed(2)}%</div>
            </div>
          </div>
          
          <div class="mt-3 pt-3 border-t border-gray-100">
            <div class="flex items-center justify-between text-xs text-gray-500">
              <span>
                <i class="fas fa-calendar mr-1"></i>
                ${milestone.timelineStartDate ? new Date(milestone.timelineStartDate).toLocaleDateString() : 'TBD'}
              </span>
              <span>
                <i class="fas fa-flag mr-1"></i>
                ${milestone.timelineEndDate ? new Date(milestone.timelineEndDate).toLocaleDateString() : 'TBD'}
              </span>
            </div>
          </div>
        </div>
      `;
      
      // Add click event for card
      card.addEventListener('click', () => {
        openMilestoneDetails(milestone, project);
      });
      
      container.appendChild(card);
    });
  }
  
  // Update timeline statistics
  function updateTimelineStats(container, milestones) {
    const totalCount = milestones.length;
    
    console.log('🔍 Stats Debug - Total milestones:', totalCount);
    console.log('🔍 Stats Debug - Milestones:', milestones.map(m => ({ title: m.title, status: getMilestoneMarkerStatus(m) })));
    
    // Calculate statistics based on division approvals
    let completedCount = 0;
    let inProgressCount = 0;
    let overdueCount = 0;
    
    milestones.forEach(milestone => {
      const milestoneStatus = getMilestoneMarkerStatus(milestone);
      
      switch (milestoneStatus) {
        case 'completed':
          completedCount++;
          break;
        case 'in_progress':
          inProgressCount++;
          break;
        case 'overdue':
          overdueCount++;
          break;
        default:
          // pending milestones don't count towards any category
          break;
      }
    });
    
    console.log('🔍 Stats Debug - Counts:', { totalCount, completedCount, inProgressCount, overdueCount });
    
    const milestoneCountEl = container.querySelector('.milestone-count');
    const completedCountEl = container.querySelector('.completed-count');
    const inProgressCountEl = container.querySelector('.in-progress-count');
    const overdueCountEl = container.querySelector('.overdue-count');
    
    if (milestoneCountEl) {
      milestoneCountEl.textContent = totalCount;
      console.log('🔍 Stats Debug - Set total count to:', totalCount);
    }
    if (completedCountEl) completedCountEl.textContent = completedCount;
    if (inProgressCountEl) inProgressCountEl.textContent = inProgressCount;
    if (overdueCountEl) overdueCountEl.textContent = overdueCount;
    
    // Add visual feedback for statistics
    if (completedCountEl && completedCount > 0) {
      completedCountEl.classList.add('text-green-600');
      completedCountEl.classList.remove('text-gray-800');
    }
    
    if (inProgressCountEl && inProgressCount > 0) {
      inProgressCountEl.classList.add('text-yellow-600');
      inProgressCountEl.classList.remove('text-gray-800');
    }
    
    if (overdueCountEl && overdueCount > 0) {
      overdueCountEl.classList.add('text-red-600');
      overdueCountEl.classList.remove('text-gray-800');
    }
  }
  
  // Helper functions
  function getMilestoneStatusClass(status) {
    switch (status) {
      case 'completed': return 'bg-green-500';
      case 'in_progress': case 'ongoing': return 'bg-yellow-500';
      case 'overdue': return 'bg-red-500';
      default: return 'bg-gray-400';
    }
  }
  
  function getStatusIcon(status) {
    switch (status) {
      case 'completed': return 'fas fa-check';
      case 'in_progress': case 'ongoing': return 'fas fa-clock';
      case 'overdue': return 'fas fa-exclamation-triangle';
      default: return 'fas fa-circle';
    }
  }
  
  function getStatusColor(status) {
    switch (status) {
      case 'completed': return { bg: 'bg-green-100', text: 'text-green-600' };
      case 'in_progress': case 'ongoing': return { bg: 'bg-yellow-100', text: 'text-yellow-600' };
      case 'overdue': return { bg: 'bg-red-100', text: 'text-red-600' };
      default: return { bg: 'bg-gray-100', text: 'text-gray-600' };
    }
  }
  
  function highlightMilestoneCard(milestoneId) {
    // Remove previous highlights
    document.querySelectorAll('.milestone-card').forEach(card => {
      card.classList.remove('ring-2', 'ring-blue-500', 'ring-offset-2');
    });
    
    // Highlight selected card
    const card = document.querySelector(`[data-milestone-id="${milestoneId}"]`);
    if (card) {
      card.classList.add('ring-2', 'ring-blue-500', 'ring-offset-2');
      card.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }
  }
  
  function openMilestoneDetails(milestone, project) {
    // Create modal for milestone details
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-xl p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-xl font-bold text-gray-800">${milestone.title}</h3>
          <button onclick="this.closest('.fixed').remove()" class="text-gray-400 hover:text-gray-600">
            <i class="fas fa-times text-xl"></i>
          </button>
        </div>
        
        <div class="space-y-4">
          <div class="grid grid-cols-2 gap-4">
            <div class="bg-blue-50 rounded-lg p-4">
              <h4 class="font-semibold text-blue-800 mb-2">Timeline Division</h4>
              <p class="text-sm text-blue-700">${milestone.timelineDescription || 'No description'}</p>
              <div class="mt-2 text-xs text-blue-600">Weight: ${(parseFloat(milestone.timelineWeight || 0)).toFixed(2)}%</div>
            </div>
            <div class="bg-green-50 rounded-lg p-4">
              <h4 class="font-semibold text-green-800 mb-2">Budget Division</h4>
              <p class="text-sm text-green-700">${milestone.budgetBreakdown || 'No breakdown'}</p>
              <div class="mt-2 text-xs text-green-600">Weight: ${(parseFloat(milestone.budgetWeight || 0)).toFixed(2)}% | Planned: ₱${parseFloat(milestone.budgetPlanned || 0).toLocaleString()}</div>
            </div>
          </div>
          
          <div class="bg-purple-50 rounded-lg p-4">
            <h4 class="font-semibold text-purple-800 mb-2">Physical Division</h4>
            <p class="text-sm text-purple-700">${milestone.physicalDescription || 'No description'}</p>
            <div class="mt-2 text-xs text-purple-600">Weight: ${(parseFloat(milestone.physicalWeight || 0)).toFixed(2)}%</div>
          </div>
          
          <div class="bg-gray-50 rounded-lg p-4">
            <h4 class="font-semibold text-gray-800 mb-2">Progress Details</h4>
            <div class="flex items-center gap-4">
              <div class="text-center">
                <div class="text-2xl font-bold text-blue-600">${calculateMilestoneProgress(milestone).toFixed(2)}%</div>
                <div class="text-xs text-gray-600">Overall Progress</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-green-600">${milestone.status || 'pending'}</div>
                <div class="text-xs text-gray-600">Status</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Close modal on background click
    modal.addEventListener('click', (e) => {
      if (e.target === modal) modal.remove();
    });
  }
  
  // Timeline view toggle function
  function toggleTimelineView(projectId) {
    const container = document.getElementById(`timeline-${projectId}`);
    const cardsContainer = container.querySelector('.milestone-cards-container');
    const toggleBtn = container.querySelector('.timeline-view-toggle');
    
    if (cardsContainer.classList.contains('hidden')) {
      cardsContainer.classList.remove('hidden');
      toggleBtn.innerHTML = '<i class="fas fa-th-large mr-1"></i>Card View';
    } else {
      cardsContainer.classList.add('hidden');
      toggleBtn.innerHTML = '<i class="fas fa-list mr-1"></i>List View';
    }
  }
  
  // Refresh timeline function
  function refreshTimeline(projectId) {
    const container = document.getElementById(`timeline-${projectId}`);
    const refreshBtn = container.querySelector('button[onclick*="refreshTimeline"]');
    const originalContent = refreshBtn.innerHTML;
    
    refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';
    refreshBtn.disabled = true;
    
    setTimeout(() => {
      loadProjectTimeline(projectId);
      refreshBtn.innerHTML = originalContent;
      refreshBtn.disabled = false;
    }, 1000);
  }

  // Load timelines for all projects after rendering
  function loadAllProjectTimelines() {
    submissions.forEach(project => {
      setTimeout(() => {
        loadProjectTimeline(project.id);
      }, 100);
    });
  }

  // Make functions globally available
  window.loadSubmissions = loadSubmissions;
  window.refreshSubmissions = refreshSubmissions;
  window.exportData = exportData;
  window.markAllReviewed = markAllReviewed;
  window.bulkAction = bulkAction;
  window.viewSubmission = viewSubmission;
  window.closeSubmissionModal = closeSubmissionModal;
  window.approveSubmission = approveSubmission;
  window.rejectSubmission = rejectSubmission;
  window.toggleDepartment = toggleDepartment;
  window.toggleAllDepartments = toggleAllDepartments;
  window.expandAllDepartments = expandAllDepartments;
  window.viewProjectTimeline = viewProjectTimeline;
  window.viewProjectHistory = viewProjectHistory;
  window.exportProjectReport = exportProjectReport;
  // Calculate milestone progress based on division approvals
  function calculateMilestoneProgress(milestone) {
    const timelineProgress = milestone.timelineStatus === 'approved' ? (parseFloat(milestone.timelineWeight || 0)) : 0;
    const budgetProgress = milestone.budgetStatus === 'approved' ? (parseFloat(milestone.budgetWeight || 0)) : 0;
    const physicalProgress = milestone.physicalStatus === 'approved' ? (parseFloat(milestone.physicalWeight || 0)) : 0;
    
    const totalProgress = timelineProgress + budgetProgress + physicalProgress;
    const totalWeight = parseFloat(milestone.timelineWeight || 0) + parseFloat(milestone.budgetWeight || 0) + parseFloat(milestone.physicalWeight || 0);
    
    return totalWeight > 0 ? (totalProgress / totalWeight) * 100 : 0;
  }
  
  window.retryLoadProject = retryLoadProject;
  window.loadProjectTimeline = loadProjectTimeline;
  window.loadAllProjectTimelines = loadAllProjectTimelines;
  window.toggleTimelineView = toggleTimelineView;
  window.refreshTimeline = refreshTimeline;
  window.highlightMilestoneCard = highlightMilestoneCard;
  window.openMilestoneDetails = openMilestoneDetails;

  // Enhanced Tab switching functions with animations
  function switchToTableView() {
    const tableTab = document.getElementById('tableTab');
    const cardTab = document.getElementById('cardTab');
    const tableView = document.getElementById('tableView');
    const cardView = document.getElementById('cardView');

    // Add sink and pop animation to the clicked tab
    tableTab.classList.add('switching');
    setTimeout(() => {
      tableTab.classList.remove('switching');
    }, 300);

    // Update tab styles with active state - modern design
    tableTab.className = 'tab-button px-6 py-3 text-sm font-medium transition-all duration-300 flex items-center gap-2 active';
    cardTab.className = 'tab-button px-6 py-3 text-sm font-medium text-gray-600 hover:text-gray-900 transition-all duration-300 flex items-center gap-2';

    // Animate content switching
    cardView.classList.add('fade-out');
    
    setTimeout(() => {
      cardView.classList.add('hidden');
      cardView.classList.remove('block', 'fade-out');
      tableView.classList.remove('hidden');
      tableView.classList.add('block', 'fade-in');
      
      setTimeout(() => {
        tableView.classList.remove('fade-in');
      }, 400);
    }, 300);
  }

  function switchToCardView() {
    const tableTab = document.getElementById('tableTab');
    const cardTab = document.getElementById('cardTab');
    const tableView = document.getElementById('tableView');
    const cardView = document.getElementById('cardView');

    // Add sink and pop animation to the clicked tab
    cardTab.classList.add('switching');
    setTimeout(() => {
      cardTab.classList.remove('switching');
    }, 300);

    // Update tab styles with active state - modern design
    tableTab.className = 'tab-button px-6 py-3 text-sm font-medium text-gray-600 hover:text-gray-900 transition-all duration-300 flex items-center gap-2';
    cardTab.className = 'tab-button px-6 py-3 text-sm font-medium transition-all duration-300 flex items-center gap-2 active';

    // Animate content switching
    tableView.classList.add('fade-out');
    
    setTimeout(() => {
      tableView.classList.add('hidden');
      tableView.classList.remove('block', 'fade-out');
      cardView.classList.remove('hidden');
      cardView.classList.add('block', 'fade-in');
      
      // Trigger staggered card animations
      const cards = document.querySelectorAll('.submission-card');
      cards.forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
        card.style.animation = 'cardSlideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards';
      });
      
      setTimeout(() => {
        cardView.classList.remove('fade-in');
      }, 400);
    }, 300);
  }

  // Add event listeners for tab switching
  document.addEventListener('DOMContentLoaded', function() {
    const tableTab = document.getElementById('tableTab');
    const cardTab = document.getElementById('cardTab');
    
    if (tableTab) {
      tableTab.addEventListener('click', function(e) {
        createRipple(e);
        switchToTableView();
      });
    }
    
    if (cardTab) {
      cardTab.addEventListener('click', function(e) {
        createRipple(e);
        switchToCardView();
      });
    }
  });

  // Subtle ripple effect function
  function createRipple(event) {
    const button = event.currentTarget;
    const ripple = document.createElement('span');
    const rect = button.getBoundingClientRect();
    const size = Math.max(rect.width, rect.height) * 0.8; // Smaller size
    const x = event.clientX - rect.left - size / 2;
    const y = event.clientY - rect.top - size / 2;
    
    ripple.style.width = ripple.style.height = size + 'px';
    ripple.style.left = x + 'px';
    ripple.style.top = y + 'px';
    ripple.classList.add('ripple');
    
    button.appendChild(ripple);
    
    setTimeout(() => {
      ripple.remove();
    }, 600); // Slower duration
  }

  // Make tab switching functions globally available
  window.switchToTableView = switchToTableView;
  window.switchToCardView = switchToCardView;

  // Get division border color based on status
  function getDivisionBorderColor(status) {
    switch (status) {
      case 'approved': return 'border-green-500';
      case 'rejected': return 'border-red-500';
      case 'request_revision': return 'border-yellow-500';
      case 'pending': return 'border-gray-400';
      default: return 'border-gray-400';
    }
  }
  
  // Get division status color
  function getDivisionStatusColor(status) {
    switch (status) {
      case 'approved': return 'text-green-600 font-semibold';
      case 'rejected': return 'text-red-600 font-semibold';
      case 'request_revision': return 'text-yellow-600 font-semibold';
      case 'pending': return 'text-gray-600';
      default: return 'text-gray-600';
    }
  }
</script> 