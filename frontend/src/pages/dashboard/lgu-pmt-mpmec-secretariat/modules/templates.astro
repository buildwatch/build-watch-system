export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import SecretariatLayout from '../../../../components/SecretariatLayout.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let documentsData = {
  departments: [],
  projects: [],
  milestones: [],
  evidenceFiles: [],
  stats: {
    totalFiles: 0,
    totalDocuments: 0,
    totalPhotos: 0,
    totalVideos: 0,
    totalAudio: 0,
    storageUsed: 0,
    pendingApprovals: 0,
    lastUpdated: new Date().toISOString()
  }
};
let loading = true;
let error = '';

// Department logos mapping
const departmentLogos = {
  'Municipal Engineer Office': 'meo-logo',
  'Municipal Engineer\'s Office': 'meo-logo', // With apostrophe
  'Municipal Environment and Natural Resources Office': 'menro-logo', 
  'Municipal Disaster and Risk Reduction Management Office': 'mdrrmo-logo',
  'Municipal Agriculturist\'s Office': 'mao-logo',
  'Municipal Social Welfare and Development Office': 'mswdo-logo'
};

// Try to fetch comprehensive documents data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch all projects to organize by departments
    const projectsRes = await fetch(`${API_URL}/projects`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        // Organize projects by implementing office (department)
        const projectsByDept = {};
        data.projects.forEach(project => {
          const deptName = project.implementingOfficeName || 'General';
          if (!projectsByDept[deptName]) {
            projectsByDept[deptName] = {
              id: deptName.toLowerCase().replace(/\s+/g, '-'),
              name: deptName,
              projects: [],
              projectCount: 0,
              fileCount: 0
            };
          }
          projectsByDept[deptName].projects.push(project);
          projectsByDept[deptName].projectCount++;
        });
        documentsData.departments = Object.values(projectsByDept);
      }
    }

    // Fetch uploads/evidence files
    const uploadsRes = await fetch(`${API_URL}/uploads`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (uploadsRes.ok) {
      const data = await uploadsRes.json();
      if (data.success) {
        documentsData.evidenceFiles = data.uploads || [];
        // Update file counts for departments
        documentsData.departments.forEach(dept => {
          dept.fileCount = documentsData.evidenceFiles.filter(file => 
            file.projectName && dept.projects.some(p => p.name === file.projectName)
          ).length;
        });
      }
    }
  }
} catch (err) {
  console.error('Error fetching documents data:', err);
  error = 'Failed to fetch documents data.';
}

loading = false;
---

<Layout title="Evidence Files & Documents | MPMEC Secretariat">
  <SecretariatLayout>
    <!-- Page Header - MPMEC Secretariat Theme -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-black">Evidence Files & Documents</h1>
              <p class="text-sm text-gray-600">Centralized evidence management for project milestone submissions</p>
            </div>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Total Evidence Files</p>
            <p class="text-xs text-black font-semibold" id="headerFileCount">{documentsData.stats.totalFiles} Files Available</p>
          </div>
          <div class="w-4 h-4 bg-sky-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <main class="bg-gradient-to-br from-gray-50 to-white min-h-screen px-8 py-8">
      <!-- Action Buttons -->
      <div class="flex items-center justify-end gap-3 mb-8">
        <button onclick="toggleBulkActions()" class="btn-secondary btn-sm inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
          </svg>
          Bulk Actions
        </button>
        <button onclick="showUploadModal()" class="btn-primary btn-sm inline-flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
            </svg>
          Upload Files
          </button>
        <button onclick="exportAllData()" class="btn-success btn-sm inline-flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          Export Data
          </button>
      </div>

      <!-- Loading State -->
      {loading && (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
          <span class="ml-3 text-gray-600">Loading documents data...</span>
        </div>
      )}

      <!-- Error State -->
      {error && (
        <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-8">
          <div class="flex items-center">
            <svg class="w-5 h-5 text-red-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            <span class="text-red-800">{error}</span>
          </div>
        </div>
      )}

      <!-- Enhanced Summary Cards - MPMEC Secretariat Theme -->
      <div class="space-y-6 mb-8">
        <!-- Top Row: Primary Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Total Files - Sky Blue -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByType('all')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Total Files</p>
                <p class="text-2xl font-bold text-black" id="totalFiles">0</p>
                <p class="text-xs text-sky-600 mt-1">All evidence types</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Total Departments - Sky Blue -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="showDepartmentView()">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Total Departments</p>
                <p class="text-2xl font-bold text-black" id="totalDepartments">0</p>
                <p class="text-xs text-sky-600 mt-1">Active departments</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Total Projects - Sky Blue -->
          <div class="profile-card p-6 cursor-pointer summary-card">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Total Projects</p>
                <p class="text-2xl font-bold text-black" id="totalProjects">0</p>
                <p class="text-xs text-sky-600 mt-1">All project types</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Total Milestones - Sky Blue -->
          <div class="profile-card p-6 cursor-pointer summary-card">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Total Milestones</p>
                <p class="text-2xl font-bold text-black" id="totalMilestones">0</p>
                <p class="text-xs text-sky-600 mt-1">All milestone types</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"></path>
                </svg>
              </div>
            </div>
          </div>

        </div>

        <!-- Bottom Row: Status Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-6">
          <!-- Storage Used - Gold -->
          <div class="profile-card p-6 cursor-pointer summary-card">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Storage Used</p>
                <p class="text-2xl font-bold text-black" id="storageUsed">0 MB</p>
                <p class="text-xs text-yellow-600 mt-1">Total space</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-yellow-500 to-yellow-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Last Updated - Blue -->
          <div class="profile-card p-6 cursor-pointer summary-card">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Last Updated</p>
                <p class="text-2xl font-bold text-black" id="lastUpdateTime">Today</p>
                <p class="text-xs text-blue-600 mt-1">Recent activity</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Delayed Projects - Red -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByStatus('delayed')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Delayed Projects</p>
                <p class="text-2xl font-bold text-black" id="delayedProjects">0</p>
                <p class="text-xs text-red-600 mt-1">Behind schedule</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-red-500 to-red-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Ongoing Projects - Blue -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByStatus('ongoing')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Ongoing Projects</p>
                <p class="text-2xl font-bold text-black" id="ongoingProjects">0</p>
                <p class="text-xs text-blue-600 mt-1">In progress</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Completed Projects - Green -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByStatus('completed')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Completed Projects</p>
                <p class="text-2xl font-bold text-black" id="completedProjects">0</p>
                <p class="text-xs text-green-600 mt-1">Finished</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-green-500 to-green-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Main Project Selection & Content Section -->
      <div class="profile-card p-8 mb-8">
        <!-- Enhanced Filters Section -->
        <div class="mb-8">
          <div class="flex items-center gap-3 mb-6">
            <div class="icon-container-small bg-gradient-to-br from-sky-500 to-sky-600">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-bold text-black">Search & Filter Documents</h3>
          </div>
          
          <div class="bg-gradient-to-br from-gray-50 to-gray-100/50 rounded-2xl p-6 border border-gray-200">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Search Files</label>
                <div class="relative">
                  <input 
                    type="text" 
                    id="globalSearch" 
                    placeholder="Search by filename, tags, uploader..." 
                    class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                    onkeyup="applyFilters()"
                  >
                  <svg class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                </div>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Department</label>
                <select 
                  id="departmentFilter" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                  onchange="applyFilters()"
                >
              <option value="">All Departments</option>
              <option value="Engineering Office">Engineering Office</option>
              <option value="Environment Office">Environment Office</option>
              <option value="Health Department">Health Department</option>
                  <option value="Finance Department">Finance Department</option>
                  <option value="Planning Office">Planning Office</option>
            </select>
          </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">File Type</label>
                <select 
                  id="fileTypeFilter" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                  onchange="applyFilters()"
                >
                  <option value="">All Types</option>
                  <option value="documents">Documents</option>
                  <option value="photos">Photos</option>
                  <option value="videos">Videos</option>
                </select>
              </div>
              
              <div class="space-y-2">
                <label class="block text-sm font-semibold text-gray-700">Status</label>
                <select 
                  id="statusFilter" 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-sky-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                  onchange="applyFilters()"
                >
              <option value="">All Status</option>
                  <option value="approved">Approved</option>
              <option value="pending">Pending</option>
                  <option value="private">Private</option>
                  <option value="public">Public</option>
            </select>
          </div>
            </div>
            
            <div class="flex items-center justify-between mt-6 pt-4 border-t border-gray-200">
              <div class="flex items-center gap-4">
                <button 
                  onclick="applyFilters()" 
                  class="btn-primary btn-sm inline-flex items-center gap-2"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                  </svg>
                  Apply Filters
                </button>
                <button 
                  onclick="clearAllFilters()" 
                  class="btn-secondary btn-sm inline-flex items-center gap-2"
                >
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Clear Filters
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Breadcrumb Navigation -->
      <div class="profile-card p-4 mb-6">
        <div class="flex items-center gap-3" id="breadcrumbNav">
          <div class="icon-container-small bg-gradient-to-br from-sky-500 to-sky-600">
            <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v2H8V5z"></path>
            </svg>
                    </div>
          <button onclick="navigateTo('home')" class="text-sky-600 hover:text-sky-800 text-sm font-semibold transition-colors duration-200 hover:bg-sky-50 px-3 py-1 rounded-lg">All Documents</button>
          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
          </svg>
          <span class="text-gray-700 text-sm font-medium bg-gray-100 px-3 py-1 rounded-lg" id="currentPath">Root</span>
                    </div>
                  </div>

      <!-- Enhanced Hierarchical Evidence Organization -->
      <div class="profile-card overflow-hidden" id="evidenceExplorer">
        <!-- Modern Toolbar -->
        <div class="px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-gray-50 to-gray-100">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-4">
              <div class="flex items-center gap-3">
                <div class="icon-container-small bg-gradient-to-br from-sky-500 to-sky-600">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                </div>
                <h2 class="text-xl font-bold text-gray-800">Evidence Explorer</h2>
              </div>
              <div class="flex items-center gap-2 bg-white rounded-lg p-1 shadow-sm border border-gray-200">
                <button onclick="toggleView('departments')" id="departmentsViewBtn" class="p-2 rounded-lg hover:bg-gray-100 transition-all duration-200 hover:scale-105 bg-sky-100 text-sky-600">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                </button>
                <button onclick="toggleView('grid')" id="gridViewBtn" class="p-2 rounded-lg hover:bg-gray-100 transition-all duration-200 hover:scale-105">
                  <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                  </svg>
                </button>
                <button onclick="toggleView('list')" id="listViewBtn" class="p-2 rounded-lg hover:bg-gray-100 transition-all duration-200 hover:scale-105">
                  <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                  </svg>
                </button>
              </div>
            </div>
            <div class="flex items-center gap-3">
              <button onclick="refreshFiles()" class="btn-secondary btn-sm inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Refresh
              </button>
              <button onclick="showVersionHistory()" class="btn-secondary btn-sm inline-flex items-center gap-2">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                Version History
              </button>
              <button onclick="downloadSelectedAsZip()" class="btn-success btn-sm inline-flex items-center gap-2" id="downloadZipBtn" style="display: none;">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Download ZIP
              </button>
            </div>
          </div>
        </div>

        <!-- Enhanced Evidence Content Area -->
        <div class="p-6 bg-gradient-to-br from-gray-50 to-white min-h-[400px]" id="evidenceContent">
          <!-- This will be populated dynamically -->
          <div class="text-center py-20" id="defaultView">
            <!-- Enhanced Empty State Design -->
            <div class="max-w-md mx-auto">
              <!-- Animated Icon Container -->
              <div class="relative mb-8">
                <div class="icon-container bg-gradient-to-br from-sky-400 to-sky-600 mx-auto mb-4 transform hover:scale-110 transition-all duration-300 empty-state-icon">
                  <svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                </div>
                <!-- Floating Elements for Visual Interest -->
                <div class="absolute -top-2 -right-2 w-4 h-4 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-full animate-bounce" style="animation-delay: 0.5s;"></div>
                <div class="absolute -bottom-2 -left-2 w-3 h-3 bg-gradient-to-br from-purple-400 to-purple-600 rounded-full animate-bounce" style="animation-delay: 1s;"></div>
              </div>
              
              <!-- Enhanced Typography -->
              <h3 class="text-2xl font-bold text-gray-900 mb-4">Select a Department to Begin</h3>
              <p class="text-gray-600 mb-8 leading-relaxed">Browse through departments to access project evidence files. Navigate through Department → Project → Milestone → Evidence Files to find the documents you need.</p>
              
              <!-- Enhanced Action Button -->
              <button onclick="showDepartmentView()" class="btn-primary inline-flex items-center gap-3 px-8 py-4 text-base font-semibold rounded-2xl transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl">
                <div class="icon-container-small bg-white bg-opacity-20">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                </div>
                Browse Departments
              </button>
              
              <!-- Additional Help Text -->
              <p class="text-xs text-gray-500 mt-6">Evidence includes: Documents, Photos, Videos, Audio files from milestone submissions</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Drag and Drop Upload Area -->
      <div id="dropZone" class="hidden fixed inset-0 bg-sky-600 bg-opacity-95 z-50 flex items-center justify-center backdrop-blur-sm">
        <div class="text-center text-white animate-pulse">
          <div class="icon-container bg-gradient-to-br from-white to-gray-100 mx-auto mb-6">
            <svg class="w-12 h-12 text-sky-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
            </svg>
          </div>
          <h3 class="text-3xl font-bold mb-4">Drop files here to upload</h3>
          <p class="text-sky-200 text-lg">Support for documents, photos, and videos</p>
          <div class="flex items-center justify-center gap-6 mt-6 text-sky-200">
            <div class="flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              <span>Documents</span>
            </div>
            <div class="flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
              <span>Photos</span>
            </div>
            <div class="flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
              </svg>
              <span>Videos</span>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Upload Modal -->
      <div id="uploadModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
          <div class="bg-white rounded-2xl shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
            <div class="px-6 py-4 border-b border-gray-200">
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-800">Upload Files</h3>
                <button onclick="closeUploadModal()" class="close-button">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
            </div>
            <div class="p-6">
              <!-- Upload Area -->
              <div class="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center mb-6" id="uploadArea">
                <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                </svg>
                <h4 class="text-lg font-medium text-gray-900 mb-2">Drag and drop files here</h4>
                <p class="text-gray-500 mb-4">or click to browse files</p>
                <input type="file" id="fileInput" multiple class="hidden" accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.gif,.mp4,.avi,.mov">
                <button onclick="document.getElementById('fileInput').click()" class="enhanced-button primary">
                  Choose Files
                </button>
              </div>

              <!-- File List -->
              <div id="fileList" class="space-y-3 mb-6"></div>

              <!-- Upload Options -->
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                  <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Department</label>
                  <select id="uploadDepartment" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">Select Department</option>
                    <option value="Engineering Office">Engineering Office</option>
                    <option value="Environment Office">Environment Office</option>
                    <option value="Health Department">Health Department</option>
                    <option value="Finance Department">Finance Department</option>
                    <option value="Planning Office">Planning Office</option>
                  </select>
                  </div>
                  <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project</label>
                  <select id="uploadProject" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">Select Project</option>
                  </select>
                  </div>
                    <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Milestone</label>
                  <select id="uploadMilestone" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">Select Milestone</option>
                      </select>
                    </div>
                    <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Access Level</label>
                  <select id="uploadAccessLevel" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="private">🔒 Private (Secretariat Only)</option>
                    <option value="restricted">👥 Restricted (Specific Roles)</option>
                    <option value="public">🌍 Public (Transparency Reports)</option>
                      </select>
                    </div>
                  </div>

              <!-- Tags -->
              <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">Tags</label>
                <input type="text" id="uploadTags" placeholder="Enter tags separated by commas (e.g. budget, engineering, compliance)" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                <p class="text-xs text-gray-500 mt-1">Tags help organize and search files later</p>
              </div>

              <!-- Upload Progress -->
              <div id="uploadProgress" class="hidden mb-6">
                <div class="flex items-center justify-between mb-2">
                  <span class="text-sm font-medium text-gray-700">Uploading...</span>
                  <span class="text-sm text-gray-500" id="uploadPercent">0%</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div class="bg-blue-600 h-2 rounded-full transition-all duration-300" id="uploadBar" style="width: 0%"></div>
                </div>
              </div>

              <!-- Actions -->
              <div class="flex justify-end gap-3">
                <button type="button" onclick="closeUploadModal()" class="enhanced-button secondary">Cancel</button>
                <button type="button" onclick="startUpload()" id="uploadBtn" class="enhanced-button primary" disabled>
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                  </svg>
                  Upload Files
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced File Preview Modal -->
      <div id="previewModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
          <div class="bg-white rounded-2xl shadow-xl max-w-6xl w-full max-h-[90vh] overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="text-lg font-semibold text-gray-800" id="previewTitle">File Preview</h3>
                  <p class="text-sm text-gray-500" id="previewInfo">Loading...</p>
                  <div class="flex items-center gap-2 mt-1" id="previewMetadata">
                    <span class="text-xs bg-gray-100 px-2 py-1 rounded" id="previewVersion">v1.0</span>
                    <span class="text-xs text-gray-500" id="previewUploader">Uploaded by User</span>
                    <span class="text-xs text-gray-500" id="previewDate">Today</span>
                  </div>
                </div>
                <div class="flex items-center gap-2">
                  <button onclick="showFileVersionHistory()" class="enhanced-button secondary">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Version History
                  </button>
                  <button onclick="downloadPreviewFile()" class="enhanced-button secondary">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Download
                  </button>
                  <button onclick="closePreviewModal()" class="close-button">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
              </div>
            </div>
            <div class="p-6 max-h-[calc(90vh-180px)] overflow-auto">
              <div id="previewContent" class="text-center">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
                <p class="text-gray-500 mt-4">Loading preview...</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Version History Modal -->
      <div id="versionHistoryModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
          <div class="bg-white rounded-2xl shadow-xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
            <div class="px-6 py-4 border-b border-gray-200">
              <div class="flex items-center justify-between">
                <div>
                  <h3 class="text-lg font-semibold text-gray-800">Version History</h3>
                  <p class="text-sm text-gray-500" id="versionHistoryFileName">filename.pdf</p>
                </div>
                <button onclick="closeVersionHistoryModal()" class="close-button">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
            </div>
            <div class="p-6 max-h-[calc(90vh-120px)] overflow-auto">
              <div id="versionHistoryContent">
                <!-- Version history will be populated here -->
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Success/Error Toast -->
      <div id="toast" class="fixed top-4 right-4 z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg border p-4 max-w-sm">
          <div class="flex items-center">
            <div id="toastIcon" class="mr-3"></div>
            <div>
              <p id="toastMessage" class="text-sm font-medium"></p>
            </div>
          </div>
        </div>
      </div>
    </section>
  </SecretariatLayout>
</Layout>

<style>
  /* Modern Timeline Styles - MPMEC Secretariat Theme */
  .timeline-section-container {
    overflow-x: auto;
    scrollbar-width: thin;
    scrollbar-color: #0ea5e9 #f3f4f6;
  }
  
  .timeline-section-container::-webkit-scrollbar {
    height: 8px;
  }
  
  .timeline-section-container::-webkit-scrollbar-track {
    background: #f3f4f6;
    border-radius: 4px;
  }
  
  .timeline-section-container::-webkit-scrollbar-thumb {
    background: #0ea5e9;
    border-radius: 4px;
  }
  
  .timeline-section-container::-webkit-scrollbar-thumb:hover {
    background: #0284c7;
  }
  
  /* Progress bar animation */
  .progress-bar-fill {
    transform-origin: left;
    animation: fillProgress 2s ease-out forwards;
  }
  
  @keyframes fillProgress {
    from {
      width: 0%;
    }
    to {
      width: var(--progress-width);
    }
  }

  .icon-container {
    @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
    position: relative;
    overflow: hidden;
  }

  .icon-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .icon-container > * {
    position: relative;
    z-index: 2;
  }

  .icon-container:hover::before {
    left: 100%;
  }

  .icon-container:hover {
    @apply transform scale-110 rotate-3;
  }

  .icon-container-small {
    @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
    position: relative;
    overflow: hidden;
  }

  .icon-container-small::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .icon-container-small > * {
    position: relative;
    z-index: 2;
  }

  .icon-container-small:hover::before {
    left: 100%;
  }

  .icon-container-small:hover {
    @apply transform scale-110 rotate-3;
  }

  .profile-card {
    @apply bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 ease-out hover:shadow-2xl hover:border-sky-500/20 hover:-translate-y-2;
    position: relative;
    overflow: hidden;
  }

  .profile-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(14, 165, 233, 0.05), transparent);
    transition: left 0.6s;
    z-index: 1;
  }

  .profile-card > * {
    position: relative;
    z-index: 2;
  }

  .profile-card:hover::before {
    left: 100%;
  }

  .btn-primary {
    @apply bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-sky-500/25 border border-sky-500/20;
    position: relative;
    overflow: hidden;
  }

  .btn-primary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .btn-primary > * {
    position: relative;
    z-index: 2;
  }

  .btn-primary:hover::before {
    left: 100%;
  }

  .btn-secondary {
    @apply bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl border border-gray-600 hover:border-gray-800;
    position: relative;
    overflow: hidden;
  }

  .btn-secondary::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .btn-secondary > * {
    position: relative;
    z-index: 2;
  }

  .btn-secondary:hover::before {
    left: 100%;
  }

  .btn-success {
    @apply bg-gradient-to-r from-emerald-500 to-emerald-600 hover:from-emerald-600 hover:to-emerald-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-emerald-500/25 border border-emerald-500/20;
    position: relative;
    overflow: hidden;
  }

  .btn-success::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s;
  }

  .btn-success > * {
    position: relative;
    z-index: 2;
  }

  .btn-success:hover::before {
    left: 100%;
  }

  .btn-sm {
    @apply px-4 py-2 text-sm;
  }

  .summary-card {
    @apply transition-all duration-300 hover:shadow-xl;
  }

  .summary-card:hover {
    transform: translateY(-4px);
  }

  /* Enhanced Button Styles */
  .enhanced-button {
    @apply px-4 py-2 rounded-lg font-medium transition-all duration-200 inline-flex items-center gap-2;
  }

  .enhanced-button.primary {
    @apply bg-sky-600 text-white hover:bg-sky-700 hover:shadow-lg transform hover:-translate-y-0.5;
  }

  .enhanced-button.secondary {
    @apply bg-gray-200 text-gray-700 hover:bg-gray-300 hover:shadow-md transform hover:-translate-y-0.5;
  }

  .enhanced-button.success {
    @apply bg-emerald-600 text-white hover:bg-emerald-700 hover:shadow-lg transform hover:-translate-y-0.5;
  }

  .enhanced-button.danger {
    @apply bg-red-600 text-white hover:bg-red-700 hover:shadow-lg transform hover:-translate-y-0.5;
  }

  /* File Grid and List Styles */
  .file-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
  }

  .file-card {
    @apply bg-white border border-gray-200 rounded-xl p-4 hover:shadow-lg transition-all duration-200 cursor-pointer;
  }

  .file-card:hover {
    @apply border-sky-300 bg-sky-50;
  }

  .file-card.selected {
    @apply border-sky-500 bg-sky-50;
  }

  /* File Item Styles */
  .file-item {
    @apply flex items-center gap-4 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors cursor-pointer;
  }
  
  .file-item.selected {
    @apply bg-sky-50 border-sky-300;
  }

  /* Drag and Drop Styles */
  .drag-over {
    @apply border-sky-500 bg-sky-50;
  }

  /* Close Button Styles */
  .close-button {
    @apply text-gray-400 hover:text-gray-600 p-2 rounded-lg hover:bg-gray-100 transition-colors;
  }

  /* Modal Animations */
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes scaleIn {
    from { 
      opacity: 0; 
      transform: scale(0.9) translateY(20px); 
    }
    to { 
      opacity: 1; 
      transform: scale(1) translateY(0); 
    }
  }

  .modal-backdrop {
    animation: fadeIn 0.3s ease-out;
  }

  .modal-content {
    animation: scaleIn 0.3s ease-out;
  }

  /* Loading Animations */
  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Progress Bar */
  .progress-bar {
    @apply bg-gray-200 rounded-full h-2 overflow-hidden;
  }

  .progress-fill {
    @apply bg-sky-600 h-full transition-all duration-300 rounded-full;
  }

  /* Progress Bar Animation */
  @keyframes progress {
    from { width: 0%; }
    to { width: var(--progress-width); }
  }

  /* Status Badges */
  .status-badge {
    @apply px-2 py-1 rounded-full text-xs font-medium;
  }

  .status-approved {
    @apply bg-green-100 text-green-800;
  }

  .status-pending {
    @apply bg-yellow-100 text-yellow-800;
  }

  .status-private {
    @apply bg-gray-100 text-gray-800;
  }

  .status-public {
    @apply bg-sky-100 text-sky-800;
  }

  /* File Type Icons */
  .file-type-document {
    @apply text-blue-600;
  }

  .file-type-photo {
    @apply text-green-600;
  }

  .file-type-video {
    @apply text-purple-600;
  }

  /* Enhanced Empty State Animations */
  @keyframes float {
    0%, 100% {
      transform: translateY(0px);
    }
    50% {
      transform: translateY(-10px);
    }
  }

  @keyframes pulse-glow {
    0%, 100% {
      box-shadow: 0 0 20px rgba(14, 165, 233, 0.3);
    }
    50% {
      box-shadow: 0 0 30px rgba(14, 165, 233, 0.6);
    }
  }

  .empty-state-icon {
    animation: float 3s ease-in-out infinite;
  }

  .empty-state-icon:hover {
    animation: pulse-glow 2s ease-in-out infinite;
  }

  /* Enhanced Department Card Animations */
  .department-card {
    position: relative;
    overflow: hidden;
  }

  .department-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(14, 165, 233, 0.1), transparent);
    transition: left 0.8s;
    z-index: 1;
  }

  .department-card:hover::before {
    left: 100%;
  }

  .department-card > * {
    position: relative;
    z-index: 2;
  }

  /* Department Icon Hover Effects */
  .department-card:hover .department-icon {
    transform: rotate(6deg) scale(1.1);
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
  }

  /* Stats Grid Hover Effects */
  .department-card:hover .stats-grid > div {
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  /* Smooth Transitions */
  .department-card * {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Department Logo Specific Styles */
  .department-logo-container {
    background: linear-gradient(135deg, #f8fafc, #e2e8f0);
    border: 3px solid white;
    position: relative;
    overflow: hidden;
  }

  .department-logo-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.4), transparent);
    transition: left 0.6s;
  }

  .department-card:hover .department-logo-container::before {
    left: 100%;
  }

  .department-logo-img {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
    filter: brightness(1) contrast(1.1) saturate(1.2);
  }

  .department-card:hover .department-logo-img {
    transform: scale(1.1) rotate(5deg);
    filter: brightness(1.1) contrast(1.2) saturate(1.3);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
  }

  /* Logo Border Animation */
  .department-logo-container {
    position: relative;
  }

  .department-logo-container::after {
    content: '';
    position: absolute;
    top: -3px;
    left: -3px;
    right: -3px;
    bottom: -3px;
    border-radius: 50%;
    background: linear-gradient(45deg, #3b82f6, #8b5cf6, #06b6d4, #10b981);
    background-size: 400% 400%;
    opacity: 0;
    transition: opacity 0.3s;
    z-index: -1;
    animation: gradientShift 3s ease infinite;
  }

  .department-card:hover .department-logo-container::after {
    opacity: 1;
  }

  @keyframes gradientShift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  /* Project Card Animations */
  .project-card {
    position: relative;
    overflow: hidden;
  }

  .project-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(14, 165, 233, 0.08), transparent);
    transition: left 0.8s;
    z-index: 1;
  }

  .project-card:hover::before {
    left: 100%;
  }

  .project-card > * {
    position: relative;
    z-index: 2;
  }

  /* View Transition Animations */
  #evidenceContent {
    animation: fadeInSlide 0.6s ease-out;
  }

  @keyframes fadeInSlide {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Progress Bar Animation */
  .project-card .progress-bar {
    animation: progressFill 2s ease-out;
  }

  @keyframes progressFill {
    from { width: 0%; }
    to { width: var(--progress-width); }
  }

  /* Enhanced Milestone Card Animations */
  .milestone-card-enhanced {
    position: relative;
    overflow: hidden;
  }

  .milestone-card-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(16, 185, 129, 0.1), transparent);
    transition: left 0.6s ease-out;
    z-index: 1;
  }

  .milestone-card-enhanced:hover::before {
    left: 100%;
  }

  .milestone-card-enhanced > * {
    position: relative;
    z-index: 2;
  }

  /* Enhanced Evidence Folder Animations */
  .evidence-folder-enhanced {
    position: relative;
    overflow: hidden;
  }

  .evidence-folder-enhanced::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.4s ease-out;
    z-index: 1;
  }

  .evidence-folder-enhanced:hover::before {
    left: 100%;
  }

  .evidence-folder-enhanced > * {
    position: relative;
    z-index: 2;
  }

  /* Shimmer Animation */
  @keyframes shimmer {
    0% {
      transform: translateX(-100%) skewX(-12deg);
    }
    100% {
      transform: translateX(200%) skewX(-12deg);
    }
  }

  .group-hover\:animate-shimmer:hover {
    animation: shimmer 1s ease-out;
  }

  /* Enhanced Status Badge Animations */
  .milestone-status-icon {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  }

  .milestone-status-icon:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  /* File Count Badge Pulse */
  @keyframes badge-pulse {
    0%, 100% {
      transform: scale(1);
      box-shadow: 0 0 0 0 rgba(239, 68, 68, 0.7);
    }
    50% {
      transform: scale(1.1);
      box-shadow: 0 0 0 10px rgba(239, 68, 68, 0);
    }
  }

  .evidence-icon-container .animate-pulse {
    animation: badge-pulse 2s infinite;
  }

  /* Enhanced Hover Effects for Evidence Folders */
  .evidence-folder-enhanced:hover .evidence-icon-container > div {
    transform: scale(1.1) rotate(6deg);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  }

  /* Delayed Status Special Animation */
  .animate-pulse[class*="red"] {
    animation: delayed-pulse 1.5s infinite;
  }

  @keyframes delayed-pulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.8;
      transform: scale(1.05);
    }
  }

  /* Enhanced Grid Layout */
  .milestone-card-enhanced {
    min-height: 400px;
  }

  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .milestone-card-enhanced {
      min-height: auto;
    }
    
    .grid.grid-cols-2 {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }
</style>

<script>
  // Global state
  let currentView = 'departments';
  let currentPath = 'root';
  let currentDepartment = null;
  let currentProject = null;
  let currentMilestone = null;
  let selectedFiles = new Set();
  let allFiles = [];
  let filteredFiles = [];
  let uploadedFiles = [];
  let departmentsData = [];
  let currentFileVersions = {};
  let navigationHistory = [];
  
  // Department logos mapping
  const departmentLogos = {
    'Municipal Engineer Office': '/images/logos/meo-logo.png',
    'Municipal Engineer\'s Office': '/images/logos/meo-logo.png', // With apostrophe
    'Municipal Environment and Natural Resources Office': '/images/logos/menro-logo.png',
    'Municipal Disaster and Risk Reduction Management Office': '/images/logos/mdrrmo-logo.png',
    'Municipal Agriculturist\'s Office': '/images/logos/mao-logo.png',
    'Municipal Social Welfare and Development Office': '/images/logos/mswdo-logo.png'
  };

  document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      window.location.href = '/login/lgu-pmt';
      return;
    }
    
    try {
      const user = JSON.parse(userData);
      if (user.role !== 'LGU-PMT' || !user.subRole || !user.subRole.toLowerCase().includes('secretariat')) {
        window.location.href = '/login/lgu-pmt';
        return;
      }
    } catch (error) {
      console.error('Error parsing user data:', error);
      window.location.href = '/login/lgu-pmt';
    }

    // Initialize the system
    initializeFileSystem();
    setupEventListeners();
    loadInitialData();
    
    // Set default view
    showDepartmentView();
  });

  function initializeFileSystem() {
    // Setup drag and drop
    setupDragAndDrop();
    
    // Setup file input
    const fileInput = document.getElementById('fileInput');
    fileInput.addEventListener('change', handleFileSelect);
    
    // Setup upload area click
    const uploadArea = document.getElementById('uploadArea');
    uploadArea.addEventListener('click', () => fileInput.click());
  }

  function setupEventListeners() {
    // Department change event
    document.getElementById('uploadDepartment').addEventListener('change', loadProjectsForDepartment);
    
    // Project change event
    document.getElementById('uploadProject').addEventListener('change', loadMilestonesForProject);
  }

  async function loadInitialData() {
    try {
      await Promise.all([
        loadFilesData(),
        loadDepartmentsAndProjects()
      ]);
      
      renderEvidenceExplorer();
      updateStatistics();
    } catch (error) {
      console.error('Error loading initial data:', error);
      showToast('Failed to load initial data', 'error');
    }
  }

  async function loadFilesData() {
    try {
      const token = localStorage.getItem('token');
      
      // Load projects and organize by departments
      const projectsResponse = await fetch('http://localhost:3000/api/projects', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (projectsResponse.ok) {
        const data = await projectsResponse.json();
        if (data.success) {
          // Organize projects by implementing office
          const projectsByDept = {};
          data.projects.forEach(project => {
            const deptName = project.implementingOfficeName || 'General';
            if (!projectsByDept[deptName]) {
              projectsByDept[deptName] = {
                id: deptName.toLowerCase().replace(/\s+/g, '-'),
                name: deptName,
                projects: [],
                projectCount: 0,
                fileCount: 0
              };
            }
            projectsByDept[deptName].projects.push(project);
            projectsByDept[deptName].projectCount++;
          });
          departmentsData = Object.values(projectsByDept);
        }
      }
      
      // Load evidence files from approved milestone submissions
      const evidenceResponse = await fetch('http://localhost:3000/api/milestones/secretariat/evidence-files', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      
      if (evidenceResponse.ok) {
        const data = await evidenceResponse.json();
        if (data.success) {
          allFiles = data.files || [];
          filteredFiles = [...allFiles];
          console.log('📁 Evidence files loaded from milestone submissions:', allFiles.length);
        }
      } else {
        console.warn('Failed to fetch evidence files from milestone submissions, trying fallback...');
        
        // Fallback to uploads endpoint
        const filesResponse = await fetch('http://localhost:3000/api/uploads', {
          headers: { 'Authorization': `Bearer ${token}` }
        });
        
        if (filesResponse.ok) {
          const data = await filesResponse.json();
          if (data.success) {
            allFiles = data.uploads || [];
            filteredFiles = [...allFiles];
          }
        }
      }
      
      // Update file counts for departments
      departmentsData.forEach(dept => {
        dept.fileCount = allFiles.filter(file => 
          file.projectName && dept.projects.some(p => p.name === file.projectName)
        ).length;
      });
      
    } catch (error) {
      console.error('Error loading files:', error);
      // For demo purposes, create mock data
      departmentsData = generateMockDepartments();
      allFiles = generateMockFiles();
      filteredFiles = [...allFiles];
      
      console.log('📊 Loaded departments:', departmentsData.length);
      console.log('📁 Loaded files:', allFiles.length);
    }
  }

  function generateMockFiles() {
    const departments = ['Engineering Office', 'Environment Office', 'Health Department'];
    const projects = ['Road Improvement Project', 'Water System Upgrade', 'Healthcare Facility'];
    const milestones = ['Planning Phase', 'Implementation', 'Completion'];
    const fileTypes = [
      { type: 'document', ext: '.pdf', icon: '📄', color: 'blue' },
      { type: 'photo', ext: '.jpg', icon: '🖼️', color: 'green' },
      { type: 'video', ext: '.mp4', icon: '🎥', color: 'purple' }
    ];

    const mockFiles = [];
    for (let i = 1; i <= 50; i++) {
      const dept = departments[Math.floor(Math.random() * departments.length)];
      const project = projects[Math.floor(Math.random() * projects.length)];
      const milestone = milestones[Math.floor(Math.random() * milestones.length)];
      const fileType = fileTypes[Math.floor(Math.random() * fileTypes.length)];
      
      mockFiles.push({
        id: `file-${i}`,
        name: `${fileType.type}_${i}${fileType.ext}`,
        type: fileType.type,
        size: Math.floor(Math.random() * 10000000) + 100000, // 100KB to 10MB
        department: dept,
        project: project,
        milestone: milestone,
        uploader: 'John Doe',
        uploadDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
        status: Math.random() > 0.3 ? 'approved' : 'pending',
        accessLevel: Math.random() > 0.5 ? 'public' : 'private',
        tags: ['budget', 'engineering', 'compliance'].slice(0, Math.floor(Math.random() * 3) + 1),
        icon: fileType.icon,
        color: fileType.color,
        url: `#file-${i}`,
        thumbnailUrl: fileType.type === 'photo' ? `https://picsum.photos/200/150?random=${i}` : null
      });
    }
    
    return mockFiles;
  }

  async function loadDepartmentsAndProjects() {
    try {
      const token = localStorage.getItem('token');
      if (!token) throw new Error('No authentication token');

      console.log('🔄 Loading departments and projects...');

      // Fetch projects from the backend
      const projectsResponse = await fetch('/api/projects', {
        headers: { 'Authorization': `Bearer ${token}` }
      });

      if (projectsResponse.ok) {
        const projectsData = await projectsResponse.json();
        console.log('📊 Projects data loaded:', projectsData);

        // Fetch approved evidence files from milestone submissions
        const evidenceResponse = await fetch('http://localhost:3000/api/milestones/secretariat/evidence-files', {
          headers: { 'Authorization': `Bearer ${token}` }
        });

        let approvedFiles = [];
        if (evidenceResponse.ok) {
          const evidenceData = await evidenceResponse.json();
          if (evidenceData.success) {
            approvedFiles = evidenceData.files || [];
            console.log('📁 Approved evidence files loaded from milestone submissions:', approvedFiles.length);
          }
        } else {
          console.warn('Failed to fetch evidence files from milestone submissions endpoint');
        }

        // Organize projects by implementing office (department)
        const departmentMap = new Map();

        if (projectsData.projects && Array.isArray(projectsData.projects)) {
          // Fetch milestones for each project using the same method as submit-update.astro
          const projectsWithMilestones = await Promise.all(
            projectsData.projects.map(async (project) => {
              try {
                console.log(`🎯 Fetching milestones for project ${project.id}: ${project.name}`);
                
                // Use the same endpoint format as submit-update.astro with cache-busting
                const timestamp = Date.now();
                const milestonesResponse = await fetch(`/api/projects/${project.id}/milestones?_t=${timestamp}`, {
                  headers: { 'Authorization': `Bearer ${token}` }
                });
                
                if (milestonesResponse.ok) {
                  const milestonesData = await milestonesResponse.json();
                  console.log(`✅ Milestones response for project ${project.id}:`, milestonesData);
                  
                  if (milestonesData.success && milestonesData.milestones) {
                    project.milestones = milestonesData.milestones;
                    console.log(`🎯 Loaded ${project.milestones.length} milestones for project: ${project.name}`);
                  } else if (milestonesData.milestones) {
                    // Handle case where success flag might not be present but milestones array exists
                    project.milestones = milestonesData.milestones;
                    console.log(`🎯 Loaded ${project.milestones.length} milestones for project: ${project.name} (no success flag)`);
                  } else {
                    console.warn(`⚠️ No milestones found in response for project ${project.id}`);
                    project.milestones = [];
                  }
                } else {
                  console.warn(`❌ Failed to load milestones for project ${project.id}: ${milestonesResponse.status}`);
                  project.milestones = [];
                }
              } catch (error) {
                console.error(`❌ Error loading milestones for project ${project.id}:`, error);
                project.milestones = [];
              }
              return project;
            })
          );

          projectsWithMilestones.forEach(project => {
            const deptName = project.implementingOfficeName || project.implementingOffice || 'Unknown Department';
            
            if (!departmentMap.has(deptName)) {
              departmentMap.set(deptName, {
                id: deptName.toLowerCase().replace(/\s+/g, '-'),
                name: deptName,
                description: getDepartmentDescription(deptName),
                projects: [],
                projectCount: 0,
                fileCount: 0
              });
            }

            // Count evidence files for this project (only approved ones)
            const projectFiles = approvedFiles.filter(file => 
              file.projectId === project.id && 
              file.status === 'approved' &&
              file.approvedBy
            );

            // Add evidence file count to project
            project.evidenceFileCount = projectFiles.length;

            // Add milestones with file counts
            if (project.milestones) {
              project.milestones = project.milestones.map(milestone => {
                const milestoneFiles = projectFiles.filter(file => file.milestoneId === milestone.id);
                return {
                  ...milestone,
                  evidenceFileCount: milestoneFiles.length
                };
              });
            }

            const dept = departmentMap.get(deptName);
            dept.projects.push(project);
            dept.projectCount++;
            dept.fileCount += projectFiles.length;
          });
        }

        // Convert map to array and sort
        window.departmentsData = Array.from(departmentMap.values()).sort((a, b) => 
          a.name.localeCompare(b.name)
        );

        // Store approved files globally
        window.allFiles = approvedFiles.map(file => ({
          ...file,
          type: getFileTypeFromMime(file.fileType) || 'other',
          department: file.implementingOfficeName || 'Unknown',
          project: file.projectName || 'Unknown Project',
          milestone: file.milestoneName || 'Unknown Milestone'
        }));

        console.log('🏢 Departments organized:', window.departmentsData.length);
        console.log('📁 Evidence files processed:', window.allFiles.length);
        console.log('🎯 Total milestones loaded:', window.departmentsData.reduce((acc, dept) => 
          acc + dept.projects.reduce((projAcc, proj) => projAcc + (proj.milestones?.length || 0), 0), 0
        ));

      } else {
        console.warn('❌ Failed to load projects, using mock data. Status:', projectsResponse.status);
        generateMockDepartmentData();
      }
    } catch (error) {
      console.error('❌ Error loading departments and projects:', error);
      generateMockDepartmentData();
    }
  }

  // Helper function to determine file type from MIME type
  function getFileTypeFromMime(mimeType) {
    if (!mimeType) return 'other';
    
    if (mimeType.startsWith('image/')) return 'photos';
    if (mimeType.startsWith('video/')) return 'videos';
    if (mimeType.includes('pdf') || mimeType.includes('document') || mimeType.includes('word') || mimeType.includes('excel') || mimeType.includes('powerpoint')) return 'documents';
    if (mimeType.startsWith('audio/')) return 'audio';
    
    return 'other';
  }

  // Generate mock data when API is not available
  function generateMockDepartmentData() {
    console.log('🔧 Generating mock department data with milestones...');
    
    const departments = [
      { 
        id: 'municipal-engineer-office', 
        name: 'Municipal Engineer Office', 
        description: 'Infrastructure development and engineering projects',
        projectCount: 2,
        fileCount: 15,
        projects: [
          { 
            id: 'road1', 
            name: 'Rehabilitation of Barangay Road at Brgy. Bubukal', 
            description: 'Road rehabilitation and improvement project for better transportation',
            evidenceFileCount: 8,
            status: 'ongoing',
            milestones: [
              { 
                id: 'm1', 
                title: 'Site Preparation and Survey', 
                description: 'Initial site survey and preparation work',
                status: 'completed', 
                evidenceFileCount: 3,
                dueDate: '2024-09-15'
              },
              { 
                id: 'm2', 
                title: 'Road Construction Phase 1', 
                description: 'First phase of road construction and materials laying',
                status: 'ongoing', 
                evidenceFileCount: 5,
                dueDate: '2024-10-30'
              },
              { 
                id: 'm3', 
                title: 'Final Inspection and Completion', 
                description: 'Final quality inspection and project completion',
                status: 'pending', 
                evidenceFileCount: 0,
                dueDate: '2024-11-15'
              }
            ]
          },
          { 
            id: 'drainage1', 
            name: 'Rehabilitation of Drainage System at Brgy. Gatid', 
            description: 'Drainage system improvement for flood prevention',
            evidenceFileCount: 7,
            status: 'ongoing',
            milestones: [
              { 
                id: 'm4', 
                title: 'Drainage Assessment', 
                description: 'Assessment of existing drainage system',
                status: 'completed', 
                evidenceFileCount: 2,
                dueDate: '2024-09-01'
              },
              { 
                id: 'm5', 
                title: 'Excavation and Installation', 
                description: 'Excavation work and new drainage installation',
                status: 'ongoing', 
                evidenceFileCount: 5,
                dueDate: '2024-10-15'
              },
              { 
                id: 'm6', 
                title: 'System Testing', 
                description: 'Testing and validation of drainage system',
                status: 'pending', 
                evidenceFileCount: 0,
                dueDate: '2024-11-01'
              }
            ]
          }
        ]
      },
      { 
        id: 'municipal-environment-and-natural-resources-office', 
        name: 'Municipal Environment And Natural Resources Office', 
        description: 'Environmental protection and natural resource management',
        projectCount: 1,
        fileCount: 10,
        projects: [
          { 
            id: 'garbage1', 
            name: 'Procurement of Garbage Truck 20 CBM Collecting 10 Wheeler Dump Truck', 
            description: 'Procurement of waste collection vehicles for improved municipal services',
            evidenceFileCount: 10,
            status: 'ongoing',
            milestones: [
              { 
                id: 'm7', 
                title: 'Procurement Planning', 
                description: 'Planning and specification development for garbage truck procurement',
                status: 'completed', 
                evidenceFileCount: 4,
                dueDate: '2024-08-15'
              },
              { 
                id: 'm8', 
                title: 'Bidding Process', 
                description: 'Conduct bidding process and supplier selection',
                status: 'ongoing', 
                evidenceFileCount: 6,
                dueDate: '2024-10-20'
              },
              { 
                id: 'm9', 
                title: 'Delivery and Acceptance', 
                description: 'Vehicle delivery, inspection and acceptance',
                status: 'pending', 
                evidenceFileCount: 0,
                dueDate: '2024-12-01'
              }
            ]
          }
        ]
      }
    ];
    
    window.departmentsData = departments;
    
    // Generate mock evidence files with proper milestone associations
    window.allFiles = [
      {
        id: 1,
        projectId: 'road1',
        milestoneId: 'm1',
        name: 'site-survey-report.pdf',
        type: 'documents',
        status: 'approved',
        approvedBy: 'LGU-IU IOO Admin',
        uploadDate: '2024-10-01',
        department: 'Municipal Engineer Office',
        project: 'Rehabilitation of Barangay Road at Brgy. Bubukal',
        milestone: 'Site Preparation and Survey'
      },
      {
        id: 2,
        projectId: 'road1',
        milestoneId: 'm2',
        name: 'construction-progress-1.jpg',
        type: 'photos',
        status: 'approved',
        approvedBy: 'LGU-IU IOO Admin',
        uploadDate: '2024-10-02',
        department: 'Municipal Engineer Office',
        project: 'Rehabilitation of Barangay Road at Brgy. Bubukal',
        milestone: 'Road Construction Phase 1'
      },
      {
        id: 3,
        projectId: 'road1',
        milestoneId: 'm2',
        name: 'materials-delivery.mp4',
        type: 'videos',
        status: 'approved',
        approvedBy: 'LGU-IU IOO Admin',
        uploadDate: '2024-10-03',
        department: 'Municipal Engineer Office',
        project: 'Rehabilitation of Barangay Road at Brgy. Bubukal',
        milestone: 'Road Construction Phase 1'
      },
      {
        id: 4,
        projectId: 'drainage1',
        milestoneId: 'm4',
        name: 'drainage-assessment.pdf',
        type: 'documents',
        status: 'approved',
        approvedBy: 'LGU-IU IOO Admin',
        uploadDate: '2024-09-05',
        department: 'Municipal Engineer Office',
        project: 'Rehabilitation of Drainage System at Brgy. Gatid',
        milestone: 'Drainage Assessment'
      },
      {
        id: 5,
        projectId: 'garbage1',
        milestoneId: 'm7',
        name: 'procurement-specs.docx',
        type: 'documents',
        status: 'approved',
        approvedBy: 'LGU-IU IOO Admin',
        uploadDate: '2024-08-20',
        department: 'Municipal Environment And Natural Resources Office',
        project: 'Procurement of Garbage Truck 20 CBM Collecting 10 Wheeler Dump Truck',
        milestone: 'Procurement Planning'
      }
    ];
    
    console.log('✅ Mock data generated:', {
      departments: window.departmentsData.length,
      projects: window.departmentsData.reduce((acc, dept) => acc + dept.projects.length, 0),
      milestones: window.departmentsData.reduce((acc, dept) => 
        acc + dept.projects.reduce((projAcc, proj) => projAcc + (proj.milestones?.length || 0), 0), 0
      ),
      files: window.allFiles.length
    });
  }

  function renderEvidenceExplorer() {
    const container = document.getElementById('evidenceContent');
    
    switch (currentView) {
      case 'departments':
        renderDepartmentView(container);
        break;
      case 'projects':
        renderProjectView(container);
        break;
      case 'milestones':
        renderMilestoneView(container);
        break;
      case 'files':
        renderFilesView(container);
        break;
      case 'grid':
        renderGridView(container);
        break;
      case 'list':
        renderListView(container);
        break;
      default:
        renderDepartmentView(container);
    }
    
    updateBreadcrumb();
  }
  
  function renderDepartmentView(container) {
    if (!departmentsData || departmentsData.length === 0) {
      container.innerHTML = `
        <div class="text-center py-20">
          <div class="max-w-lg mx-auto">
            <!-- Enhanced Empty State with Better Animation -->
            <div class="relative mb-8">
              <div class="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-sky-400 to-sky-600 rounded-2xl flex items-center justify-center shadow-2xl transform hover:scale-110 transition-all duration-500 empty-state-icon">
                <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                </svg>
              </div>
              <!-- Floating Elements -->
              <div class="absolute -top-2 -right-8 w-4 h-4 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-full animate-bounce" style="animation-delay: 0.5s;"></div>
              <div class="absolute -bottom-2 -left-8 w-3 h-3 bg-gradient-to-br from-purple-400 to-purple-600 rounded-full animate-bounce" style="animation-delay: 1s;"></div>
            </div>
            <h3 class="text-3xl font-bold text-gray-900 mb-4">Loading Departments...</h3>
            <p class="text-gray-600 mb-8 leading-relaxed">Please wait while we fetch department data from the system. If this persists, departments may not have projects yet.</p>
            <button onclick="loadInitialData()" class="btn-primary inline-flex items-center gap-3 px-8 py-4 text-base font-semibold rounded-2xl transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Refresh Departments
            </button>
          </div>
        </div>
      `;
      return;
    }
    
    const html = `
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
        ${departmentsData.map(dept => {
          const deptIcon = getDepartmentIcon(dept.name);
          const deptColor = getDepartmentColor(dept.name);
          return `
          <div class="group profile-card p-8 cursor-pointer transition-all duration-500 hover:shadow-2xl hover:-translate-y-3 department-card transform hover:scale-105" 
               data-dept-id="${dept.id}" data-dept-name="${dept.name}" onclick="selectDepartmentFromData(this)">
            <div class="text-center">
              <!-- Enhanced Department Logo with Better UX -->
              <div class="relative mb-6">
                <div class="w-20 h-20 mx-auto rounded-full flex items-center justify-center shadow-xl group-hover:shadow-2xl transition-all duration-500 group-hover:rotate-6 group-hover:scale-110 department-logo-container">
                  ${deptIcon}
                </div>
                <!-- Status Indicator -->
                <div class="absolute -top-2 -right-2 flex flex-col items-end gap-1">
                  <!-- Evidence Files Indicator -->
                  ${dept.fileCount > 0 ? `
                    <div class="w-5 h-5 bg-red-500 rounded-full flex items-center justify-center shadow-lg animate-pulse border-2 border-red-300">
                      <div class="w-1.5 h-1.5 bg-white rounded-full animate-ping"></div>
                    </div>
                  ` : ''}
                  
                  <!-- Active Status -->
                  <div class="w-6 h-6 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-full flex items-center justify-center shadow-lg">
                    <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="3" d="M5 13l4 4L19 7"></path>
                    </svg>
                  </div>
                </div>
              </div>
              
              <!-- Department Info -->
              <h3 class="text-xl font-bold text-gray-900 mb-3 group-hover:text-sky-600 transition-colors duration-300">${dept.name}</h3>
              <p class="text-sm text-gray-600 mb-6 leading-relaxed">${getDepartmentDescription(dept.name)}</p>
              
              <!-- Stats Grid -->
              <div class="grid grid-cols-2 gap-4 mb-4">
                <div class="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl">
                  <div class="text-2xl font-bold text-blue-600">${dept.projectCount || 0}</div>
                  <div class="text-xs text-blue-700 font-medium">Projects</div>
                </div>
                <div class="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl">
                  <div class="text-2xl font-bold text-green-600">${dept.fileCount || 0}</div>
                  <div class="text-xs text-green-700 font-medium">Files</div>
                </div>
              </div>
              
              <!-- Action Indicator -->
              <div class="flex items-center justify-center text-xs text-gray-500 group-hover:text-sky-600 transition-colors duration-300">
                <span class="mr-2">Click to explore</span>
                <svg class="w-4 h-4 group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </div>
            </div>
          </div>
        `}).join('')}
      </div>
    `;
    
    container.innerHTML = html;
  }
  
  // Helper functions for department styling
  function getDepartmentIcon(deptName) {
    const logoFiles = {
      'Municipal Engineer Office': '/meo-logo.jfif',
      'Municipal Engineer\'s Office': '/meo-logo.jfif', // With apostrophe
      'Municipal Environment and Natural Resources Office': '/menro-logo.jfif',
      'Municipal Environment And Natural Resources Office': '/menro-logo.jfif', // Alternative capitalization
      'Municipal Disaster and Risk Reduction Management Office': '/mdrrmo-logo.jfif',
      'Municipal Agriculturist\'s Office': '/mao-logo.jfif',
      'Municipal Social Welfare and Development Office': '/mswdo-logo.jfif'
    };
    
      console.log('🔍 Getting icon for department:', `"${deptName}"`);
    console.log('📋 Available department keys:', Object.keys(logoFiles));
    const logoPath = logoFiles[deptName];
    console.log('📁 Logo path found:', logoPath);
    
    // Try alternative matching if exact match fails
    if (!logoPath) {
      const alternativeKey = Object.keys(logoFiles).find(key => 
        key.toLowerCase().replace(/\s+/g, ' ') === deptName.toLowerCase().replace(/\s+/g, ' ')
      );
      if (alternativeKey) {
        console.log('🔄 Found alternative key:', alternativeKey);
        const altLogoPath = logoFiles[alternativeKey];
        if (altLogoPath) {
          return `<img src="${altLogoPath}" alt="${deptName}" class="w-16 h-16 rounded-full object-cover border-4 border-white shadow-lg department-logo-img" onerror="this.style.display='none'; this.nextElementSibling.style.display='block'; console.error('Failed to load logo: ' + '${altLogoPath}')">
                  <div class="w-16 h-16 rounded-full bg-gradient-to-br from-gray-400 to-gray-600 flex items-center justify-center border-4 border-white shadow-lg" style="display: none;">
                    <span class="text-white font-bold text-lg">${deptName.split(' ').map(word => word[0]).join('').substring(0, 3)}</span>
                  </div>`;
        }
      }
    }
    
    if (logoPath) {
      return `<img src="${logoPath}" alt="${deptName}" class="w-16 h-16 rounded-full object-cover border-4 border-white shadow-lg department-logo-img" onerror="this.style.display='none'; this.nextElementSibling.style.display='block'; console.error('Failed to load logo: ' + '${logoPath}')">
              <div class="w-16 h-16 rounded-full bg-gradient-to-br from-gray-400 to-gray-600 flex items-center justify-center border-4 border-white shadow-lg" style="display: none;">
                <span class="text-white font-bold text-lg">${deptName.split(' ').map(word => word[0]).join('').substring(0, 3)}</span>
              </div>`;
    }
    
    console.warn('⚠️ No logo found for department:', deptName, 'Available keys:', Object.keys(logoFiles));
    // Fallback SVG if logo not found
    return `<svg class="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path></svg>`;
  }
  
  function getDepartmentColor(deptName) {
    const colors = {
      'Municipal Engineer Office': 'from-orange-500 to-orange-600',
      'Municipal Environment and Natural Resources Office': 'from-green-500 to-green-600',
      'Municipal Environment And Natural Resources Office': 'from-green-500 to-green-600', // Alternative capitalization
      'Municipal Disaster and Risk Reduction Management Office': 'from-red-500 to-red-600',
      'Municipal Agriculturist\'s Office': 'from-yellow-500 to-yellow-600',
      'Municipal Social Welfare and Development Office': 'from-purple-500 to-purple-600'
    };
    return colors[deptName] || 'from-sky-500 to-sky-600';
  }
  
  function getDepartmentDescription(deptName) {
    const descriptions = {
      'Municipal Engineer Office': 'Infrastructure development and engineering projects',
      'Municipal Environment and Natural Resources Office': 'Environmental protection and natural resource management',
      'Municipal Environment And Natural Resources Office': 'Environmental protection and natural resource management', // Alternative capitalization
      'Municipal Disaster and Risk Reduction Management Office': 'Disaster preparedness and risk management initiatives',
      'Municipal Agriculturist\'s Office': 'Agricultural development and farming support programs',
      'Municipal Social Welfare and Development Office': 'Social services and community development programs'
    };
    return descriptions[deptName] || 'Department projects and evidence files';
  }

  function renderListView(container) {
    const html = `
      <div class="space-y-2">
        ${filteredFiles.map(file => `
          <div class="file-item ${selectedFiles.has(file.id) ? 'selected' : ''}" onclick="toggleFileSelection('${file.id}')">
            <div class="flex items-center">
              <input type="checkbox" ${selectedFiles.has(file.id) ? 'checked' : ''} class="mr-3" onclick="event.stopPropagation(); toggleFileSelection('${file.id}')">
              <div class="text-2xl mr-3">${file.icon}</div>
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center gap-2">
                <h4 class="text-sm font-medium text-gray-900 truncate">${file.name}</h4>
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(file.status)}">
                  ${file.status}
                </span>
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getAccessColor(file.accessLevel)}">
                  ${file.accessLevel}
                </span>
              </div>
              <div class="flex items-center gap-4 text-xs text-gray-500 mt-1">
                <span>${file.department}</span>
                <span>•</span>
                <span>${file.project}</span>
                <span>•</span>
                <span>${file.milestone}</span>
                <span>•</span>
                <span>${formatFileSize(file.size)}</span>
                <span>•</span>
                <span>By ${file.uploader}</span>
                <span>•</span>
                <span>${formatDate(file.uploadDate)}</span>
              </div>
              ${file.tags.length > 0 ? `
                <div class="flex items-center gap-1 mt-2">
                  ${file.tags.map(tag => `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-800">${tag}</span>`).join('')}
                </div>
              ` : ''}
            </div>
            <div class="flex items-center gap-2">
              <button onclick="event.stopPropagation(); previewFile('${file.id}')" class="p-2 text-gray-400 hover:text-sky-600 rounded-lg hover:bg-sky-50 transition-all duration-200 hover:scale-105" title="Preview">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </button>
              <button onclick="event.stopPropagation(); downloadFile('${file.id}')" class="p-2 text-gray-400 hover:text-emerald-600 rounded-lg hover:bg-emerald-50 transition-all duration-200 hover:scale-105" title="Download">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </button>
              <button onclick="event.stopPropagation(); shareFile('${file.id}')" class="p-2 text-gray-400 hover:text-purple-600 rounded-lg hover:bg-purple-50 transition-all duration-200 hover:scale-105" title="Share">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z"></path>
                </svg>
              </button>
              <button onclick="event.stopPropagation(); deleteFile('${file.id}')" class="p-2 text-gray-400 hover:text-red-600 rounded-lg hover:bg-red-50 transition-all duration-200 hover:scale-105" title="Delete">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          </div>
        `).join('')}
      </div>
    `;
    
    container.innerHTML = html;
    updateBulkActionButtons();
  }

  function renderGridView(container) {
    const html = `
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        ${filteredFiles.map(file => `
          <div class="profile-card p-4 cursor-pointer transition-all duration-300 hover:shadow-xl hover:-translate-y-1 ${selectedFiles.has(file.id) ? 'ring-2 ring-sky-500 bg-sky-50' : ''}" onclick="toggleFileSelection('${file.id}')">
            <div class="flex items-center justify-between mb-3">
              <input type="checkbox" ${selectedFiles.has(file.id) ? 'checked' : ''} onclick="event.stopPropagation(); toggleFileSelection('${file.id}')">
              <div class="flex items-center gap-1">
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(file.status)}">
                  ${file.status}
                </span>
              </div>
            </div>
            
            <div class="text-center mb-4">
              ${file.thumbnailUrl ? 
                `<img src="${file.thumbnailUrl}" alt="${file.name}" class="w-full h-32 object-cover rounded-lg mb-2">` :
                `<div class="w-full h-32 bg-gray-100 rounded-lg flex items-center justify-center mb-2">
                  <span class="text-4xl">${file.icon}</span>
                </div>`
              }
              <h4 class="text-sm font-medium text-gray-900 truncate" title="${file.name}">${file.name}</h4>
            </div>
            
            <div class="space-y-2 text-xs text-gray-500">
              <div class="flex justify-between">
                <span>Size:</span>
                <span>${formatFileSize(file.size)}</span>
              </div>
              <div class="flex justify-between">
                <span>Department:</span>
                <span class="truncate ml-2">${file.department}</span>
              </div>
              <div class="flex justify-between">
                <span>Project:</span>
                <span class="truncate ml-2">${file.project}</span>
              </div>
              <div class="flex justify-between">
                <span>Uploaded:</span>
                <span>${formatDate(file.uploadDate)}</span>
              </div>
            </div>
            
            ${file.tags.length > 0 ? `
              <div class="flex flex-wrap gap-1 mt-3">
                ${file.tags.slice(0, 2).map(tag => `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-800">${tag}</span>`).join('')}
                ${file.tags.length > 2 ? `<span class="text-xs text-gray-500">+${file.tags.length - 2}</span>` : ''}
              </div>
            ` : ''}
            
            <div class="flex justify-between items-center mt-4 pt-3 border-t border-gray-100">
              <button onclick="event.stopPropagation(); previewFile('${file.id}')" class="text-blue-600 hover:text-blue-800 text-xs">Preview</button>
              <button onclick="event.stopPropagation(); downloadFile('${file.id}')" class="text-green-600 hover:text-green-800 text-xs">Download</button>
              <button onclick="event.stopPropagation(); shareFile('${file.id}')" class="text-purple-600 hover:text-purple-800 text-xs">Share</button>
            </div>
          </div>
        `).join('')}
      </div>
    `;
    
    container.innerHTML = html;
    updateBulkActionButtons();
    
    // Trigger progress animation for newly rendered project cards
    setTimeout(() => {
      setupProgressAnimation();
    }, 100);
  }

  // Utility Functions
  function getStatusColor(status) {
    switch (status) {
      case 'approved': return 'bg-green-100 text-green-800';
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'rejected': return 'bg-red-100 text-red-800';
      case 'completed': return 'bg-green-100 text-green-800';
      case 'ongoing': return 'bg-blue-100 text-blue-800';
      case 'delayed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  }

  // Enhanced status color functions for better UX
  function getEnhancedStatusColor(status) {
    switch (status?.toLowerCase()) {
      case 'completed': return 'bg-gradient-to-r from-green-100 to-emerald-100 text-green-800 border border-green-200 shadow-sm';
      case 'ongoing': return 'bg-gradient-to-r from-blue-100 to-sky-100 text-blue-800 border border-blue-200 shadow-sm';
      case 'delayed': return 'bg-gradient-to-r from-red-100 to-rose-100 text-red-800 border border-red-200 shadow-sm animate-pulse';
      case 'pending': return 'bg-gradient-to-r from-yellow-100 to-amber-100 text-yellow-800 border border-yellow-200 shadow-sm';
      default: return 'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-800 border border-gray-200 shadow-sm';
    }
  }

  function getStatusDotColor(status) {
    switch (status?.toLowerCase()) {
      case 'completed': return 'bg-green-500 animate-pulse';
      case 'ongoing': return 'bg-blue-500 animate-pulse';
      case 'delayed': return 'bg-red-500 animate-ping';
      case 'pending': return 'bg-yellow-500 animate-pulse';
      default: return 'bg-gray-500';
    }
  }

  function getStatusIconStyle(status) {
    switch (status?.toLowerCase()) {
      case 'completed': return 'bg-gradient-to-br from-green-500 to-green-600 shadow-lg shadow-green-200';
      case 'ongoing': return 'bg-gradient-to-br from-blue-500 to-blue-600 shadow-lg shadow-blue-200';
      case 'delayed': return 'bg-gradient-to-br from-red-500 to-red-600 shadow-lg shadow-red-200 animate-pulse';
      case 'pending': return 'bg-gradient-to-br from-yellow-500 to-yellow-600 shadow-lg shadow-yellow-200';
      default: return 'bg-gradient-to-br from-gray-500 to-gray-600 shadow-lg shadow-gray-200';
    }
  }

  function getStatusIcon(status) {
    switch (status?.toLowerCase()) {
      case 'completed': 
        return `<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>`;
      case 'ongoing': 
        return `<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>`;
      case 'delayed': 
        return `<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>`;
      case 'pending': 
        return `<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>`;
      default: 
        return `<svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>`;
    }
  }

  function getAccessColor(access) {
    switch (access) {
      case 'public': return 'bg-blue-100 text-blue-800';
      case 'private': return 'bg-red-100 text-red-800';
      case 'restricted': return 'bg-orange-100 text-orange-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  }

  function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  }

  function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString();
  }

  function updateStatistics() {
    const stats = {
      totalFiles: allFiles.length,
      totalDepartments: departmentsData.length,
      totalProjects: departmentsData.reduce((sum, dept) => sum + dept.projectCount, 0),
      totalMilestones: departmentsData.reduce((sum, dept) => sum + (dept.projects?.reduce((pSum, project) => pSum + (project.milestones?.length || 0), 0) || 0), 0),
      storageUsed: allFiles.reduce((sum, f) => sum + (f.size || 0), 0),
      delayedProjects: departmentsData.reduce((sum, dept) => sum + (dept.projects?.filter(p => p.status === 'delayed').length || 0), 0),
      ongoingProjects: departmentsData.reduce((sum, dept) => sum + (dept.projects?.filter(p => p.status === 'ongoing').length || 0), 0),
      completedProjects: departmentsData.reduce((sum, dept) => sum + (dept.projects?.filter(p => p.status === 'completed').length || 0), 0)
    };

    // Update elements that exist in the HTML
    const totalFilesEl = document.getElementById('totalFiles');
    if (totalFilesEl) totalFilesEl.textContent = stats.totalFiles;

    const totalDepartmentsEl = document.getElementById('totalDepartments');
    if (totalDepartmentsEl) totalDepartmentsEl.textContent = stats.totalDepartments;

    const totalProjectsEl = document.getElementById('totalProjects');
    if (totalProjectsEl) totalProjectsEl.textContent = stats.totalProjects;

    const totalMilestonesEl = document.getElementById('totalMilestones');
    if (totalMilestonesEl) totalMilestonesEl.textContent = stats.totalMilestones;

    const storageUsedEl = document.getElementById('storageUsed');
    if (storageUsedEl) storageUsedEl.textContent = Math.round(stats.storageUsed / 1024 / 1024) + ' MB';

    const lastUpdateTimeEl = document.getElementById('lastUpdateTime');
    if (lastUpdateTimeEl) lastUpdateTimeEl.textContent = new Date().toLocaleDateString();

    const delayedProjectsEl = document.getElementById('delayedProjects');
    if (delayedProjectsEl) delayedProjectsEl.textContent = stats.delayedProjects;

    const ongoingProjectsEl = document.getElementById('ongoingProjects');
    if (ongoingProjectsEl) ongoingProjectsEl.textContent = stats.ongoingProjects;

    const completedProjectsEl = document.getElementById('completedProjects');
    if (completedProjectsEl) completedProjectsEl.textContent = stats.completedProjects;
  }

  function renderProjectView(container) {
    if (!currentDepartment) {
      showDepartmentView();
      return;
    }
    
    const department = departmentsData.find(d => d.id === currentDepartment.id);
    if (!department || !department.projects || department.projects.length === 0) {
      container.innerHTML = `
        <div class=\"text-center py-20\">
          <div class=\"max-w-md mx-auto\">
            <div class=\"w-20 h-20 mx-auto mb-6 bg-gradient-to-br from-blue-400 to-blue-600 rounded-2xl flex items-center justify-center shadow-xl\">
              <svg class=\"w-10 h-10 text-white\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">
                <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\"></path>
              </svg>
            </div>
            <h3 class=\"text-2xl font-bold text-gray-900 mb-4\">No Projects Found</h3>
            <p class=\"text-gray-600 mb-8\">No projects are available in ${currentDepartment.name}.</p>
            <button onclick=\"showDepartmentView()\" class=\"btn-secondary\">Back to Departments</button>
          </div>
        </div>
      `;
      return;
    }
    
    const html = `
      <div class=\"space-y-6\">
        <!-- Department Header -->
        <div class=\"bg-gradient-to-r from-sky-50 to-blue-50 rounded-2xl p-6 border border-sky-200\">
          <div class=\"flex items-center justify-between\">
            <div class=\"flex items-center gap-4\">
              <button onclick=\"showDepartmentView()\" class=\"p-2 hover:bg-white rounded-lg transition-colors duration-200\">
                <svg class=\"w-5 h-5 text-sky-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">
                  <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M15 19l-7-7 7-7\"></path>
                </svg>
              </button>
              <div>
                <h2 class=\"text-2xl font-bold text-gray-900\">${currentDepartment.name}</h2>
                <p class=\"text-sm text-gray-600\">${department.projects.length} Projects Available</p>
              </div>
            </div>
            <div class=\"text-right\">
              <div class=\"text-3xl font-bold text-sky-600\">${department.projects.length}</div>
              <div class=\"text-xs text-sky-700\">Total Projects</div>
            </div>
          </div>
        </div>
        
        <!-- Project Cards Grid -->
        <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">
          ${department.projects.map(project => {
            // Calculate progress values - ensure they are valid numbers
            const overallProgress = isNaN(parseFloat(project.overallProgress || project.progress)) ? 0 : parseFloat(project.overallProgress || project.progress || 0);
            const timelineProgress = isNaN(parseFloat(project.timelineProgress)) ? 0 : parseFloat(project.timelineProgress || 0);
            const budgetProgress = isNaN(parseFloat(project.budgetProgress)) ? 0 : parseFloat(project.budgetProgress || 0);
            const physicalProgress = isNaN(parseFloat(project.physicalProgress)) ? 0 : parseFloat(project.physicalProgress || 0);
            
            // Get project image with proper fallback
            const getProjectImage = (proj) => {
              if (proj.initialPhoto && proj.initialPhoto !== '' && proj.initialPhoto !== 'None') {
                return proj.initialPhoto.startsWith('http') ? proj.initialPhoto : 'http://localhost:3000' + proj.initialPhoto;
              }
              return '/projects-page-header-bg.png';
            };
            
            // Check if project has delayed milestones and determine actual status
            const getActualStatus = (proj) => {
              let actualStatus = proj.status || 'pending';
              
              // Status lifecycle logic
              if (actualStatus !== 'completed' && actualStatus !== 'complete' && proj.milestones && Array.isArray(proj.milestones)) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                const hasDelayedMilestones = proj.milestones.some(milestone => {
                  const dueDate = milestone.dueDate || milestone.deadline || milestone.targetDate || milestone.completionDate;
                  const status = milestone.status || 'pending';
                  
                  if (dueDate && status !== 'completed' && status !== 'under_approval' && status !== 'revision_request') {
                    const milestoneDate = new Date(dueDate);
                    milestoneDate.setHours(0, 0, 0, 0);
                    return milestoneDate < today && status === 'pending';
                  }
                  return false;
                });
                
                if (hasDelayedMilestones) {
                  actualStatus = 'delayed';
                }
              }
              
              return actualStatus;
            };
            
            // Status color mapping with proper theme colors
            const getStatusColor = (status) => {
              switch(status?.toLowerCase()) {
                case 'completed':
                case 'complete':
                  return 'bg-green-100 text-green-700 border-green-200';
                case 'ongoing':
                  return 'bg-blue-100 text-blue-700 border-blue-200';
                case 'delayed':
                  return 'bg-red-100 text-red-700 border-red-200 animate-pulse';
                case 'pending':
                  return 'bg-yellow-100 text-yellow-700 border-yellow-200';
                case 'on hold':
                  return 'bg-gray-100 text-gray-700 border-gray-200';
                default:
                  return 'bg-gray-100 text-gray-600 border-gray-200';
              }
            };
            
            // Format budget - show full amount for clarity
            const formatBudget = (amount) => {
              if (!amount) return '₱0.00';
              const num = parseFloat(amount);
              if (isNaN(num)) return '₱0.00';
              
              if (num >= 1000000) {
                const formatted = num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                return '₱' + formatted;
              } else if (num >= 1000) {
                const formatted = num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
                return '₱' + formatted;
              }
              return '₱' + num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
            };
            
            const actualStatus = getActualStatus(project);
            
            // Calculate real file count from milestones and evidence files
            const totalMilestones = project.milestones ? project.milestones.length : 0;
            const totalFiles = project.milestones ? project.milestones.reduce((acc, milestone) => {
              return acc + (milestone.evidenceFiles ? milestone.evidenceFiles.length : 0);
            }, 0) : 0;
            
            return `
            <div class="group project-card bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden transition-all duration-300 cursor-pointer transform hover:scale-[1.02] hover:-translate-y-1 hover:shadow-xl hover:border-sky-400 hover:shadow-sky-100 relative" 
                 data-project-id="${project.id}" data-project-name="${project.name}" onclick="selectProjectFromData(this)">
              
              <!-- Hover Tooltip -->
              <div class="absolute top-4 right-4 z-20 opacity-0 group-hover:opacity-100 transition-opacity duration-300 pointer-events-none">
                <div class="bg-gray-900 text-white text-xs rounded-lg px-3 py-2 shadow-lg">
                  <div class="font-semibold mb-1">Project Details</div>
                  <div class="space-y-1">
                    <div class="flex justify-between gap-2">
                      <span class="text-blue-300">Milestones:</span>
                      <span class="font-bold">${totalMilestones}</span>
                    </div>
                    <div class="flex justify-between gap-2">
                      <span class="text-green-300">Files:</span>
                      <span class="font-bold">${totalFiles}</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <!-- Project Image -->
              <div class="h-48 relative overflow-hidden">
                <img 
                  src="${getProjectImage(project)}"
                  alt="${project.name || project.projectName}"
                  class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                  loading="lazy"
                  onerror="this.src='/projects-page-header-bg.png'"
                />
                <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent"></div>
                
                <!-- Floating Status Badge -->
                <div class="absolute top-3 right-3 flex flex-col items-end gap-2">
                  <!-- Evidence Files Indicator -->
                  ${totalFiles > 0 ? `
                    <div class="inline-flex items-center gap-1 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold animate-pulse border-2 border-red-300 shadow-lg">
                      <div class="w-1.5 h-1.5 bg-white rounded-full animate-ping"></div>
                      ${totalFiles}
                    </div>
                  ` : ''}
                  
                  <!-- Status Badge -->
                  <span class="px-3 py-1 rounded-full text-xs font-semibold border backdrop-blur-sm ${getStatusColor(actualStatus)}">
                    ${actualStatus || 'Not Started'}
                  </span>
                </div>

                <!-- Category Badge -->
                <div class="absolute top-3 left-3">
                  <span class="px-3 py-1 bg-white/20 backdrop-blur-sm rounded-full text-white text-xs font-semibold border border-white/30">
                    ${project.category || 'Infrastructure'}
                  </span>
                </div>

                <!-- Progress Overlay -->
                <div class="absolute bottom-3 left-3 right-3">
                  <div class="bg-white/90 backdrop-blur-sm rounded-lg p-2">
                    <div class="flex justify-between items-center mb-1">
                      <span class="text-xs font-medium text-gray-700">Overall Progress</span>
                      <span class="text-xs font-bold text-gray-900">${overallProgress.toFixed(1)}%</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
                      <div 
                        class="h-2 rounded-full transition-all duration-2000 ease-out progress-bar-fill"
                        style="width: 0%"
                        data-progress="${overallProgress}"
                        data-progress-color="${overallProgress >= 0 && overallProgress <= 25 ? 'bg-red-500' : overallProgress >= 26 && overallProgress <= 50 ? 'bg-yellow-500' : overallProgress >= 51 && overallProgress <= 75 ? 'bg-blue-500' : overallProgress >= 76 && overallProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                      ></div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Project Details -->
              <div class="p-6">
                <!-- Project Title -->
                <h3 class="text-xl font-bold text-gray-800 mb-2 line-clamp-2">
                  ${project.name || project.projectName}
                </h3>

                <!-- Project Code -->
                <div class="text-sm text-gray-500 mb-2">
                  <span class="font-medium">Code:</span> ${project.projectCode || 'N/A'}
                </div>

                <!-- Project Description -->
                ${project.description ? `
                  <div class="text-sm text-gray-600 mb-3 line-clamp-2">
                    ${project.description}
                  </div>
                ` : ''}

                <!-- Key Information Grid -->
                <div class="space-y-2 mb-4">
                  <div class="flex justify-between items-center text-sm">
                    <span class="text-gray-600 font-medium">Location:</span>
                    <span class="text-gray-800">${project.location || 'N/A'}</span>
                  </div>
                  
                  <div class="flex justify-between items-center text-sm">
                    <span class="text-gray-600 font-medium">Implementing Office:</span>
                    <span class="text-gray-800 text-right">${project.implementingOfficeName || project.implementingOffice || 'N/A'}</span>
                  </div>

                  <div class="flex justify-between items-center text-sm">
                    <span class="text-gray-600 font-medium">Budget:</span>
                    <span class="text-gray-800 font-semibold">${formatBudget(project.totalBudget)}</span>
                  </div>

                  <div class="flex justify-between items-center text-sm">
                    <span class="text-gray-600 font-medium">Funding Source:</span>
                    <span class="text-gray-800">${project.fundingSource === 'donor_fund' ? 'Municipal Development Fund' : project.fundingSource?.replace('_', ' ').toUpperCase() || 'N/A'}</span>
                  </div>
                </div>

                <!-- Progress Breakdown -->
                <div class="space-y-2 mb-4">
                  <div class="flex justify-between items-center text-xs">
                    <span class="text-gray-600">Timeline:</span>
                    <span class="font-semibold text-sky-600">${timelineProgress.toFixed(1)}%</span>
                  </div>
                  <div class="flex justify-between items-center text-xs">
                    <span class="text-gray-600">Budget:</span>
                    <span class="font-semibold text-sky-600">${budgetProgress.toFixed(1)}%</span>
                  </div>
                  <div class="flex justify-between items-center text-xs">
                    <span class="text-gray-600">Physical:</span>
                    <span class="font-semibold text-sky-600">${physicalProgress.toFixed(1)}%</span>
                  </div>
                </div>

                <!-- Dates -->
                <div class="space-y-2 mb-4">
                  <div class="flex justify-between items-center text-xs text-gray-500">
                    <span>Start: ${project.startDate || project.createdDate || 'N/A'}</span>
                    <span>Target: ${project.targetCompletionDate || project.targetDateOfCompletion || project.endDate || 'N/A'}</span>
                  </div>
                  <div class="flex justify-between items-center text-xs text-gray-500">
                    <span>Actual: ${project.completionDate || project.actualCompletionDate || '–'}</span>
                    <span>Days: ${project.expectedDaysOfCompletion || '–'}</span>
                  </div>
                </div>

                <!-- Additional Information -->
                <div class="space-y-1 mb-4">
                  <!-- Coordinates (if available) -->
                  ${(project.longitude && project.latitude) ? `
                    <div class="text-xs text-gray-500">
                      <span class="font-medium">📍 Coordinates:</span> ${project.latitude}, ${project.longitude}
                    </div>
                  ` : ''}
                  
                  <!-- Category (if not already shown in badge) -->
                  <div class="text-xs text-gray-500">
                    <span class="font-medium">🏗️ Category:</span> ${project.category?.charAt(0).toUpperCase() + project.category?.slice(1) || 'Infrastructure'}
                  </div>
                  
                  <!-- Priority -->
                  <div class="text-xs text-gray-500">
                    <span class="font-medium">⚡ Priority:</span> 
                    <span class="font-semibold ${
                      project.priority === 'high' ? 'text-red-600' : 
                      project.priority === 'medium' ? 'text-yellow-600' : 
                      'text-green-600'
                    }">
                      ${project.priority?.toUpperCase() || 'MEDIUM'}
                    </span>
                  </div>
                </div>

                <!-- View Details Button -->
                <button 
                  class="w-full py-3 px-4 rounded-lg font-semibold text-sm transition-all duration-300 bg-sky-50 text-sky-600 hover:bg-sky-100"
                  data-project-id="${project.id}" data-project-name="${project.name}" onclick="selectProjectFromData(this)"
                >
                  View Milestones
                </button>
              </div>
            </div>
            `;
          }).join('')}
        </div>
      </div>
    `;
    
    container.innerHTML = html;
    
    // Trigger progress animation for newly rendered project cards
    setTimeout(() => {
      setupProgressAnimation();
    }, 100);
  }
  
  // Helper function for project status icons
  function getProjectStatusIcon(status) {
    switch(status) {
      case 'completed': return '✅';
      case 'ongoing': return '🔄';
      case 'delayed': return '⚠️';
      case 'pending': return '⏳';
      default: return '🔄';
    }
  }
  
  function renderMilestoneView(container) {
    if (!currentProject) {
      renderProjectView(container);
      return;
    }
    
    const project = getCurrentProject();
    console.log('🎯 DEBUG: renderMilestoneView - project:', project);
    console.log('🎯 DEBUG: renderMilestoneView - project.milestones:', project?.milestones);
    
    if (!project || !project.milestones || project.milestones.length === 0) {
      container.innerHTML = `
        <div class="text-center py-20">
          <div class="max-w-md mx-auto">
            <!-- Enhanced Empty State Icon -->
            <div class="relative mb-8">
              <div class="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-green-400 to-emerald-600 rounded-2xl flex items-center justify-center shadow-2xl transform hover:scale-110 transition-all duration-500">
                <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-6 9l2 2 4-4"></path>
                </svg>
              </div>
              <!-- Floating Decorative Elements -->
              <div class="absolute -top-2 -right-8 w-4 h-4 bg-gradient-to-br from-emerald-400 to-emerald-600 rounded-full animate-bounce" style="animation-delay: 0.5s;"></div>
              <div class="absolute -bottom-2 -left-8 w-3 h-3 bg-gradient-to-br from-green-400 to-green-600 rounded-full animate-bounce" style="animation-delay: 1s;"></div>
              <div class="absolute top-1/2 -right-4 w-2 h-2 bg-gradient-to-br from-teal-400 to-teal-600 rounded-full animate-pulse"></div>
            </div>
            <h3 class="text-3xl font-bold text-gray-900 mb-4">No Milestones Found</h3>
            <p class="text-gray-600 mb-8 leading-relaxed">No milestones are available for ${currentProject.name}. Milestones will appear here once they are created and approved.</p>
            <div class="flex flex-col sm:flex-row gap-4 justify-center">
              <button onclick="showProjectView()" class="btn-secondary inline-flex items-center gap-2 px-6 py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Back to Projects
              </button>
              <button onclick="loadInitialData()" class="btn-primary inline-flex items-center gap-2 px-6 py-3 rounded-xl font-semibold transition-all duration-300 transform hover:scale-105">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Refresh Data
              </button>
            </div>
          </div>
        </div>
      `;
      return;
    }
    
    const html = `
      <div class="space-y-6">
        <!-- Project Header -->
        <div class="bg-gradient-to-r from-green-50 to-emerald-50 rounded-2xl p-6 border border-green-200">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-4">
              <button onclick="showProjectView()" class="p-2 hover:bg-white rounded-lg transition-colors duration-200">
                <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
              </button>
              <div>
                <h2 class="text-2xl font-bold text-gray-900">${currentProject.name}</h2>
                <p class="text-sm text-gray-600">${project.milestones.length} Milestones Available</p>
              </div>
            </div>
            <div class="text-right">
              <div class="text-3xl font-bold text-green-600">${project.milestones.length}</div>
              <div class="text-xs text-green-700">Total Milestones</div>
            </div>
          </div>
        </div>
        
        <!-- Milestones Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
          ${project.milestones.map(milestone => {
            // Get milestone evidence files (only approved ones)
            const milestoneFiles = allFiles.filter(file => 
              file.milestoneId === milestone.id && 
              file.status === 'approved' && 
              file.approvedBy
            );
            
            // Count files by type
            const documentCount = milestoneFiles.filter(f => f.type === 'documents').length;
            const photoCount = milestoneFiles.filter(f => f.type === 'photos').length;
            const videoCount = milestoneFiles.filter(f => f.type === 'videos').length;
            const otherCount = milestoneFiles.filter(f => f.type === 'other').length;
            const totalFiles = milestoneFiles.length;
            
            return `
            <div class="milestone-card-enhanced bg-white rounded-2xl border border-gray-200 overflow-hidden cursor-pointer transition-all duration-500 hover:shadow-2xl hover:border-green-300 hover:-translate-y-2 hover:scale-[1.02] group"
                 data-milestone-id="${milestone.id}" data-milestone-title="${milestone.title}" onclick="selectMilestoneFromData(this)">
              
              <!-- Milestone Header -->
              <div class="milestone-header-enhanced p-6 bg-gradient-to-br from-gray-50 to-white border-b border-gray-100 relative overflow-hidden">
                <!-- Animated Background Effect -->
                <div class="absolute inset-0 bg-gradient-to-r from-transparent via-green-50 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 transform -skew-x-12 group-hover:animate-shimmer"></div>
                
                <div class="relative z-10 flex items-start justify-between">
                  <div class="flex-1">
                    <div class="flex items-center gap-3 mb-3">
                      <!-- Enhanced Milestone Icon -->
                      <div class="milestone-status-icon w-12 h-12 rounded-xl flex items-center justify-center transition-all duration-300 group-hover:scale-110 group-hover:rotate-6 ${getStatusIconStyle(milestone.status)}">
                        ${getStatusIcon(milestone.status)}
                      </div>
                      <div>
                        <h3 class="text-xl font-bold text-gray-900 group-hover:text-green-700 transition-colors duration-300">${milestone.title}</h3>
                        <p class="text-sm text-gray-500 mt-1">${milestone.description || 'Milestone description'}</p>
                      </div>
                    </div>
                  </div>
                  
                  <!-- Enhanced Status Badge -->
                  <div class="flex flex-col items-end gap-2">
                    <span class="inline-flex items-center px-3 py-1.5 rounded-full text-sm font-semibold transition-all duration-300 group-hover:scale-105 ${getEnhancedStatusColor(milestone.status)}">
                      <div class="w-2 h-2 rounded-full mr-2 ${getStatusDotColor(milestone.status)}"></div>
                      ${milestone.status || 'pending'}
                    </span>
                    ${milestone.dueDate ? `
                      <div class="text-xs text-gray-500 flex items-center gap-1">
                        <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        Due: ${new Date(milestone.dueDate).toLocaleDateString()}
                      </div>
                    ` : ''}
                  </div>
                </div>
              </div>
              
              <!-- Evidence Folders Grid -->
              <div class="p-6">
                <div class="grid grid-cols-2 gap-4 mb-6">
                  <!-- Documents Folder -->
                  <div class="evidence-folder-enhanced bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-xl text-center cursor-pointer transition-all duration-300 hover:from-blue-100 hover:to-blue-200 hover:shadow-lg hover:-translate-y-1 group/folder border border-blue-200 hover:border-blue-300"
                       onclick="event.stopPropagation(); selectEvidenceFolder('${milestone.id}', 'documents')">
                    <div class="evidence-icon-container mb-3 relative">
                      <div class="w-12 h-12 mx-auto bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center transition-all duration-300 group-hover/folder:scale-110 group-hover/folder:rotate-6 shadow-lg">
                        <svg class="w-6 h-6 text-white transition-transform duration-300 group-hover/folder:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                      </div>
                      <!-- File Count Badge -->
                      ${documentCount > 0 ? `
                        <div class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center shadow-lg animate-pulse">
                          ${documentCount}
                        </div>
                      ` : ''}
                    </div>
                    <div class="text-sm font-semibold text-blue-800 mb-1">Documents</div>
                    <div class="text-xs text-blue-600">${documentCount} files</div>
                  </div>
                  
                  <!-- Photos Folder -->
                  <div class="evidence-folder-enhanced bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-xl text-center cursor-pointer transition-all duration-300 hover:from-green-100 hover:to-green-200 hover:shadow-lg hover:-translate-y-1 group/folder border border-green-200 hover:border-green-300"
                       onclick="event.stopPropagation(); selectEvidenceFolder('${milestone.id}', 'photos')">
                    <div class="evidence-icon-container mb-3 relative">
                      <div class="w-12 h-12 mx-auto bg-gradient-to-br from-green-500 to-green-600 rounded-xl flex items-center justify-center transition-all duration-300 group-hover/folder:scale-110 group-hover/folder:rotate-6 shadow-lg">
                        <svg class="w-6 h-6 text-white transition-transform duration-300 group-hover/folder:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                      </div>
                      ${photoCount > 0 ? `
                        <div class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center shadow-lg animate-pulse">
                          ${photoCount}
                        </div>
                      ` : ''}
                    </div>
                    <div class="text-sm font-semibold text-green-800 mb-1">Photos</div>
                    <div class="text-xs text-green-600">${photoCount} files</div>
                  </div>
                  
                  <!-- Videos Folder -->
                  <div class="evidence-folder-enhanced bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-xl text-center cursor-pointer transition-all duration-300 hover:from-purple-100 hover:to-purple-200 hover:shadow-lg hover:-translate-y-1 group/folder border border-purple-200 hover:border-purple-300"
                       onclick="event.stopPropagation(); selectEvidenceFolder('${milestone.id}', 'videos')">
                    <div class="evidence-icon-container mb-3 relative">
                      <div class="w-12 h-12 mx-auto bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl flex items-center justify-center transition-all duration-300 group-hover/folder:scale-110 group-hover/folder:rotate-6 shadow-lg">
                        <svg class="w-6 h-6 text-white transition-transform duration-300 group-hover/folder:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                        </svg>
                      </div>
                      ${videoCount > 0 ? `
                        <div class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center shadow-lg animate-pulse">
                          ${videoCount}
                        </div>
                      ` : ''}
                    </div>
                    <div class="text-sm font-semibold text-purple-800 mb-1">Videos</div>
                    <div class="text-xs text-purple-600">${videoCount} files</div>
                  </div>
                  
                  <!-- Other Files Folder -->
                  <div class="evidence-folder-enhanced bg-gradient-to-br from-orange-50 to-orange-100 p-4 rounded-xl text-center cursor-pointer transition-all duration-300 hover:from-orange-100 hover:to-orange-200 hover:shadow-lg hover:-translate-y-1 group/folder border border-orange-200 hover:border-orange-300"
                       onclick="event.stopPropagation(); selectEvidenceFolder('${milestone.id}', 'other')">
                    <div class="evidence-icon-container mb-3 relative">
                      <div class="w-12 h-12 mx-auto bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl flex items-center justify-center transition-all duration-300 group-hover/folder:scale-110 group-hover/folder:rotate-6 shadow-lg">
                        <svg class="w-6 h-6 text-white transition-transform duration-300 group-hover/folder:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
                        </svg>
                      </div>
                      ${otherCount > 0 ? `
                        <div class="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white text-xs font-bold rounded-full flex items-center justify-center shadow-lg animate-pulse">
                          ${otherCount}
                        </div>
                      ` : ''}
                    </div>
                    <div class="text-sm font-semibold text-orange-800 mb-1">Other Files</div>
                    <div class="text-xs text-orange-600">${otherCount} files</div>
                  </div>
                </div>
                
                <!-- Enhanced Milestone Summary -->
                <div class="bg-gradient-to-r from-gray-50 to-gray-100 rounded-xl p-4 text-center border border-gray-200 transition-all duration-300 group-hover:from-green-50 group-hover:to-emerald-50 group-hover:border-green-200">
                  <div class="flex items-center justify-center gap-2 mb-2">
                    <svg class="w-5 h-5 text-gray-600 group-hover:text-green-600 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    <div class="text-sm font-semibold text-gray-700 group-hover:text-green-700 transition-colors duration-300">Total Evidence Files</div>
                  </div>
                  <div class="text-2xl font-bold text-gray-900 group-hover:text-green-800 transition-colors duration-300">${totalFiles}</div>
                  <div class="text-xs text-gray-500 group-hover:text-green-600 transition-colors duration-300 mt-1">
                    ${totalFiles > 0 ? 'Approved & Available' : 'No files available yet'}
                  </div>
                </div>
                
                <!-- Enhanced Approval Status Indicator -->
                ${milestone.status === 'completed' ? `
                  <div class="mt-4 flex items-center justify-center gap-2 text-sm text-green-700 bg-gradient-to-r from-green-50 to-emerald-50 rounded-xl py-3 px-4 border border-green-200 transition-all duration-300 group-hover:shadow-md">
                    <div class="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span class="font-medium">Approved by LGU-IU IOO</span>
                  </div>
                ` : milestone.status === 'delayed' ? `
                  <div class="mt-4 flex items-center justify-center gap-2 text-sm text-red-700 bg-gradient-to-r from-red-50 to-red-100 rounded-xl py-3 px-4 border border-red-200 transition-all duration-300 group-hover:shadow-md animate-pulse">
                    <div class="w-2 h-2 bg-red-500 rounded-full animate-ping"></div>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span class="font-medium">Milestone Delayed</span>
                  </div>
                ` : `
                  <div class="mt-4 flex items-center justify-center gap-2 text-sm text-yellow-700 bg-gradient-to-r from-yellow-50 to-amber-50 rounded-xl py-3 px-4 border border-yellow-200 transition-all duration-300 group-hover:shadow-md">
                    <div class="w-2 h-2 bg-yellow-500 rounded-full animate-pulse"></div>
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span class="font-medium">Pending Approval</span>
                  </div>
                `}
              </div>
            </div>
            `;
          }).join('')}
        </div>
      </div>
    `;
    
    container.innerHTML = html;
  }
  function renderFilesView(container) {
    if (filteredFiles.length === 0) {
      container.innerHTML = `
        <div class="text-center py-20">
          <div class="max-w-lg mx-auto">
            <!-- Enhanced No Evidence Files Found Icon -->
            <div class="relative mb-8">
              <!-- Main Icon Container -->
              <div class="w-32 h-32 mx-auto mb-6 bg-gradient-to-br from-blue-400 via-sky-500 to-blue-600 rounded-3xl flex items-center justify-center shadow-2xl transform hover:scale-110 transition-all duration-500 relative overflow-hidden">
                <!-- Animated Background Pattern -->
                <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent opacity-0 hover:opacity-100 transition-opacity duration-500 transform -skew-x-12 hover:animate-shimmer"></div>
                
                <!-- Main Document Icon -->
                <div class="relative z-10">
                  <svg class="w-16 h-16 text-white drop-shadow-lg" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
                
                <!-- Floating File Icons -->
                <div class="absolute top-3 right-3 w-6 h-6 bg-white/20 rounded-lg flex items-center justify-center transform rotate-12 animate-bounce" style="animation-delay: 0.2s;">
                  <svg class="w-3 h-3 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
                
                <div class="absolute bottom-3 left-3 w-5 h-5 bg-white/20 rounded-lg flex items-center justify-center transform -rotate-6 animate-bounce" style="animation-delay: 0.8s;">
                  <svg class="w-2.5 h-2.5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                  </svg>
                </div>
              </div>
              
              <!-- Decorative Floating Elements -->
              <div class="absolute -top-4 -right-12 w-6 h-6 bg-gradient-to-br from-blue-400 to-blue-500 rounded-full animate-bounce opacity-60" style="animation-delay: 0.5s;"></div>
              <div class="absolute -bottom-6 -left-10 w-4 h-4 bg-gradient-to-br from-sky-400 to-sky-500 rounded-full animate-bounce opacity-60" style="animation-delay: 1s;"></div>
              <div class="absolute top-1/2 -right-6 w-3 h-3 bg-gradient-to-br from-blue-300 to-blue-400 rounded-full animate-pulse opacity-60"></div>
              <div class="absolute top-1/4 -left-8 w-2 h-2 bg-gradient-to-br from-sky-300 to-sky-400 rounded-full animate-ping opacity-60"></div>
            </div>
            
            <!-- Enhanced Typography -->
            <h3 class="text-4xl font-bold text-gray-900 mb-4 tracking-tight">No Evidence Files Found</h3>
            <p class="text-lg text-gray-600 mb-8 leading-relaxed max-w-md mx-auto">
              No evidence files are available for this milestone. Files will appear here once they are uploaded and approved by the LGU-IU IOO.
            </p>
            
            <!-- Enhanced Action Buttons -->
            <div class="flex flex-col sm:flex-row gap-4 justify-center">
              <button onclick="showMilestoneView()" class="inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-gray-600 to-gray-700 text-white font-semibold rounded-xl hover:from-gray-700 hover:to-gray-800 transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 shadow-lg hover:shadow-xl">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                <span>Back to Milestones</span>
              </button>
              
              <button onclick="loadInitialData()" class="inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-blue-500 to-sky-600 text-white font-semibold rounded-xl hover:from-blue-600 hover:to-sky-700 transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 shadow-lg hover:shadow-xl">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                <span>Refresh Data</span>
              </button>
            </div>
            
            <!-- Additional Context Information -->
            <div class="mt-8 p-4 bg-blue-50 rounded-xl border border-blue-200">
              <div class="flex items-center justify-center gap-2 text-blue-700">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span class="text-sm font-medium">Evidence files are only visible after LGU-IU IOO approval</span>
              </div>
            </div>
          </div>
        </div>
      `;
      return;
    }
    
    renderListView(container);
  }
  
  // Navigation functions - Make them globally accessible
  window.selectDepartment = function(deptId, deptName) {
    currentDepartment = { id: deptId, name: deptName };
    currentView = 'projects';
    navigationHistory.push({ type: 'department', id: deptId, name: deptName });
    console.log('🏢 Selected department:', deptName, 'View changed to:', currentView);
    renderEvidenceExplorer();
  }
  
  window.selectProject = function(projectId, projectName) {
    currentProject = { id: projectId, name: projectName };
    currentView = 'milestones';
    navigationHistory.push({ type: 'project', id: projectId, name: projectName });
    console.log('📁 Selected project:', projectName, 'View changed to:', currentView);
    renderEvidenceExplorer();
  }
  
  window.selectMilestone = function(milestoneId, milestoneName) {
    currentMilestone = { id: milestoneId, name: milestoneName };
    currentView = 'files';
    navigationHistory.push({ type: 'milestone', id: milestoneId, name: milestoneName });
    console.log('🎯 Selected milestone:', milestoneName, 'View changed to:', currentView);
    
    // Filter files for this milestone
    filteredFiles = allFiles.filter(file => file.milestoneId === milestoneId);
    renderEvidenceExplorer();
  }

  // Helper functions to read data attributes and call original functions
  window.selectDepartmentFromData = function(element) {
    const deptId = element.getAttribute('data-dept-id');
    const deptName = element.getAttribute('data-dept-name');
    selectDepartment(deptId, deptName);
  }

  window.selectProjectFromData = function(element) {
    const projectId = element.getAttribute('data-project-id');
    const projectName = element.getAttribute('data-project-name');
    selectProject(projectId, projectName);
  }

  window.selectMilestoneFromData = function(element) {
    const milestoneId = element.getAttribute('data-milestone-id');
    const milestoneTitle = element.getAttribute('data-milestone-title');
    selectMilestone(milestoneId, milestoneTitle);
  }
  
  window.selectEvidenceFolder = function(milestoneId, folderType) {
    currentMilestone = { id: milestoneId, name: 'Milestone' };
    currentView = 'files';
    console.log('📂 Selected evidence folder:', folderType, 'for milestone:', milestoneId);
    
    // Filter files by milestone and type
    filteredFiles = allFiles.filter(file => 
      file.milestoneId === milestoneId && file.type === folderType
    );
    renderEvidenceExplorer();
  }
  
  window.showDepartmentView = function() {
    currentView = 'departments';
    currentDepartment = null;
    currentProject = null;
    currentMilestone = null;
    navigationHistory = [];
    console.log('🏠 Returning to department view');
    renderEvidenceExplorer();
  }
  
  window.showProjectView = function() {
    if (currentDepartment) {
      currentView = 'projects';
      currentProject = null;
      currentMilestone = null;
      console.log('📁 Returning to project view for:', currentDepartment.name);
      renderEvidenceExplorer();
    }
  }
  
  window.showMilestoneView = function() {
    if (currentProject) {
      currentView = 'milestones';
      currentMilestone = null;
      console.log('🎯 Returning to milestone view for:', currentProject.name);
      renderEvidenceExplorer();
    }
  }
  
  function getCurrentProject() {
    if (!currentDepartment || !currentProject) {
      console.warn('🚫 getCurrentProject: No current department or project');
      return null;
    }
    
    console.log('🔍 getCurrentProject: Looking for project:', currentProject);
    console.log('🔍 Current department:', currentDepartment);
    console.log('🔍 Available departments data:', window.departmentsData?.length || 0);
    
    const department = window.departmentsData?.find(d => d.id === currentDepartment.id) || departmentsData?.find(d => d.id === currentDepartment.id);
    
    if (!department) {
      console.warn('🚫 getCurrentProject: Department not found');
      return null;
    }
    
    console.log(`🔍 Found department: ${department.name} with ${department.projects.length} projects`);
    
    const project = department.projects.find(p => p.id === currentProject.id);
    
    if (project) {
      console.log('🎯 getCurrentProject returning project:', {
        name: project.name,
        id: project.id,
        milestonesCount: project.milestones?.length || 0,
        milestones: project.milestones?.map(m => ({ id: m.id, title: m.title, status: m.status })) || []
      });
    } else {
      console.warn('🚫 getCurrentProject: Project not found in department');
    }
    
    return project || null;
  }
  
  function updateBreadcrumb() {
    const breadcrumb = document.getElementById('currentPath');
    let path = 'Root';
    
    if (currentDepartment) {
      path = currentDepartment.name;
      if (currentProject) {
        path += ` → ${currentProject.name}`;
        if (currentMilestone) {
          path += ` → ${currentMilestone.name}`;
        }
      }
    }
    
    breadcrumb.textContent = path;
  }
  
  // Generate mock data for demo
  function generateMockDepartments() {
    return [
      {
        id: 'meo',
        name: 'Municipal Engineer Office',
        description: 'Infrastructure and engineering projects',
        projectCount: 5,
        fileCount: 45,
        projects: [
          {
            id: 'road1',
            name: 'Road Improvement Project',
            description: 'Barangay road construction and improvement',
            status: 'ongoing',
            progress: 65,
            milestoneCount: 4,
            fileCount: 15,
            milestones: [
              {
                id: 'mile1',
                title: 'Planning Phase',
                description: 'Initial planning and design',
                status: 'completed',
                dueDate: '2024-06-01',
                documentCount: 5,
                photoCount: 8,
                videoCount: 2,
                audioCount: 0
              }
            ]
          }
        ]
      },
      {
        id: 'menro',
        name: 'Municipal Environment and Natural Resources Office',
        description: 'Environmental protection and natural resource management',
        projectCount: 3,
        fileCount: 28,
        projects: []
      },
      {
        id: 'mdrrmo',
        name: 'Municipal Disaster and Risk Reduction Management Office',
        description: 'Disaster preparedness and risk management',
        projectCount: 2,
        fileCount: 15,
        projects: []
      },
      {
        id: 'mao',
        name: 'Municipal Agriculturist\'s Office',
        description: 'Agricultural development programs',
        projectCount: 4,
        fileCount: 32,
        projects: []
      },
      {
        id: 'mswdo',
        name: 'Municipal Social Welfare and Development Office',
        description: 'Social services and community programs',
        projectCount: 6,
        fileCount: 28,
        projects: []
      }
    ];
  }
  
  function setupDragAndDrop() {
    const dropZone = document.getElementById('dropZone');
    
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      document.addEventListener(eventName, preventDefaults, false);
    });

    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }

    ['dragenter', 'dragover'].forEach(eventName => {
      document.addEventListener(eventName, () => {
        dropZone.classList.remove('hidden');
      }, false);
    });

    ['dragleave', 'drop'].forEach(eventName => {
      document.addEventListener(eventName, () => {
        dropZone.classList.add('hidden');
      }, false);
    });

    document.addEventListener('drop', handleDrop, false);
  }

  function handleDrop(e) {
    const dt = e.dataTransfer;
    const files = dt.files;
    handleFiles(files);
  }

  function handleFileSelect(e) {
    const files = e.target.files;
    handleFiles(files);
  }

  function handleFiles(files) {
    uploadedFiles = Array.from(files);
    displaySelectedFiles();
    showUploadModal();
  }

  function displaySelectedFiles() {
    const container = document.getElementById('fileList');
    const uploadBtn = document.getElementById('uploadBtn');
    
    if (uploadedFiles.length === 0) {
      container.innerHTML = '';
      uploadBtn.disabled = true;
      return;
    }

    uploadBtn.disabled = false;
    
    container.innerHTML = uploadedFiles.map((file, index) => `
      <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
        <div class="flex items-center gap-3">
          <span class="text-2xl">${getFileIcon(file.name)}</span>
          <div>
            <p class="text-sm font-medium text-gray-900">${file.name}</p>
            <p class="text-xs text-gray-500">${formatFileSize(file.size)}</p>
          </div>
        </div>
        <button onclick="removeFile(${index})" class="text-red-500 hover:text-red-700">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `).join('');
  }

  function getFileIcon(filename) {
    const ext = filename.toLowerCase().split('.').pop();
    if (['jpg', 'jpeg', 'png', 'gif'].includes(ext)) return '🖼️';
    if (['mp4', 'avi', 'mov'].includes(ext)) return '🎥';
    if (['pdf'].includes(ext)) return '📄';
    if (['doc', 'docx'].includes(ext)) return '📝';
    if (['xls', 'xlsx'].includes(ext)) return '📊';
    return '📄';
  }

  function removeFile(index) {
    uploadedFiles.splice(index, 1);
    displaySelectedFiles();
  }

  // Modal Functions
  function showUploadModal() {
    document.getElementById('uploadModal').classList.remove('hidden');
  }

  function closeUploadModal() {
    document.getElementById('uploadModal').classList.add('hidden');
    uploadedFiles = [];
    document.getElementById('fileInput').value = '';
    document.getElementById('fileList').innerHTML = '';
    document.getElementById('uploadBtn').disabled = true;
  }

  async function startUpload() {
    if (uploadedFiles.length === 0) return;

    const progressContainer = document.getElementById('uploadProgress');
    const progressBar = document.getElementById('uploadBar');
    const progressPercent = document.getElementById('uploadPercent');
    
    progressContainer.classList.remove('hidden');
    
    // Simulate upload progress
    let progress = 0;
    const interval = setInterval(() => {
      progress += Math.random() * 15;
      if (progress > 100) {
        progress = 100;
        clearInterval(interval);
        
        // Add uploaded files to the system
        uploadedFiles.forEach(file => {
          const newFile = {
            id: `file-${Date.now()}-${Math.random()}`,
            name: file.name,
            type: getFileTypeFromName(file.name),
            size: file.size,
            department: document.getElementById('uploadDepartment').value || 'General',
            project: document.getElementById('uploadProject').value || 'Unassigned',
            milestone: document.getElementById('uploadMilestone').value || 'General',
            uploader: 'Current User',
            uploadDate: new Date().toISOString(),
            status: 'pending',
            accessLevel: document.getElementById('uploadAccessLevel').value || 'private',
            tags: document.getElementById('uploadTags').value.split(',').map(t => t.trim()).filter(Boolean),
            icon: getFileIcon(file.name),
            color: getFileTypeFromName(file.name) === 'document' ? 'blue' : getFileTypeFromName(file.name) === 'photo' ? 'green' : 'purple',
            url: `#${file.name}`,
            thumbnailUrl: getFileTypeFromName(file.name) === 'photo' ? `https://picsum.photos/200/150?random=${Date.now()}` : null
          };
          
          allFiles.unshift(newFile);
        });
        
        filteredFiles = [...allFiles];
        updateStatistics();
        renderEvidenceExplorer();
        
        showToast('Files uploaded successfully!', 'success');
        closeUploadModal();
      }
      
      progressBar.style.width = `${progress}%`;
      progressPercent.textContent = `${Math.round(progress)}%`;
    }, 200);
  }

  function getFileTypeFromName(filename) {
    const ext = filename.toLowerCase().split('.').pop();
    if (['jpg', 'jpeg', 'png', 'gif'].includes(ext)) return 'photo';
    if (['mp4', 'avi', 'mov'].includes(ext)) return 'video';
    return 'document';
  }

  // File Actions
  function toggleFileSelection(fileId) {
    if (selectedFiles.has(fileId)) {
      selectedFiles.delete(fileId);
    } else {
      selectedFiles.add(fileId);
    }
    renderEvidenceExplorer();
  }

  function updateBulkActionButtons() {
    const downloadZipBtn = document.getElementById('downloadZipBtn');
    if (selectedFiles.size > 0) {
      downloadZipBtn.style.display = 'flex';
    } else {
      downloadZipBtn.style.display = 'none';
    }
  }

  function previewFile(fileId) {
    const file = allFiles.find(f => f.id === fileId);
    if (!file) return;

    const modal = document.getElementById('previewModal');
    const title = document.getElementById('previewTitle');
    const info = document.getElementById('previewInfo');
    const content = document.getElementById('previewContent');
    const version = document.getElementById('previewVersion');
    const uploader = document.getElementById('previewUploader');
    const date = document.getElementById('previewDate');
    
    title.textContent = file.name;
    info.textContent = `${formatFileSize(file.size)} • ${file.department} • ${file.project} • ${file.milestone}`;
    version.textContent = `v${file.version || '1.0'}`;
    uploader.textContent = `Uploaded by ${file.uploader}`;
    date.textContent = formatDate(file.uploadDate);
    
    // Store current file for version history
    window.currentPreviewFile = file;
    
    // Show modal
    modal.classList.remove('hidden');
    
    // Generate preview content based on file type
    if (file.type === 'photo') {
      content.innerHTML = `<img src="${file.thumbnailUrl || 'https://picsum.photos/800/600?random=' + file.id}" alt="${file.name}" class="max-w-full max-h-full object-contain rounded-lg">`;
    } else if (file.type === 'video') {
      content.innerHTML = `
        <video controls class="max-w-full max-h-full rounded-lg">
          <source src="${file.url}" type="video/mp4">
          Your browser does not support the video tag.
        </video>
      `;
    } else if (file.type === 'audio') {
      content.innerHTML = `
        <div class="text-center py-12">
          <div class="icon-container bg-gradient-to-br from-orange-500 to-orange-600 mx-auto mb-6">
            <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.536 8.464a5 5 0 010 7.072m2.828-9.9a9 9 0 010 12.728M5.586 15H4a1 1 0 01-1-1v-4a1 1 0 011-1h1.586l4.707-4.707C10.923 3.663 12 4.109 12 5v14c0 .891-1.077 1.337-1.707.707L5.586 15z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-medium text-gray-900 mb-4">${file.name}</h3>
          <audio controls class="mx-auto mb-4">
            <source src="${file.url}" type="audio/mpeg">
            Your browser does not support the audio element.
          </audio>
        </div>
      `;
    } else {
      content.innerHTML = `
        <div class="text-center py-12">
          <span class="text-6xl mb-4 block">${file.icon}</span>
          <h3 class="text-lg font-medium text-gray-900 mb-2">${file.name}</h3>
          <p class="text-gray-500 mb-4">Preview not available for this file type</p>
          <button onclick="downloadFile('${file.id}')" class="enhanced-button primary">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Download File
          </button>
        </div>
      `;
    }
  }
  
  function showFileVersionHistory() {
    if (!window.currentPreviewFile) return;
    
    const modal = document.getElementById('versionHistoryModal');
    const fileName = document.getElementById('versionHistoryFileName');
    const content = document.getElementById('versionHistoryContent');
    
    fileName.textContent = window.currentPreviewFile.name;
    
    // Generate mock version history
    const versions = [
      {
        version: '2.0',
        uploader: 'John Doe',
        date: '2024-06-15',
        notes: 'Updated with latest progress photos',
        isCurrent: true
      },
      {
        version: '1.1',
        uploader: 'Jane Smith',
        date: '2024-06-10',
        notes: 'Added additional documentation',
        isCurrent: false
      },
      {
        version: '1.0',
        uploader: 'Bob Johnson',
        date: '2024-06-01',
        notes: 'Initial upload',
        isCurrent: false
      }
    ];
    
    const html = `
      <div class="space-y-4">
        ${versions.map(version => `
          <div class="border border-gray-200 rounded-lg p-4 ${version.isCurrent ? 'bg-sky-50 border-sky-300' : ''}">
            <div class="flex items-center justify-between mb-2">
              <div class="flex items-center gap-3">
                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                  version.isCurrent ? 'bg-sky-100 text-sky-800' : 'bg-gray-100 text-gray-800'
                }">
                  v${version.version} ${version.isCurrent ? '(Current)' : ''}
                </span>
                <span class="text-sm text-gray-600">by ${version.uploader}</span>
                <span class="text-sm text-gray-500">${formatDate(version.date)}</span>
              </div>
              <div class="flex items-center gap-2">
                ${!version.isCurrent ? `
                  <button onclick="restoreVersion('${version.version}')" class="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded hover:bg-blue-200">
                    Restore
                  </button>
                ` : ''}
                <button onclick="downloadVersion('${version.version}')" class="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded hover:bg-gray-200">
                  Download
                </button>
                <button onclick="previewVersion('${version.version}')" class="text-xs bg-green-100 text-green-700 px-2 py-1 rounded hover:bg-green-200">
                  Preview
                </button>
              </div>
            </div>
            <p class="text-sm text-gray-600">${version.notes}</p>
          </div>
        `).join('')}
      </div>
    `;
    
    content.innerHTML = html;
    modal.classList.remove('hidden');
  }
  
  function closeVersionHistoryModal() {
    document.getElementById('versionHistoryModal').classList.add('hidden');
  }
  
  function restoreVersion(version) {
    if (confirm(`Are you sure you want to restore to version ${version}? This will create a new version.`)) {
      showToast(`Version ${version} restored successfully`, 'success');
      closeVersionHistoryModal();
    }
  }
  
  function downloadVersion(version) {
    showToast(`Downloading version ${version}...`, 'success');
  }
  
  function previewVersion(version) {
    showToast(`Previewing version ${version}`, 'info');
  }
  
  function showVersionHistory() {
    showToast('Global version history coming soon!', 'info');
  }

  function closePreviewModal() {
    document.getElementById('previewModal').classList.add('hidden');
  }

  function downloadFile(fileId) {
    const file = allFiles.find(f => f.id === fileId);
    if (!file) return;
    
    showToast(`Downloading ${file.name}...`, 'success');
    // In a real implementation, this would trigger an actual download
  }

  function shareFile(fileId) {
    const file = allFiles.find(f => f.id === fileId);
    if (!file) return;
    
    showToast(`Share functionality for ${file.name} coming soon!`, 'info');
  }

  function deleteFile(fileId) {
    if (!confirm('Are you sure you want to delete this file? This action cannot be undone.')) {
      return;
    }
    
    allFiles = allFiles.filter(f => f.id !== fileId);
    filteredFiles = filteredFiles.filter(f => f.id !== fileId);
    selectedFiles.delete(fileId);
    
    updateStatistics();
    renderEvidenceExplorer();
    showToast('File deleted successfully', 'success');
  }

  // Filter and Search Functions
  function applyFilters() {
    const search = document.getElementById('globalSearch').value.toLowerCase();
    const department = document.getElementById('departmentFilter').value;
    const fileType = document.getElementById('fileTypeFilter').value;
    const status = document.getElementById('statusFilter').value;
    const dateRange = document.getElementById('dateFilter').value;
    
    filteredFiles = allFiles.filter(file => {
      const matchesSearch = !search || 
        file.name.toLowerCase().includes(search) ||
        file.tags.some(tag => tag.toLowerCase().includes(search)) ||
        file.uploader.toLowerCase().includes(search);
      
      const matchesDepartment = !department || file.department === department;
      const matchesFileType = !fileType || file.type === fileType;
      const matchesStatus = !status || file.status === status;
      
      let matchesDate = true;
      if (dateRange) {
        const fileDate = new Date(file.uploadDate);
        const now = new Date();
        
        switch (dateRange) {
          case 'today':
            matchesDate = fileDate.toDateString() === now.toDateString();
            break;
          case 'week':
            const weekAgo = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);
            matchesDate = fileDate >= weekAgo;
            break;
          case 'month':
            const monthAgo = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);
            matchesDate = fileDate >= monthAgo;
            break;
          // Add more date ranges as needed
        }
      }
      
      return matchesSearch && matchesDepartment && matchesFileType && matchesStatus && matchesDate;
    });
    
    renderEvidenceExplorer();
  }

  function clearAllFilters() {
    document.getElementById('globalSearch').value = '';
    document.getElementById('departmentFilter').value = '';
    document.getElementById('fileTypeFilter').value = '';
    document.getElementById('statusFilter').value = '';
    document.getElementById('dateFilter').value = '';
    
    filteredFiles = [...allFiles];
    renderEvidenceExplorer();
    showToast('All filters cleared', 'success');
  }

  function filterByType(type) {
    document.getElementById('fileTypeFilter').value = type === 'all' ? '' : type;
    applyFilters();
  }

  function filterByStatus(status) {
    document.getElementById('statusFilter').value = status;
    applyFilters();
  }

  // Make other functions globally accessible
  window.toggleView = function(viewType) {
    currentView = viewType;
    
    const departmentsBtn = document.getElementById('departmentsViewBtn');
    const gridBtn = document.getElementById('gridViewBtn');
    const listBtn = document.getElementById('listViewBtn');
    
    // Reset all button styles
    [departmentsBtn, gridBtn, listBtn].forEach(btn => {
      if (btn) btn.classList.remove('bg-sky-100', 'text-sky-600');
    });
    
    // Set active button style
    if (viewType === 'departments' && departmentsBtn) {
      departmentsBtn.classList.add('bg-sky-100', 'text-sky-600');
    } else if (viewType === 'grid' && gridBtn) {
      gridBtn.classList.add('bg-sky-100', 'text-sky-600');
    } else if (viewType === 'list' && listBtn) {
      listBtn.classList.add('bg-sky-100', 'text-sky-600');
    }
    
    console.log('🔄 View changed to:', viewType);
    renderEvidenceExplorer();
  }

  window.refreshFiles = function() {
    console.log('🔄 Refreshing files...');
    loadInitialData();
    showToast('Evidence files refreshed successfully', 'success');
  }

  window.showVersionHistory = function() {
    showToast('Global version history coming soon!', 'info');
  }

  // Update summary cards with real data
  function updateSummaryCards() {
    if (!window.departmentsData || !window.allFiles) {
      console.log('📊 Data not loaded yet, skipping summary cards update');
      return;
    }

    // Calculate totals
    const totalFiles = window.allFiles.length;
    const totalDepartments = window.departmentsData.length;
    const totalProjects = window.departmentsData.reduce((acc, dept) => acc + dept.projects.length, 0);
    const totalMilestones = window.departmentsData.reduce((acc, dept) => 
      acc + dept.projects.reduce((projAcc, proj) => projAcc + (proj.milestones?.length || 0), 0), 0
    );

    // Calculate project status counts
    let delayedProjects = 0;
    let ongoingProjects = 0;
    let completedProjects = 0;

    window.departmentsData.forEach(dept => {
      dept.projects.forEach(project => {
        const status = getActualStatus(project);
        switch (status) {
          case 'delayed':
            delayedProjects++;
            break;
          case 'ongoing':
            ongoingProjects++;
            break;
          case 'completed':
            completedProjects++;
            break;
        }
      });
    });

    // Calculate storage used (estimate based on file count)
    const averageFileSize = 2.5; // MB average
    const storageUsed = Math.round(totalFiles * averageFileSize);

    // Get last updated time
    const now = new Date();
    const lastUpdateTime = now.toLocaleDateString();

    // Update the DOM elements
    const updateElement = (id, value) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    };

    updateElement('totalFiles', totalFiles);
    updateElement('totalDepartments', totalDepartments);
    updateElement('totalProjects', totalProjects);
    updateElement('totalMilestones', totalMilestones);
    updateElement('storageUsed', `${storageUsed} MB`);
    updateElement('lastUpdateTime', lastUpdateTime);
    updateElement('delayedProjects', delayedProjects);
    updateElement('ongoingProjects', ongoingProjects);
    updateElement('completedProjects', completedProjects);

    console.log('📊 Summary cards updated:', {
      totalFiles,
      totalDepartments,
      totalProjects,
      totalMilestones,
      delayedProjects,
      ongoingProjects,
      completedProjects,
      storageUsed: `${storageUsed} MB`
    });
  }

  window.loadInitialData = function() {
    loadInitialData().then(() => {
      updateSummaryCards(); // Update summary cards after data loads
    });
  }

  // Bulk Actions
  function toggleBulkActions() {
    showToast('Bulk actions panel coming soon!', 'info');
  }

  function downloadSelectedAsZip() {
    if (selectedFiles.size === 0) {
      showToast('Please select files to download', 'error');
      return;
    }
    
    const selectedFileNames = Array.from(selectedFiles).map(id => {
      const file = allFiles.find(f => f.id === id);
      return file ? file.name : '';
    }).filter(Boolean);
    
    showToast(`Preparing ZIP download for ${selectedFileNames.length} files...`, 'success');
    // In a real implementation, this would create and download a ZIP file
  }

  // Department/Project Management
  async function loadProjectsForDepartment() {
    const deptSelect = document.getElementById('uploadDepartment');
    const projectSelect = document.getElementById('uploadProject');
    const milestoneSelect = document.getElementById('uploadMilestone');
    
    // Clear dependent dropdowns
    projectSelect.innerHTML = '<option value="">Select Project</option>';
    milestoneSelect.innerHTML = '<option value="">Select Milestone</option>';
    
    if (!deptSelect.value || !window.departmentsData) return;
    
    const department = window.departmentsData.find(d => d.name === deptSelect.value);
    if (department && department.projects) {
      department.projects.forEach(project => {
        const option = document.createElement('option');
        option.value = project.name;
        option.textContent = project.name;
        projectSelect.appendChild(option);
      });
    }
  }

  function loadMilestonesForProject() {
    const deptSelect = document.getElementById('uploadDepartment');
    const projectSelect = document.getElementById('uploadProject');
    const milestoneSelect = document.getElementById('uploadMilestone');
    
    // Clear milestone dropdown
    milestoneSelect.innerHTML = '<option value="">Select Milestone</option>';
    
    if (!deptSelect.value || !projectSelect.value || !window.departmentsData) return;
    
    const department = window.departmentsData.find(d => d.name === deptSelect.value);
    if (department) {
      const project = department.projects.find(p => p.name === projectSelect.value);
      if (project && project.milestones) {
        project.milestones.forEach(milestone => {
          const option = document.createElement('option');
          option.value = milestone;
          option.textContent = milestone;
          milestoneSelect.appendChild(option);
        });
      }
    }
  }

  // Utility Functions
  function refreshFiles() {
    loadInitialData();
    showToast('Files refreshed successfully', 'success');
  }

  function exportAllData() {
    showToast('Data export functionality coming soon!', 'info');
  }

  function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    const toastIcon = document.getElementById('toastIcon');
    
    toastMessage.textContent = message;
    
    if (type === 'success') {
      toastIcon.innerHTML = '<svg class="w-5 h-5 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
    } else if (type === 'error') {
      toastIcon.innerHTML = '<svg class="w-5 h-5 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path></svg>';
    } else {
      toastIcon.innerHTML = '<svg class="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>';
    }
    
    toast.classList.remove('hidden');
    
    setTimeout(() => {
      toast.classList.add('hidden');
    }, 3000);
  }
  
  // Progress bar animation functions
  function animateProgressBars() {
    const progressBars = document.querySelectorAll('.progress-bar-fill');
    
    progressBars.forEach(bar => {
      const progress = parseFloat(bar.getAttribute('data-progress')) || 0;
      const colorClass = bar.getAttribute('data-progress-color') || 'bg-gray-500';
      
      // Apply the color class
      bar.className = bar.className.replace(/bg-\w+-\d+/, '');
      bar.classList.add(colorClass);
      
      // Set the progress width
      bar.style.setProperty('--progress-width', `${progress}%`);
      
      // Reset and start animation
      bar.style.animation = 'none';
      bar.offsetHeight; // Trigger reflow
      bar.style.animation = 'fillProgress 2s ease-out forwards';
    });
  }
  
  // Intersection Observer for scroll-triggered animation
  function setupProgressAnimation() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const progressBar = entry.target.querySelector('.progress-bar-fill');
          if (progressBar) {
            const progress = parseFloat(progressBar.getAttribute('data-progress')) || 0;
            const colorClass = progressBar.getAttribute('data-progress-color') || 'bg-gray-500';
            
            // Apply the color class
            progressBar.className = progressBar.className.replace(/bg-\w+-\d+/, '');
            progressBar.classList.add(colorClass);
            
            // Set the progress width
            progressBar.style.setProperty('--progress-width', `${progress}%`);
            
            // Reset and start animation
            progressBar.style.animation = 'none';
            progressBar.offsetHeight; // Trigger reflow
            progressBar.style.animation = 'fillProgress 2s ease-out forwards';
          }
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });
    
    // Observe all project cards
    const projectCards = document.querySelectorAll('.project-card');
    projectCards.forEach(card => observer.observe(card));
  }
  
  // Initialize progress animation when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(setupProgressAnimation, 100);
    });
  } else {
    setTimeout(setupProgressAnimation, 100);
  }
  
  // Also run on window load for any dynamically loaded content
  window.addEventListener('load', () => {
    setTimeout(setupProgressAnimation, 200);
  });
  
  // Export functions to global scope
  window.setupProgressAnimation = setupProgressAnimation;
  window.animateProgressBars = animateProgressBars;
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style> 