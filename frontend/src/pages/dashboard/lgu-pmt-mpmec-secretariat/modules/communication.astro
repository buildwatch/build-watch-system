export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import SecretariatLayout from '../../../../components/SecretariatLayout.astro';
---

<Layout title="MPMEC Communication | MPMEC Secretariat">
  <SecretariatLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Secretariat Communication Hub</h1>
          <p class="text-gray-600">Manage communications with MPMEC and Implementing Office Officers</p>
        </div>
        <div class="flex items-center gap-3">
          <button id="composeMessageBtn" class="px-4 py-2 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Compose Message
          </button>
          <button id="sendReportBtn" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Send Report
          </button>
        </div>
      </div>

      <!-- Communication Type Tabs -->
      <div class="flex space-x-1 bg-gray-100 p-1 rounded-lg mb-6">
        <button id="unifiedTab" class="flex-1 py-2 px-4 rounded-md bg-white text-gray-700 font-medium shadow-sm">
          All Communications
        </button>
      </div>

      <!-- Communication Statistics -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Total Messages</p>
              <p class="text-2xl font-bold text-blue-600" id="totalMessages">0</p>
            </div>
            <div class="bg-blue-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Unread Messages</p>
              <p class="text-2xl font-bold text-red-600" id="unreadMessages">0</p>
            </div>
            <div class="bg-red-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Reports Sent</p>
              <p class="text-2xl font-bold text-green-600" id="reportsSent">0</p>
            </div>
            <div class="bg-green-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Pending Responses</p>
              <p class="text-2xl font-bold text-yellow-600" id="pendingResponses">0</p>
            </div>
            <div class="bg-yellow-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Unified Communications Content -->
      <div id="unifiedContent" class="communication-content">
        <!-- Chat Interface -->
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
          <!-- All Contacts List -->
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-xl font-semibold text-gray-800">All Contacts</h2>
              <button id="addContactBtn" class="px-3 py-1 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-colors text-sm">
                Add Contact
              </button>
            </div>
            
            <!-- Search All Contacts -->
            <div class="relative mb-4">
              <input type="text" id="contactSearch" placeholder="Search contacts..." class="w-full pl-10 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FE5353] focus:border-transparent">
              <svg class="absolute left-3 top-2.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            
            <!-- All Contacts List -->
            <div class="space-y-2 max-h-96 overflow-y-auto" id="allContactsList">
              <!-- All contacts will be loaded here -->
            </div>
          </div>

          <!-- Chat Area -->
          <div class="lg:col-span-2 bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <div class="flex items-center justify-between mb-6">
              <h2 class="text-xl font-semibold text-gray-800" id="chatHeader">Select a contact to start chatting</h2>
              <button id="refreshChatBtn" class="px-3 py-2 bg-gray-100 text-gray-700 rounded-lg hover:bg-gray-200 transition-colors" title="Refresh chat">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
              </button>
            </div>
            
            <!-- Chat Messages -->
            <div class="space-y-4 mb-4 max-h-96 overflow-y-auto" id="chatMessages">
              <div class="text-center py-8 text-gray-500">
                <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                </svg>
                <p class="text-lg font-medium">No conversation selected</p>
                <p class="text-sm">Choose a contact from the left to start messaging</p>
              </div>
            </div>
            
            <!-- Message Input -->
            <div class="flex items-center gap-3">
              <div class="flex-1 relative">
                <input type="text" id="messageInput" placeholder="Type your message..." class="w-full pr-12 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#FE5353] focus:border-transparent">
                <button id="sendMessageBtn" class="absolute right-2 top-1/2 transform -translate-y-1/2 text-[#FE5353] hover:text-[#E54545]">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                  </svg>
                </button>
              </div>
              <button id="attachFileBtn" class="px-3 py-3 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.172 7l-6.586 6.586a2 2 0 102.828 2.828l6.414-6.586a4 4 0 00-5.656-5.656l-6.415 6.585a6 6 0 108.486 8.486L20.5 13"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      </div>
    </section>
  </SecretariatLayout>
</Layout>

<!-- Compose Message Modal -->
<div id="composeModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-xl shadow-xl max-w-2xl w-full">
      <div class="p-6 border-b border-gray-200">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-gray-900">Compose Message</h3>
          <button id="closeComposeModalBtn" class="text-gray-400 hover:text-gray-600">
            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>
      
      <form id="composeForm" class="p-6 space-y-4">
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Recipient</label>
          <select id="recipientId" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FE5353] focus:border-transparent" required>
            <option value="">Select MPMEC member...</option>
          </select>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Subject</label>
          <input type="text" id="subject" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FE5353] focus:border-transparent" required>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
          <select id="category" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FE5353] focus:border-transparent" required>
            <option value="general">General</option>
            <option value="report">Report</option>
            <option value="feedback">Feedback</option>
            <option value="request">Request</option>
            <option value="alert">Alert</option>
            <option value="meeting">Meeting</option>
          </select>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
          <select id="priority" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FE5353] focus:border-transparent" required>
            <option value="low">Low</option>
            <option value="medium" selected>Medium</option>
            <option value="high">High</option>
            <option value="urgent">Urgent</option>
          </select>
        </div>
        
        <div>
          <label class="block text-sm font-medium text-gray-700 mb-1">Message</label>
          <textarea id="message" rows="6" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#FE5353] focus:border-transparent" required></textarea>
        </div>
        
        <div class="flex items-center gap-4">
          <label class="flex items-center">
            <input type="checkbox" id="isImportant" class="h-4 w-4 text-[#FE5353] focus:ring-[#FE5353] border-gray-300 rounded">
            <span class="ml-2 text-sm text-gray-700">Mark as important</span>
          </label>
          <label class="flex items-center">
            <input type="checkbox" id="requestAcknowledgment" class="h-4 w-4 text-[#FE5353] focus:ring-[#FE5353] border-gray-300 rounded">
            <span class="ml-2 text-sm text-gray-700">Request acknowledgment</span>
          </label>
        </div>
        
        <div class="flex gap-3 pt-4">
          <button type="submit" class="flex-1 px-4 py-2 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-colors">
            Send Message
          </button>
                      <button type="button" id="cancelComposeBtn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">
            Cancel
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Message Detail Modal -->
<div id="messageModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden z-50">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white rounded-xl shadow-xl max-w-4xl w-full max-h-[90vh] overflow-y-auto">
      <div class="p-6 border-b border-gray-200">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold text-gray-900" id="messageTitle">Message Details</h3>
          <div class="flex items-center gap-2">
            <button id="replyToMessageBtn" class="px-3 py-1 text-sm bg-[#FE5353] text-white rounded hover:bg-[#E54545]">Reply</button>
            <button id="closeMessageModalBtn" class="text-gray-400 hover:text-gray-600">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>
      
      <div class="p-6" id="messageContent">
        <!-- Message content will be loaded here -->
      </div>
    </div>
  </div>
</div>

<!-- Toast Notification -->
<div id="toast" class="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 z-50">
  <div class="flex items-center gap-2">
    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
    </svg>
    <span id="toastMessage">Success!</span>
  </div>
</div>

<script>
  // Initialize the communication module
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Secretariat Communication Hub loaded!');
    
    // Get current user info
    const userData = localStorage.getItem('user');
    if (userData) {
      currentUser = JSON.parse(userData);
      console.log('Current user:', currentUser);
    }
    
    // Load unified communication data
    loadUnifiedCommunicationData();
    
    // Set up event listeners
    setupUnifiedEventListeners();
    
    // Set up periodic refresh
    setInterval(loadUnifiedCommunicationData, 30000); // Refresh every 30 seconds
  });

  // Unified data loading function
  async function loadUnifiedCommunicationData() {
    try {
      console.log('🔄 Loading unified communication data...');
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('❌ No authentication token found');
        return;
      }
      
      // Load all available users (both MPMEC and Implementing Office)
      const contactsResponse = await fetch('/api/communications/users/available', {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Cache-Control': 'no-cache'
        }
      });

      if (contactsResponse.ok) {
        const data = await contactsResponse.json();
        console.log('📊 All available users:', data.users);
        
        // Filter users: include both MPMEC (LGU-PMT) and Implementing Office (LGU-IU) users
        // Exclude current user from contacts
        const allUsers = data.users.filter(user => 
          (user.role === 'LGU-PMT' && user.subRole && user.subRole.toLowerCase().includes('mpmec')) ||
          user.role === 'LGU-IU'
        ).filter(user => user.id !== currentUser.id);
        
        console.log('✅ Filtered contacts:', allUsers);
        console.log('📈 Total contacts found:', allUsers.length);
        
        // Store for later use
        availableUsers = allUsers;
        
        // Load communications
        const communicationsResponse = await fetch(`/api/communications?limit=1000&_t=${Date.now()}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Cache-Control': 'no-cache'
          }
        });

        if (communicationsResponse.ok) {
          const commData = await communicationsResponse.json();
          console.log('💬 Communications loaded:', commData.communications.length);
          
          // Update the unified contacts list
          updateUnifiedContactsList(allUsers, commData.communications);
          
          // Update statistics
          updateCommunicationStats(commData);
        }
      }
    } catch (error) {
      console.error('❌ Error loading unified communication data:', error);
    }
  }

  // Update unified contacts list with profile pictures
  function updateUnifiedContactsList(users, communications) {
    const contactsList = document.getElementById('allContactsList');
    if (!contactsList) {
      console.error('❌ allContactsList element not found');
      return;
    }
    
    console.log('🎯 Updating unified contacts list with', users.length, 'users');
    
    if (users.length > 0) {
      contactsList.innerHTML = users.map(user => {
        const unreadCount = getUnreadMessageCount(user.id, communications);
        const userInitials = user.name.split(' ').map(n => n[0]).join('').toUpperCase();
        const userType = user.role === 'LGU-PMT' ? 'MPMEC' : 'Implementing Office';
        const userColor = user.role === 'LGU-PMT' ? 'bg-[#FE5353]' : 'bg-blue-500';
        
        return `
          <div class="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors contact-item" data-contact-id="${user.id}" data-contact-type="${user.role}">
            <div class="w-10 h-10 ${userColor} rounded-full flex items-center justify-center relative chat-head-container" data-user-id="${user.id}" data-user-email="${user.email}">
              <img class="w-full h-full rounded-full object-cover chat-head-image" style="display: none;" alt="${user.name}" />
              <span class="text-white font-medium chat-head-fallback">${userInitials}</span>
              ${unreadCount > 0 ? `<div class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold">${unreadCount}</div>` : ''}
            </div>
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-800">${user.name}</p>
              <p class="text-xs text-gray-600">${userType} • ${user.subRole || user.role}</p>
            </div>
            <div class="w-3 h-3 bg-green-500 rounded-full"></div>
          </div>
        `;
      }).join('');
      
      // ✅ CRITICAL: Load actual profile pictures for all contacts
      setTimeout(() => {
        loadChatHeadProfilePictures(users, 'unified');
      }, 100);
      
      // Set up contact click handlers
      setupContactClickHandlers(users, communications);
    } else {
      contactsList.innerHTML = `
        <div class="text-center py-8 text-gray-500">
          <svg class="w-8 h-8 mx-auto mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
          </svg>
          <p class="text-sm">No contacts available</p>
        </div>
      `;
    }
  }

  // Set up contact click handlers
  function setupContactClickHandlers(users, communications) {
    document.querySelectorAll('.contact-item').forEach(item => {
      item.addEventListener('click', () => {
        const contactId = item.dataset.contactId;
        const contact = users.find(u => u.id === contactId);
        
        if (contact) {
          // Highlight selected contact
          document.querySelectorAll('.contact-item').forEach(c => c.classList.remove('bg-gray-100'));
          item.classList.add('bg-gray-100');
          
          // Load conversation with this contact
          loadConversationWithContact(contactId, contact, communications);
        }
      });
    });
  }

  // Load conversation with selected contact
  async function loadConversationWithContact(contactId, contact, communications) {
    try {
      console.log('💬 Loading conversation with:', contact.name);
      
      // Update chat header
      const chatHeader = document.getElementById('chatHeader');
      if (chatHeader) {
        const userType = contact.role === 'LGU-PMT' ? 'MPMEC' : 'Implementing Office';
        chatHeader.textContent = `Chat with ${contact.name} (${userType})`;
      }
      
      // Filter messages for this conversation
      const conversationMessages = communications.filter(msg => {
        const isFromContact = msg.senderId === contactId && msg.recipientId === currentUser.id;
        const isToContact = msg.senderId === currentUser.id && msg.recipientId === contactId;
        return isFromContact || isToContact;
      });
      
      console.log('📝 Conversation messages:', conversationMessages.length);
      
      // Sort messages by creation time (oldest first)
      conversationMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
      
      // Update chat messages
      updateChatMessages(conversationMessages);
      
      // Store selected contact for sending messages
      selectedContactId = contactId;
      
    } catch (error) {
      console.error('❌ Error loading conversation:', error);
    }
  }

  // Set up unified event listeners
  function setupUnifiedEventListeners() {
    // Compose message button
    document.getElementById('composeMessageBtn')?.addEventListener('click', composeMessage);
    
    // Send report button
    document.getElementById('sendReportBtn')?.addEventListener('click', sendWeeklyReport);
    
    // Refresh chat button
    document.getElementById('refreshChatBtn')?.addEventListener('click', loadUnifiedCommunicationData);
    
    // Send message button
    document.getElementById('sendMessageBtn')?.addEventListener('click', sendQuickMessage);
    
    // Message input enter key
    document.getElementById('messageInput')?.addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        sendQuickMessage();
      }
    });
    
    // Attach file button
    document.getElementById('attachFileBtn')?.addEventListener('click', () => {
      console.log('📎 Attach file functionality - to be implemented');
    });
    
    // Add contact button
    document.getElementById('addContactBtn')?.addEventListener('click', () => {
      console.log('👤 Add contact functionality - to be implemented');
    });
    
    // Search functionality
    document.getElementById('contactSearch')?.addEventListener('input', (e) => {
      const searchTerm = e.target.value.toLowerCase();
      document.querySelectorAll('.contact-item').forEach(item => {
        const name = item.querySelector('.text-gray-800').textContent.toLowerCase();
        const role = item.querySelector('.text-gray-600').textContent.toLowerCase();
        const matches = name.includes(searchTerm) || role.includes(searchTerm);
        item.style.display = matches ? 'flex' : 'none';
      });
    });
    
    // Modal close handlers
    document.getElementById('closeComposeModalBtn')?.addEventListener('click', closeComposeModal);
    document.getElementById('composeModal')?.addEventListener('click', (e) => {
      if (e.target.id === 'composeModal') {
        closeComposeModal();
      }
    });
    
    // Form submission
    document.getElementById('composeForm')?.addEventListener('submit', handleComposeSubmit);
  }

  // Global variables for unified system
  let currentUser = {};
  let availableUsers = [];
  let selectedContactId = null;

  // Send quick message function
  async function sendQuickMessage() {
    if (!selectedContactId) {
      showToast('Please select a contact first', 'error');
      return;
    }
    
    const messageInput = document.getElementById('messageInput');
    const message = messageInput.value.trim();
    
    if (!message) {
      showToast('Please enter a message', 'error');
      return;
    }
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          recipientId: selectedContactId,
          message: message,
          subject: 'Quick Message',
          category: 'general'
        })
      });
      
      if (response.ok) {
        messageInput.value = '';
        showToast('Message sent successfully');
        
        // Refresh the conversation
        setTimeout(() => {
          loadUnifiedCommunicationData();
        }, 500);
      } else {
        showToast('Failed to send message', 'error');
      }
    } catch (error) {
      console.error('Error sending message:', error);
      showToast('Error sending message', 'error');
    }
  }

  // Legacy variables (keeping for compatibility with existing functions)
  let mpmecUsers = [];

  // Function to calculate unread message count for a specific contact
  function getUnreadMessageCount(contactId, communications) {
    // Get the contact name from the DOM
    const contactElement = document.querySelector(`[data-contact-id="${contactId}"]`);
    let contactName = '';
    if (contactElement) {
      const nameElement = contactElement.querySelector('p');
      if (nameElement) {
        contactName = nameElement.textContent;
      }
    }
    
    // Find the contact user ID from available users
    const contactUser = availableUsers.find(user => user.name === contactName);
    if (!contactUser) {
      console.log(`Secretariat - Contact user not found for unread count: ${contactName}`);
      return 0;
    }
    
    const unreadMessages = communications.filter(msg => 
      msg.recipientId === currentUser.id && 
      msg.senderId === contactUser.id && 
      !msg.isRead
    );
    
    console.log(`Secretariat - getUnreadMessageCount for contact ${contactName} (${contactUser.id}):`);
    console.log(`Secretariat - Total communications: ${communications.length}`);
    console.log(`Secretariat - Unread messages: ${unreadMessages.length}`);
    console.log(`Secretariat - Current user ID: ${currentUser.id}`);
    console.log(`Secretariat - Sample unread messages:`, unreadMessages.slice(0, 3));
    
    return unreadMessages.length;
  }

  document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      window.location.href = '/login/lgu-pmt';
      return;
    }
    
    try {
      currentUser = JSON.parse(userData);
      if (currentUser.role !== 'LGU-PMT' || !currentUser.subRole || !currentUser.subRole.toLowerCase().includes('secretariat')) {
        window.location.href = '/login/lgu-pmt';
        return;
      }
    } catch (error) {
      console.error('Error parsing user data:', error);
      window.location.href = '/login/lgu-pmt';
    }

    // Initialize communication data
    loadCommunicationData();
    loadAvailableUsers();
    
    // Set initial tab and ensure proper content visibility
    switchTab('mpmec');
    
    // Ensure MPMEC content is visible and Implementing Office content is hidden
    const mpmecContent = document.getElementById('mpmecContent');
    const implementingContent = document.getElementById('implementingContent');
    
    if (mpmecContent) {
      mpmecContent.classList.remove('hidden');
    }
    if (implementingContent) {
      implementingContent.classList.add('hidden');
    }
    
    // Don't auto-select any contact initially
    
    // Setup event listeners
    setupEventListeners();
    
    // Set up periodic refresh and notification checking
    // Temporarily disabled to fix contact switching issue
    // setInterval(loadCommunicationData, 30000); // Refresh every 30 seconds
    // setInterval(checkForNewNotifications, 10000); // Check notifications every 10 seconds
    // setInterval(refreshCurrentChat, 5000); // Refresh current chat every 5 seconds
    // setInterval(() => {
    //   if (currentTab === 'mpmec' && selectedMPMECContactId) {
    //     loadMPMECConversationWithContact(selectedMPMECContactId);
    //   }
    // }, 15000); // Refresh MPMEC chat every 15 seconds
  });
  
  function setupEventListeners() {
    // Tab switching
    document.getElementById('mpmecTab')?.addEventListener('click', () => switchTab('mpmec'));
    document.getElementById('implementingTab')?.addEventListener('click', () => switchTab('implementing'));
    
    // Action buttons
    document.getElementById('composeMessageBtn')?.addEventListener('click', composeMessage);
    document.getElementById('sendReportBtn')?.addEventListener('click', sendReport);
    
    // Quick action buttons
    document.getElementById('sendWeeklyReportBtn')?.addEventListener('click', sendWeeklyReport);
    document.getElementById('requestFeedbackBtn')?.addEventListener('click', requestFeedback);
    document.getElementById('scheduleMeetingBtn')?.addEventListener('click', scheduleMeeting);
    document.getElementById('sendAlertBtn')?.addEventListener('click', sendAlert);
    
    // Modal buttons
    document.getElementById('closeComposeModalBtn')?.addEventListener('click', closeComposeModal);
    document.getElementById('cancelComposeBtn')?.addEventListener('click', closeComposeModal);
    document.getElementById('replyToMessageBtn')?.addEventListener('click', () => replyToMessage());
    document.getElementById('closeMessageModalBtn')?.addEventListener('click', closeMessageModal);
    
    // Chat functionality for Implementing Office Communications
    document.getElementById('sendMessageBtn')?.addEventListener('click', sendChatMessage);
    document.getElementById('addContactBtn')?.addEventListener('click', addContact);
    document.getElementById('refreshContactsBtn')?.addEventListener('click', () => {
      console.log('Secretariat - Manual refresh contacts button clicked');
      loadImplementingOfficeData();
    });
    
    // Enter key functionality for message input
    const messageInput = document.getElementById('messageInput');
    if (messageInput) {
      messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          sendChatMessage();
        }
      });
    }

    // MPMEC Chat functionality
    document.getElementById('sendMPMECMessageBtn')?.addEventListener('click', sendMPMECChatMessage);
    document.getElementById('addMPMECContactBtn')?.addEventListener('click', addMPMECContact);
    document.getElementById('refreshMPMECChatBtn')?.addEventListener('click', () => {
      console.log('Secretariat - Manual MPMEC refresh button clicked');
      if (selectedMPMECContactId) {
        loadMPMECConversationWithContact(selectedMPMECContactId);
      } else {
        forceRefreshMPMECData();
      }
    });
    
    // Enter key functionality for MPMEC message input
    const mpmecMessageInput = document.getElementById('mpmecMessageInput');
    if (mpmecMessageInput) {
      mpmecMessageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          sendMPMECChatMessage();
        }
      });
    }

    // Structured communication buttons
    document.getElementById('projectCommBtn')?.addEventListener('click', () => composeStructuredMessage('project'));
    document.getElementById('policyFeedbackBtn')?.addEventListener('click', () => composeStructuredMessage('policy'));
    document.getElementById('budgetDiscussionsBtn')?.addEventListener('click', () => composeStructuredMessage('budget'));
    document.getElementById('complianceNotificationsBtn')?.addEventListener('click', () => composeStructuredMessage('compliance'));
    document.getElementById('trainingAnnouncementsBtn')?.addEventListener('click', () => composeStructuredMessage('training'));
    document.getElementById('documentReviewsBtn')?.addEventListener('click', () => composeStructuredMessage('document'));
    document.getElementById('composeStructuredBtn')?.addEventListener('click', () => composeStructuredMessage('general'));
    
    // Event delegation for dynamically created buttons
    document.addEventListener('click', function(e) {
      if (e.target.classList.contains('view-message-btn')) {
        const messageId = e.target.getAttribute('data-message-id');
        viewMessage(messageId);
      } else if (e.target.classList.contains('reply-message-btn')) {
        const messageId = e.target.getAttribute('data-message-id');
        replyToMessage(messageId);
      } else if (e.target.classList.contains('view-sent-message-btn')) {
        const messageId = e.target.getAttribute('data-message-id');
        viewSentMessage(messageId);
      } else if (e.target.classList.contains('view-history-item-btn')) {
        const messageId = e.target.getAttribute('data-message-id');
        viewHistoryItem(messageId);
      } else if (e.target.classList.contains('contact-item') || e.target.closest('.contact-item')) {
        const contactItem = e.target.classList.contains('contact-item') ? e.target : e.target.closest('.contact-item');
        const contactId = contactItem.getAttribute('data-contact-id');
        selectContact(contactId);
      } else if (e.target.classList.contains('mpmec-contact-item') || e.target.closest('.mpmec-contact-item')) {
        const contactItem = e.target.classList.contains('mpmec-contact-item') ? e.target : e.target.closest('.mpmec-contact-item');
        const contactId = contactItem.getAttribute('data-contact-id');
        selectMPMECContact(contactId);
      } else if (e.target.id === 'refreshChatBtn' || e.target.closest('#refreshChatBtn')) {
        console.log('Secretariat - Manual refresh button clicked');
        refreshCurrentChat();
      }
    });
  }

  async function loadCommunicationData() {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/communications?limit=1000&_t=${Date.now()}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Cache-Control': 'no-cache'
        }
      });

      if (response.ok) {
        const data = await response.json();
        communications = data.communications;
        
        try {
          updateCommunicationStats(data);
          // updateInboxMessages(); // Removed - container doesn't exist
          updateSentMessages();
          updateCommunicationHistory();
        } catch (error) {
          console.error('Error updating communication UI:', error);
        }
      } else {
        console.error('Failed to load communications');
      }
    } catch (error) {
      console.error('Error loading communications:', error);
    }
  }

  async function loadAvailableUsers() {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications/users/available', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        availableUsers = data.users || [];
        updateRecipientOptions();
      }
    } catch (error) {
      console.error('Error loading available users:', error);
      availableUsers = [];
    }
  }

  async function loadImplementingOfficeData() {
    try {
      const token = localStorage.getItem('token');
      let implementingOfficeUsers = [];
      
      // Load Implementing Office users as contacts
      const contactsResponse = await fetch('/api/communications/users/available', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (contactsResponse.ok) {
        const data = await contactsResponse.json();
        console.log('Secretariat - Implementing Office available users:', data.users);
        implementingOfficeUsers = data.users.filter(user => user.role === 'LGU-IU');
        console.log('Secretariat - Filtered Implementing Office users:', implementingOfficeUsers);
        console.log('Secretariat - Implementing Office users count:', implementingOfficeUsers.length);
      }

      // Load communications with Implementing Office users
      const communicationsResponse = await fetch(`/api/communications?limit=1000&_t=${Date.now()}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Cache-Control': 'no-cache'
        }
      });

      if (communicationsResponse.ok) {
        const data = await communicationsResponse.json();
        const implementingCommunications = data.communications.filter(msg => 
          msg.sender?.role === 'LGU-IU' || msg.recipient?.role === 'LGU-IU'
        );
        
        // Update contacts list with notification counts
        const contactsList = document.getElementById('contactsList');
        console.log('Secretariat - Implementing Office contacts list element:', contactsList);
        console.log('Secretariat - About to populate Implementing Office contacts, count:', implementingOfficeUsers.length);
        if (implementingOfficeUsers.length > 0) {
          contactsList.innerHTML = implementingOfficeUsers.map(user => {
            const unreadCount = getUnreadMessageCount(user.id, implementingCommunications);
            console.log(`Secretariat - Contact ${user.name} (${user.id}) unread count:`, unreadCount);
            const userInitials = user.name.split(' ').map(n => n[0]).join('').toUpperCase();
            
            return `
              <div class="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors contact-item" data-contact-id="${user.id}">
                <div class="w-10 h-10 bg-[#FE5353] rounded-full flex items-center justify-center relative chat-head-container" data-user-id="${user.id}" data-user-email="${user.email}">
                  <img class="w-full h-full rounded-full object-cover chat-head-image" style="display: none;" alt="${user.name}" />
                  <span class="text-white font-medium chat-head-fallback">${userInitials}</span>
                  ${unreadCount > 0 ? `<div class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold">${unreadCount}</div>` : ''}
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-gray-800">${user.name}</p>
                  <p class="text-xs text-gray-600">${user.subRole || user.role}</p>
                </div>
                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              </div>
            `;
          }).join('');
          
          // ✅ CRITICAL: Load actual profile pictures for all Implementing Office chat heads
          setTimeout(() => {
            loadChatHeadProfilePictures(implementingOfficeUsers, 'implementing');
          }, 100);
        } else {
          contactsList.innerHTML = `
            <div class="text-center py-8 text-gray-500">
              <svg class="w-8 h-8 mx-auto mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
              <p class="text-sm">No Implementing Office contacts available</p>
            </div>
          `;
        }
        
        // Update recent messages (show all recent Implementing Office communications)
        updateRecentMessages(implementingCommunications);
        
        // Don't automatically select any contact - let user choose
        if (implementingOfficeUsers.length > 0) {
          // Only preserve if already selected, don't auto-select first
          const currentSelectedContact = document.querySelector('.contact-item.bg-gray-100');
          if (currentSelectedContact && selectedContactId) {
            const contactStillExists = implementingOfficeUsers.some(user => user.id === selectedContactId);
            if (contactStillExists) {
              // Re-highlight without reloading
              document.querySelectorAll('.contact-item').forEach(item => {
                item.classList.remove('bg-gray-100');
              });
              const selectedItem = document.querySelector(`[data-contact-id="${selectedContactId}"]`);
              if (selectedItem) {
                selectedItem.classList.add('bg-gray-100');
              }
            }
          }
          // Don't auto-select first contact - let user click to select
        } else {
          updateChatMessages([]);
        }
      }
    } catch (error) {
      console.error('Error loading Implementing Office data:', error);
    }
  }

  function updateChatMessages(messages) {
    console.log('Secretariat - updateChatMessages called with:', messages?.length, 'messages');
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) {
      console.error('Secretariat - chatMessages element not found');
      return;
    }
    
    if (messages && messages.length > 0) {
      console.log('Secretariat - Rendering', messages.length, 'messages');
      const renderedHTML = messages.map((message, index) => {
        const isIncoming = message.recipientId === currentUser.id;
        const senderName = message.sender?.name || 'Unknown';
        const senderInitials = senderName.split(' ').map(n => n[0]).join('').toUpperCase();
        const messageContent = message.message || '';
        const messageTime = new Date(message.createdAt).toLocaleTimeString();
        
        console.log(`Secretariat - Message ${index + 1}:`, {
          content: messageContent,
          sender: senderName,
          time: messageTime,
          isIncoming: isIncoming
        });
        
        return isIncoming ? (
          `<div class="flex items-start gap-3">
            <div class="w-8 h-8 bg-[#FE5353] rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-white text-xs font-medium">${senderInitials}</span>
            </div>
            <div class="flex-1">
              <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
                <p class="text-sm text-gray-800">${messageContent}</p>
              </div>
              <p class="text-xs text-gray-500 mt-1">${messageTime}</p>
            </div>
          </div>`
        ) : (
          `<div class="flex items-start gap-3 justify-end">
            <div class="flex-1 text-right">
              <div class="bg-[#FE5353] text-white rounded-lg p-3 max-w-xs ml-auto">
                <p class="text-sm">${messageContent}</p>
              </div>
              <p class="text-xs text-gray-500 mt-1">${messageTime}</p>
            </div>
            <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-white text-xs font-medium">MS</span>
            </div>
          </div>`
        );
      }).join('');
      
      console.log('Secretariat - Setting innerHTML with', renderedHTML.length, 'characters');
      chatMessages.innerHTML = renderedHTML;
      
      // Scroll to bottom to show latest messages
      chatMessages.scrollTop = chatMessages.scrollHeight;
      console.log('Secretariat - Scrolled to bottom, scrollTop:', chatMessages.scrollTop, 'scrollHeight:', chatMessages.scrollHeight);
    } else {
      chatMessages.innerHTML = `
        <div class="text-center py-8 text-gray-500">
          <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
          <p class="text-lg font-medium">No messages yet</p>
          <p class="text-sm">Start a conversation with Implementing Office Officers</p>
        </div>
      `;
    }
  }

  function updateRecentMessages(messages) {
    const recentMessagesList = document.getElementById('recentMessagesList');
    if (!recentMessagesList) {
      console.error('Secretariat - recentMessagesList element not found');
      return;
    }
    
    if (messages && messages.length > 0) {
      const recentMessages = messages.slice(0, 3);
      recentMessagesList.innerHTML = recentMessages.map(message => {
        const senderName = message.sender?.name || 'Unknown';
        const senderInitials = senderName.split(' ').map(n => n[0]).join('').toUpperCase();
        const messageContent = message.message || '';
        const messageTime = new Date(message.createdAt).toLocaleString();
        
        return `
          <div class="flex items-center gap-3 p-3 border border-gray-200 rounded-lg">
            <div class="w-10 h-10 bg-[#FE5353] rounded-full flex items-center justify-center">
              <span class="text-white font-medium">${senderInitials}</span>
            </div>
            <div class="flex-1">
              <p class="text-sm font-medium text-gray-800">${senderName}</p>
              <p class="text-xs text-gray-600">${messageContent.substring(0, 50)}${messageContent.length > 50 ? '...' : ''}</p>
            </div>
            <div class="text-xs text-gray-500">${messageTime}</div>
          </div>
        `;
      }).join('');
    } else {
      recentMessagesList.innerHTML = `
        <div class="text-center py-8 text-gray-500">
          <p class="text-sm">No recent messages</p>
        </div>
      `;
    }
  }

  // Chat functionality for Implementing Office Communications
  // Note: selectedContactId is already declared in the unified system above

  // Function to mark messages as read
  async function markMessagesAsRead(contactId) {
    try {
      console.log('Secretariat - Attempting to mark messages as read for contact:', contactId);
      console.log('Secretariat - Current user ID:', currentUser.id);
      
      // Get the contact name from the DOM
      const contactElement = document.querySelector(`[data-contact-id="${contactId}"]`);
      let contactName = '';
      if (contactElement) {
        const nameElement = contactElement.querySelector('p');
        if (nameElement) {
          contactName = nameElement.textContent;
          console.log('Secretariat - Contact name for mark as read:', contactName);
        }
      }
      
      // Find the contact user ID from available users
      const contactUser = availableUsers.find(user => user.name === contactName);
      if (!contactUser) {
        console.error('Secretariat - Contact user not found for mark as read:', contactName);
        return;
      }
      
      console.log('Secretariat - Using contact user ID for mark as read:', contactUser.id);
      
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications/mark-read', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          senderId: contactUser.id,
          recipientId: currentUser.id,
          userId: currentUser.id
        })
      });

      console.log('Secretariat - Mark as read response status:', response.status);
      
      if (response.ok) {
        const result = await response.json();
        console.log('Secretariat - Messages marked as read result:', result);
        // Refresh the data to update notification badges
        if (currentTab === 'mpmec') {
          await loadMPMECData();
        } else if (currentTab === 'implementing') {
          await loadImplementingOfficeData();
        }
      } else {
        const errorData = await response.json();
        console.error('Secretariat - Failed to mark messages as read:', errorData);
      }
    } catch (error) {
      console.error('Secretariat - Error marking messages as read:', error);
    }
  }

  async function selectContact(contactId) {
    // Mark messages from this contact as read
    await markMessagesAsRead(contactId);
    
    selectedContactId = contactId;
    console.log('Secretariat - Selected contact:', contactId);
    console.log('Secretariat - selectedContactId set to:', selectedContactId);
    
    // Highlight selected contact
    document.querySelectorAll('.contact-item').forEach(item => {
      item.classList.remove('bg-gray-100');
    });
    
    const selectedItem = document.querySelector(`[data-contact-id="${contactId}"]`);
    if (selectedItem) {
      selectedItem.classList.add('bg-gray-100');
    }
    
    // Load conversation with the selected contact
    loadConversationWithContact(contactId);
  }

  async function sendChatMessage() {
    const messageInput = document.getElementById('messageInput');
    const sendButton = document.getElementById('sendMessageBtn');
    const message = messageInput.value.trim();
    
    if (!message) return;
    
    console.log('Secretariat - Attempting to send message:', message);
    console.log('Secretariat - Current tab:', currentTab);
    console.log('Secretariat - selectedContactId:', selectedContactId);
    console.log('Secretariat - selectedMPMECContactId:', selectedMPMECContactId);
    
    // Check which tab is active and use the appropriate contact ID
    let recipientId = null;
    let reloadFunction = null;
    
    if (currentTab === 'mpmec') {
      // MPMEC tab is active
      recipientId = selectedMPMECContactId;
      reloadFunction = () => loadMPMECConversationWithContact(selectedMPMECContactId);
      if (!recipientId) {
        console.error('No MPMEC contact selected');
        alert('Please select an MPMEC contact first');
        return;
      }
    } else if (currentTab === 'implementing') {
      // Implementing Office tab is active
      // Get the contact name and find the user ID
      const contactElement = document.querySelector(`[data-contact-id="${selectedContactId}"]`);
      let contactName = '';
      if (contactElement) {
        const nameElement = contactElement.querySelector('p');
        if (nameElement) {
          contactName = nameElement.textContent;
        }
      }
      
      // Find the contact user ID from available users
      const contactUser = availableUsers.find(user => user.name === contactName);
      if (!contactUser) {
        console.error('Contact user not found for sending message:', contactName);
        alert('Contact not found. Please try again.');
        return;
      }
      
      recipientId = contactUser.id;
      reloadFunction = () => loadConversationWithContact(selectedContactId);
      if (!recipientId) {
        console.error('No Implementing Office contact selected');
        alert('Please select an Implementing Office contact first');
        return;
      }
    } else {
      console.error('No active tab found');
      return;
    }
    
    console.log('Secretariat - Using recipientId:', recipientId);
    
    // Disable input and show sending state
    messageInput.disabled = true;
    if (sendButton) {
      sendButton.style.opacity = '0.5';
      sendButton.style.pointerEvents = 'none';
    }
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          subject: 'Message from Secretariat',
          message: message,
          category: 'general',
          priority: 'medium',
          recipientId: recipientId,
          isImportant: false,
          requestAcknowledgment: false
        })
      });

      if (response.ok) {
        messageInput.value = '';
        console.log('Secretariat - Message sent successfully');
        // Wait a moment for backend to process, then reload conversation
        setTimeout(async () => {
          if (reloadFunction) {
            console.log('Secretariat - Reloading conversation after sending message');
            // Force reload with cache busting
            await reloadFunction();
            // Also reload all communications to ensure fresh data
            await loadCommunicationData();
            // Force another reload after a short delay to ensure the new message appears
            setTimeout(async () => {
              console.log('Secretariat - Second reload to ensure new message appears');
              await reloadFunction();
            }, 500);
          }
        }, 1000);
      } else {
        const errorData = await response.json();
        console.error('Failed to send message:', errorData.error || 'Unknown error');
        alert('Failed to send message: ' + (errorData.error || 'Unknown error'));
      }
    } catch (error) {
      console.error('Error sending message:', error);
      alert('Error sending message: ' + error.message);
    } finally {
      // Re-enable input and button
      messageInput.disabled = false;
      if (sendButton) {
        sendButton.style.opacity = '1';
        sendButton.style.pointerEvents = 'auto';
      }
    }
  }

  function addContact() {
    console.log('Add contact functionality - to be implemented');
    // This could open a modal to add new contacts
  }

  // MPMEC Chat functionality
  let selectedMPMECContactId = null;

  async function loadMPMECData() {
    console.log('Secretariat - Simple data load like MPMEC module');
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('Secretariat - No authentication token found');
        return;
      }
      
      // Simple API call like MPMEC module
      const contactsResponse = await fetch('/api/communications/users/available', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (contactsResponse.ok) {
        const data = await contactsResponse.json();
        console.log('Secretariat - Available users:', data.users);
        
        mpmecUsers = data.users.filter(user => 
          user.role === 'LGU-PMT' && 
          user.subRole && 
          user.subRole.toLowerCase().includes('mpmec') &&
          user.id !== currentUser.id // Exclude current user from contacts
        );
        
        console.log('Secretariat - Filtered MPMEC users:', mpmecUsers);
        console.log('Secretariat - MPMEC users count:', mpmecUsers.length);
        console.log('Secretariat - Current user ID:', currentUser.id);
        
        // Store MPMEC users for later use
        availableUsers = data.users;
      }

      // Simple communications API call like MPMEC module
      const communicationsResponse = await fetch(`/api/communications?limit=1000&_t=${Date.now()}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Cache-Control': 'no-cache'
        }
      });

      if (communicationsResponse.ok) {
        const data = await communicationsResponse.json();
        console.log('Secretariat - All communications loaded:', data.communications.length);
        
        // Only show communications between Secretariat and MPMEC users
        const mpmecCommunications = data.communications.filter(msg => {
          // Check if current user (Secretariat) is involved in this communication
          const isCurrentUserInvolved = msg.senderId === currentUser.id || msg.recipientId === currentUser.id;
          
          if (!isCurrentUserInvolved) {
            return false;
          }
          
          // Check if the other party is MPMEC
          const otherPartyId = msg.senderId === currentUser.id ? msg.recipientId : msg.senderId;
          const otherParty = msg.senderId === currentUser.id ? msg.recipient : msg.sender;
          
          const isOtherPartyMPMEC = otherParty?.role === 'LGU-PMT' && 
                                   otherParty?.subRole && 
                                   otherParty?.subRole.toLowerCase().includes('mpmec');
          
          const isRelevant = isCurrentUserInvolved && isOtherPartyMPMEC;
          
          if (isRelevant) {
            console.log('Secretariat - Found MPMEC communication:', {
              id: msg.id,
              senderId: msg.senderId,
              recipientId: msg.recipientId,
              senderRole: msg.sender?.role,
              senderSubRole: msg.sender?.subRole,
              recipientRole: msg.recipient?.role,
              recipientSubRole: msg.recipient?.subRole,
              message: msg.message,
              createdAt: msg.createdAt,
              isIncoming: msg.recipientId === currentUser.id
            });
          }
          
          return isRelevant;
        });
        
        console.log('Secretariat - Filtered MPMEC communications:', mpmecCommunications.length);
        
        // Update MPMEC contacts list with notification counts
        const mpmecContactsList = document.getElementById('mpmecContactsList');
        console.log('Secretariat - MPMEC contacts list element:', mpmecContactsList);
        console.log('Secretariat - About to populate MPMEC contacts, count:', mpmecUsers.length);
        if (mpmecUsers.length > 0) {
          mpmecContactsList.innerHTML = mpmecUsers.map(user => {
            const unreadCount = getUnreadMessageCount(user.id, mpmecCommunications);
            console.log(`Secretariat - MPMEC Contact ${user.name} (${user.id}) unread count:`, unreadCount);
            const userInitials = user.name.split(' ').map(n => n[0]).join('').toUpperCase();
            
            return `
              <div class="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-50 cursor-pointer transition-colors mpmec-contact-item" data-contact-id="${user.id}">
                <div class="w-10 h-10 bg-[#FE5353] rounded-full flex items-center justify-center relative chat-head-container" data-user-id="${user.id}" data-user-email="${user.email}">
                  <img class="w-full h-full rounded-full object-cover chat-head-image" style="display: none;" alt="${user.name}" />
                  <span class="text-white font-medium chat-head-fallback">${userInitials}</span>
                  ${unreadCount > 0 ? `<div class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center font-bold">${unreadCount}</div>` : ''}
                </div>
                <div class="flex-1">
                  <p class="text-sm font-medium text-gray-800">${user.name}</p>
                  <p class="text-xs text-gray-600">${user.subRole || user.role}</p>
                </div>
                <div class="w-3 h-3 bg-green-500 rounded-full"></div>
              </div>
            `;
          }).join('');
          
          // ✅ CRITICAL: Load actual profile pictures for all MPMEC chat heads
          setTimeout(() => {
            loadChatHeadProfilePictures(mpmecUsers, 'mpmec');
          }, 100);
          
          // Auto-select the first MPMEC contact
          selectedMPMECContactId = mpmecUsers[0].id;
          console.log('Secretariat - Auto-selected MPMEC contact:', selectedMPMECContactId);
          
          // Highlight the first contact
          const firstContact = document.querySelector('.mpmec-contact-item');
          if (firstContact) {
            firstContact.classList.add('bg-gray-100');
          }
          
          // Load conversation with the auto-selected contact
          loadMPMECConversationWithContact(selectedMPMECContactId);
        } else {
          mpmecContactsList.innerHTML = `
            <div class="text-center py-8 text-gray-500">
              <svg class="w-8 h-8 mx-auto mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
              <p class="text-sm">No MPMEC members available</p>
            </div>
          `;
        }
        
        // Don't update chat messages here - let the conversation loading function handle it
        // updateMPMECChatMessages(mpmecCommunications);
        
        // Update MPMEC communication history
        updateMPMECHistory(mpmecCommunications);
      }
    } catch (error) {
      console.error('Error loading MPMEC data:', error);
    }
  }

  function selectMPMECContact(contactId) {
    selectedMPMECContactId = contactId;
    console.log('Selected MPMEC contact:', contactId);
    
    // Highlight selected contact
    document.querySelectorAll('.mpmec-contact-item').forEach(item => {
      item.classList.remove('bg-gray-100');
    });
    
    const selectedItem = document.querySelector(`[data-contact-id="${contactId}"]`);
    if (selectedItem) {
      selectedItem.classList.add('bg-gray-100');
    }
    
    // Load conversation with the selected MPMEC contact
    loadMPMECConversationWithContact(contactId);
  }

  async function loadMPMECConversationWithContact(contactId) {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/communications?limit=1000&_t=${Date.now()}`, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Cache-Control': 'no-cache'
        }
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Secretariat - All communications loaded:', data.communications.length);
        console.log('Secretariat - Current user ID:', currentUser.id);
        console.log('Secretariat - Selected MPMEC contact ID:', contactId);
        
        // Get the actual user ID of the selected MPMEC contact from the available users
        const selectedContact = availableUsers.find(user => user.id === contactId);
        let contactUserId = selectedContact?.id;
        
        console.log('Secretariat - Available users for MPMEC:', availableUsers);
        console.log('Secretariat - MPMEC contact ID to find:', contactId);
        console.log('Secretariat - Selected MPMEC contact:', selectedContact);
        console.log('Secretariat - MPMEC contact user ID:', contactUserId);
        
        // If contact not found in availableUsers, try to find by name
        if (!selectedContact) {
          console.log('Secretariat - MPMEC contact not found by ID, trying to find by name...');
          const contactElement = document.querySelector(`[data-contact-id="${contactId}"]`);
          if (contactElement) {
            const contactName = contactElement.querySelector('p').textContent;
            console.log('Secretariat - MPMEC contact name from DOM:', contactName);
            
            // Find user by name in availableUsers
            const contactByName = availableUsers.find(user => user.name === contactName);
            if (contactByName) {
              console.log('Secretariat - Found MPMEC contact by name:', contactByName);
              contactUserId = contactByName.id;
            }
          }
        }
        
        // Filter messages for the specific MPMEC conversation with the selected contact
        console.log('Secretariat - Filtering messages with:');
        console.log('  - Current user ID:', currentUser.id);
        console.log('  - Contact user ID:', contactUserId);
        console.log('  - Total messages to filter:', data.communications.length);
        
        // Log all messages first to see what we're working with
        console.log('Secretariat - All messages details:');
        data.communications.forEach((msg, index) => {
          console.log(`Secretariat - Message ${index + 1}:`, {
            id: msg.id,
            senderId: msg.senderId,
            recipientId: msg.recipientId,
            senderName: msg.sender?.name,
            recipientName: msg.recipient?.name,
            message: msg.message?.substring(0, 50) + '...',
            createdAt: msg.createdAt
          });
        });
        
        const conversationMessages = data.communications.filter(msg => {
          const isMatch = (msg.senderId === currentUser.id && msg.recipientId === contactUserId) ||
                         (msg.senderId === contactUserId && msg.recipientId === currentUser.id);
          
          console.log(`Secretariat - Message ${msg.id}: senderId=${msg.senderId}, recipientId=${msg.recipientId}, isMatch=${isMatch}`);
          
          if (isMatch) {
            console.log('Secretariat - Found matching MPMEC message:', msg);
          } else {
            console.log('Secretariat - Message NOT matching:', {
              id: msg.id,
              senderId: msg.senderId,
              recipientId: msg.recipientId,
              currentUser: currentUser.id,
              contactUser: contactUserId,
              reason: `senderId (${msg.senderId}) !== currentUser (${currentUser.id}) OR recipientId (${msg.recipientId}) !== contactUser (${contactUserId})`
            });
          }
          return isMatch;
        });
        
        console.log('Secretariat - Filtered MPMEC conversation messages:', conversationMessages.length);
        
        // Sort messages by creation time (oldest first)
        conversationMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
        
        // Update MPMEC chat messages with the filtered conversation
        updateMPMECChatMessages(conversationMessages);
        
        // Update chat header to show selected contact name
        updateMPMECChatHeader(contactId);
      }
    } catch (error) {
      console.error('Error loading MPMEC conversation:', error);
    }
  }

  function updateMPMECChatMessages(messages) {
    const mpmecChatMessages = document.getElementById('mpmecChatMessages');
    if (!mpmecChatMessages) {
      console.error('Secretariat - mpmecChatMessages element not found');
      return;
    }
    
    if (messages && messages.length > 0) {
      mpmecChatMessages.innerHTML = messages.map(message => {
        const isIncoming = message.recipientId === currentUser.id;
        const senderName = message.sender?.name || 'Unknown';
        const senderInitials = senderName.split(' ').map(n => n[0]).join('').toUpperCase();
        const messageContent = message.message || '';
        const messageTime = new Date(message.createdAt).toLocaleTimeString();
        const senderId = message.sender?.id || 'unknown';
        const senderEmail = message.sender?.email || '';
        
        return isIncoming ? (
          `<div class="flex items-start gap-3">
            <div class="w-8 h-8 bg-[#FE5353] rounded-full flex items-center justify-center flex-shrink-0 chat-message-head" data-user-id="${senderId}" data-user-email="${senderEmail}">
              <img class="w-full h-full rounded-full object-cover chat-message-image" style="display: none;" alt="${senderName}" />
              <span class="text-white text-xs font-medium chat-message-fallback">${senderInitials}</span>
            </div>
            <div class="flex-1">
              <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
                <p class="text-sm text-gray-800">${messageContent}</p>
              </div>
              <p class="text-xs text-gray-500 mt-1">${messageTime}</p>
            </div>
          </div>`
        ) : (
          `<div class="flex items-start gap-3 justify-end">
            <div class="flex-1 text-right">
              <div class="bg-[#FE5353] text-white rounded-lg p-3 max-w-xs ml-auto">
                <p class="text-sm">${messageContent}</p>
              </div>
              <p class="text-xs text-gray-500 mt-1">${messageTime}</p>
            </div>
            <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-white text-xs font-medium">MS</span>
            </div>
          </div>`
        );
      }).join('');
      
      // ✅ CRITICAL: Load profile pictures for MPMEC chat message heads
      setTimeout(() => {
        loadChatMessageProfilePictures(messages);
      }, 50);
    } else {
      mpmecChatMessages.innerHTML = `
        <div class="text-center py-8 text-gray-500">
          <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
          <p class="text-lg font-medium">No messages yet</p>
          <p class="text-sm">Start a conversation with MPMEC members</p>
        </div>
      `;
    }
  }

  function updateMPMECChatHeader(contactId) {
    // Find the contact name from the contacts list
    const contactItem = document.querySelector(`[data-contact-id="${contactId}"]`);
    if (contactItem) {
      const contactName = contactItem.querySelector('p').textContent;
      const mpmecChatMessages = document.getElementById('mpmecChatMessages');
      if (mpmecChatMessages) {
        const chatHeader = mpmecChatMessages.previousElementSibling;
        if (chatHeader && chatHeader.querySelector('h2')) {
          chatHeader.querySelector('h2').textContent = `MPMEC Chat with ${contactName}`;
        }
      }
    }
  }

  async function sendMPMECChatMessage() {
    const messageInput = document.getElementById('mpmecMessageInput');
    const sendButton = document.getElementById('sendMPMECMessageBtn');
    const message = messageInput.value.trim();
    
    if (!message) return;
    
    if (!selectedMPMECContactId) {
      console.error('No MPMEC contact selected');
      return;
    }
    
    // Disable input and show sending state
    messageInput.disabled = true;
    if (sendButton) {
      sendButton.style.opacity = '0.5';
      sendButton.style.pointerEvents = 'none';
    }
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          subject: 'MPMEC Chat Message',
          message: message,
          category: 'general',
          priority: 'medium',
          recipientId: selectedMPMECContactId,
          isImportant: false,
          requestAcknowledgment: false
        })
      });

      if (response.ok) {
        messageInput.value = '';
        // Reload MPMEC conversation with the selected contact
        loadMPMECConversationWithContact(selectedMPMECContactId);
      } else {
        const errorData = await response.json();
        console.error('Failed to send MPMEC message:', errorData.error || 'Unknown error');
      }
    } catch (error) {
      console.error('Error sending MPMEC message:', error);
    } finally {
      // Re-enable input and button
      messageInput.disabled = false;
      if (sendButton) {
        sendButton.style.opacity = '1';
        sendButton.style.pointerEvents = 'auto';
      }
    }
  }

  function updateMPMECHistory(messages) {
    const mpmecHistoryTable = document.getElementById('mpmecHistoryTable');
    if (messages && messages.length > 0) {
      mpmecHistoryTable.innerHTML = messages.map(message => {
        const messageDate = new Date(message.createdAt).toLocaleDateString();
        const messageType = message.category || 'general';
        const messageSubject = message.subject || 'No subject';
        const messageStatus = message.status || 'sent';
        
        return `
          <tr>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${messageDate}</td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                ${messageType}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${messageSubject}</td>
            <td class="px-6 py-4 whitespace-nowrap">
              <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                messageStatus === 'sent' ? 'bg-green-100 text-green-800' :
                messageStatus === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                'bg-gray-100 text-gray-800'
              }">
                ${messageStatus}
              </span>
            </td>
            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
              <button onclick="viewMPMECMessage('${message.id}')" class="text-[#FE5353] hover:text-[#E54545]">View</button>
            </td>
          </tr>
        `;
      }).join('');
    } else {
      mpmecHistoryTable.innerHTML = `
        <tr>
          <td colspan="5" class="px-6 py-4 text-center text-gray-500">No MPMEC communications found</td>
        </tr>
      `;
    }
  }

  function loadMPMECCommunicationData() {
    loadMPMECData();
  }

  // Force refresh all MPMEC data
  async function forceRefreshMPMECData() {
    console.log('Secretariat - Force refreshing MPMEC data...');
    
    // Show loading state
    const refreshBtn = document.getElementById('refreshMPMECChatBtn');
    if (refreshBtn) {
      refreshBtn.innerHTML = `
        <svg class="w-4 h-4 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
      `;
      refreshBtn.disabled = true;
    }
    
    try {
      // Clear any cached data
      if (selectedMPMECContactId) {
        await loadMPMECConversationWithContact(selectedMPMECContactId);
      } else {
        await loadMPMECData();
      }
      
      // Also refresh the main communication data
      await loadCommunicationData();
      
      console.log('Secretariat - Force refresh completed');
      showToast('Chat refreshed successfully!', 'success');
    } catch (error) {
      console.error('Error refreshing MPMEC data:', error);
      showToast('Failed to refresh chat', 'error');
    } finally {
      // Restore button state
      if (refreshBtn) {
        refreshBtn.innerHTML = `
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
          </svg>
        `;
        refreshBtn.disabled = false;
      }
    }
  }

  function viewMPMECMessage(messageId) {
    // Implementation for viewing MPMEC message details
    console.log('View MPMEC message:', messageId);
  }

  function addMPMECContact() {
    console.log('Add MPMEC contact functionality - to be implemented');
    // This could open a modal to add new MPMEC contacts
  }

  function composeStructuredMessage(category) {
    console.log('Compose structured message for category:', category);
    
    // Open the compose modal with pre-filled category
    composeMessage();
    
    // Set the category based on the button clicked
    const categoryMap = {
      'project': 'project',
      'policy': 'policy',
      'budget': 'budget',
      'compliance': 'compliance',
      'training': 'training',
      'document': 'document',
      'general': 'general'
    };
    
    const categorySelect = document.getElementById('category');
    if (categorySelect && categoryMap[category]) {
      categorySelect.value = categoryMap[category];
    }
    
    // Set appropriate subject based on category
    const subjectInput = document.getElementById('subject');
    if (subjectInput) {
      const subjectMap = {
        'project': 'Project Discussion - ',
        'policy': 'Policy Feedback Request - ',
        'budget': 'Budget Discussion - ',
        'compliance': 'Compliance Update - ',
        'training': 'Training Announcement - ',
        'document': 'Document Review Request - ',
        'general': 'General Communication - '
      };
      subjectInput.value = subjectMap[category] || 'General Communication - ';
    }
    
    // Focus on the message field
    const messageInput = document.getElementById('message');
    if (messageInput) {
      messageInput.focus();
    }
  }

  async function refreshCurrentChat() {
    console.log('Secretariat - refreshCurrentChat called');
    console.log('Secretariat - Current tab:', currentTab);
    console.log('Secretariat - selectedContactId:', selectedContactId);
    console.log('Secretariat - selectedMPMECContactId:', selectedMPMECContactId);
    
    // Only refresh if we have a selected contact and are in the right tab
    if (currentTab === 'implementing' && selectedContactId) {
      console.log('Secretariat - Refreshing Implementing Office chat for contact:', selectedContactId);
      await loadConversationWithContact(selectedContactId);
    } else if (currentTab === 'mpmec' && selectedMPMECContactId) {
      console.log('Secretariat - Refreshing MPMEC chat for contact:', selectedMPMECContactId);
      await loadMPMECConversationWithContact(selectedMPMECContactId);
    } else {
      console.log('Secretariat - No contact selected or wrong tab, cannot refresh');
    }
  }

  async function loadConversationWithContact(contactId) {
    console.log('Secretariat - Loading conversation with contact:', contactId);
    console.log('Secretariat - contactId type:', typeof contactId);
    console.log('Secretariat - contactId value:', contactId);
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/communications?limit=1000&_t=${Date.now()}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const data = await response.json();
        console.log('Secretariat - All communications received:', data.communications.length);
        
        // Get the contact name from the DOM
        const contactElement = document.querySelector(`[data-contact-id="${contactId}"]`);
        let contactName = '';
        if (contactElement) {
          const nameElement = contactElement.querySelector('p');
          if (nameElement) {
            contactName = nameElement.textContent;
            console.log('Secretariat - Contact name from DOM:', contactName);
          }
        }
        
        // Filter messages by contact name instead of ID (more reliable)
        console.log('Secretariat - Filtering messages by contact name:', contactName);
        console.log('Secretariat - Current user name:', currentUser.name);
        
        const conversationMessages = data.communications.filter(msg => {
          const senderName = msg.sender?.name || '';
          const recipientName = msg.recipient?.name || '';
          
          // Check if this message is between current user and the selected contact
          const isMatch = (senderName === currentUser.name && recipientName === contactName) ||
                         (senderName === contactName && recipientName === currentUser.name);
          
          if (isMatch) {
            console.log('Secretariat - Found matching message:', {
              id: msg.id,
              sender: senderName,
              recipient: recipientName,
              message: msg.message?.substring(0, 50) + '...'
            });
          }
          
          return isMatch;
        });
        
        console.log('Secretariat - Filtered conversation messages:', conversationMessages.length);
        console.log('Secretariat - Conversation messages:', conversationMessages);
        
        // Sort messages by creation time (oldest first)
        conversationMessages.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
        
        // Update chat messages with the filtered conversation
        updateChatMessages(conversationMessages);
        
        // Update chat header to show selected contact name
        updateChatHeader(contactId);
      } else {
        console.error('Secretariat - Failed to load communications:', response.status);
      }
    } catch (error) {
      console.error('Error loading conversation:', error);
    }
  }

  function updateChatHeader(contactId) {
    // Find the contact name from the contacts list
    const contactItem = document.querySelector(`[data-contact-id="${contactId}"]`);
    if (contactItem) {
      const contactName = contactItem.querySelector('p').textContent;
      const chatHeader = document.querySelector('#chatMessages').previousElementSibling;
      if (chatHeader && chatHeader.querySelector('h2')) {
        chatHeader.querySelector('h2').textContent = `Chat with ${contactName}`;
      }
    }
  }

  function updateCommunicationStats(data) {
    // Filter communications based on current tab
    let filteredCommunications = communications;
    if (currentTab === 'mpmec') {
      filteredCommunications = communications.filter(msg => 
        (msg.sender?.role === 'LGU-PMT' && msg.sender?.subRole?.toLowerCase().includes('mpmec')) ||
        (msg.recipient?.role === 'LGU-PMT' && msg.recipient?.subRole?.toLowerCase().includes('mpmec'))
      );
    } else if (currentTab === 'implementing') {
      filteredCommunications = communications.filter(msg => 
        msg.sender?.role === 'LGU-IU' || msg.recipient?.role === 'LGU-IU'
      );
    }
    
    const totalMessages = filteredCommunications.length;
    const unreadMessages = filteredCommunications.filter(msg => 
      msg.recipientId === currentUser.id && !msg.isRead
    ).length;
    const reportsSent = filteredCommunications.filter(msg => 
      msg.senderId === currentUser.id && msg.category === 'report'
    ).length;
    const pendingResponses = filteredCommunications.filter(msg => 
      msg.senderId === currentUser.id && msg.requestAcknowledgment && !msg.acknowledgedAt
    ).length;
    
    document.getElementById('totalMessages').textContent = totalMessages;
    document.getElementById('unreadMessages').textContent = unreadMessages;
    document.getElementById('reportsSent').textContent = reportsSent;
    document.getElementById('pendingResponses').textContent = pendingResponses;
  }

  function updateInboxMessages() {
    const container = document.getElementById('inboxMessages');
    if (!container) {
      console.warn('Secretariat - inboxMessages container not found');
      return;
    }
    
    let filteredMessages = communications.filter(msg => msg.recipientId === currentUser.id);
    
    // Filter based on current tab
    if (currentTab === 'mpmec') {
      filteredMessages = filteredMessages.filter(msg => 
        msg.sender?.role === 'LGU-PMT' && msg.sender?.subRole?.toLowerCase().includes('mpmec')
      );
    } else if (currentTab === 'implementing') {
      filteredMessages = filteredMessages.filter(msg => 
        msg.sender?.role === 'LGU-IU'
      );
    }
    
    const inboxMessages = filteredMessages.slice(0, 5);

    container.innerHTML = inboxMessages.map(message => `
      <div class="border border-gray-200 rounded-lg p-3 ${!message.isRead ? 'bg-blue-50' : ''}">
        <div class="flex items-center justify-between mb-2">
          <h4 class="text-sm font-medium text-gray-800">${message.subject}</h4>
          ${!message.isRead ? '<span class="w-2 h-2 bg-blue-600 rounded-full"></span>' : ''}
        </div>
        <p class="text-xs text-gray-600 mb-1">From: ${message.sender?.name || 'Unknown'}</p>
        <p class="text-xs text-gray-500">${new Date(message.createdAt).toLocaleDateString()}</p>
        <div class="flex gap-2 mt-2">
          <button class="view-message-btn text-xs text-[#FE5353] hover:text-[#E54545]" data-message-id="${message.id}">View</button>
          <button class="reply-message-btn text-xs text-blue-600 hover:text-blue-800" data-message-id="${message.id}">Reply</button>
        </div>
      </div>
    `).join('');

    document.getElementById('inboxCount').textContent = `${inboxMessages.length} messages`;
  }

  // Check for new notifications
  async function checkForNewNotifications() {
    try {
      const response = await fetch('http://localhost:3000/api/notifications/count?isRead=false', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.count > 0) {
          // Show notification badge or alert
          showNotificationAlert(data.count);
        }
      }
    } catch (error) {
      console.error('Error checking notifications:', error);
    }
  }

  // Show notification alert
  function showNotificationAlert(count) {
    // Check if we already showed a notification for this session
    if (sessionStorage.getItem('notificationShown')) return;
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = 'fixed top-4 right-4 bg-[#FE5353] text-white px-4 py-3 rounded-lg shadow-lg z-50 flex items-center gap-3';
    notification.innerHTML = `
      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
      </svg>
      <span>You have ${count} new notification${count > 1 ? 's' : ''}</span>
      <button onclick="this.parentElement.remove()" class="text-white hover:text-gray-200">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    
    document.body.appendChild(notification);
    
    // Remove notification after 5 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.remove();
      }
    }, 5000);
    
    // Mark as shown for this session
    sessionStorage.setItem('notificationShown', 'true');
    
    // Clear the flag after 30 seconds to allow new notifications
    setTimeout(() => {
      sessionStorage.removeItem('notificationShown');
    }, 30000);
  }

  function updateSentMessages() {
    const container = document.getElementById('sentMessages');
    if (!container) {
      console.warn('Secretariat - sentMessages container not found');
      return;
    }
    let filteredMessages = communications.filter(msg => msg.senderId === currentUser.id);
    
    // Filter based on current tab
    if (currentTab === 'mpmec') {
      filteredMessages = filteredMessages.filter(msg => 
        msg.recipient?.role === 'LGU-PMT' && msg.recipient?.subRole?.toLowerCase().includes('mpmec')
      );
    } else if (currentTab === 'implementing') {
      filteredMessages = filteredMessages.filter(msg => 
        msg.recipient?.role === 'LGU-IU'
      );
    }
    
    const sentMessages = filteredMessages.slice(0, 5);

    container.innerHTML = sentMessages.map(message => `
      <div class="border border-gray-200 rounded-lg p-3">
        <div class="flex items-center justify-between mb-2">
          <h4 class="text-sm font-medium text-gray-800">${message.subject}</h4>
          <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
            message.status === 'read' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'
          }">
            ${message.status}
          </span>
        </div>
        <p class="text-xs text-gray-600 mb-1">To: ${message.recipient?.name || 'Unknown'}</p>
        <p class="text-xs text-gray-500">${new Date(message.createdAt).toLocaleDateString()}</p>
        <div class="flex gap-2 mt-2">
          <button class="view-sent-message-btn text-xs text-[#FE5353] hover:text-[#E54545]" data-message-id="${message.id}">View</button>
        </div>
      </div>
    `).join('');

    const sentCountElement = document.getElementById('sentCount');
    if (sentCountElement) {
      sentCountElement.textContent = `${sentMessages.length} messages`;
    }
  }

  function updateCommunicationHistory() {
    const container = document.getElementById('communicationHistoryTable');
    if (!container) {
      console.warn('Secretariat - communicationHistoryTable container not found');
      return;
    }
    let filteredCommunications = communications;
    
    // Filter based on current tab
    if (currentTab === 'mpmec') {
      filteredCommunications = communications.filter(msg => 
        (msg.sender?.role === 'LGU-PMT' && msg.sender?.subRole?.toLowerCase().includes('mpmec')) ||
        (msg.recipient?.role === 'LGU-PMT' && msg.recipient?.subRole?.toLowerCase().includes('mpmec'))
      );
    } else if (currentTab === 'implementing') {
      filteredCommunications = communications.filter(msg => 
        msg.sender?.role === 'LGU-IU' || msg.recipient?.role === 'LGU-IU'
      );
    }
    
    const recentCommunications = filteredCommunications.slice(0, 10);

    container.innerHTML = recentCommunications.map(item => `
      <tr>
        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-600">${new Date(item.createdAt).toLocaleDateString()}</td>
        <td class="px-6 py-4 whitespace-nowrap">
          <div class="text-sm font-medium text-gray-800">${item.subject}</div>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
            ${item.category}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
            item.status === 'responded' ? 'bg-green-100 text-green-800' :
            item.status === 'read' ? 'bg-blue-100 text-blue-800' :
            'bg-yellow-100 text-yellow-800'
          }">
            ${item.status}
          </span>
        </td>
        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
          <button class="view-history-item-btn text-[#FE5353] hover:text-[#E54545]" data-message-id="${item.id}">View</button>
        </td>
      </tr>
    `).join('');
  }

  function updateRecipientOptions() {
    const select = document.getElementById('recipientId');
    if (!select) {
      console.warn('Secretariat - recipientId select not found');
      return;
    }
    
    select.innerHTML = `<option value="">Select recipient...</option>`;
    
    // Ensure availableUsers is an array
    if (!Array.isArray(availableUsers)) {
      console.error('availableUsers is not an array:', availableUsers);
      availableUsers = [];
      return;
    }
    
    availableUsers.forEach(user => {
      const option = document.createElement('option');
      option.value = user.id;
      const userType = user.role === 'LGU-PMT' ? 'MPMEC' : 'Implementing Office';
      option.textContent = `${user.name} (${userType} - ${user.subRole || user.role})`;
      select.appendChild(option);
    });
  }

  function switchTab(tab) {
    console.log('Secretariat - Switching to tab:', tab);
    currentTab = tab;
    
    // Update tab styling
    const mpmecTab = document.getElementById('mpmecTab');
    const implementingTab = document.getElementById('implementingTab');
    
    if (mpmecTab) {
      mpmecTab.className = tab === 'mpmec' 
        ? 'flex-1 py-2 px-4 rounded-md bg-white text-gray-700 font-medium shadow-sm'
        : 'flex-1 py-2 px-4 rounded-md text-gray-600 hover:text-gray-700';
    }
    
    if (implementingTab) {
      implementingTab.className = tab === 'implementing'
        ? 'flex-1 py-2 px-4 rounded-md bg-white text-gray-700 font-medium shadow-sm'
        : 'flex-1 py-2 px-4 rounded-md text-gray-600 hover:text-gray-700';
    }
    
    // Show/hide content based on tab
    const mpmecContent = document.getElementById('mpmecContent');
    const implementingContent = document.getElementById('implementingContent');
    
    if (tab === 'mpmec') {
      console.log('Secretariat - Showing MPMEC content, hiding Implementing Office content');
      if (mpmecContent) {
        mpmecContent.classList.remove('hidden');
      }
      if (implementingContent) {
        implementingContent.classList.add('hidden');
      }
      // Load MPMEC communications and chat
      loadMPMECData();
    } else if (tab === 'implementing') {
      console.log('Secretariat - Showing Implementing Office content, hiding MPMEC content');
      if (mpmecContent) {
        mpmecContent.classList.add('hidden');
      }
      if (implementingContent) {
        implementingContent.classList.remove('hidden');
      }
      // Load Implementing Office communications and contacts only if not already loaded
      const contactsList = document.getElementById('contactsList');
      if (!contactsList || contactsList.children.length === 0) {
        console.log('Secretariat - Contacts list empty, loading Implementing Office data');
        loadImplementingOfficeData();
      } else {
        console.log('Secretariat - Contacts already loaded, preserving selection');
      }
    }
    
    // Update recipient options
    updateRecipientOptions();
  }

  function composeMessage() {
    const modal = document.getElementById('composeModal');
    if (modal) {
      modal.classList.remove('hidden');
      updateRecipientOptions();
    }
  }

  function closeComposeModal() {
    const modal = document.getElementById('composeModal');
    if (modal) {
      modal.classList.add('hidden');
      // Reset form
      document.getElementById('composeForm').reset();
    }
  }

  async function handleComposeSubmit(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = {
      recipientId: formData.get('recipientId'),
      subject: formData.get('subject'),
      message: formData.get('message'),
      category: formData.get('category'),
      priority: formData.get('priority'),
      isImportant: formData.get('isImportant') === 'on'
    };
    
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('/api/communications/send', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(data)
      });
      
      if (response.ok) {
        showToast('Message sent successfully');
        closeComposeModal();
        
        // Refresh data
        setTimeout(() => {
          loadUnifiedCommunicationData();
        }, 500);
      } else {
        const errorData = await response.json();
        showToast(errorData.error || 'Failed to send message', 'error');
      }
    } catch (error) {
      console.error('Error sending message:', error);
      showToast('Error sending message', 'error');
    }
  }

  // Weekly report functions
  function sendWeeklyReport() {
    composeMessage();
    document.getElementById('subject').value = 'Weekly Progress Report';
    document.getElementById('category').value = 'report';
    document.getElementById('priority').value = 'high';
    document.getElementById('isImportant').checked = true;
    document.getElementById('message').value = 'Dear Team,\n\nPlease find attached the weekly progress report.\n\nBest regards,\nSecretariat';
  }

  async function viewMessage(id) {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`/api/communications/${id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (response.ok) {
        const message = await response.json();
        displayMessageModal(message);
      }
    } catch (error) {
      console.error('Error viewing message:', error);
    }
  }

  function displayMessageModal(message) {
    document.getElementById('messageTitle').textContent = message.subject;
    document.getElementById('messageContent').innerHTML = `
      <div class="space-y-4">
        <div class="flex items-center justify-between">
          <div>
            <p class="text-sm text-gray-600">From: ${message.sender?.name || 'Unknown'}</p>
            <p class="text-sm text-gray-600">To: ${message.recipient?.name || 'Unknown'}</p>
            <p class="text-sm text-gray-600">Date: ${new Date(message.createdAt).toLocaleString()}</p>
          </div>
          <div class="text-right">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
              ${message.category}
            </span>
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ml-2 ${
              message.priority === 'urgent' ? 'bg-red-100 text-red-800' :
              message.priority === 'high' ? 'bg-orange-100 text-orange-800' :
              message.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
              'bg-green-100 text-green-800'
            }">
              ${message.priority}
            </span>
          </div>
        </div>
        <div class="border-t pt-4">
          <p class="text-gray-800 whitespace-pre-wrap">${message.message}</p>
        </div>
      </div>
    `;
    
    document.getElementById('messageModal').classList.remove('hidden');
  }

  function closeMessageModal() {
    document.getElementById('messageModal').classList.add('hidden');
  }

  function replyToMessage(id) {
    const message = communications.find(m => m.id === id);
    if (message) {
      composeMessage();
      document.getElementById('recipientId').value = message.senderId;
      document.getElementById('subject').value = `Re: ${message.subject}`;
      document.getElementById('message').focus();
    }
  }

  function viewSentMessage(id) {
    viewMessage(id);
  }

  function viewHistoryItem(id) {
    viewMessage(id);
  }

  function requestFeedback() {
    composeMessage();
    document.getElementById('subject').value = 'Feedback Request';
    document.getElementById('category').value = 'feedback';
    document.getElementById('message').value = 'Dear MPMEC Members,\n\nWe would appreciate your feedback on the following matter:\n\nThank you,\nSecretariat';
  }

  function scheduleMeeting() {
    composeMessage();
    document.getElementById('subject').value = 'Meeting Schedule Request';
    document.getElementById('category').value = 'meeting';
    document.getElementById('message').value = 'Dear MPMEC Members,\n\nWe would like to schedule a meeting to discuss:\n\nPlease indicate your availability.\n\nBest regards,\nSecretariat';
  }

  function sendAlert() {
    composeMessage();
    document.getElementById('subject').value = 'URGENT: Important Notice';
    document.getElementById('category').value = 'alert';
    document.getElementById('priority').value = 'urgent';
    document.getElementById('isImportant').checked = true;
    document.getElementById('message').value = 'Dear MPMEC Members,\n\nThis is an urgent notice regarding:\n\nPlease respond immediately.\n\nBest regards,\nSecretariat';
  }

  function sendReport() {
    sendWeeklyReport();
  }

  function showToast(message, type = 'success') {
    const toast = document.getElementById('toast');
    const toastMessage = document.getElementById('toastMessage');
    
    toast.className = `fixed top-4 right-4 px-6 py-3 rounded-lg shadow-lg transform translate-x-full transition-transform duration-300 z-50 ${
      type === 'success' ? 'bg-green-500 text-white' : 'bg-red-500 text-white'
    }`;
    
    toastMessage.textContent = message;
    toast.classList.remove('translate-x-full');
    
    setTimeout(() => {
      toast.classList.add('translate-x-full');
    }, 3000);
  }

  // ✅ CRITICAL: Profile Picture Management for Chat Heads
  // This system loads actual profile pictures for all chat participants
  
  /**
   * Load profile pictures for chat heads
   * @param {Array} users - Array of user objects with id and email
   * @param {string} type - Type of chat ('mpmec' or 'implementing')
   */
  async function loadChatHeadProfilePictures(users, type) {
    console.log(`🎯 Loading ${type} chat head profile pictures for ${users.length} users`);
    
    // Process all users in parallel for better performance
    const profilePromises = users.map(user => loadSingleChatHeadProfilePicture(user, type));
    
    try {
      await Promise.all(profilePromises);
      console.log(`✅ All ${type} chat head profile pictures loaded`);
    } catch (error) {
      console.error(`❌ Error loading ${type} chat head profile pictures:`, error);
    }
  }

  /**
   * Load profile picture for a single chat head
   * @param {Object} user - User object with id and email
   * @param {string} type - Type of chat ('mpmec' or 'implementing')
   */
  async function loadSingleChatHeadProfilePicture(user, type) {
    const container = document.querySelector(`[data-user-id="${user.id}"]`);
    if (!container) {
      console.log(`⚠️ Container not found for user ${user.id}`);
      return;
    }

    const imageElement = container.querySelector('.chat-head-image');
    const fallbackElement = container.querySelector('.chat-head-fallback');
    
    if (!imageElement || !fallbackElement) {
      console.log(`⚠️ Image or fallback element not found for user ${user.id}`);
      return;
    }

    try {
      console.log(`🔍 Loading profile picture for ${user.name} (${user.email})`);
      
      // Try to get profile picture from API
      const employeeId = user.email || user.userId || user.username || user.id;
      const response = await fetch(`http://localhost:3000/api/profile/picture/${employeeId}`, {
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.profilePictureUrl) {
          console.log(`📡 Profile picture URL received for ${user.name}:`, data.profilePictureUrl);
          
          // Convert to data URL to bypass CORS issues
          const dataUrl = await convertImageToDataURL(data.profilePictureUrl);
          if (dataUrl) {
            console.log(`🎯 Setting profile picture for ${user.name}`);
            
            // Set up image load handlers
            imageElement.onload = () => {
              console.log(`✅ Profile picture loaded successfully for ${user.name}`);
              imageElement.style.display = 'block';
              fallbackElement.style.display = 'none';
              container.classList.remove('bg-[#FE5353]'); // Remove background color
            };
            
            imageElement.onerror = () => {
              console.log(`❌ Profile picture failed to load for ${user.name}`);
              imageElement.style.display = 'none';
              fallbackElement.style.display = 'block';
            };
            
            // Set the image source
            imageElement.src = dataUrl;
            return;
          }
        }
      }
      
      console.log(`⚠️ No profile picture available for ${user.name}, keeping fallback`);
      
    } catch (error) {
      console.error(`❌ Error loading profile picture for ${user.name}:`, error);
    }
  }

  /**
   * Convert image URL to data URL to bypass CORS issues
   * @param {string} serverUrl - The server URL of the image
   * @returns {Promise<string|null>} Data URL or null if failed
   */
  async function convertImageToDataURL(serverUrl) {
    try {
      console.log(`🔄 Converting to data URL: ${serverUrl}`);
      
      const response = await fetch(serverUrl, { 
        mode: 'cors',
        credentials: 'same-origin',
        headers: {
          'Cache-Control': 'no-cache'
        }
      });
      
      if (response.ok) {
        const blob = await response.blob();
        const dataUrl = await new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onloadend = () => resolve(reader.result);
          reader.onerror = reject;
          reader.readAsDataURL(blob);
        });
        console.log(`✅ Successfully converted to data URL (${dataUrl.length} chars)`);
        return dataUrl;
      } else {
        console.log(`❌ Failed to fetch image: ${response.status} ${response.statusText}`);
      }
    } catch (error) {
      console.log(`⚠️ Failed to convert to data URL:`, error);
    }
    return null;
  }

  // ✅ CRITICAL: Update chat message profile pictures as well
  function updateChatMessages(messages) {
    console.log('Secretariat - updateChatMessages called with:', messages?.length, 'messages');
    const chatMessages = document.getElementById('chatMessages');
    if (!chatMessages) {
      console.error('Secretariat - chatMessages element not found');
      return;
    }
    
    if (messages && messages.length > 0) {
      console.log('Secretariat - Rendering', messages.length, 'messages');
      const renderedHTML = messages.map((message, index) => {
        const isIncoming = message.recipientId === currentUser.id;
        const senderName = message.sender?.name || 'Unknown';
        const senderInitials = senderName.split(' ').map(n => n[0]).join('').toUpperCase();
        const messageContent = message.message || '';
        const messageTime = new Date(message.createdAt).toLocaleTimeString();
        const senderId = message.sender?.id || 'unknown';
        const senderEmail = message.sender?.email || '';
        
        console.log(`Secretariat - Message ${index + 1}:`, {
          content: messageContent,
          sender: senderName,
          time: messageTime,
          isIncoming: isIncoming
        });
        
        return isIncoming ? (
          `<div class="flex items-start gap-3">
            <div class="w-8 h-8 bg-[#FE5353] rounded-full flex items-center justify-center flex-shrink-0 chat-message-head" data-user-id="${senderId}" data-user-email="${senderEmail}">
              <img class="w-full h-full rounded-full object-cover chat-message-image" style="display: none;" alt="${senderName}" />
              <span class="text-white text-xs font-medium chat-message-fallback">${senderInitials}</span>
            </div>
            <div class="flex-1">
              <div class="bg-gray-100 rounded-lg p-3 max-w-xs">
                <p class="text-sm text-gray-800">${messageContent}</p>
              </div>
              <p class="text-xs text-gray-500 mt-1">${messageTime}</p>
            </div>
          </div>`
        ) : (
          `<div class="flex items-start gap-3 justify-end">
            <div class="flex-1 text-right">
              <div class="bg-[#FE5353] text-white rounded-lg p-3 max-w-xs ml-auto">
                <p class="text-sm">${messageContent}</p>
              </div>
              <p class="text-xs text-gray-500 mt-1">${messageTime}</p>
            </div>
            <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center flex-shrink-0">
              <span class="text-white text-xs font-medium">MS</span>
            </div>
          </div>`
        );
      }).join('');
      
      console.log('Secretariat - Setting innerHTML with', renderedHTML.length, 'characters');
      chatMessages.innerHTML = renderedHTML;
      
      // ✅ CRITICAL: Load profile pictures for chat message heads
      setTimeout(() => {
        loadChatMessageProfilePictures(messages);
      }, 50);
      
      // Scroll to bottom to show latest messages
      chatMessages.scrollTop = chatMessages.scrollHeight;
      console.log('Secretariat - Scrolled to bottom, scrollTop:', chatMessages.scrollTop, 'scrollHeight:', chatMessages.scrollHeight);
    } else {
      chatMessages.innerHTML = `
        <div class="text-center py-8 text-gray-500">
          <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
          <p class="text-lg font-medium">No messages yet</p>
          <p class="text-sm">Start a conversation with Implementing Office Officers</p>
        </div>
      `;
    }
  }

  /**
   * Load profile pictures for chat message heads
   * @param {Array} messages - Array of message objects
   */
  async function loadChatMessageProfilePictures(messages) {
    console.log(`🎯 Loading profile pictures for ${messages.length} chat messages`);
    
    // Get unique senders to avoid duplicate API calls
    const uniqueSenders = messages.reduce((acc, message) => {
      const senderId = message.sender?.id;
      const senderEmail = message.sender?.email;
      if (senderId && senderEmail && !acc.some(s => s.id === senderId)) {
        acc.push({
          id: senderId,
          email: senderEmail,
          name: message.sender?.name || 'Unknown'
        });
      }
      return acc;
    }, []);
    
    // Load profile pictures for unique senders
    const profilePromises = uniqueSenders.map(sender => loadChatMessageProfilePicture(sender));
    
    try {
      await Promise.all(profilePromises);
      console.log(`✅ All chat message profile pictures loaded`);
    } catch (error) {
      console.error(`❌ Error loading chat message profile pictures:`, error);
    }
  }

  /**
   * Load profile picture for a single chat message sender
   * @param {Object} sender - Sender object with id, email, and name
   */
  async function loadChatMessageProfilePicture(sender) {
    const containers = document.querySelectorAll(`[data-user-id="${sender.id}"].chat-message-head`);
    if (containers.length === 0) {
      console.log(`⚠️ No message containers found for sender ${sender.id}`);
      return;
    }

    try {
      console.log(`🔍 Loading chat message profile picture for ${sender.name} (${sender.email})`);
      
      // Try to get profile picture from API
      const employeeId = sender.email || sender.id;
      const response = await fetch(`http://localhost:3000/api/profile/picture/${employeeId}`, {
        headers: {
          'Cache-Control': 'no-cache',
          'Pragma': 'no-cache'
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.profilePictureUrl) {
          console.log(`📡 Chat message profile picture URL received for ${sender.name}:`, data.profilePictureUrl);
          
          // Convert to data URL to bypass CORS issues
          const dataUrl = await convertImageToDataURL(data.profilePictureUrl);
          if (dataUrl) {
            console.log(`🎯 Setting chat message profile picture for ${sender.name}`);
            
            // Update all message containers for this sender
            containers.forEach(container => {
              const imageElement = container.querySelector('.chat-message-image');
              const fallbackElement = container.querySelector('.chat-message-fallback');
              
              if (imageElement && fallbackElement) {
                // Set up image load handlers
                imageElement.onload = () => {
                  console.log(`✅ Chat message profile picture loaded for ${sender.name}`);
                  imageElement.style.display = 'block';
                  fallbackElement.style.display = 'none';
                  container.classList.remove('bg-[#FE5353]'); // Remove background color
                };
                
                imageElement.onerror = () => {
                  console.log(`❌ Chat message profile picture failed for ${sender.name}`);
                  imageElement.style.display = 'none';
                  fallbackElement.style.display = 'block';
                };
                
                // Set the image source
                imageElement.src = dataUrl;
              }
            });
            return;
          }
        }
      }
      
      console.log(`⚠️ No profile picture available for chat message sender ${sender.name}, keeping fallback`);
      
    } catch (error) {
      console.error(`❌ Error loading chat message profile picture for ${sender.name}:`, error);
    }
  }

  // Form submission
  document.getElementById('composeForm').addEventListener('submit', handleComposeSubmit);
</script> 