export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import SecretariatLayout from '../../../../components/SecretariatLayout.astro';
---

<Layout title="Compilation Summary | MPMEC Secretariat">
  <SecretariatLayout>
    <style>
      .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
      
      .custom-scrollbar::-webkit-scrollbar {
        width: 8px;
      }
      
      .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 10px;
      }
      
      .custom-scrollbar::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #ef4444, #dc2626);
        border-radius: 10px;
      }
      
      .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #dc2626, #b91c1c);
      }
      
      /* Progress bar animation */
      .progress-bar-fill {
        transform-origin: left;
        animation: fillProgress 2s ease-out forwards;
        width: 0% !important;
      }
      
      .progress-bar-fill.animate {
        animation: fillProgress 2s ease-out forwards;
      }
      
      @keyframes fillProgress {
        from {
          width: 0% !important;
        }
        to {
          width: var(--progress-width) !important;
        }
      }
      
      /* Enhanced card hover effects */
      .milestone-card {
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
      }
      
      .milestone-card:hover {
        transform: translateY(-4px) scale(1.02);
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      }
      
      .milestone-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(239, 68, 68, 0.1), transparent);
        transition: left 0.5s;
      }
      
      .milestone-card:hover::before {
        left: 100%;
      }
      
      /* Statistics card hover effects */
      .stats-card {
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
      }
      
      .stats-card:hover {
        transform: translateY(-3px) scale(1.03);
        box-shadow: 0 20px 40px -12px rgba(239, 68, 68, 0.3);
        border-color: #ef4444;
      }
      
      .stats-card::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        width: 0;
        height: 3px;
        background: linear-gradient(90deg, #ef4444, #dc2626);
        transition: width 0.4s ease;
      }
      
      .stats-card:hover::after {
        width: 100%;
      }
      
      /* Project card hover effects */
      .project-card {
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
      }
      
      .project-card:hover {
        transform: translateY(-5px) scale(1.01);
        box-shadow: 0 30px 60px -12px rgba(0, 0, 0, 0.3);
        border-left: 4px solid #ef4444;
      }
      
      .project-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(90deg, #ef4444, #dc2626, #ef4444);
        transform: scaleX(0);
        transition: transform 0.4s ease;
      }
      
      .project-card:hover::before {
        transform: scaleX(1);
      }
      
      /* Gradient text effect */
      .gradient-text {
        background: linear-gradient(135deg, #ef4444, #dc2626);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }
      
      /* Modern button styles */
      .modern-btn {
        background: linear-gradient(135deg, #ef4444, #dc2626);
        transition: all 0.3s ease;
      }
      
      .modern-btn:hover {
        background: linear-gradient(135deg, #dc2626, #b91c1c);
        transform: translateY(-1px);
        box-shadow: 0 10px 20px rgba(239, 68, 68, 0.3);
      }
      
      /* Enhanced tab animations */
      .tab-content {
        transition: all 0.3s ease-in-out;
      }
      
      /* Card hover effects for compiled reports */
      .compiled-report-card {
        transition: all 0.3s ease;
        border-left: 4px solid transparent;
      }
      
      .compiled-report-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border-left-color: #ef4444;
      }
      
      /* Loading animation */
      @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
      }
      
      .animate-pulse {
        animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
      }
      
      /* Gradient text for headers */
      .gradient-text-red {
        background: linear-gradient(135deg, #ef4444, #b91c1c);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }
      
      /* Enhanced button hover effects */
      .enhanced-btn {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
      }
      
      .enhanced-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.2);
      }
      
      .enhanced-btn::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
      }
      
      .enhanced-btn:hover::before {
        left: 100%;
      }
      
      /* Tab hover enhancement */
      .tab-btn {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      .tab-btn:hover {
        transform: translateY(-1px);
        filter: brightness(1.1);
      }
      
      /* Enhanced statistics cards with better animations */
      .stats-card-enhanced {
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
      }
      
      .stats-card-enhanced:hover {
        transform: translateY(-4px) scale(1.02);
        box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
      }
      
      .stats-card-enhanced::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(239, 68, 68, 0.1), transparent);
        transition: left 0.6s;
      }
      
      .stats-card-enhanced:hover::before {
        left: 100%;
      }
      
      /* Enhanced project cards with better hover effects */
      .project-card-enhanced {
        transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
      }
      
      .project-card-enhanced:hover {
        transform: translateY(-6px) scale(1.01);
        box-shadow: 0 35px 70px -12px rgba(0, 0, 0, 0.3);
        border-left: 4px solid #ef4444;
      }
      
      .project-card-enhanced::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, #ef4444, #dc2626, #ef4444);
        transform: scaleX(0);
        transition: transform 0.5s ease;
      }
      
      .project-card-enhanced:hover::before {
        transform: scaleX(1);
      }
      
      /* Enhanced button animations */
      .btn-enhanced {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
      }
      
      .btn-enhanced:hover {
        transform: translateY(-2px);
        box-shadow: 0 15px 30px -5px rgba(0, 0, 0, 0.2);
      }
      
      .btn-enhanced::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.6s;
      }
      
      .btn-enhanced:hover::before {
        left: 100%;
      }
      
      /* Enhanced progress bars */
      .progress-enhanced {
        transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);
        background: linear-gradient(90deg, #ef4444, #dc2626);
      }
      
      .progress-enhanced:hover {
        background: linear-gradient(90deg, #dc2626, #b91c1c);
        transform: scaleY(1.1);
      }
      
      /* Enhanced loading animations */
      @keyframes shimmer {
        0% {
          background-position: -200px 0;
        }
        100% {
          background-position: calc(200px + 100%) 0;
        }
      }
      
      .shimmer {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200px 100%;
        animation: shimmer 1.5s infinite;
      }
      
      /* Enhanced focus states */
      .focus-enhanced:focus {
        outline: 2px solid #ef4444;
        outline-offset: 2px;
        box-shadow: 0 0 0 4px rgba(239, 68, 68, 0.1);
      }

      /* Icon Container Styles - SECRETARIAT Theme */
      .icon-container {
        @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .icon-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .icon-container > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container:hover::before {
        left: 100%;
      }
      
      .icon-container:hover {
        @apply transform scale-110 rotate-3;
      }

      .icon-container-small {
        @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .icon-container-small::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .icon-container-small > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container-small:hover::before {
        left: 100%;
      }
      
      .icon-container-small:hover {
        @apply transform scale-110 rotate-3;
      }

      /* Modern Profile Card Styles - Matching Submissions Standard */
      .profile-card {
        @apply bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 ease-out hover:shadow-2xl hover:border-sky-500/20 hover:-translate-y-2;
        position: relative;
        overflow: hidden;
      }
      
      .profile-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(14, 165, 233, 0.08), transparent);
        transition: left 0.6s ease-out;
        z-index: 1;
      }
      
      .profile-card > * {
        position: relative;
        z-index: 2;
      }
      
      .profile-card:hover::before {
        left: 100%;
      }

      /* Modern Button Styles - SECRETARIAT Theme */
      .btn-primary {
        @apply bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-sky-500/25 border border-sky-500/20;
        position: relative;
        overflow: hidden;
      }

      .btn-secondary {
        @apply bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-gray-500/25 border border-gray-500/20;
        position: relative;
        overflow: hidden;
      }

      .btn-success {
        @apply bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-green-500/25 border border-green-500/20;
        position: relative;
        overflow: hidden;
      }
    </style>
    
    <!-- Page Header - Matching MPMEC Structure -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
          </div>
            <div>
              <h1 class="text-3xl font-bold text-black">Compilation Summary</h1>
              <p class="text-sm text-gray-600">Municipal Project Monitoring and Evaluation Committee - Secretariat</p>
          </div>
        </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Total Compilations</p>
            <p class="text-xs text-black font-semibold" id="headerCompilationCount">0 Active Compilations</p>
          </div>
          <div class="w-4 h-4 bg-sky-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <main class="bg-gradient-to-br from-gray-50 to-white min-h-screen px-8 py-8">
      <!-- Action Buttons -->
      <div class="flex items-center justify-end gap-3 mb-8">
        <button onclick="exportData()" class="btn-success btn-sm inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Export Data
          </button>
        <button onclick="refreshCompilation()" class="btn-primary btn-sm inline-flex items-center gap-2">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Refresh Data
          </button>
      </div>

      <!-- Tab Content -->
      <div id="tab-content-summary">
        <!-- Enhanced Compilation Overview Cards - SECRETARIAT Theme -->
        <div class="space-y-6 mb-8" id="compilation-overview">
          <!-- Top Row: Primary Metrics -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <!-- Total Projects - SECRETARIAT Theme -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Total Projects</p>
                  <p class="text-2xl font-bold text-black" id="totalProjects">0</p>
                  <p class="text-xs text-gray-500 mt-1">Project compilations</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Budget Utilized - Professional Light Green -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Budget Utilized</p>
                  <p class="text-2xl font-bold text-black">₱0</p>
                  <p class="text-xs text-green-600 mt-1">0% utilized</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Average Progress - Professional Light Gold -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Avg Progress</p>
                  <p class="text-2xl font-bold text-black">0%</p>
                  <p class="text-xs text-amber-600 mt-1">Overall completion</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Total Departments - SECRETARIAT Theme -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Total Departments</p>
                  <p class="text-2xl font-bold text-black" id="totalDepartments">0</p>
                  <p class="text-xs text-blue-600 mt-1">Active departments</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-sky-500 to-sky-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>

          <!-- Bottom Row: Status Metrics -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <!-- Compiled - MPMEC Theme -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Compiled</p>
                  <p class="text-2xl font-bold text-black">0</p>
                  <p class="text-xs text-blue-600 mt-1">Successfully compiled</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Pending Review - Professional Light Gold -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">P.Review</p>
                  <p class="text-2xl font-bold text-black">0</p>
                  <p class="text-xs text-amber-600 mt-1">Awaiting compilation</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Delayed - Professional Light Red -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Delayed</p>
                  <p class="text-2xl font-bold text-black">0</p>
                  <p class="text-xs text-red-600 mt-1">Behind schedule</p>
                  <p class="text-xs text-red-500 mt-1">Delayed Milestones: 0</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-red-500 to-red-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Total Budget - Professional Light Green -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Total Budget</p>
                  <p class="text-2xl font-bold text-black">₱0</p>
                  <p class="text-xs text-green-600 mt-1">Allocated budget</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-emerald-500 to-emerald-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Enhanced Filters Section - Matching Submissions Style -->
        <div class="profile-card p-8 mb-8">
          <div class="mb-8">
            <div class="flex items-center gap-3 mb-6">
              <div class="icon-container-small bg-gradient-to-br from-sky-500 to-sky-600">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                </svg>
              </div>
              <h2 class="text-2xl font-bold text-gray-900">Search & Filters</h2>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <!-- Search Input -->
              <div class="lg:col-span-2">
                <label class="block text-sm font-medium text-gray-700 mb-2">Search Compilations</label>
                <div class="relative">
                  <input 
                    type="text" 
                    placeholder="Search by project name, department..." 
                    class="w-full px-4 py-3 pl-12 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition-all duration-300"
                    id="searchInput"
                  >
                  <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                    <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                  </div>
                </div>
              </div>
              
              <!-- Status Filter -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                <select class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition-all duration-300" id="statusFilter">
                  <option value="">All Status</option>
                  <option value="compiled">Compiled</option>
                  <option value="pending">Pending</option>
                  <option value="in_progress">In Progress</option>
                </select>
              </div>
              
              <!-- Department Filter -->
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Department</label>
                <select class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition-all duration-300" id="departmentFilter">
                  <option value="">All Departments</option>
                  <option value="mdrrmo">MDRRMO</option>
                  <option value="meo">MEO</option>
                  <option value="mao">MAO</option>
                </select>
              </div>
            </div>
            
            <!-- Filter Action Buttons -->
            <div class="flex items-center gap-4 mt-6">
              <button class="btn-primary inline-flex items-center gap-2" onclick="applyFilters()">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                </svg>
                Apply Filters
              </button>
              <button class="btn-secondary inline-flex items-center gap-2" onclick="clearFilters()">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Clear Filters
              </button>
            </div>
          </div>
        </div>

        <!-- Enhanced Tab Navigation - Below Search & Filters -->
        <div class="mb-8">
          <div class="flex space-x-2 bg-gradient-to-r from-gray-100 to-gray-200 p-2 rounded-2xl shadow-lg">
            <button 
              id="tab-summary" 
              class="group flex-1 py-4 px-8 text-sm font-semibold rounded-xl transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 bg-white text-sky-600 shadow-lg border-b-2 border-sky-500 relative overflow-hidden" 
              onclick="showTab('summary')"
            >
              <div class="absolute inset-0 bg-gradient-to-r from-sky-50 to-sky-100 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div class="flex items-center justify-center gap-3 relative z-10">
                <svg class="w-6 h-6 transition-transform duration-300 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                <span>Compilation Summary</span>
              </div>
            </button>
            <button 
              id="tab-compiled" 
              class="group flex-1 py-4 px-8 text-sm font-semibold rounded-xl transition-all duration-300 ease-in-out transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-sky-500 focus:ring-offset-2 bg-transparent text-gray-600 hover:text-gray-800 hover:bg-white/80 relative overflow-hidden" 
              onclick="showTab('compiled')"
            >
              <div class="absolute inset-0 bg-gradient-to-r from-sky-50 to-sky-100 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
              <div class="flex items-center justify-center gap-3 relative z-10">
                <svg class="w-6 h-6 transition-transform duration-300 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <span>Compiled Reports</span>
                <span id="compiled-count" class="bg-sky-100 text-sky-800 text-xs font-medium px-2 py-1 rounded-full hidden group-hover:scale-110 transition-transform duration-300">0</span>
              </div>
            </button>
          </div>
        </div>

        <!-- Department/Office Cards -->
        <div class="space-y-8" id="departmentCards">
          <!-- Department cards will be loaded dynamically -->
        </div>

        <!-- Project View Container (hidden by default) -->
        <div id="project-view-container" class="hidden">
          <!-- Project content will be loaded here -->
        </div>
      </div>
      
      <div id="tab-content-compiled" class="hidden">
        <!-- Enhanced Compiled Reports Overview -->
        <div class="space-y-8">
          <!-- Compiled Reports Header -->
          <div class="profile-card p-8">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-4">
                <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600">
                  <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                  </div>
                <div>
                  <h2 class="text-3xl font-bold text-gray-900">Compiled Reports Archive</h2>
                  <p class="text-gray-600">Official records of milestone reports with Secretariat verdicts</p>
                  </div>
                  </div>
              <div class="flex items-center gap-3">
                <button onclick="refreshCompiledReports()" class="btn-primary btn-sm inline-flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                  </svg>
                  Refresh Archive
                </button>
                <button onclick="exportCompiledReports()" class="btn-success btn-sm inline-flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                  Export Reports
                </button>
                </div>
              </div>
          </div>

          <!-- Compiled Reports Statistics -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <!-- Total Compiled Reports -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Total Reports</p>
                  <p class="text-2xl font-bold text-black" id="totalCompiledReports">0</p>
                  <p class="text-xs text-blue-600 mt-1">Compiled reports</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Approved Reports -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Approved</p>
                  <p class="text-2xl font-bold text-black" id="approvedReports">0</p>
                  <p class="text-xs text-green-600 mt-1">Successfully approved</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-green-500 to-green-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Pending Review -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Under Review</p>
                  <p class="text-2xl font-bold text-black" id="underReviewReports">0</p>
                  <p class="text-xs text-amber-600 mt-1">Awaiting decision</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
            </div>

            <!-- Rejected Reports -->
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Rejected</p>
                  <p class="text-2xl font-bold text-black" id="rejectedReports">0</p>
                  <p class="text-xs text-red-600 mt-1">Requires revision</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-red-500 to-red-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>

          <!-- Search & Filter Section for Compiled Reports -->
          <div class="profile-card p-8">
            <div class="mb-6">
              <div class="flex items-center gap-3 mb-6">
                <div class="icon-container-small bg-gradient-to-br from-sky-500 to-sky-600">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                  </svg>
                </div>
                <h3 class="text-2xl font-bold text-gray-900">Search & Filter Reports</h3>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <!-- Search Input -->
                <div class="lg:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Search Reports</label>
                  <div class="relative">
                    <input 
                      type="text" 
                      placeholder="Search by project name, department..." 
                      class="w-full px-4 py-3 pl-12 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition-all duration-300"
                      id="compiledSearchInput"
                    >
                    <div class="absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none">
                      <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                  </svg>
                    </div>
                  </div>
                </div>
                
                <!-- Status Filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                  <select class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition-all duration-300" id="compiledStatusFilter">
                    <option value="">All Status</option>
                    <option value="approved">Approved</option>
                    <option value="under_review">Under Review</option>
                    <option value="rejected">Rejected</option>
                  </select>
                </div>
                
                <!-- Department Filter -->
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Department</label>
                  <select class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-sky-500 focus:border-sky-500 transition-all duration-300" id="compiledDepartmentFilter">
                    <option value="">All Departments</option>
                    <option value="mdrrmo">MDRRMO</option>
                    <option value="meo">MEO</option>
                    <option value="mao">MAO</option>
                  </select>
                </div>
              </div>
              
              <!-- Filter Action Buttons -->
              <div class="flex items-center gap-4 mt-6">
                <button class="btn-primary inline-flex items-center gap-2" onclick="applyCompiledFilters()">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                  </svg>
                  Apply Filters
                </button>
                <button class="btn-secondary inline-flex items-center gap-2" onclick="clearCompiledFilters()">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Clear Filters
                </button>
              </div>
            </div>
          </div>
          
          <!-- Compiled Reports Timeline -->
          <div id="compiledReportsTimeline" class="space-y-6">
            <!-- Enhanced Loading state -->
            <div id="compiled-reports-loading" class="hidden">
              <div class="flex flex-col items-center justify-center py-16 space-y-6">
                <div class="relative">
                  <div class="animate-spin rounded-full h-16 w-16 border-4 border-blue-200 border-t-blue-600"></div>
                  <div class="absolute inset-0 rounded-full border-4 border-transparent border-t-blue-400 animate-ping"></div>
                </div>
                <div class="text-center space-y-2">
                  <p class="text-lg font-semibold text-gray-700">Loading compiled reports...</p>
                  <p class="text-sm text-gray-500">Please wait while we gather the latest data</p>
                </div>
                <div class="flex space-x-2">
                  <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce"></div>
                  <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 0.1s"></div>
                  <div class="w-2 h-2 bg-blue-500 rounded-full animate-bounce" style="animation-delay: 0.2s"></div>
                </div>
              </div>
            </div>
            
            <!-- Reports will be populated here dynamically -->
            <div id="compiledReportsList" class="space-y-4">
              <!-- Sample compiled report card -->
              <div class="profile-card p-6 compiled-report-card">
                <div class="flex items-start justify-between">
                  <div class="flex-1">
                    <div class="flex items-center gap-3 mb-3">
                      <div class="w-3 h-3 bg-green-500 rounded-full"></div>
                      <span class="text-sm font-medium text-green-600">Approved</span>
                      <span class="text-xs text-gray-500">•</span>
                      <span class="text-xs text-gray-500">Dec 15, 2024</span>
          </div>
                    <h4 class="text-lg font-semibold text-gray-900 mb-2">Sample Project Report</h4>
                    <p class="text-sm text-gray-600 mb-3">Municipal Disaster And Risk Reduction Management Office</p>
                    <div class="flex items-center gap-4 text-sm text-gray-500">
                      <span>Project ID: PRJ-2024-001</span>
                      <span>•</span>
                      <span>Budget: ₱1,500,000</span>
                      <span>•</span>
                      <span>Progress: 85%</span>
        </div>
      </div>
                  <div class="flex items-center gap-2">
                    <button class="btn-primary btn-sm inline-flex items-center gap-2">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                      </svg>
                      View
                    </button>
                    <button class="btn-success btn-sm inline-flex items-center gap-2">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      Export
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- Project Report Modal -->
    <div id="projectReportModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-10 mx-auto p-5 border w-11/12 max-w-6xl shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-900" id="modalTitle">Project Report Details</h3>
            <div class="flex items-center gap-3">
              <button 
                onclick="openTimelineModal()" 
                class="group/btn relative px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl hover:from-blue-700 hover:to-blue-800 transition-all duration-300 transform hover:scale-105 hover:shadow-lg flex items-center gap-2 text-sm font-semibold overflow-hidden btn-enhanced"
              >
                <div class="absolute inset-0 bg-white opacity-0 group-hover/btn:opacity-10 transition-opacity duration-300"></div>
                <svg class="w-5 h-5 transition-transform duration-300 group-hover/btn:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                <span>Timeline Graph</span>
              </button>
              <button 
                onclick="openHistoryModal()" 
                class="group/btn relative px-6 py-3 bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-xl hover:from-purple-700 hover:to-purple-800 transition-all duration-300 transform hover:scale-105 hover:shadow-lg flex items-center gap-2 text-sm font-semibold overflow-hidden btn-enhanced"
              >
                <div class="absolute inset-0 bg-white opacity-0 group-hover/btn:opacity-10 transition-opacity duration-300"></div>
                <svg class="w-5 h-5 transition-transform duration-300 group-hover/btn:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                <span>Update History</span>
              </button>
              <button 
                onclick="exportProjectReport()" 
                class="group/btn relative px-6 py-3 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-xl hover:from-green-700 hover:to-green-800 transition-all duration-300 transform hover:scale-105 hover:shadow-lg flex items-center gap-2 text-sm font-semibold overflow-hidden btn-enhanced"
              >
                <div class="absolute inset-0 bg-white opacity-0 group-hover/btn:opacity-10 transition-opacity duration-300"></div>
                <svg class="w-5 h-5 transition-transform duration-300 group-hover/btn:translate-y-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                <span>Export Report</span>
              </button>
              <button 
                onclick="closeProjectModal()" 
                class="group/btn p-3 text-gray-400 hover:text-gray-600 rounded-full hover:bg-gray-100 transition-all duration-300 transform hover:scale-110"
              >
                <svg class="w-6 h-6 transition-transform duration-300 group-hover/btn:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <!-- Project Information -->
          <div id="projectInfo" class="mb-8">
            <!-- Project info will be loaded here -->
          </div>

          <!-- Compiled Report Section -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold text-gray-800 mb-4">Compiled Report from Implementing Office</h4>
            <div id="compiledReport" class="bg-gray-50 rounded-lg p-6">
              <!-- Compiled report will be loaded here -->
            </div>
          </div>

          <!-- Milestone Updates -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold text-gray-800 mb-4">Milestone Updates & Weight Distribution</h4>
            <div id="milestoneUpdates" class="space-y-4">
              <!-- Milestone updates will be loaded here -->
            </div>
          </div>

          <!-- Approval Actions -->
          <div class="mt-8 pt-6 border-t border-gray-200">
            <h4 class="text-lg font-semibold text-gray-800 mb-4 text-center">Secretariat Validation & Progress Update</h4>
            <div id="approvalActions" class="flex items-center justify-center gap-4">
              <!-- Action buttons will be dynamically populated based on project status -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Timeline Graph Modal -->
    <div id="timelineModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-5 mx-auto p-6 border-0 w-11/12 max-w-7xl shadow-2xl rounded-2xl bg-gradient-to-br from-white to-gray-50">
        <div class="mt-3">
          <div class="flex items-center justify-between mb-8">
            <div>
              <h3 class="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Project Timeline Graph
              </h3>
              <p class="text-sm text-gray-600 mt-2 flex items-center">
                <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
                Visual representation of project milestones and progress
              </p>
            </div>
            <button onclick="closeTimelineModal()" class="text-gray-400 hover:text-gray-600 p-3 rounded-full hover:bg-gray-100 transition-all duration-200 group">
              <svg class="w-6 h-6 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <!-- Timeline Chart Container -->
          <div class="mb-8 bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 shadow-lg border border-gray-100">
            <div class="flex items-center justify-between mb-6">
              <h4 class="text-xl font-bold text-gray-800 flex items-center">
                <svg class="w-6 h-6 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                Timeline Visualization
              </h4>
              <div class="flex items-center space-x-6 text-sm">
                <div class="flex items-center">
                  <div class="w-3 h-3 bg-green-500 rounded-full mr-2 shadow-lg"></div>
                  <span class="text-gray-700 font-medium">Completed</span>
                </div>
                <div class="flex items-center">
                  <div class="w-3 h-3 bg-yellow-500 rounded-full mr-2 shadow-lg"></div>
                  <span class="text-gray-700 font-medium">In Progress</span>
                </div>
                <div class="flex items-center">
                  <div class="w-3 h-3 bg-gray-500 rounded-full mr-2 shadow-lg"></div>
                  <span class="text-gray-700 font-medium">Pending</span>
                </div>
              </div>
            </div>
            <div class="flex justify-center">
              <div class="relative">
                <canvas id="timelineChart" width="1000" height="450" class="border-0 rounded-xl shadow-xl bg-gradient-to-br from-white to-gray-50"></canvas>
                <div class="absolute inset-0 rounded-xl pointer-events-none border border-gray-200/50"></div>
              </div>
            </div>
          </div>
          
          <!-- Timeline Details -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div class="bg-white rounded-2xl border border-gray-200 p-6 shadow-lg hover:shadow-xl transition-shadow duration-300">
              <h4 class="font-bold text-gray-800 mb-6 flex items-center text-lg">
                <svg class="w-6 h-6 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                Project Milestones
              </h4>
              <div id="timelineMilestones" class="space-y-4 max-h-96 overflow-y-auto custom-scrollbar">
                <!-- Milestones will be loaded here -->
              </div>
            </div>
            <div class="bg-white rounded-2xl border border-gray-200 p-6 shadow-lg hover:shadow-xl transition-shadow duration-300">
              <h4 class="font-bold text-gray-800 mb-6 flex items-center text-lg">
                <svg class="w-6 h-6 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                Progress Summary
              </h4>
              <div id="timelineProgress" class="space-y-6">
                <!-- Progress summary will be loaded here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Update History Modal -->
    <div id="historyModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-10 mx-auto p-5 border w-11/12 max-w-6xl shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-900">Project Update History</h3>
            <div class="flex items-center gap-2">
              <button onclick="exportHistory()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2 text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Export History
              </button>
              <button onclick="closeHistoryModal()" class="text-gray-400 hover:text-gray-600">

    <!-- Compiled Report Modal -->
    <div id="compiledReportModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-[9999]" style="display: none;">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="relative bg-white rounded-lg shadow-xl w-11/12 max-w-7xl max-h-[90vh] overflow-y-auto">
          <div id="compiledReportModalContent">
            <!-- Modal content will be dynamically loaded here -->
          </div>
        </div>
      </div>
    </div>
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <!-- History Timeline -->
          <div class="mb-6">
            <div id="historyTimeline" class="space-y-4">
              <!-- History items will be loaded here -->
            </div>
          </div>
          
          <!-- Activity Log -->
          <div class="bg-gray-50 rounded-lg p-4">
            <h4 class="font-semibold text-gray-800 mb-3">Activity Log</h4>
            <div id="activityLog" class="space-y-2">
              <!-- Activity log will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Partial Progress Modal -->
    <div id="partialProgressModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Set Partial Progress</h3>
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Timeline Progress (%)</label>
              <input type="number" id="timelineProgress" min="0" max="100" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Budget Progress (%)</label>
              <input type="number" id="budgetProgress" min="0" max="100" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Physical Progress (%)</label>
              <input type="number" id="physicalProgress" min="0" max="100" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div class="bg-blue-50 p-3 rounded-lg">
              <p class="text-sm text-blue-800">
                <strong>Note:</strong> Total progress will be capped at the milestone weight percentage.
              </p>
            </div>
          </div>
          <div class="flex justify-end gap-3 mt-6">
            <button onclick="closePartialProgressModal()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
            <button onclick="confirmPartialProgress()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
              Confirm
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Rejection Modal -->
    <div id="rejectionModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Reject Compiled Report</h3>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Rejection Comments</label>
            <textarea id="rejectionComments" rows="4" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Please provide specific reasons for rejection..."></textarea>
          </div>
          <div class="flex justify-end gap-3">
            <button onclick="closeRejectionModal()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
            <button onclick="confirmRejection()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
              Confirm Rejection
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Division Rejection Modal -->
    <div id="divisionRejectionModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Reject Division</h3>
          <div class="mb-4">
            <p class="text-sm text-gray-600 mb-3" id="divisionRejectionTitle">Rejecting division for milestone</p>
            <label class="block text-sm font-medium text-gray-700 mb-2">Rejection Comments</label>
            <textarea id="divisionRejectionComments" rows="4" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Please provide specific reasons for rejection..."></textarea>
          </div>
          <div class="flex justify-end gap-3">
            <button onclick="closeDivisionRejectionModal()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
            <button onclick="confirmDivisionRejection()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
              Confirm Rejection
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Revision Request Modal -->
    <div id="revisionModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Request Revision</h3>
          <div class="mb-4">
            <p class="text-sm text-gray-600 mb-3">Requesting revision for project report</p>
            <label class="block text-sm font-medium text-gray-700 mb-2">Revision Requirements</label>
            <textarea id="revisionRequirements" rows="4" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500" placeholder="Please specify what revisions are needed..."></textarea>
          </div>
          <div class="flex justify-end gap-3">
            <button onclick="closeRevisionModal()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
            <button onclick="confirmRevisionRequest()" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors">
              Request Revision
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Division Revision Request Modal -->
    <div id="divisionRevisionModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Request Division Revision</h3>
          <div class="mb-4">
            <p class="text-sm text-gray-600 mb-3" id="divisionRevisionTitle">Requesting revision for division</p>
            <label class="block text-sm font-medium text-gray-700 mb-2">Revision Requirements</label>
            <textarea id="divisionRevisionRequirements" rows="4" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500" placeholder="Please specify what revisions are needed for this division..."></textarea>
          </div>
          <div class="flex justify-end gap-3">
            <button onclick="closeDivisionRevisionModal()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
            <button onclick="confirmDivisionRevisionRequest()" class="px-4 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition-colors">
              Request Revision
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Detailed Report Modal -->
    <div id="detailedReportModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-y-auto">
          <!-- Modal Header -->
          <div class="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 flex justify-between items-center">
            <div>
              <h3 class="text-xl font-bold text-gray-800">Official Milestone Report</h3>
              <p class="text-sm text-gray-600" id="modalProjectCode"></p>
            </div>
            <div class="flex space-x-2">
              <button 
                onclick="exportToWord()"
                class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium"
              >
                <i class="fas fa-download mr-2"></i>Export to Word
              </button>
              <button 
                onclick="closeDetailedModal()"
                class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-lg text-sm font-medium"
              >
                <i class="fas fa-times mr-2"></i>Close
              </button>
            </div>
          </div>
          
          <!-- Modal Content -->
          <div class="p-6" id="detailedReportContent">
            <!-- Content will be populated dynamically -->
          </div>
        </div>
      </div>
    </div>

  </SecretariatLayout>
</Layout>

<script data-cache-bust="v27-6-cards-2x3-grid">
  // Define switchTab function immediately for global access
  function switchTab(tabName) {
    console.log('🔄 switchTab called with:', tabName);
    
    // Hide all tab contents
    const summaryContent = document.getElementById('tab-content-summary');
    const compiledContent = document.getElementById('tab-content-compiled');
    const summaryTab = document.getElementById('tab-summary');
    const compiledTab = document.getElementById('tab-compiled');
    
    if (summaryContent) summaryContent.classList.add('hidden');
    if (compiledContent) compiledContent.classList.add('hidden');
    
    // Remove active classes from all tabs
    if (summaryTab) {
      summaryTab.classList.remove('bg-white', 'text-sky-600', 'shadow-lg');
      summaryTab.classList.add('bg-transparent', 'text-gray-600');
    }
    if (compiledTab) {
      compiledTab.classList.remove('bg-white', 'text-sky-600', 'shadow-lg');
      compiledTab.classList.add('bg-transparent', 'text-gray-600');
    }
    
    // Show selected tab content and activate tab
    if (tabName === 'compiled') {
      if (compiledContent) compiledContent.classList.remove('hidden');
      if (compiledTab) {
        compiledTab.classList.add('bg-white', 'text-sky-600', 'shadow-lg');
        compiledTab.classList.remove('bg-transparent', 'text-gray-600');
      }
      if (typeof loadCompiledReports === 'function') {
        loadCompiledReports();
      }
    } else {
      if (summaryContent) summaryContent.classList.remove('hidden');
      if (summaryTab) {
        summaryTab.classList.add('bg-white', 'text-sky-600', 'shadow-lg');
        summaryTab.classList.remove('bg-transparent', 'text-gray-600');
      }
      if (typeof loadCompilationData === 'function') {
        loadCompilationData();
      }
    }
  }
  
  // Make switchTab globally available immediately
  window.switchTab = switchTab;
  console.log('✅ switchTab function is now globally available');

  let currentProjectId = null;
  let currentProjectData = null;
  let currentMilestoneData = null;

  document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      window.location.href = '/login/lgu-pmt';
      return;
    }
    
    try {
      const user = JSON.parse(userData);
      if (user.role !== 'LGU-PMT' || !user.subRole || !user.subRole.toLowerCase().includes('secretariat')) {
        window.location.href = '/login/lgu-pmt';
        return;
      }
    } catch (error) {
      console.error('Error parsing user data:', error);
      window.location.href = '/login/lgu-pmt';
    }

    loadCompilationData();
  });

  async function loadCompilationData() {
    console.log('🔄 loadCompilationData called');
    try {
      const token = localStorage.getItem('token');
      console.log('🔑 Token available:', !!token);
      
      // Add timeout to prevent hanging requests
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
      
      console.log('🌐 Making API request to compilation summary...');
      const response = await fetch('http://localhost:3000/api/projects/compilation/summary', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);
      console.log('📡 API response status:', response.status);

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log('📊 API response data:', data);
      
      if (data.success) {
        console.log('✅ API call successful, updating stats and loading departments');
        console.log('📊 API Response data:', data);
        updateOverallStats(data.overallStats);
        
        // Check if officeSummary has data, if not use fallback
        if (data.officeSummary && data.officeSummary.length > 0) {
          console.log('📊 Using API data for departments:', data.officeSummary.length, 'departments');
          loadDepartmentCards(data.officeSummary);
        } else {
          console.log('⚠️ API returned empty officeSummary, using fallback data');
          loadDepartmentCards(); // This will use fallback data
        }
      } else {
        console.log('❌ API returned success: false, error:', data.error);
        throw new Error(data.error || 'Failed to fetch compilation data');
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        console.error('❌ API request timed out. Using fallback data.');
      } else {
        console.error('❌ Error loading compilation data:', error);
      }
      // Load fallback data
      console.log('🔄 Loading fallback department data...');
      loadDepartmentCards();
    }
  }

  function updateOverallStats(stats) {
    console.log('📊 updateOverallStats called with:', stats);
    
    // Update individual card values instead of replacing the entire structure
    const totalProjectsEl = document.getElementById('totalProjects');
    if (totalProjectsEl) {
      totalProjectsEl.textContent = stats.totalProjects || 0;
    }
    
    const totalDepartmentsEl = document.getElementById('totalDepartments');
    if (totalDepartmentsEl) {
      totalDepartmentsEl.textContent = stats.totalDepartments || 0;
    }
    
    // Update header compilation count
    const headerCountEl = document.getElementById('headerCompilationCount');
    if (headerCountEl) {
      headerCountEl.textContent = `${stats.totalProjects || 0} Active Compilations`;
    }
    
    // Update other stats by finding elements with specific text content
    const cards = document.querySelectorAll('.profile-card');
    cards.forEach(card => {
      const titleEl = card.querySelector('p.text-sm.text-gray-600');
      if (titleEl) {
        const title = titleEl.textContent.trim();
        
        switch (title) {
          case 'Budget Utilized':
            const budgetUtilizedEl = card.querySelector('p.text-2xl.font-bold');
            if (budgetUtilizedEl) {
              budgetUtilizedEl.textContent = `₱${(stats.budgetUtilized || 0).toLocaleString()}`;
            }
            const budgetPercentEl = card.querySelector('p.text-xs.text-green-600');
            if (budgetPercentEl) {
              budgetPercentEl.textContent = `${stats.budgetUtilizedPercent || 0}% utilized`;
            }
            break;
          case 'Avg Progress':
            const progressEl = card.querySelector('p.text-2xl.font-bold');
            if (progressEl) {
              progressEl.textContent = `${stats.averageCompletion || 0}%`;
            }
            break;
          case 'Compiled':
            const compiledEl = card.querySelector('p.text-2xl.font-bold');
            if (compiledEl) {
              compiledEl.textContent = stats.compiledReports || 0;
            }
            break;
          case 'P.Review':
            const pendingEl = card.querySelector('p.text-2xl.font-bold');
            if (pendingEl) {
              pendingEl.textContent = stats.pendingReview || 0;
            }
            break;
          case 'Delayed':
            const delayedEl = card.querySelector('p.text-2xl.font-bold');
            const delayedMilestonesEl = card.querySelector('p.text-xs.text-red-500');
            if (delayedEl) {
              delayedEl.textContent = stats.delayedProjects || 0;
            }
            if (delayedMilestonesEl) {
              delayedMilestonesEl.textContent = `Delayed Milestones: ${stats.delayedMilestones || 0}`;
            }
            break;
          case 'Total Budget':
            const totalBudgetEl = card.querySelector('p.text-2xl.font-bold');
            if (totalBudgetEl) {
              totalBudgetEl.textContent = `₱${(stats.totalBudget || 0).toLocaleString()}`;
            }
            break;
        }
      }
    });
  }

  // Function to get department logo
  function getDepartmentLogo(departmentName) {
    console.log('🔍 Getting logo for department:', departmentName);
    const logoMap = {
      'Municipal Disaster And Risk Reduction Management Office': '/mdrrmo-logo.jfif',
      'Municipal Engineer\'s Office': '/meo-logo.jfif',
      'Municipal Agriculture Office': '/mao-logo.jfif',
      'Municipal Social Welfare and Development Office': '/mswdo-logo.jfif',
      'Municipal Environment and Natural Resources Office': '/menro-logo.jfif',
      'Municipal Environment And Natural Resources Office': '/menro-logo.jfif' // Alternative capitalization
    };
    
    // Try exact match first
    let logoPath = logoMap[departmentName];
    
    // If no exact match, try case-insensitive match
    if (!logoPath) {
      const lowerDepartmentName = departmentName.toLowerCase();
      for (const [key, value] of Object.entries(logoMap)) {
        if (key.toLowerCase() === lowerDepartmentName) {
          logoPath = value;
          break;
        }
      }
    }
    
    // If still no match, use default
    if (!logoPath) {
      logoPath = '/default-department-logo.png';
    }
    
    console.log('🔍 Logo path for', departmentName, ':', logoPath);
    return logoPath;
  }

  // Function to get department description
  function getDepartmentDescription(departmentName) {
    const descriptions = {
      'Municipal Disaster And Risk Reduction Management Office': 'Responsible for disaster risk reduction and emergency response management',
      'Municipal Engineer\'s Office': 'Handles infrastructure development and engineering projects',
      'Municipal Agriculture Office': 'Manages agricultural programs and rural development initiatives',
      'Municipal Social Welfare and Development Office': 'Oversees social welfare programs and community development',
      'Municipal Environment and Natural Resources Office': 'Manages environmental protection and natural resource conservation'
    };
    return descriptions[departmentName] || 'Department responsible for various municipal projects and programs';
  }

  // Function to get real last submission date from project data
  function getLastSubmissionDate(projects) {
    if (!projects || projects.length === 0) {
      return 'No Data';
    }
    
    // Find the most recent submission date from all projects
    let lastSubmission = null;
    
    projects.forEach(project => {
      // Check various date fields that might exist
      const dates = [
        project.lastSubmission,
        project.updatedAt,
        project.createdAt,
        project.submissionDate,
        project.lastUpdate
      ].filter(date => date);
      
      dates.forEach(date => {
        const dateObj = new Date(date);
        if (!isNaN(dateObj.getTime())) {
          if (!lastSubmission || dateObj > lastSubmission) {
            lastSubmission = dateObj;
          }
        }
      });
    });
    
    if (lastSubmission) {
      return lastSubmission.toLocaleDateString();
    }
    
    return 'No Data';
  }


  // Global department data
  let departmentsData = [];
  let currentCompilationView = 'departments';
  let currentCompilationDepartment = null;
  let lastClickTime = 0;
  
  // Navigation state for smooth transitions (similar to templates.astro)
  let currentView = 'summary'; // 'summary', 'department', 'project'
  let currentProject = null;
  let navigationHistory = [];

  // Global helper functions
  function getProjectImage(project) {
    if (project.initialPhoto && project.initialPhoto !== '' && project.initialPhoto !== 'None') {
      return project.initialPhoto.startsWith('http') ? project.initialPhoto : `http://localhost:3000${project.initialPhoto}`;
    }
    return '/projects-page-header-bg.png';
  }

  function showToast(message, type = 'info') {
    // Simple toast notification function
    const toast = document.createElement('div');
    toast.className = `fixed top-4 right-4 z-50 px-6 py-3 rounded-lg shadow-lg text-white font-medium transition-all duration-300 toast-notification ${
      type === 'error' ? 'bg-red-500' : 
      type === 'success' ? 'bg-green-500' : 
      type === 'warning' ? 'bg-yellow-500' : 
      'bg-blue-500'
    }`;
    toast.textContent = message;
    
    document.body.appendChild(toast);
    
    // Auto remove after 3 seconds
    setTimeout(() => {
      toast.style.opacity = '0';
      toast.style.transform = 'translateX(100%)';
      setTimeout(() => {
        if (toast.parentNode) {
          toast.parentNode.removeChild(toast);
        }
      }, 300);
    }, 3000);
  }
  const CLICK_DEBOUNCE_TIME = 500; // 500ms debounce

  function loadDepartmentCards(officeSummary = null) {
    const container = document.getElementById('departmentCards');
    console.log('🔄 loadDepartmentCards called with officeSummary:', officeSummary);
    
    if (!officeSummary || officeSummary.length === 0) {
      console.log('📝 No officeSummary provided, using basic department structure');
      // Basic department structure without mock project data
      officeSummary = [
        {
          office: 'Municipal Disaster And Risk Reduction Management Office',
          projects: []
        },
        {
          office: 'Municipal Engineer\'s Office',
          projects: []
        },
        {
          office: 'Municipal Agriculture Office',
          projects: []
        },
        {
          office: 'Municipal Social Welfare and Development Office',
          projects: []
        },
        {
          office: 'Municipal Environment and Natural Resources Office',
          projects: []
        }
      ];
    } else {
      console.log('📝 Using provided officeSummary with', officeSummary.length, 'departments');
    }

    // Transform office data to department format (same as templates.astro)
    departmentsData = officeSummary.map(officeData => {
      const departmentId = officeData.office.toLowerCase().replace(/\s+/g, '-').replace(/'/g, '');
      console.log('🏢 Creating department:', { 
        originalName: officeData.office, 
        generatedId: departmentId,
        projects: officeData.projects?.length || 0
      });
      
      return {
        id: departmentId,
      name: officeData.office,
      description: getDepartmentDescription(officeData.office),
      projects: officeData.projects || [],
      projectCount: officeData.projects?.length || 0,
      fileCount: 0
      };
    });

    console.log('📊 Loaded departments data:', departmentsData);
    console.log('📊 Department IDs check:', departmentsData.map(d => ({ 
      id: d.id, 
      name: d.name, 
      idLength: d.id.length,
      idChars: d.id.split('')
    })));

    // Set initial view to departments and render
    currentCompilationView = 'departments';
    currentCompilationDepartment = null;
    renderCompilationView();
    
    // Hover event listeners are now added in renderDepartmentOverview function
  }

  // Function to render department view (compilation-specific design)
  function renderDepartmentView(container) {
    console.log('🎨 renderDepartmentView called with departmentsData:', departmentsData);
    console.log('🎨 departmentsData length:', departmentsData ? departmentsData.length : 'undefined');
    
    if (!departmentsData || departmentsData.length === 0) {
      console.log('⚠️ No departments data, showing loading state');
      container.innerHTML = `
        <div class="text-center py-20">
          <div class="max-w-lg mx-auto">
            <div class="relative mb-8">
              <div class="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-red-400 to-red-600 rounded-2xl flex items-center justify-center shadow-2xl transform hover:scale-110 transition-all duration-500">
                <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
            </div>
            <h3 class="text-3xl font-bold text-gray-900 mb-4">Loading Compilation Data...</h3>
            <p class="text-gray-600 mb-8 leading-relaxed">Please wait while we fetch project compilation data from the system.</p>
            <button onclick="loadCompilationData()" class="bg-red-600 hover:bg-red-700 text-white inline-flex items-center gap-3 px-8 py-4 text-base font-semibold rounded-2xl transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Refresh Compilation Data
            </button>
          </div>
        </div>
      `;
      return;
    }
    
    console.log('✅ Rendering compilation department cards for', departmentsData.length, 'departments');
    
    const html = `
      <div class="space-y-8">
        <!-- Enhanced Section Header -->
        <div class="relative">
          <div class="absolute inset-0 bg-gradient-to-r from-sky-50 via-blue-50 to-sky-50 rounded-2xl opacity-50"></div>
          <div class="relative bg-white/80 backdrop-blur-sm border border-sky-200 rounded-2xl p-8">
        <div class="flex items-center justify-between">
              <div class="flex items-center gap-4">
                <div class="w-12 h-12 bg-gradient-to-br from-sky-500 to-sky-600 rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-110 hover:rotate-3 group cursor-pointer flex items-center justify-center">
                  <svg class="w-6 h-6 text-white group-hover:text-sky-100 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                  </svg>
                  <!-- Enhanced hover effect overlay -->
                  <div class="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <!-- Shimmer effect -->
                  <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent rounded-xl -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
                </div>
                <div>
                  <h2 class="text-3xl font-bold text-gray-900 mb-2">Compilation Summary by Department</h2>
                  <p class="text-gray-600">Comprehensive overview of project compilation status across all municipal departments</p>
                </div>
              </div>
              <div class="text-right">
                <div class="text-2xl font-bold text-sky-600">${departmentsData.length}</div>
                <div class="text-sm text-gray-600">Departments</div>
                <div class="text-lg font-semibold text-gray-800 mt-1">${departmentsData.reduce((sum, dept) => sum + dept.projectCount, 0)} Total Projects</div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Enhanced Department Cards Grid -->
        <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-8">
          ${departmentsData.map((dept, index) => {
            const compiledProjects = dept.projects.filter(p => p.hasCompiledReport || p.status === 'compiled_for_secretariat').length;
            const pendingProjects = dept.projects.length - compiledProjects;
            const overallProgress = dept.projects.length > 0 ? 
              Math.round(dept.projects.reduce((sum, p) => sum + (p.overallProgress || 0), 0) / dept.projects.length) : 0;
            
            // Dynamic color scheme based on progress
            const progressColor = overallProgress >= 80 ? 'from-emerald-500 to-green-600' : 
                                 overallProgress >= 50 ? 'from-blue-500 to-sky-600' : 
                                 overallProgress >= 25 ? 'from-amber-500 to-orange-600' : 'from-red-500 to-rose-600';
            
            // Status color based on overall progress percentage
            const statusColor = overallProgress >= 75 ? 'from-emerald-500 to-green-600' : 
                               overallProgress >= 50 ? 'from-blue-500 to-sky-600' : 
                               overallProgress >= 25 ? 'from-amber-500 to-orange-600' : 'from-red-500 to-red-600';
            
            return `
            <div class="group relative compilation-department-card-enhanced" 
                 data-dept-id="${dept.id}" 
                 data-dept-name="${dept.name}" 
                 onclick="navigateToDepartmentCompilationFromData(this, event)"
                 style="animation-delay: ${index * 100}ms">
              
              <!-- Card Background with Gradient Overlay -->
              <div class="absolute inset-0 bg-gradient-to-br from-white via-sky-50/30 to-blue-50/50 rounded-3xl opacity-0 group-hover:opacity-100 transition-all duration-700"></div>
              
              <!-- Main Card Content -->
              <div class="relative bg-white border border-gray-200 rounded-3xl p-8 shadow-lg hover:shadow-2xl transition-all duration-500 group-hover:-translate-y-2 group-hover:scale-[1.02] overflow-hidden">
                
                <!-- Animated Background Pattern -->
                <div class="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-sky-100/50 to-blue-100/50 rounded-full -translate-y-16 translate-x-16 group-hover:scale-150 transition-transform duration-700"></div>
                <div class="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-blue-100/30 to-sky-100/30 rounded-full translate-y-12 -translate-x-12 group-hover:scale-125 transition-transform duration-700"></div>
                
                <!-- Enhanced Header Section -->
                <div class="relative flex items-start gap-6 mb-8">
                  <!-- Enhanced Department Icon -->
                  <div class="relative">
                    <div class="w-16 h-16 bg-white border-4 border-gray-200 rounded-full shadow-lg group-hover:shadow-xl transition-all duration-500 group-hover:scale-110 group-hover:rotate-3 flex items-center justify-center overflow-hidden relative">
                      <!-- Enhanced logo with better contrast -->
                      <img src="${getDepartmentLogo(dept.name)}" alt="${dept.name}" class="w-12 h-12 object-contain relative z-10 group-hover:brightness-110 group-hover:contrast-125 transition-all duration-300" style="filter: brightness(1.1) contrast(1.2) drop-shadow(0 2px 4px rgba(0,0,0,0.3));" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                      <!-- Fallback initial with better styling -->
                      <div class="w-12 h-12 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center text-gray-500 font-bold text-xl group-hover:from-gray-200 group-hover:to-gray-300 group-hover:text-gray-600 transition-all duration-500 relative z-10" style="display: none;">
                    ${dept.name.charAt(0)}
                  </div>
                      <!-- Enhanced background overlay for better contrast -->
                      <div class="absolute inset-0 bg-white/20 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </div>
                    <!-- Enhanced Status Indicator Ring -->
                    <div class="absolute -inset-2 bg-gradient-to-r ${statusColor} rounded-full opacity-15 group-hover:opacity-25 transition-opacity duration-500"></div>
                    <div class="absolute -inset-3 bg-gradient-to-r ${statusColor} rounded-full opacity-8 group-hover:opacity-15 transition-opacity duration-500"></div>
                    <!-- Subtle inner glow effect -->
                    <div class="absolute inset-1 bg-white/30 rounded-full opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
                  </div>
                  
                  <!-- Department Info -->
                <div class="flex-1 min-w-0">
                    <h3 class="text-xl font-bold text-gray-900 mb-3 line-clamp-2 group-hover:text-sky-700 transition-colors duration-300">${dept.name}</h3>
                    <p class="text-sm text-gray-600 line-clamp-3 leading-relaxed">${getDepartmentDescription(dept.name)}</p>
                </div>
              </div>
              
                <!-- Enhanced Statistics Grid - 2x2 Layout -->
                <div class="grid grid-cols-2 gap-4 mb-8">
                  <!-- Total Projects Card -->
                  <div class="relative group/stat cursor-pointer">
                    <div class="absolute inset-0 bg-gradient-to-br from-blue-50 via-blue-100 to-blue-200 rounded-2xl group-hover/stat:from-blue-100 group-hover/stat:via-blue-200 group-hover/stat:to-blue-300 transition-all duration-500 shadow-lg group-hover/stat:shadow-xl"></div>
                    <div class="relative text-center p-5">
                      <!-- Enhanced Icon with Badge -->
                      <div class="flex items-center justify-center mb-3">
                        <div class="relative">
                          <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl flex items-center justify-center shadow-lg group-hover/stat:shadow-xl group-hover/stat:scale-110 transition-all duration-300">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                            </svg>
                          </div>
                          <!-- Notification Badge -->
                          <div class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 rounded-full flex items-center justify-center text-white text-xs font-bold shadow-lg group-hover/stat:scale-125 transition-transform duration-300">
                            ${dept.projectCount}
                          </div>
                        </div>
                      </div>
                      <div class="text-3xl font-bold text-blue-700 mb-1 group-hover/stat:scale-110 transition-transform duration-300">${dept.projectCount}</div>
                      <div class="text-xs text-blue-800 font-semibold uppercase tracking-wider">Total Projects</div>
                      <div class="w-8 h-1.5 bg-blue-400 rounded-full mx-auto mt-3 group-hover/stat:w-12 group-hover/stat:bg-blue-500 transition-all duration-300"></div>
                    </div>
                  </div>
              
                  <!-- Compiled Card -->
                  <div class="relative group/stat cursor-pointer">
                    <div class="absolute inset-0 bg-gradient-to-br from-emerald-50 via-green-100 to-emerald-200 rounded-2xl group-hover/stat:from-emerald-100 group-hover/stat:via-green-200 group-hover/stat:to-emerald-300 transition-all duration-500 shadow-lg group-hover/stat:shadow-xl"></div>
                    <div class="relative text-center p-5">
                      <!-- Enhanced Icon with Success Animation -->
                      <div class="flex items-center justify-center mb-3">
                        <div class="relative">
                          <div class="w-12 h-12 bg-gradient-to-br from-emerald-500 to-green-600 rounded-xl flex items-center justify-center shadow-lg group-hover/stat:shadow-xl group-hover/stat:scale-110 transition-all duration-300">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                          </div>
                          <!-- Success Pulse Ring -->
                          <div class="absolute inset-0 w-12 h-12 bg-emerald-400 rounded-xl opacity-0 group-hover/stat:opacity-30 group-hover/stat:scale-150 transition-all duration-500"></div>
                        </div>
                      </div>
                      <div class="text-3xl font-bold text-emerald-700 mb-1 group-hover/stat:scale-110 transition-transform duration-300">${compiledProjects}</div>
                      <div class="text-xs text-emerald-800 font-semibold uppercase tracking-wider">Compiled</div>
                      <div class="w-8 h-1.5 bg-emerald-400 rounded-full mx-auto mt-3 group-hover/stat:w-12 group-hover/stat:bg-emerald-500 transition-all duration-300"></div>
                    </div>
                  </div>
              
                  <!-- Total Milestones Card -->
                  <div class="relative group/stat cursor-pointer">
                    <div class="absolute inset-0 bg-gradient-to-br from-purple-50 via-violet-100 to-purple-200 rounded-2xl group-hover/stat:from-purple-100 group-hover/stat:via-violet-200 group-hover/stat:to-purple-300 transition-all duration-500 shadow-lg group-hover/stat:shadow-xl"></div>
                    <div class="relative text-center p-5">
                      <!-- Enhanced Icon with Milestone Badge -->
                      <div class="flex items-center justify-center mb-3">
                        <div class="relative">
                          <div class="w-12 h-12 bg-gradient-to-br from-purple-500 to-violet-600 rounded-xl flex items-center justify-center shadow-lg group-hover/stat:shadow-xl group-hover/stat:scale-110 transition-all duration-300">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"></path>
                            </svg>
                          </div>
                          <!-- Milestone Count Badge -->
                          <div class="absolute -top-1 -right-1 w-5 h-5 bg-violet-500 rounded-full flex items-center justify-center text-white text-xs font-bold shadow-lg group-hover/stat:scale-125 transition-transform duration-300">
                            ${dept.projects.reduce((sum, p) => sum + (p.milestones?.length || 0), 0)}
                          </div>
                        </div>
                      </div>
                      <div class="text-3xl font-bold text-purple-700 mb-1 group-hover/stat:scale-110 transition-transform duration-300">${dept.projects.reduce((sum, p) => sum + (p.milestones?.length || 0), 0)}</div>
                      <div class="text-xs text-purple-800 font-semibold uppercase tracking-wider">Total Milestones</div>
                      <div class="w-8 h-1.5 bg-purple-400 rounded-full mx-auto mt-3 group-hover/stat:w-12 group-hover/stat:bg-purple-500 transition-all duration-300"></div>
                    </div>
                  </div>
                  
                  <!-- Last Submission Card -->
                  <div class="relative group/stat cursor-pointer">
                    <div class="absolute inset-0 bg-gradient-to-br from-amber-50 via-orange-100 to-amber-200 rounded-2xl group-hover/stat:from-amber-100 group-hover/stat:via-orange-200 group-hover/stat:to-amber-300 transition-all duration-500 shadow-lg group-hover/stat:shadow-xl"></div>
                    <div class="relative text-center p-5">
                      <!-- Enhanced Icon with Time Animation -->
                      <div class="flex items-center justify-center mb-3">
                        <div class="relative">
                          <div class="w-12 h-12 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg group-hover/stat:shadow-xl group-hover/stat:scale-110 transition-all duration-300">
                            <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                          </div>
                          <!-- Time Pulse Animation -->
                          <div class="absolute inset-0 w-12 h-12 bg-amber-400 rounded-xl opacity-0 group-hover/stat:opacity-20 group-hover/stat:scale-125 transition-all duration-500 animate-pulse"></div>
                        </div>
                      </div>
                      <div class="text-lg font-bold text-amber-700 mb-1 group-hover/stat:scale-110 transition-transform duration-300">${getLastSubmissionDate(dept.projects)}</div>
                      <div class="text-xs text-amber-800 font-semibold uppercase tracking-wider">Last Submission</div>
                      <div class="w-8 h-1.5 bg-amber-400 rounded-full mx-auto mt-3 group-hover/stat:w-12 group-hover/stat:bg-amber-500 transition-all duration-300"></div>
                    </div>
                  </div>
                </div>
              
                <!-- Enhanced Progress Section -->
                <div class="mb-8">
                  <div class="flex items-center justify-between mb-4">
                    <div class="flex items-center gap-3">
                      <div class="w-3 h-3 bg-gradient-to-r ${progressColor} rounded-full animate-pulse"></div>
                      <span class="text-sm font-semibold text-gray-700">Overall Progress</span>
                    </div>
                <div class="flex items-center gap-2">
                      <span class="text-2xl font-bold text-gray-900">${overallProgress}%</span>
                      <div class="w-2 h-2 bg-gray-400 rounded-full"></div>
                </div>
                  </div>
                  
                  <!-- Enhanced Progress Bar -->
                  <div class="relative">
                    <div class="w-full bg-gray-200 rounded-full h-4 overflow-hidden">
                      <div 
                        class="h-full rounded-full transition-all duration-2000 ease-out progress-bar-fill relative overflow-hidden"
                        style="width: 0%"
                        data-progress="${overallProgress}"
                        data-progress-color="${overallProgress >= 0 && overallProgress <= 25 ? 'bg-red-500' : overallProgress >= 26 && overallProgress <= 50 ? 'bg-yellow-500' : overallProgress >= 51 && overallProgress <= 75 ? 'bg-blue-500' : overallProgress >= 76 && overallProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                      >
                        <!-- Animated shimmer effect -->
                        <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent -translate-x-full group-hover:translate-x-full transition-transform duration-1000"></div>
                      </div>
                    </div>
                    <!-- Progress markers -->
                    <div class="flex justify-between mt-2 text-xs text-gray-500">
                      <span>0%</span>
                      <span>25%</span>
                      <span>50%</span>
                      <span>75%</span>
                      <span>100%</span>
                    </div>
                  </div>
                </div>
                
                <!-- Enhanced Status Indicators -->
                <div class="flex items-center justify-between mb-8">
                  <div class="flex items-center gap-3 group/status">
                    <div class="relative">
                      <div class="w-4 h-4 bg-emerald-500 rounded-full group-hover/status:scale-125 transition-transform duration-300"></div>
                      <div class="absolute inset-0 w-4 h-4 bg-emerald-500 rounded-full animate-ping opacity-20"></div>
                    </div>
                    <span class="text-sm font-medium text-gray-700 group-hover/status:text-emerald-700 transition-colors duration-300">${compiledProjects} Compiled</span>
                  </div>
                  
                ${pendingProjects > 0 ? `
                  <div class="flex items-center gap-3 group/status">
                    <div class="relative">
                      <div class="w-4 h-4 bg-amber-500 rounded-full group-hover/status:scale-125 transition-transform duration-300"></div>
                      <div class="absolute inset-0 w-4 h-4 bg-amber-500 rounded-full animate-ping opacity-20"></div>
                    </div>
                    <span class="text-sm font-medium text-gray-700 group-hover/status:text-amber-700 transition-colors duration-300">${pendingProjects} Pending</span>
                </div>
                ` : ''}
              </div>
              
                <!-- Enhanced Action Footer -->
                <div class="relative">
                  <div class="flex items-center justify-between p-4 bg-gradient-to-r from-sky-50 to-blue-50 rounded-2xl group-hover:from-sky-100 group-hover:to-blue-100 transition-all duration-300">
                    <div class="flex items-center gap-3">
                      <div class="w-2 h-2 bg-sky-500 rounded-full animate-pulse"></div>
                      <span class="text-sm font-semibold text-sky-700 group-hover:text-sky-800 transition-colors duration-300">View compilation details</span>
                    </div>
                <div class="flex items-center gap-2">
                      <svg class="w-5 h-5 text-sky-600 group-hover:text-sky-700 transition-all duration-300 group-hover:translate-x-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6"></path>
                </svg>
                    </div>
                  </div>
                  
                  <!-- Hover effect overlay -->
                  <div class="absolute inset-0 bg-gradient-to-r from-sky-500/10 to-blue-500/10 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                </div>
              </div>
            </div>
            `;
          }).join('')}
        </div>
      </div>
    `;
    
    container.innerHTML = html;
    
    // Trigger progress animation for newly rendered department cards
    setTimeout(() => {
      setupProgressAnimation();
    }, 100);
    
    // Remove any filters from department logos to show original colors
    setTimeout(() => {
      const departmentLogos = container.querySelectorAll('img[src*="logo"]');
      departmentLogos.forEach(img => {
        img.style.filter = 'none !important';
        img.style.webkitFilter = 'none !important';
        img.style.mozFilter = 'none !important';
        img.style.msFilter = 'none !important';
        img.style.oFilter = 'none !important';
        console.log('Removed filters from logo:', img.src);
      });
    }, 100);
  }


  // Helper function to read data attributes and call original function
  window.expandDepartmentFromData = function(element) {
    const deptId = element.getAttribute('data-dept-id');
    const deptName = element.getAttribute('data-dept-name');
    expandDepartment(deptId, deptName);
  }

  // DEBUGGING: Add hover debugging function
  window.debugHoverAreas = function() {
    console.log('🔍 DEBUGGING: Analyzing hover areas...');
    
    const departmentCards = document.querySelectorAll('.compilation-department-card-enhanced');
    console.log(`Found ${departmentCards.length} department cards`);
    
    departmentCards.forEach((card, index) => {
      const rect = card.getBoundingClientRect();
      const deptName = card.getAttribute('data-dept-name') || `Card ${index + 1}`;
      
      console.log(`📋 ${deptName}:`, {
        top: rect.top,
        bottom: rect.bottom,
        height: rect.height,
        width: rect.width,
        zIndex: window.getComputedStyle(card).zIndex,
        position: window.getComputedStyle(card).position,
        margin: window.getComputedStyle(card).margin,
        padding: window.getComputedStyle(card).padding
      });
    });
    
    // Check for overlapping areas
    for (let i = 0; i < departmentCards.length - 1; i++) {
      const card1 = departmentCards[i];
      const card2 = departmentCards[i + 1];
      const rect1 = card1.getBoundingClientRect();
      const rect2 = card2.getBoundingClientRect();
      
      const gap = rect2.top - rect1.bottom;
      console.log(`📏 Gap between card ${i + 1} and ${i + 2}: ${gap}px`);
      
      if (gap < 0) {
        console.warn(`⚠️ OVERLAP DETECTED between card ${i + 1} and ${i + 2}!`);
      }
    }
  };

  // Helper function to navigate from data attributes (fixes syntax error)
  window.navigateToDepartmentCompilationFromData = function(element, event) {
    // Prevent event bubbling and default behavior
    if (event) {
      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
    }
    
    // Debounce rapid clicks
    const currentTime = Date.now();
    if (currentTime - lastClickTime < CLICK_DEBOUNCE_TIME) {
      console.log('🚫 Click debounced - too rapid');
      return;
    }
    lastClickTime = currentTime;
    
    console.log('🔍 Element clicked:', element);
    console.log('🔍 Element tagName:', element.tagName);
    console.log('🔍 Element className:', element.className);
    
    // Try to find the correct element with data attributes
    let targetElement = element;
    
    // If the clicked element doesn't have data attributes, try to find a parent that does
    if (!targetElement.getAttribute('data-dept-id')) {
      targetElement = element.closest('[data-dept-id]');
      console.log('🔍 Found parent element with data-dept-id:', targetElement);
    }
    
    if (!targetElement) {
      console.error('❌ No element with data-dept-id found');
      return;
    }
    
    console.log('🔍 Element attributes:', {
      'data-dept-id': targetElement.getAttribute('data-dept-id'),
      'data-dept-name': targetElement.getAttribute('data-dept-name'),
      'data-dept-index': targetElement.getAttribute('data-dept-index')
    });
    console.log('🔍 All data attributes:', Array.from(targetElement.attributes).map(attr => `${attr.name}="${attr.value}"`));
    
    const deptId = targetElement.getAttribute('data-dept-id');
    const deptName = targetElement.getAttribute('data-dept-name');
    console.log('🚀 Navigating to department compilation from data:', deptId, deptName);
    navigateToDepartmentCompilation(deptId, deptName);
  };

  // Function to navigate to dedicated department compilation page
  window.navigateToDepartmentCompilation = function(departmentId, departmentName) {
    console.log('🚀 Navigating to department compilation:', departmentId, departmentName);
    console.log('🚀 Available departments data:', departmentsData.map(d => ({ id: d.id, name: d.name })));
    
    // Update navigation state
    currentCompilationView = 'department-detail';
    currentCompilationDepartment = { id: departmentId, name: departmentName };
    currentView = 'department';
    navigationHistory.push({ type: 'department', id: departmentId, name: departmentName });
    
    console.log('🚀 Set currentCompilationDepartment to:', currentCompilationDepartment);
    
    // Render the department detail view
    renderCompilationView();
  };

  // Function to render the appropriate compilation view
  function renderCompilationView() {
    const container = document.getElementById('departmentCards');
    console.log('🎨 renderCompilationView called, currentCompilationView:', currentCompilationView, 'container:', container);
    
    if (!container) {
      console.error('❌ departmentCards container not found');
      return;
    }

    // Initialize view if not set
    if (!currentCompilationView) {
      currentCompilationView = 'departments';
      console.log('🔄 Initialized currentCompilationView to:', currentCompilationView);
    }

    if (currentCompilationView === 'departments') {
      console.log('📋 Rendering department overview');
      renderDepartmentOverview(container);
    } else if (currentCompilationView === 'department-detail' && currentCompilationDepartment) {
      console.log('📄 Rendering department detail for:', currentCompilationDepartment.name);
      renderDepartmentDetail(container);
    } else {
      console.log('⚠️ No matching view condition, defaulting to department overview');
      currentCompilationView = 'departments';
      renderDepartmentOverview(container);
    }
  }

  // Function to render department overview (grid of departments)
  function renderDepartmentOverview(container) {
    console.log('🏢 renderDepartmentOverview called, departmentsData:', departmentsData, 'length:', departmentsData ? departmentsData.length : 'undefined');
    
    if (!departmentsData || departmentsData.length === 0) {
      console.log('⚠️ No departments data, showing loading state');
      container.innerHTML = `
        <div class="text-center py-20">
          <div class="max-w-lg mx-auto">
            <div class="relative mb-8">
              <div class="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-red-400 to-red-600 rounded-2xl flex items-center justify-center shadow-2xl transform hover:scale-110 transition-all duration-500">
                <svg class="w-12 h-12 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
            </div>
            <h3 class="text-3xl font-bold text-gray-900 mb-4">Loading Compilation Data...</h3>
            <p class="text-gray-600 mb-8 leading-relaxed">Please wait while we fetch project compilation data from the system.</p>
            <button onclick="loadCompilationData()" class="bg-red-600 hover:bg-red-700 text-white inline-flex items-center gap-3 px-8 py-4 text-base font-semibold rounded-2xl transform hover:scale-105 transition-all duration-300 shadow-lg hover:shadow-xl">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Refresh Compilation Data
            </button>
          </div>
        </div>
      `;
      return;
    }

    // Render the department cards (existing code)
    const html = `
        <!-- Enhanced Section Header -->
        <div class="relative mb-8">
          <div class="absolute inset-0 bg-gradient-to-r from-sky-50 via-blue-50 to-sky-50 rounded-2xl opacity-50"></div>
          <div class="relative bg-white/80 backdrop-blur-sm border border-sky-200 rounded-2xl p-8">
        <div class="flex items-center justify-between">
              <div class="flex items-center gap-4">
                <div class="w-12 h-12 bg-gradient-to-br from-sky-500 to-sky-600 rounded-xl shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-110 hover:rotate-3 group cursor-pointer flex items-center justify-center">
                  <svg class="w-6 h-6 text-white group-hover:text-sky-100 transition-colors duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                  </svg>
                  <!-- Enhanced hover effect overlay -->
                  <div class="absolute inset-0 bg-gradient-to-br from-white/20 to-transparent rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                  <!-- Shimmer effect -->
                  <div class="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent rounded-xl -translate-x-full group-hover:translate-x-full transition-transform duration-700"></div>
                </div>
                <div>
                  <h2 class="text-3xl font-bold text-gray-900 mb-2">Compilation Summary by Department</h2>
                  <p class="text-gray-600">Comprehensive overview of project compilation status across all municipal departments</p>
                </div>
              </div>
              <div class="text-right">
                <div class="text-2xl font-bold text-sky-600">${departmentsData.length}</div>
                <div class="text-sm text-gray-600">Departments</div>
                <div class="text-lg font-semibold text-gray-800 mt-1">${departmentsData.reduce((sum, dept) => sum + dept.projectCount, 0)} Total Projects</div>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Enhanced Department Cards Grid -->
        <div style="display: flex !important; flex-direction: column !important; gap: 6rem !important; align-items: stretch !important; width: 100% !important; padding: 0 !important; margin: 0 !important; box-sizing: border-box !important;" id="department-grid-container">
        ${departmentsData.map((dept, index) => {
            const compiledProjects = dept.projects.filter(p => p.hasCompiledReport || p.status === 'compiled_for_secretariat').length;
            const pendingProjects = dept.projects.length - compiledProjects;
            const overallProgress = dept.projects.length > 0 ? 
              Math.round(dept.projects.reduce((sum, p) => sum + (p.overallProgress || 0), 0) / dept.projects.length) : 0;
            
            // Dynamic color scheme based on progress
            const progressColor = overallProgress >= 80 ? 'from-emerald-500 to-green-600' : 
                                 overallProgress >= 50 ? 'from-blue-500 to-sky-600' : 
                                 overallProgress >= 25 ? 'from-amber-500 to-orange-600' : 'from-red-500 to-rose-600';
            
            // Status color based on overall progress percentage
            const statusColor = overallProgress >= 75 ? 'from-emerald-500 to-green-600' : 
                               overallProgress >= 50 ? 'from-blue-500 to-sky-600' : 
                               overallProgress >= 25 ? 'from-amber-500 to-orange-600' : 'from-red-500 to-red-600';
            
            return `
            <div class="group relative compilation-department-card-enhanced" 
                 data-dept-id="${dept.id}" 
                 data-dept-name="${dept.name}" 
                 onclick="navigateToDepartmentCompilationFromData(this, event)"
                 style="animation-delay: ${index * 100}ms">
              
              <!-- Card Background with Gradient Overlay -->
              <div class="absolute inset-0 bg-gradient-to-br from-white via-sky-50/30 to-blue-50/50 rounded-3xl opacity-0 group-hover:opacity-100 transition-all duration-700"></div>
              
              <!-- Main Card Content -->
              <div class="relative bg-white border border-gray-200 rounded-3xl p-8 shadow-lg hover:shadow-2xl transition-all duration-500 group-hover:-translate-y-2 group-hover:scale-[1.02] overflow-hidden">
                
                <!-- Animated Background Pattern -->
                <div class="absolute top-0 right-0 w-32 h-32 bg-gradient-to-br from-sky-100/50 to-blue-100/50 rounded-full -translate-y-16 translate-x-16 group-hover:scale-150 transition-transform duration-700"></div>
                <div class="absolute bottom-0 left-0 w-24 h-24 bg-gradient-to-tr from-blue-100/30 to-sky-100/30 rounded-full translate-y-12 -translate-x-12 group-hover:scale-125 transition-transform duration-700"></div>
                
                <!-- Enhanced Header Section -->
                <div class="relative flex items-start gap-6 mb-8">
                  <!-- Enhanced Department Icon -->
                  <div class="relative">
                    <div class="w-16 h-16 bg-white border-4 border-gray-200 rounded-full shadow-lg flex items-center justify-center overflow-hidden relative">
                      <!-- Enhanced logo with better contrast - NO HOVER EFFECTS -->
                      <img src="${getDepartmentLogo(dept.name)}" alt="${dept.name}" class="w-12 h-12 object-contain relative z-10" style="filter: brightness(1.1) contrast(1.2) drop-shadow(0 2px 4px rgba(0,0,0,0.3));" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                      <!-- Fallback initial with better styling - NO HOVER EFFECTS -->
                      <div class="w-12 h-12 bg-gradient-to-br from-gray-100 to-gray-200 rounded-full flex items-center justify-center text-gray-500 font-bold text-xl relative z-10" style="display: none;">
                        ${dept.name.charAt(0)}
                      </div>
                    </div>
                    <!-- Enhanced Status Indicator Ring - NO HOVER EFFECTS -->
                    <div class="absolute -inset-2 bg-gradient-to-r ${statusColor} rounded-full opacity-15"></div>
                    <div class="absolute -inset-3 bg-gradient-to-r ${statusColor} rounded-full opacity-8"></div>
                  </div>
                  
                  <!-- Department Info -->
                <div class="flex-1 min-w-0">
                    <h3 class="text-xl font-bold text-gray-900 mb-3 line-clamp-2 group-hover:text-sky-700 transition-colors duration-300">${dept.name}</h3>
                    <p class="text-sm text-gray-600 line-clamp-3 leading-relaxed">${getDepartmentDescription(dept.name)}</p>
                </div>
              </div>
              
                <!-- Enhanced Statistics Grid - 2x2 Layout -->
                <div class="grid grid-cols-2 gap-4 mb-8">
                  <div class="relative group/stat">
                    <div class="absolute inset-0 bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl group-hover/stat:from-blue-100 group-hover/stat:to-blue-200 transition-all duration-300"></div>
                    <div class="relative text-center p-4">
                      <div class="flex items-center justify-center mb-2">
                        <svg class="w-5 h-5 text-blue-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                        </svg>
                      </div>
                      <div class="text-2xl font-bold text-blue-600 mb-1 group-hover/stat:scale-110 transition-transform duration-300">${dept.projectCount}</div>
                      <div class="text-xs text-blue-700 font-semibold uppercase tracking-wide">Total Projects</div>
                      <div class="w-6 h-1 bg-blue-300 rounded-full mx-auto mt-2 group-hover/stat:w-10 transition-all duration-300"></div>
                    </div>
                  </div>
                  
                  <div class="relative group/stat">
                    <div class="absolute inset-0 bg-gradient-to-br from-emerald-50 to-emerald-100 rounded-2xl group-hover/stat:from-emerald-100 group-hover/stat:to-emerald-200 transition-all duration-300"></div>
                    <div class="relative text-center p-4">
                      <div class="flex items-center justify-center mb-2">
                        <svg class="w-5 h-5 text-emerald-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                      </div>
                      <div class="text-2xl font-bold text-emerald-600 mb-1 group-hover/stat:scale-110 transition-transform duration-300">${compiledProjects}</div>
                      <div class="text-xs text-emerald-700 font-semibold uppercase tracking-wide">Compiled</div>
                      <div class="w-6 h-1 bg-emerald-300 rounded-full mx-auto mt-2 group-hover/stat:w-10 transition-all duration-300"></div>
                    </div>
                  </div>
                  
                  <div class="relative group/stat">
                    <div class="absolute inset-0 bg-gradient-to-br from-purple-50 to-purple-100 rounded-2xl group-hover/stat:from-purple-100 group-hover/stat:to-purple-200 transition-all duration-300"></div>
                    <div class="relative text-center p-4">
                      <div class="flex items-center justify-center mb-2">
                        <svg class="w-5 h-5 text-purple-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                      </div>
                      <div class="text-2xl font-bold text-purple-600 mb-1 group-hover/stat:scale-110 transition-transform duration-300">${dept.projects.reduce((sum, p) => sum + (p.milestoneCount || 0), 0)}</div>
                      <div class="text-xs text-purple-700 font-semibold uppercase tracking-wide">Total Milestones</div>
                      <div class="w-6 h-1 bg-purple-300 rounded-full mx-auto mt-2 group-hover/stat:w-10 transition-all duration-300"></div>
                    </div>
                  </div>
                  
                  <div class="relative group/stat">
                    <div class="absolute inset-0 bg-gradient-to-br from-amber-50 to-amber-100 rounded-2xl group-hover/stat:from-amber-100 group-hover/stat:to-amber-200 transition-all duration-300"></div>
                    <div class="relative text-center p-4">
                      <div class="flex items-center justify-center mb-2">
                        <svg class="w-5 h-5 text-amber-600 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                      </div>
                      <div class="text-sm font-bold text-amber-600 mb-1 group-hover/stat:scale-110 transition-transform duration-300">${getLastSubmissionDate(dept.projects)}</div>
                      <div class="text-xs text-amber-700 font-semibold uppercase tracking-wide">Last Submission</div>
                      <div class="w-6 h-1 bg-amber-300 rounded-full mx-auto mt-2 group-hover/stat:w-10 transition-all duration-300"></div>
                    </div>
                  </div>
                </div>
                
                <!-- Enhanced Progress Section -->
                <div class="relative">
                  <div class="flex items-center justify-between mb-4">
                    <h4 class="text-lg font-semibold text-gray-800">Overall Progress</h4>
                    <span class="text-2xl font-bold ${overallProgress >= 75 ? 'text-emerald-600' : overallProgress >= 50 ? 'text-blue-600' : overallProgress >= 25 ? 'text-amber-600' : 'text-red-600'}">${overallProgress}%</span>
                  </div>
                  
                  <!-- Enhanced Progress Bar -->
                  <div class="relative w-full h-4 bg-gray-200 rounded-full overflow-hidden">
                    <div class="absolute inset-0 bg-gradient-to-r from-gray-100 to-gray-200 rounded-full"></div>
                    <div 
                      class="relative h-full rounded-full transition-all duration-2000 ease-out progress-bar-fill"
                      style="width: 0%"
                      data-progress="${overallProgress}"
                      data-progress-color="${overallProgress >= 0 && overallProgress <= 25 ? 'bg-red-500' : overallProgress >= 26 && overallProgress <= 50 ? 'bg-yellow-500' : overallProgress >= 51 && overallProgress <= 75 ? 'bg-blue-500' : overallProgress >= 76 && overallProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                    >
                      <div class="absolute inset-0 bg-gradient-to-r from-white/30 to-transparent rounded-full"></div>
                    </div>
                    <!-- Progress markers -->
                    <div class="absolute top-0 left-0 w-1 h-full bg-white/50"></div>
                    <div class="absolute top-0 left-1/4 w-1 h-full bg-white/30"></div>
                    <div class="absolute top-0 left-1/2 w-1 h-full bg-white/30"></div>
                    <div class="absolute top-0 left-3/4 w-1 h-full bg-white/30"></div>
                    <div class="absolute top-0 right-0 w-1 h-full bg-white/50"></div>
                  </div>
                  
                  <!-- Progress Labels -->
                  <div class="flex justify-between text-xs text-gray-500 mt-2">
                    <span>0%</span>
                    <span>25%</span>
                    <span>50%</span>
                    <span>75%</span>
                    <span>100%</span>
                  </div>
                </div>
                
                <!-- Enhanced Action Footer -->
                <div class="flex items-center justify-between mt-8 pt-6 border-t border-gray-100">
                  <div class="flex items-center gap-4">
                    <div class="flex items-center gap-3 group/status">
                      <div class="relative">
                        <div class="w-4 h-4 bg-emerald-500 rounded-full group-hover/status:scale-125 transition-transform duration-300"></div>
                        <div class="absolute inset-0 w-4 h-4 bg-emerald-500 rounded-full animate-ping opacity-20"></div>
                      </div>
                      <span class="text-sm font-medium text-gray-700 group-hover/status:text-emerald-700 transition-colors duration-300">${compiledProjects} Compiled</span>
                    </div>
                    
                ${pendingProjects > 0 ? `
                  <div class="flex items-center gap-3 group/status">
                    <div class="relative">
                      <div class="w-4 h-4 bg-amber-500 rounded-full group-hover/status:scale-125 transition-transform duration-300"></div>
                      <div class="absolute inset-0 w-4 h-4 bg-amber-500 rounded-full animate-ping opacity-20"></div>
                    </div>
                    <span class="text-sm font-medium text-gray-700 group-hover/status:text-amber-700 transition-colors duration-300">${pendingProjects} Pending</span>
                </div>
                ` : ''}
              </div>
              
                <!-- Enhanced Action Button -->
                <div class="flex items-center gap-2 text-sky-600 hover:text-sky-700 transition-colors duration-300 group/action">
                  <span class="text-sm font-medium">View compilation details</span>
                  <svg class="w-4 h-4 transform group-hover:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
                </div>
              </div>
            </div>
            `;
          }).join('')}
        </div>
    `;
    
    console.log('📝 Setting container HTML, departmentsData length:', departmentsData.length);
    container.innerHTML = html;
    console.log('✅ Container HTML set successfully');
    
    // FORCE SPACING: Apply JavaScript-based spacing fix after rendering
    setTimeout(() => {
      const gridContainer = document.getElementById('department-grid-container');
      if (gridContainer) {
        console.log('🔧 Applying JavaScript-based spacing fix to department overview...');
        
        // Force flexbox properties with maximum specificity
        gridContainer.style.cssText = `
          display: flex !important;
          flex-direction: column !important;
          gap: 6rem !important;
          align-items: stretch !important;
          width: 100% !important;
          padding: 0 !important;
          margin: 0 !important;
          box-sizing: border-box !important;
          grid-template-columns: none !important;
          grid-template-rows: none !important;
          grid-auto-flow: unset !important;
        `;
        
        // Force spacing on each card with maximum specificity
        const cards = gridContainer.querySelectorAll('.compilation-department-card-enhanced');
        cards.forEach((card, index) => {
          card.style.cssText = `
            width: 100% !important;
            flex-shrink: 0 !important;
            position: relative !important;
            margin: ${index === 0 ? '0' : '6rem 0 0 0'} !important;
            padding: 0 !important;
            box-sizing: border-box !important;
            min-height: 200px !important;
            top: auto !important;
            left: auto !important;
            right: auto !important;
            bottom: auto !important;
            transform: none !important;
            float: none !important;
            clear: both !important;
            isolation: isolate !important;
            z-index: 1 !important;
          `;
        });
        
        console.log('✅ JavaScript-based spacing fix applied to', cards.length, 'department cards');
        
        // REMOVED: Problematic JavaScript hover listeners that were causing global hover effects
        // The CSS hover effects are now properly isolated using CSS containment and z-index
        
        // REMOVED: Container pointer-events manipulation that was interfering with hover
        // CSS hover effects are now properly isolated using CSS containment
      }
    }, 50);
  }

  // Function to render department detail view (dedicated page)
  function renderDepartmentDetail(container) {
    console.log('🔍 renderDepartmentDetail called with:', currentCompilationDepartment);
    console.log('🔍 Available departments:', departmentsData.map(d => ({ id: d.id, name: d.name })));
    
    console.log('🔍 Searching for department with ID:', currentCompilationDepartment.id);
    console.log('🔍 Available department IDs:', departmentsData.map(d => d.id));
    console.log('🔍 Exact match check:', departmentsData.map(d => ({ 
      id: d.id, 
      name: d.name, 
      matches: d.id === currentCompilationDepartment.id 
    })));
    
    let dept = departmentsData.find(d => d.id === currentCompilationDepartment.id);
    console.log('🔍 Found department:', dept);
    
    // If not found by ID, try to find by name as fallback
    if (!dept) {
      console.log('⚠️ Department not found by ID, trying to find by name:', currentCompilationDepartment.name);
      const deptByName = departmentsData.find(d => d.name === currentCompilationDepartment.name);
      if (deptByName) {
        console.log('✅ Found department by name:', deptByName);
        // Update the current department with the correct ID
        currentCompilationDepartment.id = deptByName.id;
        dept = deptByName;
      } else {
        console.error('❌ Department not found by name either. Available departments:', departmentsData.map(d => d.name));
        // Try to find by partial name match as last resort
        const partialMatch = departmentsData.find(d => 
          d.name.toLowerCase().includes(currentCompilationDepartment.name.toLowerCase()) ||
          currentCompilationDepartment.name.toLowerCase().includes(d.name.toLowerCase())
        );
        if (partialMatch) {
          console.log('✅ Found department by partial name match:', partialMatch);
          currentCompilationDepartment.id = partialMatch.id;
          currentCompilationDepartment.name = partialMatch.name;
          dept = partialMatch;
        }
      }
    }
    
    if (!dept) {
      console.error('❌ Department not found with ID:', currentCompilationDepartment.id, 'or name:', currentCompilationDepartment.name);
      container.innerHTML = '<div class="text-center py-20"><h3 class="text-2xl font-bold text-gray-900">Department not found</h3></div>';
      return;
    }

    // Fetch actual projects for this department from backend
    fetchDepartmentProjects(dept.id, dept.name).then(projects => {
      const html = `
        ${renderBreadcrumb()}

        <!-- Department Header -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-8 mb-8">
          <!-- Back Button -->
          <div class="mb-6">
            <button onclick="showCompilationSummary()" class="back-button inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 rounded-lg transition-all duration-200 group">
              <svg class="w-4 h-4 group-hover:-translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
              </svg>
              Back to Compilation Summary
            </button>
          </div>
          
          <div class="flex items-center gap-6">
            <div class="w-20 h-20 bg-gradient-to-br from-sky-500 to-sky-600 rounded-2xl flex items-center justify-center shadow-xl">
              <img src="${getDepartmentLogo(dept.name)}" alt="${dept.name}" class="w-12 h-12 object-contain" onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
              <div class="w-12 h-12 bg-white rounded-lg flex items-center justify-center text-sky-600 font-bold text-xl" style="display: none;">
                ${dept.name.charAt(0)}
              </div>
            </div>
            <div class="flex-1">
              <h1 class="text-3xl font-bold text-gray-900 mb-2">${dept.name}</h1>
              <p class="text-gray-600 text-lg">${getDepartmentDescription(dept.name)}</p>
            </div>
            <div class="text-right">
              <div class="text-3xl font-bold text-sky-600">${projects.length}</div>
              <div class="text-sm text-gray-600">Total Projects</div>
            </div>
          </div>
        </div>

        <!-- Projects Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          ${projects.length > 0 ? projects.map(project => renderProjectCardHTML(project)).join('') : `
            <div class="col-span-full text-center py-20">
              <div class="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl flex items-center justify-center">
                <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                </svg>
              </div>
              <h3 class="text-2xl font-bold text-gray-900 mb-4">No Projects Found</h3>
              <p class="text-gray-600">This department doesn't have any projects yet.</p>
            </div>
          `}
      </div>
    `;
    
    container.innerHTML = html;
    
    // Trigger progress animation for newly rendered project cards
    setTimeout(() => {
      setupProgressAnimation();
    }, 100);
    });
  }

  // Function to go back to departments overview
  window.goBackToDepartments = function() {
    currentCompilationView = 'departments';
    currentCompilationDepartment = null;
    renderCompilationView();
  };

  // DEBUGGING FUNCTION: Analyze hover issue
  window.debugHoverIssue = function() {
    console.log('🔍 DEBUGGING HOVER ISSUE...');
    
    const container = document.getElementById('department-grid-container');
    if (!container) {
      console.log('❌ department-grid-container not found');
      return;
    }
    
    const cards = container.querySelectorAll('.compilation-department-card-enhanced');
    console.log(`📋 Found ${cards.length} department cards`);
    
    cards.forEach((card, index) => {
      const deptName = card.getAttribute('data-dept-name') || `Card ${index + 1}`;
      const computedStyle = window.getComputedStyle(card);
      
      console.log(`\n📋 ${deptName}:`);
      console.log(`  - Border: ${computedStyle.borderColor}`);
      console.log(`  - Background: ${computedStyle.backgroundColor}`);
      console.log(`  - Z-index: ${computedStyle.zIndex}`);
      console.log(`  - Position: ${computedStyle.position}`);
      console.log(`  - Isolation: ${computedStyle.isolation}`);
      console.log(`  - Pointer-events: ${computedStyle.pointerEvents}`);
      
      // Check if card has hover styles applied
      const hasRedBorder = computedStyle.borderColor.includes('255, 0, 0') || computedStyle.borderColor.includes('red');
      const hasRedBackground = computedStyle.backgroundColor.includes('255, 0, 0') || computedStyle.backgroundColor.includes('red');
      
      if (hasRedBorder || hasRedBackground) {
        console.log(`  ⚠️ HAS HOVER STYLES APPLIED (should only be on hovered card)`);
      }
    });
    
    // Check container styles
    const containerStyle = window.getComputedStyle(container);
    console.log(`\n📦 Container styles:`);
    console.log(`  - Display: ${containerStyle.display}`);
    console.log(`  - Pointer-events: ${containerStyle.pointerEvents}`);
    console.log(`  - Position: ${containerStyle.position}`);
    
    // Check for any CSS rules that might be causing the issue
    console.log(`\n🎯 Checking for problematic CSS rules...`);
    const allElements = document.querySelectorAll('*');
    let problematicElements = [];
    
    allElements.forEach(el => {
      const style = window.getComputedStyle(el);
      if (style.borderColor.includes('255, 0, 0') || style.borderColor.includes('red')) {
        if (!el.classList.contains('compilation-department-card-enhanced')) {
          problematicElements.push({
            element: el,
            tagName: el.tagName,
            className: el.className,
            borderColor: style.borderColor
          });
        }
      }
    });
    
    if (problematicElements.length > 0) {
      console.log(`⚠️ Found ${problematicElements.length} elements with red borders that are NOT department cards:`);
      problematicElements.forEach(el => {
        console.log(`  - ${el.tagName}.${el.className}: ${el.borderColor}`);
      });
    } else {
      console.log(`✅ No problematic elements found`);
    }
  };

  // ENHANCED DEBUGGING FUNCTION: Find visual hover source
  window.debugVisualHover = function() {
    console.log('🔍 DEBUGGING VISUAL HOVER SOURCE...');
    
    // Find all elements with red borders or backgrounds
    const allElements = document.querySelectorAll('*');
    let redElements = [];
    
    allElements.forEach(el => {
      const style = window.getComputedStyle(el);
      const hasRedBorder = style.borderColor.includes('255, 0, 0') || style.borderColor.includes('red');
      const hasRedBackground = style.backgroundColor.includes('255, 0, 0') || style.backgroundColor.includes('red');
      
      if (hasRedBorder || hasRedBackground) {
        redElements.push({
          element: el,
          tagName: el.tagName,
          className: el.className,
          id: el.id,
          borderColor: style.borderColor,
          backgroundColor: style.backgroundColor,
          parentElement: el.parentElement ? el.parentElement.className : 'none'
        });
      }
    });
    
    console.log(`🎯 Found ${redElements.length} elements with red styling:`);
    redElements.forEach(el => {
      console.log(`  - ${el.tagName}.${el.className}#${el.id}`);
      console.log(`    Border: ${el.borderColor}`);
      console.log(`    Background: ${el.backgroundColor}`);
      console.log(`    Parent: ${el.parentElement}`);
    });
    
    // Check for CSS rules that might be applying hover to multiple elements
    console.log(`\n🔍 Checking for CSS rules that might cause group hover...`);
    const styleSheets = document.styleSheets;
    let groupHoverRules = [];
    
    try {
      for (let i = 0; i < styleSheets.length; i++) {
        const sheet = styleSheets[i];
        if (sheet.cssRules) {
          for (let j = 0; j < sheet.cssRules.length; j++) {
            const rule = sheet.cssRules[j];
            if (rule.selectorText && rule.selectorText.includes('hover')) {
              if (rule.selectorText.includes('compilation-department-card') || 
                  rule.selectorText.includes('department-grid-container')) {
                groupHoverRules.push({
                  selector: rule.selectorText,
                  cssText: rule.cssText
                });
              }
            }
          }
        }
      }
    } catch (e) {
      console.log('⚠️ Could not access some stylesheets (CORS)');
    }
    
    if (groupHoverRules.length > 0) {
      console.log(`⚠️ Found ${groupHoverRules.length} potentially problematic hover rules:`);
      groupHoverRules.forEach(rule => {
        console.log(`  - ${rule.selector}`);
        console.log(`    ${rule.cssText}`);
      });
    } else {
      console.log(`✅ No problematic hover rules found`);
    }
  };

  // DEBUGGING FUNCTION: Check inline styles of department cards
  window.debugInlineStyles = function() {
    console.log('🔍 DEBUGGING INLINE STYLES...');
    
    const container = document.getElementById('department-grid-container');
    if (!container) {
      console.log('❌ department-grid-container not found');
      return;
    }
    
    const cards = container.querySelectorAll('.compilation-department-card-enhanced');
    console.log(`📋 Found ${cards.length} department cards`);
    
    cards.forEach((card, index) => {
      const deptName = card.getAttribute('data-dept-name') || `Card ${index + 1}`;
      
      console.log(`\n📋 ${deptName}:`);
      console.log(`  - Inline border: ${card.style.border}`);
      console.log(`  - Inline background: ${card.style.backgroundColor}`);
      console.log(`  - Inline z-index: ${card.style.zIndex}`);
      
      // Check computed styles
      const computedStyle = window.getComputedStyle(card);
      console.log(`  - Computed border: ${computedStyle.borderColor}`);
      console.log(`  - Computed background: ${computedStyle.backgroundColor}`);
      
      // Check if inline styles match computed styles
      const hasRedInline = card.style.border.includes('red') || card.style.backgroundColor.includes('255, 0, 0');
      const hasRedComputed = computedStyle.borderColor.includes('255, 0, 0') || computedStyle.backgroundColor.includes('255, 0, 0');
      
      if (hasRedInline || hasRedComputed) {
        console.log(`  ⚠️ HAS RED STYLING (inline: ${hasRedInline}, computed: ${hasRedComputed})`);
      }
    });
  };

  // FUNCTION: Reset all cards to transparent
  window.resetAllCards = function() {
    console.log('🔄 Resetting all cards to transparent...');
    
    const container = document.getElementById('department-grid-container');
    if (!container) {
      console.log('❌ department-grid-container not found');
      return;
    }
    
    const cards = container.querySelectorAll('.compilation-department-card-enhanced');
    cards.forEach((card, index) => {
      const deptName = card.getAttribute('data-dept-name') || `Card ${index + 1}`;
      
      // ULTRA-AGGRESSIVE: Force transparent styling with maximum specificity
      card.style.cssText = `
        border: 2px solid transparent !important;
        background-color: transparent !important;
        background: transparent !important;
        z-index: 1 !important;
        box-shadow: none !important;
        outline: none !important;
      `;
      
      // Also reset any child elements
      const childElements = card.querySelectorAll('*');
      childElements.forEach(child => {
        child.style.border = 'none';
        child.style.backgroundColor = 'transparent';
        child.style.background = 'transparent';
        child.style.boxShadow = 'none';
        child.style.outline = 'none';
      });
      
      console.log(`✅ Reset ${deptName}`);
    });
    
    console.log(`✅ Reset ${cards.length} cards to transparent state`);
  };

  // FUNCTION: Force override all styling
  window.forceOverrideAllStyling = function() {
    console.log('💥 FORCE OVERRIDING ALL STYLING...');
    
    const container = document.getElementById('department-grid-container');
    if (!container) {
      console.log('❌ department-grid-container not found');
      return;
    }
    
    const cards = container.querySelectorAll('.compilation-department-card-enhanced');
    cards.forEach((card, index) => {
      const deptName = card.getAttribute('data-dept-name') || `Card ${index + 1}`;
      
      // Remove all classes that might be causing the issue
      card.classList.remove('border-red-500', 'border-red-600', 'bg-red-50', 'bg-red-100', 'hover:border-red-500', 'hover:bg-red-50');
      
      // Force transparent styling with maximum specificity
      card.style.setProperty('border', '2px solid transparent', 'important');
      card.style.setProperty('background-color', 'transparent', 'important');
      card.style.setProperty('background', 'transparent', 'important');
      card.style.setProperty('z-index', '1', 'important');
      card.style.setProperty('box-shadow', 'none', 'important');
      card.style.setProperty('outline', 'none', 'important');
      
      console.log(`💥 Force overrode ${deptName}`);
    });
    
    console.log(`💥 Force overrode ${cards.length} cards`);
  };

  // FUNCTION: Find the exact source of red styling
  window.findRedStylingSource = function() {
    console.log('🔍 FINDING RED STYLING SOURCE...');
    
    const container = document.getElementById('department-grid-container');
    if (!container) {
      console.log('❌ department-grid-container not found');
      return;
    }
    
    const cards = container.querySelectorAll('.compilation-department-card-enhanced');
    
    cards.forEach((card, index) => {
      const deptName = card.getAttribute('data-dept-name') || `Card ${index + 1}`;
      console.log(`\n🔍 Analyzing ${deptName}:`);
      
      // Check all possible sources of styling
      console.log(`  - Element classes: ${card.className}`);
      console.log(`  - Element ID: ${card.id}`);
      console.log(`  - Inline styles: ${card.style.cssText}`);
      
      // Check computed styles
      const computed = window.getComputedStyle(card);
      console.log(`  - Computed border: ${computed.border}`);
      console.log(`  - Computed background: ${computed.background}`);
      console.log(`  - Computed box-shadow: ${computed.boxShadow}`);
      
      // Check parent elements
      let parent = card.parentElement;
      let level = 1;
      while (parent && level <= 3) {
        const parentComputed = window.getComputedStyle(parent);
        if (parentComputed.borderColor.includes('255, 0, 0') || parentComputed.backgroundColor.includes('255, 0, 0')) {
          console.log(`  - ⚠️ Parent level ${level} has red styling: ${parent.tagName}.${parent.className}`);
          console.log(`    Border: ${parentComputed.borderColor}`);
          console.log(`    Background: ${parentComputed.backgroundColor}`);
        }
        parent = parent.parentElement;
        level++;
      }
      
      // Check for any pseudo-elements
      const beforeComputed = window.getComputedStyle(card, '::before');
      const afterComputed = window.getComputedStyle(card, '::after');
      if (beforeComputed.borderColor.includes('255, 0, 0') || beforeComputed.backgroundColor.includes('255, 0, 0')) {
        console.log(`  - ⚠️ ::before pseudo-element has red styling`);
      }
      if (afterComputed.borderColor.includes('255, 0, 0') || afterComputed.backgroundColor.includes('255, 0, 0')) {
        console.log(`  - ⚠️ ::after pseudo-element has red styling`);
      }
    });
  };

  // FUNCTION: Nuclear option - remove all styling and rebuild
  window.nuclearReset = function() {
    console.log('☢️ NUCLEAR RESET INITIATED...');
    
    const container = document.getElementById('department-grid-container');
    if (!container) {
      console.log('❌ department-grid-container not found');
      return;
    }
    
    const cards = container.querySelectorAll('.compilation-department-card-enhanced');
    cards.forEach((card, index) => {
      const deptName = card.getAttribute('data-dept-name') || `Card ${index + 1}`;
      
      // Remove ALL classes
      card.className = 'compilation-department-card-enhanced';
      
      // Remove ALL inline styles
      card.removeAttribute('style');
      
      // Force transparent styling with maximum specificity
      card.style.cssText = `
        border: 2px solid transparent !important;
        background-color: transparent !important;
        background: transparent !important;
        z-index: 1 !important;
        box-shadow: none !important;
        outline: none !important;
        position: relative !important;
        isolation: isolate !important;
        pointer-events: auto !important;
      `;
      
      // CRITICAL: Reset logo containers that have red status rings
      const logoContainers = card.querySelectorAll('.w-16, .w-12, .w-14, .w-20');
      logoContainers.forEach(logoContainer => {
        logoContainer.style.border = 'none';
        logoContainer.style.background = 'none';
        logoContainer.style.boxShadow = 'none';
        logoContainer.style.outline = 'none';
        logoContainer.style.backgroundImage = 'none';
        logoContainer.style.backgroundSize = 'none';
        logoContainer.style.backgroundRepeat = 'none';
        logoContainer.style.backgroundPosition = 'none';
      });
      
      console.log(`☢️ Nuclear reset ${deptName}`);
    });
    
    console.log(`☢️ Nuclear reset completed for ${cards.length} cards`);
  };

  // FUNCTION: Reset logo containers specifically
  window.resetLogoContainers = function() {
    console.log('🎯 RESETTING LOGO CONTAINERS...');
    
    const container = document.getElementById('department-grid-container');
    if (!container) {
      console.log('❌ department-grid-container not found');
      return;
    }
    
    const cards = container.querySelectorAll('.compilation-department-card-enhanced');
    cards.forEach((card, index) => {
      const deptName = card.getAttribute('data-dept-name') || `Card ${index + 1}`;
      
      // Find and reset logo containers
      const logoContainers = card.querySelectorAll('.w-16, .w-12, .w-14, .w-20');
      logoContainers.forEach(logoContainer => {
        // Remove any gradient or background classes
        logoContainer.classList.remove('bg-gradient-to-br', 'bg-gradient-to-r', 'bg-gradient-to-l', 'from-red-500', 'to-red-600', 'from-emerald-500', 'to-green-600', 'from-blue-500', 'to-sky-600', 'from-amber-500', 'to-orange-600');
        
        // Force transparent styling
        logoContainer.style.cssText = `
          border: none !important;
          background: none !important;
          background-image: none !important;
          background-size: none !important;
          background-repeat: none !important;
          background-position: none !important;
          box-shadow: none !important;
          outline: none !important;
        `;
      });
      
      console.log(`🎯 Reset logo containers for ${deptName}`);
    });
    
    console.log(`🎯 Reset logo containers for ${cards.length} cards`);
  };

  // FUNCTION: Find ALL elements with red styling
  window.findAllRedElements = function() {
    console.log('🔍 FINDING ALL ELEMENTS WITH RED STYLING...');
    
    const allElements = document.querySelectorAll('*');
    let redElements = [];
    
    allElements.forEach(el => {
      const style = window.getComputedStyle(el);
      const hasRedBorder = style.borderColor.includes('255, 0, 0') || style.borderColor.includes('red');
      const hasRedBackground = style.backgroundColor.includes('255, 0, 0') || style.backgroundColor.includes('red');
      const hasRedBoxShadow = style.boxShadow.includes('255, 0, 0') || style.boxShadow.includes('red');
      
      if (hasRedBorder || hasRedBackground || hasRedBoxShadow) {
        redElements.push({
          element: el,
          tagName: el.tagName,
          className: el.className,
          id: el.id,
          borderColor: style.borderColor,
          backgroundColor: style.backgroundColor,
          boxShadow: style.boxShadow,
          parentElement: el.parentElement ? el.parentElement.className : 'none'
        });
      }
    });
    
    console.log(`🎯 Found ${redElements.length} elements with red styling:`);
    redElements.forEach((el, index) => {
      console.log(`\n${index + 1}. ${el.tagName}.${el.className}#${el.id}`);
      console.log(`   Border: ${el.borderColor}`);
      console.log(`   Background: ${el.backgroundColor}`);
      console.log(`   Box-shadow: ${el.boxShadow}`);
      console.log(`   Parent: ${el.parentElement}`);
    });
    
    return redElements;
  };

  // FUNCTION: Nuclear option - remove ALL red styling from ALL elements
  window.removeAllRedStyling = function() {
    console.log('☢️ REMOVING ALL RED STYLING FROM ALL ELEMENTS...');
    
    const redElements = window.findAllRedElements();
    
    redElements.forEach((el, index) => {
      const element = el.element;
      console.log(`☢️ Removing red styling from ${index + 1}. ${el.tagName}.${el.className}`);
      
      // Remove all classes that might contain red styling
      element.classList.remove('border-red-500', 'border-red-600', 'bg-red-50', 'bg-red-100', 'hover:border-red-500', 'hover:bg-red-50', 'from-red-500', 'to-red-600');
      
      // Force transparent styling
      element.style.setProperty('border', 'none', 'important');
      element.style.setProperty('background-color', 'transparent', 'important');
      element.style.setProperty('background', 'transparent', 'important');
      element.style.setProperty('box-shadow', 'none', 'important');
      element.style.setProperty('outline', 'none', 'important');
    });
    
    console.log(`☢️ Removed red styling from ${redElements.length} elements`);
  };

  // Function to render ProjectCard component HTML (matching ProjectCard.astro structure)
  function renderProjectCardHTML(project) {
    // Calculate progress values
    const overallProgress = isNaN(parseFloat(project.overallProgress || project.progress)) ? 0 : parseFloat(project.overallProgress || project.progress || 0);
    const timelineProgress = isNaN(parseFloat(project.timelineProgress)) ? 0 : parseFloat(project.timelineProgress || 0);
    const budgetProgress = isNaN(parseFloat(project.budgetProgress)) ? 0 : parseFloat(project.budgetProgress || 0);
    const physicalProgress = isNaN(parseFloat(project.physicalProgress)) ? 0 : parseFloat(project.physicalProgress || 0);
    
    // Format budget
    const formatBudget = (amount) => {
      if (!amount) return '₱0.00';
      const num = parseFloat(amount);
      if (isNaN(num)) return '₱0.00';
      
      if (num >= 1000000) {
        const formatted = num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        return `₱${formatted}`;
      } else if (num >= 1000) {
        const formatted = num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        return `₱${formatted}`;
      }
      return `₱${num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    };
    
    // Get actual status
    const getActualStatus = (proj) => {
      let actualStatus = proj.status;
      
      if (actualStatus !== 'completed' && actualStatus !== 'complete' && actualStatus !== 'ongoing' && proj.milestones && Array.isArray(proj.milestones)) {
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        
        const hasDelayedMilestones = proj.milestones.some(milestone => {
          const dueDate = milestone.dueDate || milestone.deadline || milestone.targetDate || milestone.completionDate;
          const status = milestone.status || 'pending';
          
          if (dueDate && status !== 'completed' && status !== 'under_approval' && status !== 'revision_request') {
            const milestoneDate = new Date(dueDate);
            milestoneDate.setHours(0, 0, 0, 0);
            return milestoneDate < today && status === 'pending';
          }
          return false;
        });
        
        if (hasDelayedMilestones) {
          actualStatus = 'delayed';
        }
      }
      
      return actualStatus;
    };
    
    // Status color mapping
    const getStatusColor = (status) => {
      switch(status?.toLowerCase()) {
        case 'completed':
        case 'complete':
          return 'bg-green-100 text-green-700 border-green-200';
        case 'ongoing':
          return 'bg-blue-100 text-blue-700 border-blue-200';
        case 'delayed':
          return 'bg-red-100 text-red-700 border-red-200 animate-pulse';
        case 'pending':
          return 'bg-yellow-100 text-yellow-700 border-yellow-200';
        case 'on hold':
          return 'bg-gray-100 text-gray-700 border-gray-200';
        default:
          return 'bg-gray-100 text-gray-600 border-gray-200';
      }
    };
    
    
    const actualStatus = getActualStatus(project);
    const statusColor = getStatusColor(actualStatus);
    const projectImage = getProjectImage(project);
    const budget = formatBudget(project.totalBudget);
    
    // Calculate milestone statistics
    const totalMilestones = project.milestones ? project.milestones.length : 0;
    const compiledMilestones = project.milestones ? project.milestones.filter(milestone => 
      milestone.status === 'completed' || milestone.status === 'approved' || milestone.status === 'compiled_for_secretariat'
    ).length : 0;
    
    return `
      <div 
        class="group project-card bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden transition-all duration-300 cursor-pointer transform hover:scale-[1.02] hover:-translate-y-1 hover:shadow-xl hover:border-blue-400 hover:shadow-blue-100 relative"
        onclick="viewProjectCompilation('${project.id}')"
        data-project-id="${project.id}"
      >
        
        <!-- Hover Tooltip -->
        <div class="absolute top-4 right-4 z-20 opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-none transform translate-y-1 group-hover:translate-y-0 milestone-tooltip">
          <div class="bg-gray-900 text-white text-xs rounded-lg px-3 py-2 shadow-xl border border-gray-700 backdrop-blur-sm">
            <div class="font-semibold mb-1 text-center text-gray-100">Milestone Summary</div>
            <div class="space-y-1">
              <div class="flex justify-between gap-3 items-center">
                <span class="text-blue-300 font-medium">Milestone Compiled:</span>
                <span class="font-bold text-blue-100 bg-blue-600/20 px-2 py-0.5 rounded text-xs">${compiledMilestones}</span>
              </div>
              <div class="flex justify-between gap-3 items-center">
                <span class="text-green-300 font-medium">Milestone Count Overall:</span>
                <span class="font-bold text-green-100 bg-green-600/20 px-2 py-0.5 rounded text-xs">${totalMilestones}</span>
              </div>
            </div>
            <!-- Tooltip Arrow -->
            <div class="absolute -bottom-1 right-4 w-2 h-2 bg-gray-900 transform rotate-45 border-r border-b border-gray-700"></div>
          </div>
        </div>
        <!-- Project Image -->
        <div class="h-48 relative overflow-hidden">
          <img 
            src="${projectImage}"
            alt="${project.name || project.projectName}"
            class="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
            loading="lazy"
            onerror="this.src='/projects-page-header-bg.png'"
          />
          <div class="absolute inset-0 bg-gradient-to-t from-black/60 via-black/20 to-transparent"></div>
          
          <!-- Floating Status Badge -->
          <div class="absolute top-3 right-3">
            <span class="px-3 py-1 rounded-full text-xs font-semibold border backdrop-blur-sm ${statusColor}">
              ${actualStatus || 'Not Started'}
            </span>
          </div>

          <!-- Category Badge -->
          <div class="absolute top-3 left-3">
            <span class="px-3 py-1 bg-white/20 backdrop-blur-sm rounded-full text-white text-xs font-semibold border border-white/30">
              ${project.category || 'Infrastructure'}
            </span>
          </div>

          <!-- Progress Overlay -->
          <div class="absolute bottom-3 left-3 right-3">
            <div class="bg-white/90 backdrop-blur-sm rounded-lg p-2">
              <div class="flex justify-between items-center mb-1">
                <span class="text-xs font-medium text-gray-700">Overall Progress</span>
                <span class="text-xs font-bold text-gray-900">${overallProgress.toFixed(1)}%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
                <div 
                  class="h-2 rounded-full transition-all duration-2000 ease-out progress-bar-fill"
                  style="width: 0%"
                  data-progress="${overallProgress}"
                  data-progress-color="${overallProgress >= 0 && overallProgress <= 25 ? 'bg-red-500' : overallProgress >= 26 && overallProgress <= 50 ? 'bg-yellow-500' : overallProgress >= 51 && overallProgress <= 75 ? 'bg-blue-500' : overallProgress >= 76 && overallProgress <= 100 ? 'bg-green-500' : 'bg-gray-500'}"
                ></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Project Details -->
        <div class="p-6">
          <!-- Project Title -->
          <h3 class="text-xl font-bold text-gray-800 mb-2 line-clamp-2">
            ${project.name || project.projectName}
          </h3>

          <!-- Project Code -->
          <div class="text-sm text-gray-500 mb-2">
            <span class="font-medium">Code:</span> ${project.projectCode || 'N/A'}
          </div>

          <!-- Project Description -->
          ${project.description ? `
            <div class="text-sm text-gray-600 mb-3 line-clamp-2">
              ${project.description}
            </div>
          ` : ''}

          <!-- Key Information Grid -->
          <div class="space-y-2 mb-4">
            <div class="flex justify-between items-center text-sm">
              <span class="text-gray-600 font-medium">Location:</span>
              <span class="text-gray-800">${project.location || 'N/A'}</span>
            </div>
            
            <div class="flex justify-between items-center text-sm">
              <span class="text-gray-600 font-medium">Implementing Office:</span>
              <span class="text-gray-800 text-right">${project.implementingOfficeName || project.implementingOffice || 'N/A'}</span>
            </div>

            <div class="flex justify-between items-center text-sm">
              <span class="text-gray-600 font-medium">Budget:</span>
              <span class="text-gray-800 font-semibold">${budget}</span>
            </div>

            <div class="flex justify-between items-center text-sm">
              <span class="text-gray-600 font-medium">Funding Source:</span>
              <span class="text-gray-800">${project.fundingSource === 'donor_fund' ? 'Municipal Development Fund' : (project.fundingSource?.replace('_', ' ').toUpperCase() || 'N/A')}</span>
            </div>
          </div>

          <!-- Progress Breakdown -->
          <div class="space-y-2 mb-4">
            <div class="flex justify-between items-center text-xs">
              <span class="text-gray-600">Timeline:</span>
              <span class="font-semibold text-blue-600">${timelineProgress.toFixed(1)}%</span>
            </div>
            <div class="flex justify-between items-center text-xs">
              <span class="text-gray-600">Budget:</span>
              <span class="font-semibold text-blue-600">${budgetProgress.toFixed(1)}%</span>
            </div>
            <div class="flex justify-between items-center text-xs">
              <span class="text-gray-600">Physical:</span>
              <span class="font-semibold text-blue-600">${physicalProgress.toFixed(1)}%</span>
            </div>
          </div>

          <!-- Dates -->
          <div class="space-y-2 mb-4">
            <div class="flex justify-between items-center text-xs text-gray-500">
              <span>Start: ${project.startDate || project.createdDate || 'N/A'}</span>
              <span>Target: ${project.targetCompletionDate || project.targetDateOfCompletion || project.endDate || 'N/A'}</span>
            </div>
            <div class="flex justify-between items-center text-xs text-gray-500">
              <span>Actual: ${project.completionDate || project.actualCompletionDate || '–'}</span>
              <span>Days: ${project.expectedDaysOfCompletion || '–'}</span>
            </div>
          </div>

          <!-- Additional Information -->
          <div class="space-y-1 mb-4">
            <!-- Coordinates (if available) -->
            ${(project.longitude && project.latitude) ? `
              <div class="text-xs text-gray-500">
                <span class="font-medium">📍 Coordinates:</span> ${project.latitude}, ${project.longitude}
              </div>
            ` : ''}
            
            <!-- Category -->
            <div class="text-xs text-gray-500">
              <span class="font-medium">🏗️ Category:</span> ${(project.category?.charAt(0).toUpperCase() + project.category?.slice(1)) || 'Infrastructure'}
            </div>
            
            <!-- Priority -->
            <div class="text-xs text-gray-500">
              <span class="font-medium">⚡ Priority:</span> 
              <span class="font-semibold ${
                project.priority === 'high' ? 'text-red-600' : 
                project.priority === 'medium' ? 'text-yellow-600' : 
                'text-green-600'
              }">
                ${(project.priority?.toUpperCase()) || 'MEDIUM'}
              </span>
            </div>
          </div>

          <!-- View Details Button -->
          <button 
            class="w-full py-3 px-4 rounded-lg font-semibold text-sm transition-all duration-300 bg-blue-50 text-blue-600 hover:bg-blue-100"
            onclick="viewProjectCompilation('${project.id}')"
          >
            View Compilation Details
          </button>
        </div>
      </div>
    `;
  }

  // Function to fetch actual projects for a department from backend
  async function fetchDepartmentProjects(departmentId, departmentName) {
    try {
      console.log('🔍 Fetching projects for department:', departmentName, 'with ID:', departmentId);
      
      // Get authentication token
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('❌ No authentication token found');
        return [];
      }
      
      // Fetch all projects and filter by implementing office
      const response = await fetch('http://localhost:3000/api/projects', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (!response.ok) {
        console.error('❌ API response not ok:', response.status, response.statusText);
        throw new Error(`Failed to fetch projects: ${response.status} ${response.statusText}`);
      }
      
      const data = await response.json();
      const projects = data.projects || [];
      
      console.log('📊 All projects from API:', projects.map(p => ({ 
        id: p.id, 
        title: p.title, 
        implementingOfficeName: p.implementingOfficeName 
      })));
      
      // Filter projects by implementing office (department name)
      // Note: Backend returns implementingOfficeName, not implementingOffice
      console.log('🔍 Filtering projects for department:', departmentName);
      console.log('🔍 Available implementingOfficeNames:', projects.map(p => p.implementingOfficeName));
      
      const departmentProjects = projects.filter(project => {
        const matches = project.implementingOfficeName === departmentName;
        console.log(`🔍 Project "${project.title}" (${project.implementingOfficeName}) matches "${departmentName}":`, matches);
        return matches;
      });
      
      console.log(`📊 Found ${departmentProjects.length} projects for ${departmentName}:`, departmentProjects.map(p => ({ 
        id: p.id, 
        title: p.title, 
        implementingOfficeName: p.implementingOfficeName 
      })));
      
      // Fetch milestone data for each project
      const projectsWithMilestones = await Promise.all(departmentProjects.map(async (project) => {
        try {
          const milestonesResponse = await fetch(`http://localhost:3000/api/projects/${project.id}/milestones`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          });
          
          if (milestonesResponse.ok) {
            const milestonesData = await milestonesResponse.json();
            project.milestones = milestonesData.milestones || [];
            console.log(`📊 Loaded ${project.milestones.length} milestones for project ${project.title}`);
          } else {
            console.warn(`❌ Failed to load milestones for project ${project.id}: ${milestonesResponse.status}`);
            project.milestones = [];
          }
        } catch (error) {
          console.error(`❌ Error loading milestones for project ${project.id}:`, error);
          project.milestones = [];
        }
        
        return project;
      }));
      
      return projectsWithMilestones;
      
    } catch (error) {
      console.error('❌ Error fetching department projects:', error);
      return [];
    }
  }

  // Function to render breadcrumb navigation (similar to templates.astro)
  function renderBreadcrumb() {
    const breadcrumbItems = [];
    
    // Always start with "Compilation Summary"
    breadcrumbItems.push({
      label: 'Compilation Summary',
      action: 'showCompilationSummary',
      clickable: currentView !== 'summary'
    });
    
    // Add department if we're in department or project view
    if (currentView === 'department' || currentView === 'project') {
      breadcrumbItems.push({
        label: currentCompilationDepartment?.name || 'Department',
        action: 'showDepartmentView',
        clickable: currentView !== 'department'
      });
    }
    
    // Add project if we're in project view
    if (currentView === 'project' && currentProject) {
      breadcrumbItems.push({
        label: currentProject.name,
        action: null,
        clickable: false
      });
    }
    
    return `
      <div class="mb-6">
        <nav class="flex items-center space-x-2 text-sm breadcrumb-nav">
          ${breadcrumbItems.map((item, index) => {
            const isLast = index === breadcrumbItems.length - 1;
            const isClickable = item.clickable && item.action;
            
            return `
              ${index > 0 ? `
                <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              ` : ''}
              ${isClickable ? `
                <button onclick="${item.action}()" class="text-blue-600 hover:text-blue-800 transition-colors duration-300 flex items-center gap-2 group">
                  <svg class="w-4 h-4 group-hover:-translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  <span class="font-medium">${item.label}</span>
                </button>
              ` : `
                <span class="text-gray-900 font-medium ${isLast ? 'bg-gray-100 px-3 py-1 rounded-lg' : ''}">${item.label}</span>
              `}
            `;
          }).join('')}
        </nav>
      </div>
    `;
  }

  // Function to view project compilation details
  window.viewProjectCompilation = async function(projectId) {
    console.log('🔍 Viewing project compilation:', projectId);
    
    try {
      // Show loading state
      showLoadingState();
      
      // Fetch project details and milestones
      const projectData = await fetchProjectWithMilestones(projectId);
      console.log('🔍 Project data received:', projectData);
      
      if (projectData) {
        // Update navigation state
        currentProject = { id: projectData.id, name: projectData.title || projectData.name || projectData.projectName };
        currentView = 'project';
        navigationHistory.push({ type: 'project', id: projectData.id, name: projectData.title || projectData.name || projectData.projectName });
        
        console.log('🔍 About to render milestones page with data:', projectData);
        // Render the milestones page
        renderMilestonesPage(projectData);
      } else {
        console.error('❌ No project data received from fetchProjectWithMilestones');
        showToast('Failed to load project milestones', 'error');
        // Return to previous view on error
        showCompilationSummary();
      }
    } catch (error) {
      console.error('❌ Error loading project compilation:', error);
      showToast('Error loading project milestones', 'error');
      // Return to previous view on error
      showCompilationSummary();
    }
  };

  // Function to fetch project with milestones
  async function fetchProjectWithMilestones(projectId) {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.error('❌ No authentication token found');
        return null;
      }

      // Fetch project details
      const projectResponse = await fetch(`http://localhost:3000/api/projects/${projectId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!projectResponse.ok) {
        console.error('❌ Failed to fetch project:', projectResponse.status);
        return null;
      }

      const projectResponseData = await projectResponse.json();
      console.log('📊 Fetched project data:', projectResponseData);

      // Extract the actual project data from the response
      const project = projectResponseData.success ? projectResponseData.project : projectResponseData;
      console.log('📊 Extracted project data:', project);

      // Fetch milestones for the project
      const milestonesResponse = await fetch(`http://localhost:3000/api/projects/${projectId}/milestones`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (milestonesResponse.ok) {
        const milestonesData = await milestonesResponse.json();
        project.milestones = milestonesData.milestones || [];
        console.log('📊 Fetched milestones data:', project.milestones);
      } else {
        project.milestones = [];
        console.log('❌ Failed to fetch milestones:', milestonesResponse.status);
      }

      console.log('📊 Final project data with milestones:', project);
      return project;
    } catch (error) {
      console.error('❌ Error fetching project with milestones:', error);
      return null;
    }
  }

  // Function to render milestones page
  function renderMilestonesPage(project) {
    console.log('🎨 renderMilestonesPage called with project:', project);
    
    // Store current project data for modal access
    window.currentProject = project;
    console.log('🔍 Stored project data in window.currentProject:', window.currentProject);
    console.log('🔍 Project milestones:', window.currentProject?.milestones);
    
    // Hide the main compilation content and show project view
    const overviewSection = document.getElementById('compilation-overview');
    const departmentCards = document.getElementById('departmentCards');
    const projectContainer = document.getElementById('project-view-container');
    
    console.log('🎨 DOM elements found:', {
      overviewSection: !!overviewSection,
      departmentCards: !!departmentCards,
      projectContainer: !!projectContainer
    });
    
    // Keep overview section visible, only hide department cards
    if (departmentCards) departmentCards.style.display = 'none';
    if (projectContainer) {
      projectContainer.style.display = 'block';
      projectContainer.classList.remove('hidden');
    }

    if (!projectContainer) {
      console.error('❌ Project container not found!');
      return;
    }

    if (!project) {
      console.error('❌ No project data provided!');
      projectContainer.innerHTML = '<div class="text-center py-20"><h3 class="text-2xl font-bold text-gray-900">No project data available</h3></div>';
      return;
    }

    // Calculate milestone statistics
    const totalMilestones = project.milestones ? project.milestones.length : 0;
    const approvedMilestones = project.milestones ? project.milestones.filter(milestone => 
      milestone.status === 'completed' || milestone.status === 'approved' || milestone.status === 'compiled_for_secretariat'
    ) : [];
    const pendingMilestones = project.milestones ? project.milestones.filter(milestone => 
      milestone.status !== 'completed' && milestone.status !== 'approved' && milestone.status !== 'compiled_for_secretariat'
    ) : [];

    const html = `
      ${renderBreadcrumb()}

      <!-- Project Header -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-8 mb-8 page-transition">
        <!-- Back Button -->
        <div class="mb-6">
          <button onclick="showDepartmentView()" class="back-button inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 rounded-lg transition-all duration-200 group">
            <svg class="w-4 h-4 group-hover:-translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
            </svg>
            Back to ${currentCompilationDepartment?.name || 'Department'}
          </button>
        </div>
        
        <div class="flex items-start gap-6">
          <!-- Project Image -->
          <div class="w-24 h-24 rounded-xl overflow-hidden shadow-lg">
            <img src="${getProjectImage(project)}" alt="${project.title || project.name || project.projectName}" class="w-full h-full object-cover" onerror="this.src='/projects-page-header-bg.png'">
          </div>
          
          <!-- Project Info -->
          <div class="flex-1">
            <h1 class="text-2xl font-bold text-gray-900 mb-2">${project.title || project.name || project.projectName}</h1>
            <p class="text-gray-600 mb-4">${project.description || 'No description available'}</p>
            
            <!-- Project Stats -->
            <div class="grid grid-cols-3 gap-4">
              <div class="text-center">
                <div class="text-2xl font-bold text-blue-600">${totalMilestones}</div>
                <div class="text-sm text-gray-600">Total Milestones</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-green-600">${approvedMilestones.length}</div>
                <div class="text-sm text-gray-600">Approved</div>
              </div>
              <div class="text-center">
                <div class="text-2xl font-bold text-orange-600">${pendingMilestones.length}</div>
                <div class="text-sm text-gray-600">Pending</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Milestones Section -->
      <div class="space-y-6">
        <div class="flex items-center justify-between">
          <h2 class="text-xl font-bold text-gray-900">Project Milestones</h2>
          <div class="flex items-center gap-2">
            <span class="text-sm text-gray-600">Showing ${totalMilestones} milestones</span>
          </div>
        </div>

        <!-- Milestones Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 page-transition" id="milestones-grid">
          ${renderMilestoneCards(project.milestones || [])}
        </div>
      </div>
    `;

    projectContainer.innerHTML = html;
  }

  // Function to render milestone cards
  function renderMilestoneCards(milestones) {
    if (!milestones || milestones.length === 0) {
      return `
        <div class="col-span-full text-center py-20">
          <div class="w-24 h-24 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-gray-900 mb-2">No Milestones Found</h3>
          <p class="text-gray-600">This project doesn't have any milestones yet.</p>
        </div>
      `;
    }

    return milestones.map(milestone => {
      console.log('🔍 Rendering milestone card:', milestone.id, milestone.title);
      const status = milestone.status || 'pending';
      const statusColor = getMilestoneStatusColor(status, milestone);
      const statusText = getMilestoneStatusText(status, milestone);
      const progress = milestone.progress || 0;
      const startDate = milestone.timelineStartDate ? new Date(milestone.timelineStartDate).toLocaleDateString() : 'N/A';
      const endDate = milestone.timelineEndDate ? new Date(milestone.timelineEndDate).toLocaleDateString() : 'N/A';
      
      return `
        <div class="group bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden transition-all duration-300 cursor-pointer transform hover:scale-[1.02] hover:-translate-y-1 hover:shadow-xl hover:border-blue-400 hover:shadow-blue-100">
          <!-- Milestone Header -->
          <div class="p-6 border-b border-gray-100">
            <div class="flex items-start justify-between mb-4">
              <div class="flex-1">
                <h3 class="text-lg font-bold text-gray-900 mb-2 line-clamp-2">${milestone.title || 'Untitled Milestone'}</h3>
                <p class="text-sm text-gray-600 line-clamp-2">${milestone.description || 'No description available'}</p>
              </div>
              <div class="ml-4">
                <span class="px-3 py-1 rounded-full text-xs font-semibold ${statusColor}">
                  ${statusText}
                </span>
              </div>
            </div>
            
            <!-- Progress Bar -->
            <div class="mb-4">
              <div class="flex justify-between items-center mb-2">
                <span class="text-sm font-medium text-gray-700">Progress</span>
                <span class="text-sm font-bold text-gray-900">${progress}%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="h-2 rounded-full transition-all duration-1000 bg-blue-600" style="width: ${progress}%"></div>
              </div>
            </div>
          </div>

          <!-- Milestone Details -->
          <div class="p-6">
            <div class="space-y-3">
              <div class="flex justify-between items-center text-sm">
                <span class="text-gray-600 font-medium">Start Date:</span>
                <span class="text-gray-800">${startDate}</span>
              </div>
              <div class="flex justify-between items-center text-sm">
                <span class="text-gray-600 font-medium">Target Completion Date:</span>
                <span class="text-gray-800">${endDate}</span>
              </div>
              <div class="flex justify-between items-center text-sm">
                <span class="text-gray-600 font-medium">Actual Completion Date:</span>
                <span class="text-gray-800">${milestone.completionDate || milestone.actualCompletionDate || '–'}</span>
              </div>
              <div class="flex justify-between items-center text-sm">
                <span class="text-gray-600 font-medium">Expected Days:</span>
                <span class="text-gray-800">${milestone.expectedDaysOfCompletion ? milestone.expectedDaysOfCompletion + ' days' : '–'}</span>
              </div>
              <div class="flex justify-between items-center text-sm">
                <span class="text-gray-600 font-medium">Priority:</span>
                <span class="font-semibold ${
                  milestone.priority === 'high' ? 'text-red-600' : 
                  milestone.priority === 'medium' ? 'text-yellow-600' : 
                  'text-green-600'
                }">
                  ${(milestone.priority?.toUpperCase()) || 'MEDIUM'}
                </span>
              </div>
            </div>

            <!-- Action Button -->
            <button class="w-full mt-6 py-3 px-4 rounded-lg font-semibold text-sm transition-all duration-300 bg-blue-50 text-blue-600 hover:bg-blue-100" onclick="viewMilestoneDetails('${milestone.id}')">
              View Milestone Details
            </button>
          </div>
        </div>
      `;
    }).join('');
  }

  // Helper function to get milestone status color based on lifecycle
  function getMilestoneStatusColor(status, milestone) {
    // Check if milestone is delayed (due date has passed)
    const isDelayed = milestone.timelineEndDate && new Date(milestone.timelineEndDate) < new Date();
    
    if (isDelayed) {
      return 'bg-red-100 text-red-800 border border-red-200';
    }
    
    switch (status) {
      case 'completed':
      case 'approved':
      case 'compiled_for_secretariat':
        return 'bg-green-100 text-green-800 border border-green-200';
      case 'in_progress':
      case 'ongoing':
        return 'bg-blue-100 text-blue-800 border border-blue-200';
      case 'pending':
      case 'not_started':
        return 'bg-yellow-100 text-yellow-800 border border-yellow-200'; // Gold theme
      case 'delayed':
        return 'bg-red-100 text-red-800 border border-red-200';
      default:
        return 'bg-yellow-100 text-yellow-800 border border-yellow-200'; // Default to Gold theme
    }
  }

  // Helper function to get milestone status text based on lifecycle
  function getMilestoneStatusText(status, milestone) {
    // Check if milestone is delayed (due date has passed)
    const isDelayed = milestone.timelineEndDate && new Date(milestone.timelineEndDate) < new Date();
    
    if (isDelayed) {
      return 'Delayed';
    }
    
    switch (status) {
      case 'completed':
        return 'Approved (Complete)';
      case 'approved':
        return 'Approved (Complete)';
      case 'compiled_for_secretariat':
        return 'Approved (Complete)';
      case 'in_progress':
      case 'ongoing':
        return 'Ongoing';
      case 'pending':
        return 'Pending';
      case 'not_started':
        return 'Pending';
      case 'delayed':
        return 'Delayed';
      default:
        return 'Pending';
    }
  }

  // Function to view milestone details - opens MilestoneSubmissionModal
  window.viewMilestoneDetails = function(milestoneId) {
    console.log('🔍 Viewing milestone details:', milestoneId);
    console.log('🔍 Current project data:', window.currentProject);
    console.log('🔍 Available milestones:', window.currentProject?.milestones);
    
    // Find the milestone data
    const milestone = window.currentProject?.milestones?.find(m => m.id === milestoneId);
    console.log('🔍 Found milestone:', milestone);
    
    if (!milestone) {
      console.error('❌ Milestone not found:', milestoneId);
      console.error('❌ Available milestone IDs:', window.currentProject?.milestones?.map(m => m.id));
      showToast('Milestone not found', 'error');
      return;
    }
    
    // Open the MilestoneSubmissionModal
    openMilestoneSubmissionModal(milestone);
  };

  // Function to open MilestoneSubmissionModal
  function openMilestoneSubmissionModal(milestone) {
    console.log('🔍 Opening MilestoneSubmissionModal for milestone:', milestone);
    
    // Check if milestone has approved submissions
    const hasApprovedSubmissions = milestone.status === 'completed' || 
                                  milestone.status === 'approved' || 
                                  milestone.status === 'compiled_for_secretariat';
    
    // Check if milestone is delayed
    const isDelayed = milestone.timelineEndDate && new Date(milestone.timelineEndDate) < new Date();
    console.log('🔍 Milestone delayed status:', isDelayed, 'End date:', milestone.timelineEndDate);
    
    const modalHtml = `
      <div id="milestoneSubmissionModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
          <!-- Modal Header -->
          <div class="bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4 text-white">
            <div class="flex items-center justify-between">
              <div>
                <h2 class="text-xl font-bold">Milestone Submission Details</h2>
                <p class="text-blue-100 text-sm mt-1">${milestone.title || 'Untitled Milestone'}</p>
              </div>
              <button onclick="closeMilestoneSubmissionModal()" class="text-white hover:text-blue-200 transition-colors">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <!-- Modal Content -->
          <div class="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
            ${hasApprovedSubmissions ? renderApprovedSubmissionContent(milestone) : 
              isDelayed ? renderDelayedSubmissionContent(milestone) : renderNoSubmissionContent(milestone)}
          </div>
        </div>
      </div>
    `;
    
    // Add modal to body
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Add click outside to close
    const modal = document.getElementById('milestoneSubmissionModal');
    modal.addEventListener('click', function(e) {
      if (e.target === modal) {
        closeMilestoneSubmissionModal();
      }
    });
  }

  // Function to render approved submission content
  function renderApprovedSubmissionContent(milestone) {
    return `
      <div class="space-y-6">
        <!-- Milestone Status -->
        <div class="bg-green-50 border border-green-200 rounded-lg p-4">
          <div class="flex items-center gap-3">
            <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
              <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
              <h3 class="font-semibold text-green-800">Approved Submission</h3>
              <p class="text-sm text-green-600">This milestone has been approved by LGU-IU IOO</p>
            </div>
          </div>
        </div>
        
        <!-- Milestone Details -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Milestone Title</label>
              <p class="text-gray-900">${milestone.title || 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
              <p class="text-gray-900">${milestone.description || 'No description available'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                Approved (Complete)
              </span>
            </div>
          </div>
          
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
              <p class="text-gray-900">${milestone.timelineStartDate ? new Date(milestone.timelineStartDate).toLocaleDateString() : 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Target Completion Date</label>
              <p class="text-gray-900">${milestone.timelineEndDate ? new Date(milestone.timelineEndDate).toLocaleDateString() : 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Actual Completion Date</label>
              <p class="text-gray-900">${milestone.completionDate || milestone.actualCompletionDate || '–'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Expected Days</label>
              <p class="text-gray-900">${milestone.expectedDaysOfCompletion ? milestone.expectedDaysOfCompletion + ' days' : '–'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Progress</label>
              <div class="flex items-center gap-2">
                <div class="flex-1 bg-gray-200 rounded-full h-2">
                  <div class="bg-green-500 h-2 rounded-full" style="width: ${milestone.progress || 0}%"></div>
                </div>
                <span class="text-sm font-medium text-gray-700">${milestone.progress || 0}%</span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Submission Details -->
        <div class="border-t pt-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Submission Details</h3>
          <div class="bg-gray-50 rounded-lg p-4">
            <p class="text-gray-600">Submission details and evidence files would be displayed here.</p>
            <p class="text-sm text-gray-500 mt-2">This section would contain the actual submission data from the LGU-IU IOO.</p>
          </div>
        </div>
      </div>
    `;
  }

  // Function to render no submission content
  function renderNoSubmissionContent(milestone) {
    return `
      <div class="space-y-6">
        <!-- No Submission Status -->
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6 text-center">
          <div class="w-16 h-16 bg-yellow-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-yellow-800 mb-2">No Approved Submission Yet</h3>
          <p class="text-yellow-700">This milestone has not been submitted by the EIU (External Implementing Unit) to the LGU-IU IOO for review.</p>
        </div>
        
        <!-- Milestone Details -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Milestone Title</label>
              <p class="text-gray-900">${milestone.title || 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
              <p class="text-gray-900">${milestone.description || 'No description available'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-100 text-yellow-800">
                Pending
              </span>
            </div>
          </div>
          
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
              <p class="text-gray-900">${milestone.timelineStartDate ? new Date(milestone.timelineStartDate).toLocaleDateString() : 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Target Completion Date</label>
              <p class="text-gray-900">${milestone.timelineEndDate ? new Date(milestone.timelineEndDate).toLocaleDateString() : 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Actual Completion Date</label>
              <p class="text-gray-900">${milestone.completionDate || milestone.actualCompletionDate || '–'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Expected Days</label>
              <p class="text-gray-900">${milestone.expectedDaysOfCompletion ? milestone.expectedDaysOfCompletion + ' days' : '–'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Progress</label>
              <div class="flex items-center gap-2">
                <div class="flex-1 bg-gray-200 rounded-full h-2">
                  <div class="bg-yellow-500 h-2 rounded-full" style="width: ${milestone.progress || 0}%"></div>
                </div>
                <span class="text-sm font-medium text-gray-700">${milestone.progress || 0}%</span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Next Steps -->
        <div class="border-t pt-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Next Steps</h3>
          <div class="bg-blue-50 rounded-lg p-4">
            <p class="text-blue-800">This milestone is waiting for submission from the EIU (External Implementing Unit) to the LGU-IU IOO for review and approval.</p>
          </div>
        </div>
      </div>
    `;
  }

  // Function to render delayed submission content
  function renderDelayedSubmissionContent(milestone) {
    const endDate = milestone.timelineEndDate ? new Date(milestone.timelineEndDate) : null;
    const daysOverdue = endDate ? Math.ceil((new Date() - endDate) / (1000 * 60 * 60 * 24)) : 0;
    
    return `
      <div class="space-y-6">
        <!-- Delayed Status -->
        <div class="bg-red-50 border border-red-200 rounded-lg p-6 text-center">
          <div class="w-16 h-16 bg-red-500 rounded-full flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-red-800 mb-2">Milestone Delayed</h3>
          <p class="text-red-700">This milestone is overdue by ${daysOverdue} day${daysOverdue !== 1 ? 's' : ''} and has not been submitted by the EIU (External Implementing Unit) to the LGU-IU IOO for review.</p>
        </div>
        
        <!-- Reason for Delay -->
        <div class="bg-orange-50 border border-orange-200 rounded-lg p-4">
          <h4 class="text-md font-semibold text-orange-800 mb-2">Reason for Delay</h4>
          <p class="text-orange-700">${milestone.delayReason || 'No specific reason provided for the delay. The EIU should provide an explanation for the delayed submission.'}</p>
        </div>
        
        <!-- Milestone Details -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Milestone Title</label>
              <p class="text-gray-900">${milestone.title || 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
              <p class="text-gray-900">${milestone.description || 'No description available'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Status</label>
              <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800 border border-red-200">
                Delayed
              </span>
            </div>
          </div>
          
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Start Date</label>
              <p class="text-gray-900">${milestone.timelineStartDate ? new Date(milestone.timelineStartDate).toLocaleDateString() : 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Target Completion Date</label>
              <p class="text-gray-900">${milestone.timelineEndDate ? new Date(milestone.timelineEndDate).toLocaleDateString() : 'N/A'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Actual Completion Date</label>
              <p class="text-gray-900">${milestone.completionDate || milestone.actualCompletionDate || '–'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Expected Days</label>
              <p class="text-gray-900">${milestone.expectedDaysOfCompletion ? milestone.expectedDaysOfCompletion + ' days' : '–'}</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-1">Progress</label>
              <div class="flex items-center gap-2">
                <div class="flex-1 bg-gray-200 rounded-full h-2">
                  <div class="bg-red-500 h-2 rounded-full" style="width: ${milestone.progress || 0}%"></div>
                </div>
                <span class="text-sm font-medium text-gray-700">${milestone.progress || 0}%</span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Next Steps -->
        <div class="border-t pt-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Next Steps</h3>
          <div class="bg-red-50 rounded-lg p-4">
            <p class="text-red-800">This milestone is overdue and requires immediate attention. The EIU (External Implementing Unit) should submit an update to the LGU-IU IOO explaining the delay and providing a revised timeline for completion.</p>
          </div>
        </div>
      </div>
    `;
  }

  // Function to close MilestoneSubmissionModal
  window.closeMilestoneSubmissionModal = function() {
    const modal = document.getElementById('milestoneSubmissionModal');
    if (modal) {
      modal.remove();
    }
  };

  // Function to show loading state
  function showLoadingState() {
    const projectContainer = document.getElementById('project-view-container');
    if (!projectContainer) return;

    // Keep overview section visible, only hide department cards
    const overviewSection = document.getElementById('compilation-overview');
    const departmentCards = document.getElementById('departmentCards');
    
    if (departmentCards) departmentCards.style.display = 'none';
    if (projectContainer) {
      projectContainer.style.display = 'block';
      projectContainer.classList.remove('hidden');
    }

    projectContainer.innerHTML = `
      <div class="flex items-center justify-center py-20">
        <div class="text-center">
          <div class="w-16 h-16 mx-auto mb-4 bg-blue-100 rounded-full flex items-center justify-center animate-spin">
            <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
          </div>
          <h3 class="text-lg font-semibold text-gray-900 mb-2">Loading Milestones</h3>
          <p class="text-gray-600">Please wait while we fetch the project milestones...</p>
        </div>
      </div>
    `;
  }

  // Function to show compilation summary (back navigation)
  window.showCompilationSummary = function() {
    console.log('🔍 Returning to compilation summary');
    currentView = 'summary';
    currentProject = null;
    currentCompilationDepartment = null;
    navigationHistory = [];
    
    // Show main compilation content and hide project view
    const overviewSection = document.getElementById('compilation-overview');
    const departmentCards = document.getElementById('departmentCards');
    const projectContainer = document.getElementById('project-view-container');
    
    if (overviewSection) overviewSection.style.display = 'block';
    if (departmentCards) departmentCards.style.display = 'block';
    if (projectContainer) {
      projectContainer.style.display = 'none';
      projectContainer.classList.add('hidden');
    }
    
    loadCompilationData();
  };

  // Function to show department view (breadcrumb navigation)
  window.showDepartmentView = function() {
    console.log('🔍 Returning to department view');
    if (currentCompilationDepartment) {
      currentView = 'department';
      currentProject = null;
      // Remove project from navigation history
      navigationHistory = navigationHistory.filter(item => item.type !== 'project');
      
      // Show main compilation content and hide project view
      const overviewSection = document.getElementById('compilation-overview');
      const departmentCards = document.getElementById('departmentCards');
      const projectContainer = document.getElementById('project-view-container');
      
      if (overviewSection) overviewSection.style.display = 'block';
      if (departmentCards) departmentCards.style.display = 'block';
      if (projectContainer) {
        projectContainer.style.display = 'none';
        projectContainer.classList.add('hidden');
      }
      
      renderDepartmentDetail(currentCompilationDepartment.id, currentCompilationDepartment.name);
    } else {
      showCompilationSummary();
    }
  };

  // Function to expand department and show projects
  function expandDepartment(departmentId, departmentName) {
    console.log('🔍 Expanding department:', departmentId, departmentName);
    
    // Find the department card
    const departmentCard = document.querySelector(`[data-dept-id="${departmentId}"]`);
    if (!departmentCard) {
      console.error('❌ Department card not found');
      return;
    }
    
    // Check if already expanded
    const isExpanded = departmentCard.classList.contains('expanded');
    
    if (isExpanded) {
      // Collapse
      departmentCard.classList.remove('expanded');
      const projectsContainer = departmentCard.querySelector('.projects-container');
      if (projectsContainer) {
        projectsContainer.remove();
      }
    } else {
      // Expand - add projects container
      const projectsContainer = document.createElement('div');
      projectsContainer.className = 'projects-container mt-6 border-t border-gray-200 pt-6';
      projectsContainer.innerHTML = `
        <div class="mb-4">
          <h4 class="text-lg font-semibold text-gray-800 mb-2">Projects in ${departmentName}</h4>
          <p class="text-sm text-gray-600">Loading projects...</p>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="projects-${departmentId}">
          <div class="text-center py-8">
            <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
            <p class="text-sm text-gray-600 mt-2">Loading projects...</p>
          </div>
        </div>
      `;
      
      departmentCard.appendChild(projectsContainer);
      departmentCard.classList.add('expanded');
      
      // Load projects for this department
      loadDepartmentProjects(departmentId, departmentName);
    }
  }

  // Function to load projects for a specific department
  async function loadDepartmentProjects(departmentId, departmentName) {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:3000/api/projects/compilation/summary', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        if (data.success && data.officeSummary) {
          const department = data.officeSummary.find(office => 
            office.office.toLowerCase().replace(/\s+/g, '-') === departmentId
          );
          
          if (department && department.projects) {
            const projectsContainer = document.getElementById(`projects-${departmentId}`);
            if (projectsContainer) {
              projectsContainer.innerHTML = department.projects.map(project => `
                <div class="bg-gray-50 rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow">
                  <h5 class="font-semibold text-gray-800 text-sm mb-2 line-clamp-2">${project.name}</h5>
                  <div class="text-xs text-gray-600 space-y-1">
                    <div>ID: ${project.projectCode}</div>
                    <div>Progress: ${(parseFloat(project.overallProgress || 0)).toFixed(1)}%</div>
                    <div>Budget: ₱${(parseFloat(project.totalBudget || 0)).toLocaleString()}</div>
                  </div>
                </div>
              `).join('');
            }
          } else {
            const projectsContainer = document.getElementById(`projects-${departmentId}`);
            if (projectsContainer) {
              projectsContainer.innerHTML = '<p class="text-sm text-gray-600 text-center py-4">No projects found for this department.</p>';
            }
          }
        }
      }
    } catch (error) {
      console.error('❌ Error loading department projects:', error);
      const projectsContainer = document.getElementById(`projects-${departmentId}`);
      if (projectsContainer) {
        projectsContainer.innerHTML = '<p class="text-sm text-red-600 text-center py-4">Error loading projects. Please try again.</p>';
      }
    }
  }

  // Function to load compiled reports
  async function loadCompiledReports() {
    console.log('📊 Loading compiled reports...');
    try {
      const token = localStorage.getItem('token');
      
      // Add timeout to prevent hanging requests
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
      
      const response = await fetch('http://localhost:3000/api/projects/compilation/summary', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (response.ok) {
        const data = await response.json();
        console.log('📊 Compiled reports data:', data);
        // TODO: Implement compiled reports display
      } else {
        console.error('❌ Failed to load compiled reports:', response.statusText);
      }
    } catch (error) {
      if (error.name === 'AbortError') {
        console.error('❌ Compiled reports API request timed out.');
      } else {
        console.error('❌ Error loading compiled reports:', error);
      }
    }
  }

  // Function to show specific tab (alias for switchTab)
  function showTab(tabName) {
    console.log('🔄 showTab called with:', tabName);
    switchTab(tabName);
  }

  // Filter functions - Matching Submissions Style
  function applyFilters() {
    console.log('🔍 Applying filters...');
    const searchTerm = document.getElementById('searchInput')?.value || '';
    const statusFilter = document.getElementById('statusFilter')?.value || '';
    const departmentFilter = document.getElementById('departmentFilter')?.value || '';
    
    console.log('🔍 Filter values:', { searchTerm, statusFilter, departmentFilter });
    
    // Filter departments based on search and filters
    if (departmentsData && departmentsData.length > 0) {
      let filteredDepartments = departmentsData.filter(dept => {
        // Search filter
        if (searchTerm && !dept.name.toLowerCase().includes(searchTerm.toLowerCase())) {
          return false;
        }
        
        // Department filter
        if (departmentFilter && !dept.name.toLowerCase().includes(departmentFilter.toLowerCase())) {
          return false;
        }
        
        // Status filter (based on compilation status)
        if (statusFilter) {
          const compiledProjects = dept.projects.filter(p => p.hasCompiledReport || p.status === 'compiled_for_secretariat').length;
          const pendingProjects = dept.projects.length - compiledProjects;
          
          if (statusFilter === 'compiled' && compiledProjects === 0) return false;
          if (statusFilter === 'pending' && pendingProjects === 0) return false;
          if (statusFilter === 'in_progress' && dept.projects.length === 0) return false;
        }
        
        return true;
      });
      
      // Re-render with filtered data
      const container = document.getElementById('departmentCards');
      if (container) {
        // Temporarily store original data
        const originalData = departmentsData;
        departmentsData = filteredDepartments;
        renderDepartmentView(container);
        // Restore original data
        departmentsData = originalData;
      }
    }
  }

  function clearFilters() {
    console.log('🧹 Clearing filters...');
    const searchInput = document.getElementById('searchInput');
    const statusFilter = document.getElementById('statusFilter');
    const departmentFilter = document.getElementById('departmentFilter');
    
    if (searchInput) searchInput.value = '';
    if (statusFilter) statusFilter.value = '';
    if (departmentFilter) departmentFilter.value = '';
    
    // Re-render with all data
    const container = document.getElementById('departmentCards');
    if (container && departmentsData) {
      renderDepartmentView(container);
    }
  }

  // Export data function
  function exportData() {
    console.log('📊 Exporting compilation data...');
    // TODO: Implement export functionality
    alert('Export functionality will be implemented soon.');
  }

  // Export compiled reports function
  function exportCompiledReports() {
    console.log('📊 Exporting compiled reports...');
    // TODO: Implement export functionality
    alert('Export compiled reports functionality will be implemented soon.');
  }

  // Apply compiled reports filters
  function applyCompiledFilters() {
    console.log('🔍 Applying compiled reports filters...');
    const searchTerm = document.getElementById('compiledSearchInput')?.value || '';
    const statusFilter = document.getElementById('compiledStatusFilter')?.value || '';
    const departmentFilter = document.getElementById('compiledDepartmentFilter')?.value || '';
    
    console.log('🔍 Compiled filter values:', { searchTerm, statusFilter, departmentFilter });
    
    // TODO: Implement compiled reports filtering
    alert('Compiled reports filtering will be implemented soon.');
  }

  // Clear compiled reports filters
  function clearCompiledFilters() {
    console.log('🧹 Clearing compiled reports filters...');
    const searchInput = document.getElementById('compiledSearchInput');
    const statusFilter = document.getElementById('compiledStatusFilter');
    const departmentFilter = document.getElementById('compiledDepartmentFilter');
    
    if (searchInput) searchInput.value = '';
    if (statusFilter) statusFilter.value = '';
    if (departmentFilter) departmentFilter.value = '';
    
    // TODO: Re-render compiled reports with all data
    console.log('✅ Compiled reports filters cleared');
  }

  // Make functions globally available
  window.expandDepartment = expandDepartment;
  window.renderDepartmentView = renderDepartmentView;
  window.switchTab = switchTab;
  window.showTab = showTab;
  window.loadCompiledReports = loadCompiledReports;
  window.applyFilters = applyFilters;
  window.clearFilters = clearFilters;
  window.exportData = exportData;
  window.exportCompiledReports = exportCompiledReports;
  window.applyCompiledFilters = applyCompiledFilters;
  window.clearCompiledFilters = clearCompiledFilters;

  // Progress bar animation functions
  function animateProgressBars() {
    const progressBars = document.querySelectorAll('.progress-bar-fill');
    
    progressBars.forEach(bar => {
      const progress = parseFloat(bar.getAttribute('data-progress')) || 0;
      const colorClass = bar.getAttribute('data-progress-color') || 'bg-gray-500';
      
      // Apply the color class
      bar.className = bar.className.replace(/bg-\w+-\d+/, '');
      bar.classList.add(colorClass);
      
      // Set the progress width
      bar.style.setProperty('--progress-width', `${progress}%`);
      
      // Reset and start animation
      bar.style.width = '0%';
      bar.style.animation = 'none';
      bar.offsetHeight; // Trigger reflow
      bar.style.animation = 'fillProgress 2s ease-out forwards';
    });
  }
  
  // Intersection Observer for scroll-triggered animation
  function setupProgressAnimation() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const progressBar = entry.target.querySelector('.progress-bar-fill');
          if (progressBar) {
            const progress = parseFloat(progressBar.getAttribute('data-progress')) || 0;
            const colorClass = progressBar.getAttribute('data-progress-color') || 'bg-gray-500';
            
            // Apply the color class
            progressBar.className = progressBar.className.replace(/bg-\w+-\d+/, '');
            progressBar.classList.add(colorClass);
            
            // Set the progress width
            progressBar.style.setProperty('--progress-width', `${progress}%`);
            
            // Reset and start animation
            progressBar.style.width = '0%';
            progressBar.style.animation = 'none';
            progressBar.offsetHeight; // Trigger reflow
            progressBar.style.animation = 'fillProgress 2s ease-out forwards';
          }
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });
    
    // Observe all project cards and department cards
    const projectCards = document.querySelectorAll('.project-card');
    const departmentCards = document.querySelectorAll('.compilation-department-card-enhanced');
    
    projectCards.forEach(card => observer.observe(card));
    departmentCards.forEach(card => observer.observe(card));
  }
  
  // Initialize progress animation when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      setTimeout(setupProgressAnimation, 100);
    });
  } else {
    setTimeout(setupProgressAnimation, 100);
  }
  
  // Also run on window load for any dynamically loaded content
  window.addEventListener('load', () => {
    setTimeout(setupProgressAnimation, 200);
  });
  
  // Export functions to global scope
  window.setupProgressAnimation = setupProgressAnimation;
  window.animateProgressBars = animateProgressBars;

</script>

<style>
  /* Enhanced Department Card Animations */
  .compilation-department-card-enhanced {
    animation: slideInUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(30px);
    /* Fix hover isolation - ensure each card has its own hover scope */
    position: relative;
    z-index: 1;
  }

  @keyframes slideInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Shimmer Animation for Progress Bars */
  @keyframes shimmer {
    0% {
      transform: translateX(-100%);
    }
    100% {
      transform: translateX(100%);
    }
  }

  /* Enhanced Hover Effects - Fixed to isolate hover to individual cards */
  .compilation-department-card-enhanced:hover {
    animation: cardHover 0.3s ease-out forwards;
    /* Ensure hover effects only apply to this specific card */
    z-index: 10;
    position: relative;
  }
  
  /* Prevent hover effects from affecting other cards */
  .compilation-department-card-enhanced:not(:hover) {
    z-index: 1;
  }

  @keyframes cardHover {
    0% {
      transform: translateY(0) scale(1);
    }
    100% {
      transform: translateY(-8px) scale(1.02);
    }
  }

  /* Status Indicator Pulse Animation */
  @keyframes statusPulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.7;
      transform: scale(1.1);
    }
  }

  /* Enhanced Icon Rotation - Fixed to isolate to individual cards */
  .compilation-department-card-enhanced .icon-container {
    transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .compilation-department-card-enhanced:hover .icon-container {
    animation: iconRotate 0.6s ease-out;
  }
  
  /* Ensure group hover effects are scoped to individual cards only */
  .compilation-department-card-enhanced.group:hover {
    /* This ensures the group hover only affects this specific card */
    isolation: isolate;
  }

  @keyframes iconRotate {
    0% {
      transform: rotate(0deg) scale(1);
    }
    50% {
      transform: rotate(6deg) scale(1.1);
    }
    100% {
      transform: rotate(0deg) scale(1.1);
    }
  }

  /* Enhanced Progress Bar Animation */
  .compilation-department-card-enhanced .progress-bar-fill {
    position: relative;
    overflow: hidden;
  }

  .compilation-department-card-enhanced .progress-bar-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    animation: progressShimmer 2s infinite;
  }

  @keyframes progressShimmer {
    0% {
      left: -100%;
    }
    100% {
      left: 100%;
    }
  }

  /* Enhanced Statistics Hover Effects */
  .compilation-department-card-enhanced .group\/stat:hover {
    animation: statBounce 0.4s ease-out;
  }

  @keyframes statBounce {
    0%, 100% {
      transform: translateY(0);
    }
    50% {
      transform: translateY(-4px);
    }
  }

  /* Enhanced Status Indicator Animations */
  .compilation-department-card-enhanced .group\/status:hover .animate-ping {
    animation: statusPing 1s infinite;
  }

  @keyframes statusPing {
    0% {
      transform: scale(1);
      opacity: 0.2;
    }
    50% {
      transform: scale(1.2);
      opacity: 0.1;
    }
    100% {
      transform: scale(1.4);
      opacity: 0;
    }
  }

  /* Enhanced Action Footer Animation */
  .compilation-department-card-enhanced:hover .action-footer {
    animation: actionSlide 0.3s ease-out forwards;
  }

  @keyframes actionSlide {
    0% {
      transform: translateX(0);
    }
    100% {
      transform: translateX(4px);
    }
  }

  /* Enhanced Background Pattern Animation */
  .compilation-department-card-enhanced .bg-pattern {
    animation: patternFloat 6s ease-in-out infinite;
  }

  @keyframes patternFloat {
    0%, 100% {
      transform: translateY(0) rotate(0deg);
    }
    50% {
      transform: translateY(-10px) rotate(180deg);
    }
  }

  /* Enhanced Section Header Animation */
  .compilation-section-header {
    animation: headerSlideIn 0.8s ease-out forwards;
  }

  @keyframes headerSlideIn {
    0% {
      opacity: 0;
      transform: translateY(-20px);
    }
    100% {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Enhanced Grid Animation */
  .compilation-grid {
    animation: gridFadeIn 1s ease-out forwards;
  }

  @keyframes gridFadeIn {
    0% {
      opacity: 0;
      transform: scale(0.95);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }

  /* Enhanced Line Clamp for Better Text Display */
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Enhanced tooltip styling */
  .milestone-tooltip {
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
  }

  /* Ensure tooltip doesn't interfere with card interactions */
  .group:hover .milestone-tooltip {
    z-index: 50;
  }

  /* Enhanced summary card animations */
  .group\/stat {
    transform-style: preserve-3d;
    perspective: 1000px;
  }

  .group\/stat:hover {
    transform: translateY(-2px) scale(1.02);
  }

  /* Enhanced icon animations */
  .group\/stat:hover .w-12 {
    transform: rotateY(10deg) rotateX(5deg);
  }

  /* Smooth badge animations */
  .group\/stat:hover .absolute.-top-1.-right-1 {
    animation: bounce 0.6s ease-in-out;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0) scale(1);
    }
    40% {
      transform: translateY(-3px) scale(1.1);
    }
    60% {
      transform: translateY(-2px) scale(1.05);
    }
  }

  /* Enhanced progress bar animations */
  .group\/stat:hover .w-8.h-1\.5 {
    animation: progressGlow 0.8s ease-in-out;
  }

  @keyframes progressGlow {
    0% {
      box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
    }
    50% {
      box-shadow: 0 0 15px rgba(59, 130, 246, 0.8);
    }
    100% {
      box-shadow: 0 0 5px rgba(59, 130, 246, 0.5);
    }
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Enhanced breadcrumb navigation styling */
  .breadcrumb-nav {
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    border-radius: 12px;
    padding: 12px 16px;
  }

  .breadcrumb-nav button {
    position: relative;
    overflow: hidden;
  }

  .breadcrumb-nav button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s;
  }

  .breadcrumb-nav button:hover::before {
    left: 100%;
  }

  /* Smooth page transitions */
  .page-transition {
    animation: fadeInUp 0.3s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Toast notification styles */
  .toast-notification {
    animation: slideInRight 0.3s ease-out;
  }

  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(100%);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Enhanced back button styling */
  .back-button {
    position: relative;
    overflow: hidden;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    border: 1px solid #e2e8f0;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .back-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(59, 130, 246, 0.1), transparent);
    transition: left 0.5s;
  }

  .back-button:hover::before {
    left: 100%;
  }

  .back-button:hover {
    background: linear-gradient(135deg, #f1f5f9 0%, #e2e8f0 100%);
    border-color: #cbd5e1;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(-1px);
  }

  .back-button:active {
    transform: translateY(0);
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  }

  /* Enhanced Focus States for Accessibility */
  .compilation-department-card-enhanced:focus {
    outline: 2px solid #0ea5e9;
    outline-offset: 2px;
  }
  
  /* CRITICAL FIX: Isolate hover effects to individual department cards */
  .compilation-department-card-enhanced {
    /* Create a new stacking context to isolate hover effects */
    contain: layout style paint;
    /* Ensure each card is independent */
    isolation: isolate;
  }
  
  /* Override any global group hover effects that might affect other cards */
  .compilation-department-card-enhanced.group {
    /* Reset any inherited group behavior */
    position: relative;
    z-index: auto;
  }
  
  .compilation-department-card-enhanced.group:hover {
    /* Only affect this specific card on hover */
    z-index: 10;
    position: relative;
  }
  
  /* Ensure child elements respect the card's hover scope */
  .compilation-department-card-enhanced * {
    /* Prevent child elements from affecting parent hover state */
    pointer-events: auto;
  }

  /* Enhanced Loading States */
  .compilation-loading {
    animation: loadingPulse 1.5s ease-in-out infinite;
  }

  @keyframes loadingPulse {
    0%, 100% {
      opacity: 0.6;
    }
    50% {
      opacity: 1;
    }
  }

  /* Enhanced Responsive Design */
  @media (max-width: 768px) {
    .compilation-department-card-enhanced {
      animation-delay: 0ms !important;
    }
    
    .compilation-department-card-enhanced:hover {
      transform: translateY(-4px) scale(1.01);
    }
  }

  /* Remove all grayscale filters from department logos */
  .department-logo-grayscale {
    filter: none !important;
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    -webkit-filter: none !important;
  }

  .compilation-department-card-enhanced:hover .department-logo-grayscale {
    filter: none !important;
    -webkit-filter: none !important;
    transform: scale(1.05);
  }

  /* Enhanced logo visibility and contrast */
  .compilation-department-card-enhanced .w-16 img {
    filter: brightness(1.1) contrast(1.2) drop-shadow(0 2px 4px rgba(0,0,0,0.3)) !important;
    -webkit-filter: brightness(1.1) contrast(1.2) drop-shadow(0 2px 4px rgba(0,0,0,0.3)) !important;
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    z-index: 10;
  }

  .compilation-department-card-enhanced:hover .w-16 img {
    filter: brightness(1.2) contrast(1.3) drop-shadow(0 4px 8px rgba(0,0,0,0.4)) !important;
    -webkit-filter: brightness(1.2) contrast(1.3) drop-shadow(0 4px 8px rgba(0,0,0,0.4)) !important;
    transform: scale(1.05);
  }

  /* Enhanced logo container for better visibility */
  .compilation-department-card-enhanced .w-16 {
    position: relative;
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border: 4px solid #e2e8f0;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  }

  .compilation-department-card-enhanced:hover .w-16 {
    border-color: #cbd5e1;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    background: linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%);
  }

  /* Additional logo visibility enhancements */
  .compilation-department-card-enhanced .w-16::before {
    content: '';
    position: absolute;
    inset: 0;
    background: radial-gradient(circle, rgba(255,255,255,0.8) 0%, rgba(255,255,255,0.4) 70%, transparent 100%);
    border-radius: 50%;
    opacity: 0;
    transition: opacity 0.3s ease;
    z-index: 5;
  }

  .compilation-department-card-enhanced:hover .w-16::before {
    opacity: 1;
  }

  /* Enhanced logo visibility for all department logos */
  .compilation-department-card-enhanced img[src*="logo"] {
    filter: brightness(1.1) contrast(1.2) drop-shadow(0 2px 4px rgba(0,0,0,0.3)) !important;
    -webkit-filter: brightness(1.1) contrast(1.2) drop-shadow(0 2px 4px rgba(0,0,0,0.3)) !important;
    -moz-filter: brightness(1.1) contrast(1.2) drop-shadow(0 2px 4px rgba(0,0,0,0.3)) !important;
    -ms-filter: brightness(1.1) contrast(1.2) drop-shadow(0 2px 4px rgba(0,0,0,0.3)) !important;
    -o-filter: brightness(1.1) contrast(1.2) drop-shadow(0 2px 4px rgba(0,0,0,0.3)) !important;
  }

  .compilation-department-card-enhanced:hover img[src*="logo"] {
    filter: brightness(1.2) contrast(1.3) drop-shadow(0 4px 8px rgba(0,0,0,0.4)) !important;
    -webkit-filter: brightness(1.2) contrast(1.3) drop-shadow(0 4px 8px rgba(0,0,0,0.4)) !important;
    -moz-filter: brightness(1.2) contrast(1.3) drop-shadow(0 4px 8px rgba(0,0,0,0.4)) !important;
    -ms-filter: brightness(1.2) contrast(1.3) drop-shadow(0 4px 8px rgba(0,0,0,0.4)) !important;
    -o-filter: brightness(1.2) contrast(1.3) drop-shadow(0 4px 8px rgba(0,0,0,0.4)) !important;
  }

  /* Enhanced Logo Container Effects */
  .compilation-department-card-enhanced .icon-container {
    position: relative;
    overflow: hidden;
  }

  .compilation-department-card-enhanced .icon-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
    transition: left 0.6s ease;
  }

  .compilation-department-card-enhanced:hover .icon-container::before {
    left: 100%;
  }

  /* Ensure proper grid layout for department cards */
  .compilation-department-card-enhanced {
    width: 100%;
    max-width: 100%;
    min-width: 0;
    margin: 1rem !important;
  }

  /* Force flexbox layout with proper spacing */
  #department-grid-container {
    display: flex !important;
    flex-direction: column !important;
    gap: 6rem !important;
    align-items: stretch !important;
    width: 100% !important;
    padding: 0 !important;
    margin: 0 !important;
    box-sizing: border-box !important;
    /* Override any conflicting display properties */
    grid-template-columns: none !important;
    grid-template-rows: none !important;
    grid-auto-flow: unset !important;
    /* Force gap to work */
    row-gap: 6rem !important;
    column-gap: 0 !important;
  }

  /* Alternative spacing method - add margin to each card except first */
  #department-grid-container > .compilation-department-card-enhanced:not(:first-child) {
    margin-top: 6rem !important;
  }

  /* ULTRA-AGGRESSIVE: Force spacing with maximum specificity */
  div#department-grid-container {
    display: flex !important;
    flex-direction: column !important;
    gap: 6rem !important;
    row-gap: 6rem !important;
    column-gap: 0 !important;
    align-items: stretch !important;
    width: 100% !important;
    padding: 0 !important;
    margin: 0 !important;
    box-sizing: border-box !important;
    grid-template-columns: none !important;
    grid-template-rows: none !important;
    grid-auto-flow: unset !important;
  }

  div#department-grid-container > div.compilation-department-card-enhanced {
    width: 100% !important;
    flex-shrink: 0 !important;
    position: relative !important;
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
    min-height: 200px !important;
    top: auto !important;
    left: auto !important;
    right: auto !important;
    bottom: auto !important;
    transform: none !important;
    float: none !important;
    clear: both !important;
  }

  div#department-grid-container > div.compilation-department-card-enhanced:not(:first-child) {
    margin-top: 6rem !important;
  }

  /* NUCLEAR OPTION: Force spacing with absolute positioning as fallback */
  @media (max-width: 9999px) {
    div#department-grid-container {
      position: relative !important;
      display: block !important;
    }
    
    div#department-grid-container > div.compilation-department-card-enhanced:nth-child(1) {
      position: relative !important;
      top: 0 !important;
      margin-bottom: 6rem !important;
    }
    
    div#department-grid-container > div.compilation-department-card-enhanced:nth-child(2) {
      position: relative !important;
      top: 0 !important;
      margin-top: 6rem !important;
      margin-bottom: 6rem !important;
    }
    
    div#department-grid-container > div.compilation-department-card-enhanced:nth-child(3) {
      position: relative !important;
      top: 0 !important;
      margin-top: 6rem !important;
      margin-bottom: 6rem !important;
    }
    
    div#department-grid-container > div.compilation-department-card-enhanced:nth-child(4) {
      position: relative !important;
      top: 0 !important;
      margin-top: 6rem !important;
      margin-bottom: 6rem !important;
    }
    
    div#department-grid-container > div.compilation-department-card-enhanced:nth-child(5) {
      position: relative !important;
      top: 0 !important;
      margin-top: 6rem !important;
      margin-bottom: 6rem !important;
    }
  }

  /* Ensure each department card takes full width and proper spacing */
  .compilation-department-card-enhanced {
    width: 100% !important;
    flex-shrink: 0 !important;
    position: relative !important;
    margin: 0 !important;
    padding: 0 !important;
    box-sizing: border-box !important;
    min-height: 200px !important;
    /* Force proper spacing - override any conflicting styles */
    top: auto !important;
    left: auto !important;
    right: auto !important;
    bottom: auto !important;
    transform: none !important;
    float: none !important;
    clear: both !important;
  }

  /* Completely override any group hover effects */
  .compilation-department-card-enhanced {
    position: relative !important;
    isolation: isolate !important;
  }

  /* Remove all group-based hover effects */
  .compilation-department-card-enhanced .group-hover\\:opacity-100 {
    opacity: 0 !important;
  }

  .compilation-department-card-enhanced:hover .group-hover\\:opacity-100 {
    opacity: 0 !important;
  }

  /* Create independent hover effects */
  .compilation-department-card-enhanced:hover .hover-overlay {
    opacity: 1 !important;
  }

  .compilation-department-card-enhanced:hover {
    transform: translateY(-8px) scale(1.02) !important;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25) !important;
  }

  /* Disable all group-based CSS */
  .compilation-department-card-enhanced * {
    transition: none !important;
  }

  .compilation-department-card-enhanced:hover * {
    transition: all 0.3s ease !important;
  }

  /* Override Tailwind group classes */
  .group:hover .group-hover\\:opacity-100 {
    opacity: 0 !important;
  }

  .group:hover .group-hover\\:scale-150 {
    transform: scale(1) !important;
  }

  .group:hover .group-hover\\:scale-125 {
    transform: scale(1) !important;
  }

  /* Remove conflicting grid media queries - using flexbox layout */

  /* Fix hover effects - ensure each card is independent */
  .compilation-department-card-enhanced {
    position: relative !important;
    z-index: 1 !important;
    isolation: isolate !important;
    display: block !important;
    clear: both !important;
  }

  /* Debugging CSS - remove after testing */
  .compilation-department-card-enhanced {
    border: 2px solid transparent !important;
    transition: border-color 0.3s ease !important;
    /* Force isolated hover areas */
    pointer-events: auto !important;
    position: relative !important;
    z-index: 1 !important;
    isolation: isolate !important;
  }
  
  /* FIXED: More specific hover selector to prevent affecting other cards */
  .compilation-department-card-enhanced:hover {
    border: 2px solid red !important;
    background-color: rgba(255, 0, 0, 0.05) !important;
    z-index: 10 !important;
    isolation: isolate !important;
    /* Prevent hover from affecting other cards */
    pointer-events: auto !important;
  }

  /* ULTRA-SPECIFIC: Force red border on hover with maximum specificity */
  div#department-grid-container > div.compilation-department-card-enhanced:hover {
    border: 2px solid red !important;
    background-color: rgba(255, 0, 0, 0.05) !important;
  }

  /* CRITICAL FIX: Ensure hover only affects the specific card being hovered */
  .compilation-department-card-enhanced:not(:hover) {
    border-color: transparent !important;
    background-color: transparent !important;
  }

  /* NUCLEAR OPTION: Force reset all hover styles on non-hovered cards */
  #department-grid-container > .compilation-department-card-enhanced:not(:hover) {
    border: 2px solid transparent !important;
    background-color: transparent !important;
    box-shadow: none !important;
  }

  /* Ensure parent containers don't interfere */
  #department-grid-container:not(:hover) {
    border: none !important;
    background-color: transparent !important;
  }

  /* Force isolation on each card */
  .compilation-department-card-enhanced {
    contain: layout style paint !important;
  }

  /* NUCLEAR OPTION: Override ALL possible conflicting styles */
  div#department-grid-container > div.compilation-department-card-enhanced {
    border: 2px solid transparent !important;
    background-color: transparent !important;
    transition: none !important;
  }

  div#department-grid-container > div.compilation-department-card-enhanced:hover {
    border: 2px solid red !important;
    background-color: rgba(255, 0, 0, 0.05) !important;
    z-index: 10 !important;
  }

  /* Override any Tailwind or other framework styles */
  .compilation-department-card-enhanced[class*="border"] {
    border: 2px solid transparent !important;
  }

  .compilation-department-card-enhanced[class*="bg-"] {
    background-color: transparent !important;
  }

  /* NUCLEAR OPTION: Disable ALL CSS hover effects and rely on JavaScript */
  .compilation-department-card-enhanced:hover {
    border: 2px solid transparent !important;
    background-color: transparent !important;
    box-shadow: none !important;
    transform: none !important;
    transition: none !important;
  }

  /* Disable any group hover effects */
  .group:hover .compilation-department-card-enhanced {
    border: 2px solid transparent !important;
    background-color: transparent !important;
  }

  /* Disable any parent container hover effects */
  #department-grid-container:hover .compilation-department-card-enhanced {
    border: 2px solid transparent !important;
    background-color: transparent !important;
  }

  /* Force all department cards to be transparent by default */
  .compilation-department-card-enhanced,
  .compilation-department-card-enhanced * {
    border-color: transparent !important;
    background-color: transparent !important;
  }

  /* ULTRA-AGGRESSIVE: Override ANY possible source of red styling */
  .compilation-department-card-enhanced,
  .compilation-department-card-enhanced *,
  .compilation-department-card-enhanced::before,
  .compilation-department-card-enhanced::after,
  .compilation-department-card-enhanced *::before,
  .compilation-department-card-enhanced *::after {
    border: 2px solid transparent !important;
    border-color: transparent !important;
    background-color: transparent !important;
    background: transparent !important;
    box-shadow: none !important;
    outline: none !important;
  }

  /* Override any Tailwind classes that might be causing the issue */
  .compilation-department-card-enhanced.border-red-500,
  .compilation-department-card-enhanced.border-red-600,
  .compilation-department-card-enhanced.bg-red-50,
  .compilation-department-card-enhanced.bg-red-100 {
    border: 2px solid transparent !important;
    background-color: transparent !important;
  }

  /* Override any group hover effects from parent containers */
  .group:hover .compilation-department-card-enhanced,
  .group:focus .compilation-department-card-enhanced,
  .group:active .compilation-department-card-enhanced {
    border: 2px solid transparent !important;
    background-color: transparent !important;
  }

  /* CRITICAL FIX: Target the department logo containers that have red status rings */
  .compilation-department-card-enhanced .w-16,
  .compilation-department-card-enhanced .w-12,
  .compilation-department-card-enhanced .w-14,
  .compilation-department-card-enhanced .w-20 {
    border: none !important;
    background: none !important;
    box-shadow: none !important;
    outline: none !important;
  }

  /* Override any status ring styling on department logos */
  .compilation-department-card-enhanced .w-16::before,
  .compilation-department-card-enhanced .w-12::before,
  .compilation-department-card-enhanced .w-14::before,
  .compilation-department-card-enhanced .w-20::before {
    display: none !important;
  }

  /* Override any gradient backgrounds on logo containers */
  .compilation-department-card-enhanced .bg-gradient-to-br,
  .compilation-department-card-enhanced .bg-gradient-to-r,
  .compilation-department-card-enhanced .bg-gradient-to-l {
    background: none !important;
    border: none !important;
  }

  /* Ensure gaps between cards don't trigger hover */
  #department-grid-container {
    pointer-events: none !important;
  }
  
  #department-grid-container > .compilation-department-card-enhanced {
    pointer-events: auto !important;
  }

  /* Ensure hover effects only apply to the specific card being hovered */
  .compilation-department-card-enhanced .group {
    position: relative;
    z-index: inherit;
  }

  /* Override any parent group hover effects */
  .compilation-department-card-enhanced:hover .group {
    z-index: inherit;
  }

  /* Prevent hover effects from affecting other cards */
  .compilation-department-card-enhanced {
    pointer-events: auto;
  }

  .compilation-department-card-enhanced:not(:hover) {
    pointer-events: auto;
  }

  /* Ensure each card is completely independent */
  .compilation-department-card-enhanced * {
    pointer-events: none;
  }

  .compilation-department-card-enhanced {
    pointer-events: auto;
  }

  /* Additional spacing for grid items */
  .compilation-department-card-enhanced {
    padding: 1rem !important;
  }

  /* DEBUGGING: Add visual debugging for hover areas */
  .compilation-department-card-enhanced {
    border: 2px solid transparent !important;
    transition: border-color 0.3s ease !important;
  }

  .compilation-department-card-enhanced:hover {
    border-color: red !important;
    background-color: rgba(255, 0, 0, 0.05) !important;
  }

  /* DEBUGGING: Ensure each card has proper isolation */
  .compilation-department-card-enhanced {
    position: relative !important;
    z-index: 1 !important;
  }

  .compilation-department-card-enhanced:hover {
    z-index: 10 !important;
  }

  /* Enhanced Statistics Grid Animation */
  .compilation-department-card-enhanced .group\/stat {
    position: relative;
    overflow: hidden;
  }

  .compilation-department-card-enhanced .group\/stat::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.1) 50%, transparent 70%);
    transform: translateX(-100%);
    transition: transform 0.6s ease;
  }

  .compilation-department-card-enhanced .group\/stat:hover::before {
    transform: translateX(100%);
  }

  /* Enhanced Progress Bar with Logo Color Integration */
  .compilation-department-card-enhanced .progress-bar-fill {
    position: relative;
    overflow: hidden;
  }

  .compilation-department-card-enhanced .progress-bar-fill::after {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
    animation: progressShimmer 3s infinite;
  }

  /* Enhanced Logo Ring Animation */
  .compilation-department-card-enhanced .icon-container {
    animation: logoRingPulse 4s ease-in-out infinite;
  }

  @keyframes logoRingPulse {
    0%, 100% {
      box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
    }
    50% {
      box-shadow: 0 0 0 8px rgba(59, 130, 246, 0.1);
    }
  }

  .compilation-department-card-enhanced:hover .icon-container {
    animation: logoRingPulseHover 0.6s ease-out;
  }

  @keyframes logoRingPulseHover {
    0% {
      box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.4);
    }
    100% {
      box-shadow: 0 0 0 12px rgba(59, 130, 246, 0.2);
    }
  }

  /* Enhanced Header Icon Effects */
  .compilation-section-header .icon-container {
    position: relative;
    overflow: hidden;
  }

  .compilation-section-header .icon-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(45deg, transparent 30%, rgba(255,255,255,0.2) 50%, transparent 70%);
    transform: translateX(-100%);
    transition: transform 0.6s ease;
  }

  .compilation-section-header .icon-container:hover::before {
    transform: translateX(100%);
  }

  /* Enhanced Header Icon Pulse Animation */
  .compilation-section-header .icon-container {
    animation: headerIconPulse 3s ease-in-out infinite;
  }

  @keyframes headerIconPulse {
    0%, 100% {
      box-shadow: 0 10px 25px -5px rgba(14, 165, 233, 0.3);
    }
    50% {
      box-shadow: 0 20px 40px -10px rgba(14, 165, 233, 0.4);
    }
  }

  .compilation-section-header .icon-container:hover {
    animation: headerIconPulseHover 0.6s ease-out;
  }

  @keyframes headerIconPulseHover {
    0% {
      box-shadow: 0 10px 25px -5px rgba(14, 165, 233, 0.3);
    }
    100% {
      box-shadow: 0 25px 50px -12px rgba(14, 165, 233, 0.5);
    }
  }

  /* Enhanced Dark Mode Support (if needed) */
  @media (prefers-color-scheme: dark) {
    .compilation-department-card-enhanced {
      background-color: #1f2937;
      border-color: #374151;
    }
    
    .compilation-department-card-enhanced h3 {
      color: #f9fafb;
    }
    
    .compilation-department-card-enhanced p {
      color: #d1d5db;
    }

    .compilation-department-card-enhanced .icon-container {
      background: linear-gradient(135deg, #374151, #4b5563);
      border-color: #6b7280;
    }

    .compilation-department-card-enhanced .icon-container img {
      filter: grayscale(100%) brightness(0.9) contrast(1.1);
    }
  }

  /* REMOVE ALL FILTERS FROM DEPARTMENT LOGOS - SHOW ORIGINAL COLORS */
  .compilation-department-card-enhanced img,
  .compilation-department-card-enhanced .w-16 img,
  .compilation-department-card-enhanced .department-logo-grayscale,
  img[src*="logo"] {
    filter: none !important;
    -webkit-filter: none !important;
    -moz-filter: none !important;
    -ms-filter: none !important;
    -o-filter: none !important;
  }
</style>


