export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import SecretariatLayout from '../../../../components/SecretariatLayout.astro';
---

<Layout title="Compilation Summary | MPMEC Secretariat">
  <SecretariatLayout>
    <style>
      .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }
      
      .custom-scrollbar::-webkit-scrollbar {
        width: 8px;
      }
      
      .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 10px;
      }
      
      .custom-scrollbar::-webkit-scrollbar-thumb {
        background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        border-radius: 10px;
      }
      
      .custom-scrollbar::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(135deg, #2563eb, #7c3aed);
      }
      
      /* Modern card hover effects */
      .milestone-card {
        transition: all 0.3s ease;
      }
      
      .milestone-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      }
      
      /* Gradient text effect */
      .gradient-text {
        background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }
      
      /* Modern button styles */
      .modern-btn {
        background: linear-gradient(135deg, #3b82f6, #8b5cf6);
        transition: all 0.3s ease;
      }
      
      .modern-btn:hover {
        background: linear-gradient(135deg, #2563eb, #7c3aed);
        transform: translateY(-1px);
        box-shadow: 0 10px 20px rgba(59, 130, 246, 0.3);
      }
    </style>
    
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Compilation Summary</h1>
          <p class="text-gray-600">Comprehensive project compilation by department/office</p>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="refreshCompilation()" class="px-4 py-2 bg-[#FE5353] text-white rounded-lg hover:bg-[#E54545] transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Refresh
          </button>
          <button onclick="exportCompilation()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Export
          </button>
        </div>
      </div>

      <!-- Overall Statistics -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8" id="overallStats">
        <!-- Overall stats will be loaded dynamically -->
      </div>

      <!-- Department/Office Cards -->
      <div class="space-y-8" id="departmentCards">
        <!-- Department cards will be loaded dynamically -->
      </div>
    </section>

    <!-- Project Report Modal -->
    <div id="projectReportModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-10 mx-auto p-5 border w-11/12 max-w-6xl shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-900" id="modalTitle">Project Report Details</h3>
            <div class="flex items-center gap-2">
              <button onclick="openTimelineModal()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2 text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                Timeline Graph
              </button>
              <button onclick="openHistoryModal()" class="px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center gap-2 text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                Update History
              </button>
              <button onclick="exportProjectReport()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2 text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Export Report
              </button>
              <button onclick="closeProjectModal()" class="text-gray-400 hover:text-gray-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <!-- Project Information -->
          <div id="projectInfo" class="mb-8">
            <!-- Project info will be loaded here -->
          </div>

          <!-- Compiled Report Section -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold text-gray-800 mb-4">Compiled Report from Implementing Office</h4>
            <div id="compiledReport" class="bg-gray-50 rounded-lg p-6">
              <!-- Compiled report will be loaded here -->
            </div>
          </div>

          <!-- Milestone Updates -->
          <div class="mb-8">
            <h4 class="text-lg font-semibold text-gray-800 mb-4">Milestone Updates & Weight Distribution</h4>
            <div id="milestoneUpdates" class="space-y-4">
              <!-- Milestone updates will be loaded here -->
            </div>
          </div>

          <!-- Approval Actions -->
          <div class="mt-8 pt-6 border-t border-gray-200">
            <h4 class="text-lg font-semibold text-gray-800 mb-4">Secretariat Validation & Progress Update</h4>
            <div class="flex items-center gap-4">
              <button onclick="approveFullWeight()" class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                Approve (Full Weight)
              </button>
              <button onclick="showPartialProgressModal()" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6V4m0 2a2 2 0 100 4m0-4a2 2 0 110 4m-6 8a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4m6 6v10m6-2a2 2 0 100-4m0 4a2 2 0 100 4m0-4v2m0-6V4"></path>
                </svg>
                Approve (Partial Progress)
              </button>
              <button onclick="rejectReport()" class="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                Reject
              </button>
              <button onclick="closeProjectModal()" class="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
                Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Timeline Graph Modal -->
    <div id="timelineModal" class="fixed inset-0 bg-black bg-opacity-50 backdrop-blur-sm overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-5 mx-auto p-6 border-0 w-11/12 max-w-7xl shadow-2xl rounded-2xl bg-gradient-to-br from-white to-gray-50">
        <div class="mt-3">
          <div class="flex items-center justify-between mb-8">
            <div>
              <h3 class="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Project Timeline Graph
              </h3>
              <p class="text-sm text-gray-600 mt-2 flex items-center">
                <svg class="w-4 h-4 mr-2 text-blue-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
                Visual representation of project milestones and progress
              </p>
            </div>
            <button onclick="closeTimelineModal()" class="text-gray-400 hover:text-gray-600 p-3 rounded-full hover:bg-gray-100 transition-all duration-200 group">
              <svg class="w-6 h-6 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
          
          <!-- Timeline Chart Container -->
          <div class="mb-8 bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 shadow-lg border border-gray-100">
            <div class="flex items-center justify-between mb-6">
              <h4 class="text-xl font-bold text-gray-800 flex items-center">
                <svg class="w-6 h-6 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                Timeline Visualization
              </h4>
              <div class="flex items-center space-x-6 text-sm">
                <div class="flex items-center">
                  <div class="w-3 h-3 bg-green-500 rounded-full mr-2 shadow-lg"></div>
                  <span class="text-gray-700 font-medium">Completed</span>
                </div>
                <div class="flex items-center">
                  <div class="w-3 h-3 bg-yellow-500 rounded-full mr-2 shadow-lg"></div>
                  <span class="text-gray-700 font-medium">In Progress</span>
                </div>
                <div class="flex items-center">
                  <div class="w-3 h-3 bg-gray-500 rounded-full mr-2 shadow-lg"></div>
                  <span class="text-gray-700 font-medium">Pending</span>
                </div>
              </div>
            </div>
            <div class="flex justify-center">
              <div class="relative">
                <canvas id="timelineChart" width="1000" height="450" class="border-0 rounded-xl shadow-xl bg-gradient-to-br from-white to-gray-50"></canvas>
                <div class="absolute inset-0 rounded-xl pointer-events-none border border-gray-200/50"></div>
              </div>
            </div>
          </div>
          
          <!-- Timeline Details -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div class="bg-white rounded-2xl border border-gray-200 p-6 shadow-lg hover:shadow-xl transition-shadow duration-300">
              <h4 class="font-bold text-gray-800 mb-6 flex items-center text-lg">
                <svg class="w-6 h-6 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                </svg>
                Project Milestones
              </h4>
              <div id="timelineMilestones" class="space-y-4 max-h-96 overflow-y-auto custom-scrollbar">
                <!-- Milestones will be loaded here -->
              </div>
            </div>
            <div class="bg-white rounded-2xl border border-gray-200 p-6 shadow-lg hover:shadow-xl transition-shadow duration-300">
              <h4 class="font-bold text-gray-800 mb-6 flex items-center text-lg">
                <svg class="w-6 h-6 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
                Progress Summary
              </h4>
              <div id="timelineProgress" class="space-y-6">
                <!-- Progress summary will be loaded here -->
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Update History Modal -->
    <div id="historyModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-10 mx-auto p-5 border w-11/12 max-w-6xl shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <div class="flex items-center justify-between mb-6">
            <h3 class="text-xl font-semibold text-gray-900">Project Update History</h3>
            <div class="flex items-center gap-2">
              <button onclick="exportHistory()" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2 text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Export History
              </button>
              <button onclick="closeHistoryModal()" class="text-gray-400 hover:text-gray-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <!-- History Timeline -->
          <div class="mb-6">
            <div id="historyTimeline" class="space-y-4">
              <!-- History items will be loaded here -->
            </div>
          </div>
          
          <!-- Activity Log -->
          <div class="bg-gray-50 rounded-lg p-4">
            <h4 class="font-semibold text-gray-800 mb-3">Activity Log</h4>
            <div id="activityLog" class="space-y-2">
              <!-- Activity log will be loaded here -->
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Partial Progress Modal -->
    <div id="partialProgressModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Set Partial Progress</h3>
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Timeline Progress (%)</label>
              <input type="number" id="timelineProgress" min="0" max="100" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Budget Progress (%)</label>
              <input type="number" id="budgetProgress" min="0" max="100" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Physical Progress (%)</label>
              <input type="number" id="physicalProgress" min="0" max="100" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
            </div>
            <div class="bg-blue-50 p-3 rounded-lg">
              <p class="text-sm text-blue-800">
                <strong>Note:</strong> Total progress will be capped at the milestone weight percentage.
              </p>
            </div>
          </div>
          <div class="flex justify-end gap-3 mt-6">
            <button onclick="closePartialProgressModal()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
            <button onclick="confirmPartialProgress()" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
              Confirm
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Rejection Modal -->
    <div id="rejectionModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
      <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
        <div class="mt-3">
          <h3 class="text-lg font-medium text-gray-900 mb-4">Reject Compiled Report</h3>
          <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700 mb-2">Rejection Comments</label>
            <textarea id="rejectionComments" rows="4" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500" placeholder="Please provide specific reasons for rejection..."></textarea>
          </div>
          <div class="flex justify-end gap-3">
            <button onclick="closeRejectionModal()" class="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors">
              Cancel
            </button>
            <button onclick="confirmRejection()" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
              Confirm Rejection
            </button>
          </div>
        </div>
      </div>
    </div>
  </SecretariatLayout>
</Layout>

<script>
  let currentProjectId = null;
  let currentProjectData = null;
  let currentMilestoneData = null;

  document.addEventListener('DOMContentLoaded', function() {
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      window.location.href = '/login/lgu-pmt';
      return;
    }
    
    try {
      const user = JSON.parse(userData);
      if (user.role !== 'LGU-PMT' || !user.subRole || !user.subRole.toLowerCase().includes('secretariat')) {
        window.location.href = '/login/lgu-pmt';
        return;
      }
    } catch (error) {
      console.error('Error parsing user data:', error);
      window.location.href = '/login/lgu-pmt';
    }

    loadCompilationData();
  });

  async function loadCompilationData() {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:3000/api/projects/compilation/summary', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        updateOverallStats(data.overallStats);
        loadDepartmentCards(data.officeSummary);
      } else {
        throw new Error(data.error || 'Failed to fetch compilation data');
      }
    } catch (error) {
      console.error('Error loading compilation data:', error);
      loadDepartmentCards();
    }
  }

  function updateOverallStats(stats) {
    const container = document.getElementById('overallStats');
    
    container.innerHTML = `
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-gray-800">Total Projects</h3>
          <div class="p-3 bg-blue-100 rounded-full">
            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
            </svg>
          </div>
        </div>
        <div class="space-y-3">
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Total Projects:</span>
            <span class="text-sm font-medium">${stats.totalProjects || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Total Reports:</span>
            <span class="text-sm font-medium">${stats.totalReports || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Average Completion:</span>
            <span class="text-sm font-medium text-green-600">${stats.averageCompletion || 0}%</span>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-gray-800">Timeline Status</h3>
          <div class="p-3 bg-green-100 rounded-full">
            <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        </div>
        <div class="space-y-3">
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">On Schedule:</span>
            <span class="text-sm font-medium text-green-600">${stats.timelineStatus?.onSchedule || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Slightly Delayed:</span>
            <span class="text-sm font-medium text-yellow-600">${stats.timelineStatus?.slightlyDelayed || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Significantly Delayed:</span>
            <span class="text-sm font-medium text-red-600">${stats.timelineStatus?.significantlyDelayed || 0}</span>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-gray-800">Budget Status</h3>
          <div class="p-3 bg-purple-100 rounded-full">
            <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
            </svg>
          </div>
        </div>
        <div class="space-y-3">
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Within Budget:</span>
            <span class="text-sm font-medium text-green-600">${stats.budgetStatus?.withinBudget || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Minor Overrun:</span>
            <span class="text-sm font-medium text-yellow-600">${stats.budgetStatus?.minorOverrun || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Major Overrun:</span>
            <span class="text-sm font-medium text-red-600">${stats.budgetStatus?.majorOverrun || 0}</span>
          </div>
        </div>
      </div>

      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
        <div class="flex items-center justify-between mb-4">
          <h3 class="text-lg font-semibold text-gray-800">Validation Status</h3>
          <div class="p-3 bg-orange-100 rounded-full">
            <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
        </div>
        <div class="space-y-3">
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Pending Validation:</span>
            <span class="text-sm font-medium text-yellow-600">${stats.validationStatus?.pending || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Approved:</span>
            <span class="text-sm font-medium text-green-600">${stats.validationStatus?.approved || 0}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-sm text-gray-600">Rejected:</span>
            <span class="text-sm font-medium text-red-600">${stats.validationStatus?.rejected || 0}</span>
          </div>
        </div>
      </div>
    `;
  }

  function loadDepartmentCards(officeSummary = null) {
    const container = document.getElementById('departmentCards');
    
    if (!officeSummary) {
      // Fallback static data
      officeSummary = [
        {
          office: 'Municipal Disaster And Risk Reduction Management Office',
          projects: [
            {
              id: '5595bd3b-18c7-45ed-b9c9-95390703d539',
              projectCode: 'PRJ-2025-450618',
              name: 'Installation of Additional Security Cameras for Monitoring of Disaster-prone Areas',
              overallProgress: 0,
              timelineProgress: 0,
              budgetProgress: 0,
              physicalProgress: 0,
              totalBudget: 1726690,
              implementingOffice: 'Municipal Disaster And Risk Reduction Management Office',
              eiuPartner: 'MSWDO Partner EIU',
              status: 'compiled_for_secretariat',
              hasCompiledReport: true
            }
          ]
        }
      ];
    }

    container.innerHTML = officeSummary.map(department => `
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden">
        <div class="px-6 py-4 bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-gray-200">
          <div class="flex items-center justify-between">
            <div>
              <h3 class="text-xl font-semibold text-gray-800">${department.office}</h3>
              <p class="text-sm text-gray-600">${department.projects?.length || 0} project(s) • ${department.projects?.filter(p => p.hasCompiledReport).length || 0} compiled report(s)</p>
            </div>
            <div class="flex items-center gap-2">
              <span class="px-3 py-1 bg-blue-100 text-blue-800 text-sm font-medium rounded-full">
                ${department.projects?.length || 0} Projects
              </span>
            </div>
          </div>
        </div>
        
        <div class="p-6">
          <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            ${department.projects?.map(project => `
              <div class="bg-gray-50 rounded-lg p-4 border border-gray-200 hover:shadow-md transition-shadow">
                <div class="flex items-start justify-between mb-3">
                  <h4 class="font-semibold text-gray-800 text-sm line-clamp-2">${project.name}</h4>
                  <span class="px-2 py-1 text-xs font-medium rounded-full ${
                    project.status === 'compiled_for_secretariat' ? 'bg-green-100 text-green-800' :
                    project.status === 'ongoing' ? 'bg-blue-100 text-blue-800' :
                    'bg-gray-100 text-gray-800'
                  }">
                    ${project.status === 'compiled_for_secretariat' ? 'Compiled' : project.status}
                  </span>
                </div>
                
                <div class="space-y-3 text-sm text-gray-600">
                  <div class="flex justify-between">
                    <span>Project ID:</span>
                    <span class="font-mono text-xs">${project.projectCode}</span>
                  </div>
                  
                  <div class="flex justify-between">
                    <span>Overall Progress:</span>
                    <span class="font-medium">${(parseFloat(project.progress?.overallProgress || project.overallProgress || 0)).toFixed(2)}%</span>
                  </div>
                  
                  <div class="grid grid-cols-3 gap-2 text-xs">
                    <div class="text-center">
                      <div class="font-medium text-green-600">${(parseFloat(project.timelineProgress) || 0).toFixed(1)}%</div>
                      <div class="text-gray-500">Timeline</div>
                    </div>
                    <div class="text-center">
                      <div class="font-medium text-purple-600">${(parseFloat(project.budgetProgress) || 0).toFixed(1)}%</div>
                      <div class="text-gray-500">Budget</div>
                    </div>
                    <div class="text-center">
                      <div class="font-medium text-orange-600">${(parseFloat(project.physicalProgress) || 0).toFixed(1)}%</div>
                      <div class="text-gray-500">Physical</div>
                    </div>
                  </div>
                  
                  <div class="flex justify-between">
                    <span>Budget:</span>
                    <span>₱${(parseFloat(project.totalBudget) || 0).toLocaleString()}</span>
                  </div>
                  
                  <div class="bg-blue-50 p-2 rounded text-xs">
                    <div class="font-medium text-blue-800 mb-1">Implementing Unit:</div>
                    <div class="text-blue-700">${project.implementingOffice}</div>
                  </div>
                  
                  <div class="bg-green-50 p-2 rounded text-xs">
                    <div class="font-medium text-green-800 mb-1">EIU Partner:</div>
                    <div class="text-green-700">${project.eiuPartner || 'Not assigned'}</div>
                  </div>
                </div>
                
                <div class="mt-4 flex gap-2">
                  <button onclick="viewProjectReport('${project.id}')" class="flex-1 px-3 py-2 bg-[#FE5353] text-white text-sm rounded-lg hover:bg-[#E54545] transition-colors">
                    View Report
                  </button>
                  ${project.hasCompiledReport ? `
                    <button onclick="generateProjectReport('${project.id}')" class="px-3 py-2 bg-blue-600 text-white text-sm rounded-lg hover:bg-blue-700 transition-colors">
                      Export
                    </button>
                  ` : ''}
                </div>
              </div>
            `).join('') || '<p class="text-gray-500 col-span-full text-center py-8">No projects available for this department.</p>'}
          </div>
        </div>
      </div>
    `).join('');
  }

  async function viewProjectReport(projectId) {
    try {
      const token = localStorage.getItem('token');
      const timestamp = new Date().getTime(); // Cache busting
      const response = await fetch(`http://localhost:3000/api/projects/progress/${projectId}?t=${timestamp}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        currentProjectId = projectId;
        currentProjectData = data.data;
        displayProjectReport(data.data);
        document.getElementById('projectReportModal').classList.remove('hidden');
      } else {
        throw new Error(data.error || 'Failed to fetch project details');
      }
    } catch (error) {
      console.error('Error loading project report:', error);
      alert('Error loading project report. Please try again.');
    }
  }

  function displayProjectReport(projectData) {
    const modalTitle = document.getElementById('modalTitle');
    const projectInfo = document.getElementById('projectInfo');
    const compiledReport = document.getElementById('compiledReport');
    const milestoneUpdates = document.getElementById('milestoneUpdates');
    
    // Update modal title
    modalTitle.textContent = `Compiled Report - ${projectData.project.name}`;
    
    // Update project information
    projectInfo.innerHTML = `
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <h4 class="text-lg font-semibold text-gray-800 mb-4">Project Information</h4>
          <div class="space-y-3">
            <div>
              <label class="text-sm font-medium text-gray-600">Project Code:</label>
              <p class="text-sm text-gray-800">${projectData.project.projectCode}</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">Implementing Office:</label>
              <p class="text-sm text-gray-800">${projectData.project.implementingOffice}</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">EIU Partner:</label>
              <p class="text-sm text-gray-800">${projectData.project.eiuPartner}</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">Category:</label>
              <p class="text-sm text-gray-800">${projectData.project.category}</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">Total Budget:</label>
              <p class="text-sm text-gray-800">₱${(parseFloat(projectData.project.totalBudget) || 0).toLocaleString()}</p>
            </div>
          </div>
        </div>
        <div>
          <h4 class="text-lg font-semibold text-gray-800 mb-4">Current Progress</h4>
          <div class="space-y-3">
            <div>
              <label class="text-sm font-medium text-gray-600">Overall Progress:</label>
              <p class="text-sm text-gray-800">${projectData.progress.overall.toFixed(2)}%</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">Timeline Progress:</label>
              <p class="text-sm text-gray-800">${projectData.progress.timeline.toFixed(2)}%</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">Budget Progress:</label>
              <p class="text-sm text-gray-800">${projectData.progress.budget.toFixed(2)}%</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">Physical Progress:</label>
              <p class="text-sm text-gray-800">${projectData.progress.physical.toFixed(2)}%</p>
            </div>
            <div>
              <label class="text-sm font-medium text-gray-600">Workflow Status:</label>
              <p class="text-sm text-gray-800">${projectData.project.workflowStatus}</p>
            </div>
          </div>
        </div>
      </div>
    `;

    // Update compiled report section
    if (projectData.compiledReport.exists) {
      const report = projectData.compiledReport;
      compiledReport.innerHTML = `
        <div class="space-y-4">
          <div class="bg-white p-4 rounded border">
            <h5 class="font-medium text-gray-800 mb-2">Compiled Report Summary</h5>
            <div class="space-y-3 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-600">Report Title:</span>
                <span class="font-medium">${report.title || 'Milestone Update Report'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Submitted By:</span>
                <span class="font-medium">${report.submittedBy} (${report.submittedByRole})</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Submitted At:</span>
                <span class="font-medium">${report.submittedAt ? new Date(report.submittedAt).toLocaleString() : 'Not available'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">IU Reviewer:</span>
                <span class="font-medium">${report.iuReviewer || 'Not assigned'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">IU Review Date:</span>
                <span class="font-medium">${report.iuReviewDate ? new Date(report.iuReviewDate).toLocaleString() : 'Not available'}</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Claimed Progress:</span>
                <span class="font-medium">${(parseFloat(report.claimedProgress) || 0).toFixed(2)}%</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Adjusted Progress:</span>
                <span class="font-medium">${(parseFloat(report.adjustedProgress) || 0).toFixed(2)}%</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Final Progress:</span>
                <span class="font-medium">${(parseFloat(report.finalProgress) || 0).toFixed(2)}%</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-600">Budget Used:</span>
                <span class="font-medium">₱${(parseFloat(report.budgetUsed) || 0).toLocaleString()}</span>
              </div>
            </div>
          </div>
          
          ${report.description ? `
            <div class="bg-white p-4 rounded border">
              <h5 class="font-medium text-gray-800 mb-2">Report Description</h5>
              <p class="text-sm text-gray-600">${report.description}</p>
            </div>
          ` : ''}
          
          ${report.remarks ? `
            <div class="bg-white p-4 rounded border">
              <h5 class="font-medium text-gray-800 mb-2">Remarks</h5>
              <p class="text-sm text-gray-600">${report.remarks}</p>
            </div>
          ` : ''}
          
          ${report.iuReviewRemarks ? `
            <div class="bg-white p-4 rounded border">
              <h5 class="font-medium text-gray-800 mb-2">IU Review Remarks</h5>
              <p class="text-sm text-gray-600">${report.iuReviewRemarks}</p>
            </div>
          ` : ''}
        </div>
      `;
    } else {
      compiledReport.innerHTML = `
        <div class="bg-yellow-50 p-4 rounded border">
          <h5 class="font-medium text-yellow-800 mb-2">No Compiled Report Available</h5>
          <p class="text-sm text-yellow-700">
            This project has not been compiled by the Implementing Office yet. 
            The report will appear here once the Implementing Office Officer compiles and submits the milestone updates.
          </p>
        </div>
      `;
    }

    // Update milestone updates section
    if (projectData.milestones && projectData.milestones.milestones && projectData.milestones.milestones.length > 0) {
      const milestones = projectData.milestones.milestones;
      const totalWeight = projectData.milestones.totalWeight;
      const appliedWeight = projectData.milestones.appliedWeight;

      milestoneUpdates.innerHTML = `
        <div class="bg-white p-4 rounded border">
          <div class="flex items-center justify-between mb-4">
            <h5 class="font-medium text-gray-800">Milestone Updates & Weight Distribution</h5>
            <div class="text-sm text-gray-600">
              Applied: ${appliedWeight.toFixed(1)}% / Total: ${totalWeight.toFixed(1)}%
            </div>
          </div>
          <div class="space-y-3">
            ${milestones.map((milestone, index) => {
              const statusColor = milestone.status === 'completed' ? 'green' : 
                                 milestone.status === 'in_progress' ? 'yellow' : 'gray';
              const statusText = milestone.status === 'completed' ? 'Completed' :
                                milestone.status === 'in_progress' ? 'In Progress' : 'Pending';
              const appliedText = milestone.status === 'completed' ? 
                `${milestone.weight}% applied` : 
                milestone.status === 'in_progress' ? 
                `${milestone.progress}% completed` : '0% applied';
              
              return `
                <div class="flex items-center justify-between p-3 bg-gray-50 rounded">
                  <div class="flex-1">
                    <h6 class="font-medium text-gray-800">${milestone.title || `Milestone ${index + 1}`}</h6>
                    <p class="text-sm text-gray-600">Weight: ${milestone.weight}%</p>
                    ${milestone.description ? `<p class="text-xs text-gray-500 mt-1">${milestone.description}</p>` : ''}
                    ${milestone.dueDate ? `<p class="text-xs text-gray-500">Due: ${new Date(milestone.dueDate).toLocaleDateString()}</p>` : ''}
                    ${milestone.completedDate ? `<p class="text-xs text-green-600">Completed: ${new Date(milestone.completedDate).toLocaleDateString()}</p>` : ''}
                    ${milestone.remarks ? `<p class="text-xs text-blue-600 mt-1">Remarks: ${milestone.remarks}</p>` : ''}
                    ${milestone.budgetBreakdown ? `<p class="text-xs text-purple-600 mt-1">Budget: ₱${(parseFloat(milestone.budgetAllocation) || 0).toLocaleString()} - ${milestone.budgetBreakdown}</p>` : ''}
                    ${milestone.uploadedFiles && milestone.uploadedFiles.length > 0 ? `<p class="text-xs text-orange-600 mt-1">Files: ${milestone.uploadedFiles.length} uploaded</p>` : ''}
                  </div>
                  <div class="text-right ml-4">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-${statusColor}-100 text-${statusColor}-800">
                      ${statusText}
                    </span>
                    <p class="text-xs text-gray-500 mt-1">${appliedText}</p>
                  </div>
                </div>
              `;
            }).join('')}
          </div>
        </div>
      `;
    } else {
      milestoneUpdates.innerHTML = `
        <div class="bg-gray-50 p-4 rounded border">
          <h5 class="font-medium text-gray-800 mb-2">No Milestones Available</h5>
          <p class="text-sm text-gray-600">
            This project does not have any milestones defined yet. 
            Milestones will appear here once they are created for the project.
          </p>
        </div>
      `;
    }
  }

  function approveFullWeight() {
    if (!currentProjectId) {
      alert('No project selected for approval.');
      return;
    }

    if (!confirm('Are you sure you want to approve this compiled report with full weight completion?')) {
      return;
    }

    // Call the approval endpoint with full weight
    approveCompiledReport(currentProjectId, true, null);
  }

  function showPartialProgressModal() {
    document.getElementById('partialProgressModal').classList.remove('hidden');
  }

  function closePartialProgressModal() {
    document.getElementById('partialProgressModal').classList.add('hidden');
    document.getElementById('timelineProgress').value = '';
    document.getElementById('budgetProgress').value = '';
    document.getElementById('physicalProgress').value = '';
  }

  function confirmPartialProgress() {
    const timelineProgress = parseFloat(document.getElementById('timelineProgress').value) || 0;
    const budgetProgress = parseFloat(document.getElementById('budgetProgress').value) || 0;
    const physicalProgress = parseFloat(document.getElementById('physicalProgress').value) || 0;

    if (timelineProgress < 0 || timelineProgress > 100 || 
        budgetProgress < 0 || budgetProgress > 100 || 
        physicalProgress < 0 || physicalProgress > 100) {
      alert('Please enter valid percentages between 0 and 100.');
      return;
    }

    closePartialProgressModal();
    approveCompiledReport(currentProjectId, false, { timeline: timelineProgress, budget: budgetProgress, physical: physicalProgress });
  }

  async function approveCompiledReport(projectId, fullWeight = true, partialProgress = null) {
    try {
      const token = localStorage.getItem('token');
      
      const requestBody = {
        validated: true,
        comments: fullWeight ? 'Approved with full weight completion' : 'Approved with partial progress',
        progressUpdate: {
          fullWeight: fullWeight,
          ...(partialProgress && {
            timelineProgress: partialProgress.timeline || 0,
            budgetProgress: partialProgress.budget || 0,
            physicalProgress: partialProgress.physical || 0
          })
        }
      };

      const response = await fetch(`http://localhost:3000/api/projects/compiled-report/${projectId}/validate`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        alert('Compiled report approved successfully!');
        // Refresh the compilation data
        await loadCompilationData();
        // Close the modal
        document.getElementById('projectReportModal').classList.add('hidden');
      } else {
        throw new Error(data.error || 'Failed to approve compiled report');
      }
    } catch (error) {
      console.error('Error approving compiled report:', error);
      alert('Error approving compiled report. Please try again.');
    }
  }

  function rejectReport() {
    document.getElementById('rejectionModal').classList.remove('hidden');
  }

  function closeRejectionModal() {
    document.getElementById('rejectionModal').classList.add('hidden');
    document.getElementById('rejectionComments').value = '';
  }

  async function confirmRejection() {
    const comments = document.getElementById('rejectionComments').value.trim();
    
    if (!comments) {
      alert('Please provide rejection comments.');
      return;
    }

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3000/api/projects/compiled-report/${currentProjectId}/validate`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          validated: false,
          comments: comments,
          issues: ['Compiled report rejected by Secretariat']
        })
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        alert('Compiled report rejected successfully.');
        closeRejectionModal();
        closeProjectModal();
        loadCompilationData(); // Refresh the compilation data
      } else {
        throw new Error(data.error || 'Failed to reject compiled report');
      }
    } catch (error) {
      console.error('Error rejecting compiled report:', error);
      alert('Error rejecting compiled report. Please try again.');
    }
  }

  function closeProjectModal() {
    document.getElementById('projectReportModal').classList.add('hidden');
    currentProjectId = null;
    currentProjectData = null;
    currentMilestoneData = null;
  }

  function generateProjectReport(projectId) {
    if (!projectId) {
      alert('No project ID available for report generation.');
      return;
    }
    
    window.open(`http://localhost:3000/api/projects/${projectId}/generate-report`, '_blank');
  }

  function refreshCompilation() {
    console.log('Refreshing compilation data...');
    loadCompilationData();
  }

  function exportCompilation() {
    console.log('Exporting compilation data...');
    window.open('http://localhost:3000/api/projects/compilation/export', '_blank');
  }

  // Timeline Modal Functions
  function openTimelineModal() {
    if (!currentProjectId) {
      alert('No project selected for timeline view.');
      return;
    }
    document.getElementById('timelineModal').classList.remove('hidden');
    loadTimelineData();
  }

  function closeTimelineModal() {
    document.getElementById('timelineModal').classList.add('hidden');
  }

  async function loadTimelineData() {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3000/api/projects/${currentProjectId}/timeline`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        renderTimelineChart(data.timeline);
        renderTimelineMilestones(data.milestones);
        renderTimelineProgress(data.progress);
      } else {
        throw new Error(data.error || 'Failed to load timeline data');
      }
    } catch (error) {
      console.error('Error loading timeline data:', error);
      alert('Error loading timeline data. Please try again.');
    }
  }

  function renderTimelineChart(timelineData) {
    const canvas = document.getElementById('timelineChart');
    const ctx = canvas.getContext('2d');
    
    // Polyfill for roundRect if not supported
    if (!ctx.roundRect) {
      ctx.roundRect = function(x, y, width, height, radius) {
        this.beginPath();
        this.moveTo(x + radius, y);
        this.lineTo(x + width - radius, y);
        this.quadraticCurveTo(x + width, y, x + width, y + radius);
        this.lineTo(x + width, y + height - radius);
        this.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
        this.lineTo(x + radius, y + height);
        this.quadraticCurveTo(x, y + height, x, y + height - radius);
        this.lineTo(x, y + radius);
        this.quadraticCurveTo(x, y, x + radius, y);
        this.closePath();
      };
    }
    
    // Clear previous chart
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    // Get milestones data
    const milestones = timelineData.milestones || [];
    if (milestones.length === 0) {
      // Draw no data message with modern styling
      ctx.fillStyle = '#6B7280';
      ctx.font = 'bold 18px Inter, Arial, sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText('No milestones available', canvas.width / 2, canvas.height / 2 - 10);
      ctx.font = '14px Inter, Arial, sans-serif';
      ctx.fillStyle = '#9CA3AF';
      ctx.fillText('Add milestones to see timeline visualization', canvas.width / 2, canvas.height / 2 + 20);
      return;
    }
    
    const width = canvas.width;
    const height = canvas.height;
    const padding = 100;
    const chartWidth = width - 2 * padding;
    const chartHeight = height - 2 * padding;
    
    // Create gradient background
    const gradient = ctx.createLinearGradient(0, 0, width, height);
    gradient.addColorStop(0, '#F8FAFC');
    gradient.addColorStop(1, '#F1F5F9');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, width, height);
    
    // Draw modern grid with subtle lines
    ctx.strokeStyle = '#E2E8F0';
    ctx.lineWidth = 0.5;
    ctx.setLineDash([5, 5]);
    for (let i = 0; i <= 10; i++) {
      const x = padding + (i / 10) * chartWidth;
      ctx.beginPath();
      ctx.moveTo(x, padding);
      ctx.lineTo(x, height - padding);
      ctx.stroke();
    }
    ctx.setLineDash([]);
    
    // Draw main timeline path with gradient
    const timelineGradient = ctx.createLinearGradient(padding, height / 2, width - padding, height / 2);
    timelineGradient.addColorStop(0, '#3B82F6');
    timelineGradient.addColorStop(0.5, '#8B5CF6');
    timelineGradient.addColorStop(1, '#06B6D4');
    
    ctx.strokeStyle = timelineGradient;
    ctx.lineWidth = 6;
    ctx.lineCap = 'round';
    ctx.beginPath();
    ctx.moveTo(padding, height / 2);
    ctx.lineTo(width - padding, height / 2);
    ctx.stroke();
    
    // Add glow effect to timeline
    ctx.shadowColor = '#3B82F6';
    ctx.shadowBlur = 15;
    ctx.strokeStyle = timelineGradient;
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(padding, height / 2);
    ctx.lineTo(width - padding, height / 2);
    ctx.stroke();
    ctx.shadowBlur = 0;
    
    // Draw milestone points with modern styling
    milestones.forEach((milestone, index) => {
      const x = padding + (index / (milestones.length - 1)) * chartWidth;
      const y = height / 2;
      
      // Determine colors based on status
      const statusColors = {
        'completed': {
          fill: '#10B981',
          stroke: '#059669',
          glow: '#10B981',
          shadow: '#047857'
        },
        'in_progress': {
          fill: '#F59E0B',
          stroke: '#D97706',
          glow: '#F59E0B',
          shadow: '#B45309'
        },
        'pending': {
          fill: '#6B7280',
          stroke: '#4B5563',
          glow: '#6B7280',
          shadow: '#374151'
        },
        'not_started': {
          fill: '#9CA3AF',
          stroke: '#6B7280',
          glow: '#9CA3AF',
          shadow: '#4B5563'
        }
      };
      
      const colors = statusColors[milestone.status] || statusColors.pending;
      
      // Draw outer glow
      ctx.shadowColor = colors.glow;
      ctx.shadowBlur = 20;
      ctx.fillStyle = colors.fill;
      ctx.beginPath();
      ctx.arc(x, y, 18, 0, 2 * Math.PI);
      ctx.fill();
      ctx.shadowBlur = 0;
      
      // Draw main circle
      ctx.fillStyle = colors.fill;
      ctx.strokeStyle = colors.stroke;
      ctx.lineWidth = 3;
      ctx.beginPath();
      ctx.arc(x, y, 15, 0, 2 * Math.PI);
      ctx.fill();
      ctx.stroke();
      
      // Draw inner highlight
      ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
      ctx.beginPath();
      ctx.arc(x - 3, y - 3, 6, 0, 2 * Math.PI);
      ctx.fill();
      
      // Draw milestone number with modern font
      ctx.fillStyle = '#FFFFFF';
      ctx.font = 'bold 14px Inter, Arial, sans-serif';
      ctx.textAlign = 'center';
      ctx.fillText(index + 1, x, y + 5);
      
      // Draw milestone title with modern styling
      ctx.fillStyle = '#1F2937';
      ctx.font = 'bold 13px Inter, Arial, sans-serif';
      ctx.textAlign = 'center';
      const title = milestone.title.length > 25 ? milestone.title.substring(0, 25) + '...' : milestone.title;
      ctx.fillText(title, x, y + 45);
      
      // Draw progress percentage with modern badge style
      const progressPercent = milestone.progress || 0;
      ctx.fillStyle = progressPercent > 0 ? colors.fill : '#9CA3AF';
      ctx.font = 'bold 12px Inter, Arial, sans-serif';
      const progressText = `${progressPercent}%`;
      ctx.fillText(progressText, x, y - 35);
      
      // Draw weight percentage with subtle styling
      ctx.fillStyle = '#6B7280';
      ctx.font = '11px Inter, Arial, sans-serif';
      const weightText = `${milestone.weight}% weight`;
      ctx.fillText(weightText, x, y - 50);
      
      // Draw status indicator with modern badge
      const statusText = milestone.status.replace('_', ' ').toUpperCase();
      ctx.fillStyle = colors.fill;
      ctx.font = 'bold 10px Inter, Arial, sans-serif';
      ctx.fillText(statusText, x, y + 65);
      
      // Draw connection lines to next milestone (if not last)
      if (index < milestones.length - 1) {
        const nextX = padding + ((index + 1) / (milestones.length - 1)) * chartWidth;
        const progress = progressPercent / 100;
        
        if (progress > 0) {
          // Draw progress line
          ctx.strokeStyle = colors.fill;
          ctx.lineWidth = 4;
          ctx.lineCap = 'round';
          ctx.beginPath();
          ctx.moveTo(x + 20, y);
          ctx.lineTo(x + (nextX - x) * progress, y);
          ctx.stroke();
          
          // Draw remaining line (dashed)
          ctx.strokeStyle = '#E5E7EB';
          ctx.lineWidth = 2;
          ctx.setLineDash([8, 4]);
          ctx.beginPath();
          ctx.moveTo(x + (nextX - x) * progress, y);
          ctx.lineTo(nextX - 20, y);
          ctx.stroke();
          ctx.setLineDash([]);
        }
      }
    });
    
    // Draw modern legend
    const legendY = height - 40;
    const legendItems = [
      { color: '#10B981', text: 'Completed', icon: '✓' },
      { color: '#F59E0B', text: 'In Progress', icon: '⟳' },
      { color: '#6B7280', text: 'Pending', icon: '○' }
    ];
    
    legendItems.forEach((item, index) => {
      const x = padding + index * 150;
      
      // Draw legend background
      ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
      ctx.strokeStyle = '#E5E7EB';
      ctx.lineWidth = 1;
      ctx.beginPath();
      ctx.roundRect(x - 10, legendY - 15, 120, 30, 8);
      ctx.fill();
      ctx.stroke();
      
      // Draw legend circle
      ctx.fillStyle = item.color;
      ctx.shadowColor = item.color;
      ctx.shadowBlur = 10;
      ctx.beginPath();
      ctx.arc(x, legendY, 8, 0, 2 * Math.PI);
      ctx.fill();
      ctx.shadowBlur = 0;
      
      // Draw legend text
      ctx.fillStyle = '#374151';
      ctx.font = 'bold 12px Inter, Arial, sans-serif';
      ctx.textAlign = 'left';
      ctx.fillText(`${item.icon} ${item.text}`, x + 15, legendY + 4);
    });
    
    // Add subtle watermark
    ctx.fillStyle = 'rgba(107, 114, 128, 0.1)';
    ctx.font = 'bold 24px Inter, Arial, sans-serif';
    ctx.textAlign = 'center';
    ctx.fillText('TIMELINE', width / 2, height - 10);
  }

  function renderTimelineMilestones(milestones) {
    const container = document.getElementById('timelineMilestones');
    
    if (milestones && milestones.length > 0) {
      container.innerHTML = milestones.map((milestone, index) => {
        const statusColors = {
          'completed': 'bg-green-100 text-green-800 border-green-200',
          'in_progress': 'bg-yellow-100 text-yellow-800 border-yellow-200',
          'pending': 'bg-gray-100 text-gray-800 border-gray-200',
          'not_started': 'bg-gray-100 text-gray-800 border-gray-200'
        };
        
        const statusIcons = {
          'completed': '✓',
          'in_progress': '⟳',
          'pending': '⏳',
          'not_started': '○'
        };
        
        return `
          <div class="milestone-card flex items-start gap-4 p-5 bg-white rounded-xl border border-gray-200 hover:border-blue-200 transition-all duration-300">
            <div class="flex-shrink-0 w-10 h-10 rounded-full flex items-center justify-center text-white font-bold text-sm shadow-lg ${
              milestone.status === 'completed' ? 'bg-gradient-to-br from-green-500 to-green-600' :
              milestone.status === 'in_progress' ? 'bg-gradient-to-br from-yellow-500 to-orange-500' :
              'bg-gradient-to-br from-gray-400 to-gray-500'
            }">
              ${index + 1}
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-start justify-between mb-3">
                <h5 class="font-bold text-gray-800 text-sm leading-tight">${milestone.title}</h5>
                <span class="text-xs px-3 py-1.5 rounded-full border-2 font-semibold ${
                  milestone.status === 'completed' ? 'bg-green-50 text-green-700 border-green-200' :
                  milestone.status === 'in_progress' ? 'bg-yellow-50 text-yellow-700 border-yellow-200' :
                  'bg-gray-50 text-gray-700 border-gray-200'
                }">
                  ${statusIcons[milestone.status] || statusIcons.pending} ${milestone.status.replace('_', ' ').toUpperCase()}
                </span>
              </div>
              <div class="text-xs text-gray-600 mb-3 leading-relaxed">${milestone.description || 'No description available'}</div>
              <div class="grid grid-cols-2 gap-4 text-xs mb-3">
                <div class="bg-gray-50 rounded-lg p-2">
                  <span class="text-gray-500 block text-xs font-medium">Due Date</span>
                  <span class="font-semibold text-gray-700">${milestone.dueDate || 'Not set'}</span>
                </div>
                <div class="bg-gray-50 rounded-lg p-2">
                  <span class="text-gray-500 block text-xs font-medium">Weight</span>
                  <span class="font-semibold text-gray-700">${milestone.weight}%</span>
                </div>
                <div class="bg-gray-50 rounded-lg p-2">
                  <span class="text-gray-500 block text-xs font-medium">Progress</span>
                  <span class="font-semibold text-gray-700">${milestone.progress || 0}%</span>
                </div>
                <div class="bg-gray-50 rounded-lg p-2">
                  <span class="text-gray-500 block text-xs font-medium">Budget</span>
                  <span class="font-semibold text-gray-700">₱${parseFloat(milestone.plannedBudget || 0).toLocaleString()}</span>
                </div>
              </div>
              ${milestone.progress > 0 ? `
                <div class="mt-3">
                  <div class="flex justify-between text-xs text-gray-500 mb-2">
                    <span class="font-medium">Progress</span>
                    <span class="font-bold">${milestone.progress}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-2.5 overflow-hidden">
                    <div class="h-2.5 rounded-full transition-all duration-500 ease-out ${
                      milestone.status === 'completed' ? 'bg-gradient-to-r from-green-500 to-green-600' :
                      milestone.status === 'in_progress' ? 'bg-gradient-to-r from-yellow-500 to-orange-500' :
                      'bg-gradient-to-r from-gray-400 to-gray-500'
                    }" style="width: ${milestone.progress}%"></div>
                  </div>
                </div>
              ` : ''}
            </div>
          </div>
        `;
      }).join('');
    } else {
      container.innerHTML = `
        <div class="text-center py-8">
          <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
          </svg>
          <p class="text-sm text-gray-600">No milestones available</p>
        </div>
      `;
    }
  }

  function renderTimelineProgress(progress) {
    const container = document.getElementById('timelineProgress');
    
    container.innerHTML = `
      <div class="space-y-6">
        <!-- Overall Progress -->
        <div class="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-4">
          <div class="flex items-center justify-between mb-2">
            <span class="text-sm font-medium text-blue-800">Overall Progress</span>
            <span class="text-lg font-bold text-blue-900">${progress.overall.toFixed(1)}%</span>
          </div>
          <div class="w-full bg-blue-200 rounded-full h-3">
            <div class="bg-blue-600 h-3 rounded-full transition-all duration-300" style="width: ${progress.overall}%"></div>
          </div>
        </div>
        
        <!-- Timeline Progress -->
        <div class="bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-4">
          <div class="flex items-center justify-between mb-2">
            <span class="text-sm font-medium text-green-800">Timeline Progress</span>
            <span class="text-lg font-bold text-green-900">${progress.timeline.toFixed(1)}%</span>
          </div>
          <div class="w-full bg-green-200 rounded-full h-3">
            <div class="bg-green-600 h-3 rounded-full transition-all duration-300" style="width: ${progress.timeline}%"></div>
          </div>
        </div>
        
        <!-- Budget Progress -->
        <div class="bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-4">
          <div class="flex items-center justify-between mb-2">
            <span class="text-sm font-medium text-purple-800">Budget Progress</span>
            <span class="text-lg font-bold text-purple-900">${progress.budget.toFixed(1)}%</span>
          </div>
          <div class="w-full bg-purple-200 rounded-full h-3">
            <div class="bg-purple-600 h-3 rounded-full transition-all duration-300" style="width: ${progress.budget}%"></div>
          </div>
        </div>
        
        <!-- Physical Progress -->
        <div class="bg-gradient-to-r from-orange-50 to-orange-100 rounded-lg p-4">
          <div class="flex items-center justify-between mb-2">
            <span class="text-sm font-medium text-orange-800">Physical Progress</span>
            <span class="text-lg font-bold text-orange-900">${progress.physical.toFixed(1)}%</span>
          </div>
          <div class="w-full bg-orange-200 rounded-full h-3">
            <div class="bg-orange-600 h-3 rounded-full transition-all duration-300" style="width: ${progress.physical}%"></div>
          </div>
        </div>
        
        <!-- Progress Summary Stats -->
        <div class="bg-gray-50 rounded-lg p-4">
          <h5 class="font-medium text-gray-800 mb-3">Progress Summary</h5>
          <div class="grid grid-cols-2 gap-4 text-sm">
            <div class="text-center">
              <div class="text-2xl font-bold text-blue-600">${progress.overall.toFixed(1)}%</div>
              <div class="text-xs text-gray-600">Overall</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-green-600">${progress.timeline.toFixed(1)}%</div>
              <div class="text-xs text-gray-600">Timeline</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-purple-600">${progress.budget.toFixed(1)}%</div>
              <div class="text-xs text-gray-600">Budget</div>
            </div>
            <div class="text-center">
              <div class="text-2xl font-bold text-orange-600">${progress.physical.toFixed(1)}%</div>
              <div class="text-xs text-gray-600">Physical</div>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  // History Modal Functions
  function openHistoryModal() {
    if (!currentProjectId) {
      alert('No project selected for history view.');
      return;
    }
    document.getElementById('historyModal').classList.remove('hidden');
    loadHistoryData();
  }

  function closeHistoryModal() {
    document.getElementById('historyModal').classList.add('hidden');
  }

  async function loadHistoryData() {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3000/api/projects/${currentProjectId}/history`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      
      if (data.success) {
        renderHistoryTimeline(data.updates);
        renderActivityLog(data.activities);
      } else {
        throw new Error(data.error || 'Failed to load history data');
      }
    } catch (error) {
      console.error('Error loading history data:', error);
      alert('Error loading history data. Please try again.');
    }
  }

  function renderHistoryTimeline(updates) {
    const container = document.getElementById('historyTimeline');
    
    if (updates && updates.length > 0) {
      container.innerHTML = updates.map(update => `
        <div class="flex items-start gap-4 p-4 bg-white rounded-lg border">
          <div class="flex-shrink-0 w-3 h-3 bg-blue-500 rounded-full mt-2"></div>
          <div class="flex-1">
            <div class="flex items-center justify-between mb-2">
              <h4 class="font-medium text-gray-800">${update.title}</h4>
              <span class="text-xs text-gray-500">${new Date(update.createdAt).toLocaleDateString()}</span>
            </div>
            <p class="text-sm text-gray-600 mb-2">${update.description}</p>
            <div class="flex items-center gap-4 text-xs text-gray-500">
              <span>Type: ${update.updateType}</span>
              <span>Status: ${update.status}</span>
              <span>Progress: ${update.claimedProgress}%</span>
            </div>
          </div>
        </div>
      `).join('');
    } else {
      container.innerHTML = '<p class="text-sm text-gray-600">No updates available</p>';
    }
  }

  function renderActivityLog(activities) {
    const container = document.getElementById('activityLog');
    
    if (activities && activities.length > 0) {
      container.innerHTML = activities.map(activity => `
        <div class="flex items-start gap-3 p-2">
          <div class="w-2 h-2 bg-gray-400 rounded-full mt-2"></div>
          <div class="flex-1">
            <div class="text-sm text-gray-800">${activity.action}</div>
            <div class="text-xs text-gray-500">${new Date(activity.createdAt).toLocaleString()}</div>
            ${activity.details ? `<div class="text-xs text-gray-600 mt-1">${activity.details}</div>` : ''}
          </div>
        </div>
      `).join('');
    } else {
      container.innerHTML = '<p class="text-sm text-gray-600">No activity log available</p>';
    }
  }

  // Export Functions
  async function exportProjectReport() {
    if (!currentProjectId) {
      alert('No project selected for export.');
      return;
    }

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3000/api/projects/${currentProjectId}/export-report`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `project-report-${currentProjectId}.pdf`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Error exporting project report:', error);
      alert('Error exporting project report. Please try again.');
    }
  }

  async function exportHistory() {
    if (!currentProjectId) {
      alert('No project selected for history export.');
      return;
    }

    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:3000/api/projects/${currentProjectId}/export-history`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `project-history-${currentProjectId}.xlsx`;
      document.body.appendChild(a);
      a.click();
      window.URL.revokeObjectURL(url);
      document.body.removeChild(a);
    } catch (error) {
      console.error('Error exporting history:', error);
      alert('Error exporting history. Please try again.');
    }
  }

  // Make functions globally available
  window.viewProjectReport = viewProjectReport;
  window.generateProjectReport = generateProjectReport;
  window.refreshCompilation = refreshCompilation;
  window.exportCompilation = exportCompilation;
  window.closeProjectModal = closeProjectModal;
  window.approveFullWeight = approveFullWeight;
  window.showPartialProgressModal = showPartialProgressModal;
  window.closePartialProgressModal = closePartialProgressModal;
  window.confirmPartialProgress = confirmPartialProgress;
  window.rejectReport = rejectReport;
  window.closeRejectionModal = closeRejectionModal;
  window.confirmRejection = confirmRejection;
  window.openTimelineModal = openTimelineModal;
  window.closeTimelineModal = closeTimelineModal;
  window.openHistoryModal = openHistoryModal;
  window.closeHistoryModal = closeHistoryModal;
  window.exportProjectReport = exportProjectReport;
  window.exportHistory = exportHistory;
</script> 