---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import IUImplementingOfficeLayout from '../../../../components/IUImplementingOfficeLayout.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let projects = [];
let selectedProject = null;
let projectSummary = null;
let loading = true;
let error = '';

// Try to fetch summary module data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch projects for this Implementing Office
    const timestamp = new Date().getTime();
    const projectsRes = await fetch(`${API_URL}/projects?_t=${timestamp}`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        projects = data.projects;
      }
    }
  }
} catch (err) {
  console.error('Error fetching summary module data:', err);
  error = 'Failed to fetch summary module data.';
}

loading = false;
---

<Layout title="Project Summary | Implementing Office Dashboard">
  <IUImplementingOfficeLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header Section -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-8">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">Project Summary</h1>
          <p class="text-gray-600">Comprehensive overview of project progress and completion rates</p>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="exportSummary()" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
            Export Summary
          </button>
        </div>
      </div>

      <!-- Project Selection -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Select Project for Summary</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {projects.map(project => {
            // Use calculated progress from ProgressCalculationService
            const overallProgress = parseFloat(project.progress?.overallProgress || project.overallProgress || 0);
            const timelineProgress = parseFloat(project.progress?.timelineProgress || project.timelineProgress || 0);
            const budgetProgress = parseFloat(project.progress?.budgetProgress || project.budgetProgress || 0);
            const physicalProgress = parseFloat(project.progress?.physicalProgress || project.physicalProgress || 0);
            const workflowStatus = project.workflowStatus || 'draft';
            
            return (
              <div class="border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow cursor-pointer project-card" data-project-id={project.id}>
                <div class="flex items-start justify-between mb-3">
                  <div class="flex-1">
                    <h4 class="font-semibold text-gray-800 mb-1">{project.name}</h4>
                    <p class="text-sm text-gray-600">{project.projectCode}</p>
                  </div>
                  <div class="flex flex-col items-end gap-1">
                    <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                      workflowStatus === 'ongoing' ? 'bg-green-100 text-green-700' :
                      workflowStatus === 'completed' ? 'bg-blue-100 text-blue-700' :
                      workflowStatus === 'submitted' ? 'bg-yellow-100 text-yellow-700' :
                      workflowStatus === 'draft' ? 'bg-gray-100 text-gray-700' :
                      workflowStatus === 'secretariat_approved' ? 'bg-blue-100 text-blue-700' :
                      'bg-gray-100 text-gray-700'
                    }`}>
                      {workflowStatus.replace('_', ' ').toUpperCase()}
                    </span>
                    {project.submittedToSecretariat && (
                      <span class="px-2 py-1 text-xs font-medium rounded-full bg-orange-100 text-orange-700">
                        PENDING SECRETARIAT
                      </span>
                    )}
                  </div>
                </div>
                
                <div class="mb-3">
                  <div class="flex items-center justify-between mb-1">
                    <span class="text-sm text-gray-600">Overall Progress</span>
                    <span class="text-sm font-medium text-gray-800">{overallProgress.toFixed(2)}%</span>
                  </div>
                  <div class="w-full bg-gray-200 rounded-full h-2">
                    <div class={`h-2 rounded-full ${
                      overallProgress >= 100 ? 'bg-green-500' : 'bg-[#92751F]'
                    }`} style={`width: ${overallProgress}%`}></div>
                  </div>
                </div>
                
                <div class="grid grid-cols-3 gap-2 text-xs">
                  <div class="text-center">
                    <div class="w-full bg-gray-200 rounded-full h-1 mb-1">
                      <div class="bg-blue-500 h-1 rounded-full" style={`width: ${timelineProgress}%`}></div>
                    </div>
                    <span class="text-gray-600">Timeline</span>
                  </div>
                  <div class="text-center">
                    <div class="w-full bg-gray-200 rounded-full h-1 mb-1">
                      <div class="bg-green-500 h-1 rounded-full" style={`width: ${budgetProgress}%`}></div>
                    </div>
                    <span class="text-gray-600">Budget</span>
                  </div>
                  <div class="text-center">
                    <div class="w-full bg-gray-200 rounded-full h-1 mb-1">
                      <div class="bg-purple-500 h-1 rounded-full" style={`width: ${physicalProgress}%`}></div>
                    </div>
                    <span class="text-gray-600">Physical</span>
                  </div>
                </div>
                
                {project.milestones && project.milestones.length > 0 && (
                  <div class="mt-3 pt-3 border-t border-gray-100">
                    <p class="text-xs text-gray-500 mb-2">Milestones: {project.milestones.length}</p>
                    <div class="space-y-1">
                      {project.milestones.slice(0, 2).map(milestone => (
                        <div class="flex items-center justify-between text-xs">
                          <span class="text-gray-600 truncate">{milestone.title}</span>
                          <span class={`px-1 py-0.5 rounded text-xs ${
                            milestone.status === 'completed' ? 'bg-green-100 text-green-700' :
                            milestone.status === 'in_progress' ? 'bg-blue-100 text-blue-700' :
                            'bg-gray-100 text-gray-700'
                          }`}>
                            {milestone.status}
                          </span>
                        </div>
                      ))}
                      {project.milestones.length > 2 && (
                        <p class="text-xs text-gray-500">+{project.milestones.length - 2} more</p>
                      )}
                    </div>
                  </div>
                )}
              </div>
            );
          })}
        </div>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#92751F]"></div>
          <span class="ml-3 text-gray-600">Loading project summary...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12">
          <p class="text-red-600 mb-4">{error}</p>
          <button onclick="loadSummaryModule()" class="px-4 py-2 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-all">
            Try Again
          </button>
        </div>
      ) : projects.length === 0 ? (
        <div class="text-center py-12">
          <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">No Projects Available</h3>
          <p class="text-gray-600 mb-6">You don't have any projects to summarize. Create a project first to view its summary.</p>
          <button onclick="window.location.href='/dashboard/iu-implementing-office/modules/project-management'" class="px-6 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors flex items-center gap-2 mx-auto">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Create New Project
          </button>
        </div>
      ) : (
        <!-- Project Summary Display -->
        <div id="projectSummaryDisplay" class="space-y-8">
          <!-- Overall Progress Summary -->
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <div class="flex items-center gap-3 mb-6">
              <div class="p-3 bg-[#92751F]/20 rounded-full">
                <svg class="w-6 h-6 text-[#92751F]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-lg font-semibold text-gray-800">Overall Progress Summary</h3>
                <p class="text-sm text-gray-600">Comprehensive overview of project completion rates</p>
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <div class="text-center p-4 bg-blue-50 rounded-lg">
                <div class="text-3xl font-bold text-blue-600" id="overallProgress">0%</div>
                <p class="text-sm text-gray-600 mt-1">Overall Progress</p>
              </div>
              
              <div class="text-center p-4 bg-green-50 rounded-lg">
                <div class="text-3xl font-bold text-green-600" id="timelineProgress">0%</div>
                <p class="text-sm text-gray-600 mt-1">Timeline Progress</p>
              </div>
              
              <div class="text-center p-4 bg-purple-50 rounded-lg">
                <div class="text-3xl font-bold text-purple-600" id="budgetProgress">0%</div>
                <p class="text-sm text-gray-600 mt-1">Budget Progress</p>
              </div>
              
              <div class="text-center p-4 bg-orange-50 rounded-lg">
                <div class="text-3xl font-bold text-orange-600" id="physicalProgress">0%</div>
                <p class="text-sm text-gray-600 mt-1">Physical Progress</p>
              </div>
            </div>
          </div>

          <!-- Project Details -->
          <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Project Information -->
            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">Project Information</h3>
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-600">Project Name</label>
                  <p class="text-sm font-semibold text-gray-800" id="projectName">-</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-600">Project Code</label>
                  <p class="text-sm font-semibold text-gray-800" id="projectCode">-</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-600">Implementing Office</label>
                  <p class="text-sm font-semibold text-gray-800" id="implementingOffice">-</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-600">Location</label>
                  <p class="text-sm font-semibold text-gray-800" id="projectLocation">-</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-600">Status</label>
                  <span class="inline-block px-2 py-1 text-xs font-medium rounded-full" id="projectStatus">-</span>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-600">Created Date</label>
                  <p class="text-sm font-semibold text-gray-800" id="createdDate">-</p>
                </div>
              </div>
            </div>

            <!-- Budget Information -->
            <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">Budget Information</h3>
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-600">Total Budget</label>
                  <p class="text-lg font-bold text-gray-800" id="totalBudget">₱0</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-600">Amount Spent</label>
                  <p class="text-lg font-bold text-green-600" id="amountSpent">₱0</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-600">Remaining Budget</label>
                  <p class="text-lg font-bold text-blue-600" id="remainingBudget">₱0</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-600">Budget Utilization</label>
                  <div class="w-full bg-gray-200 rounded-full h-3 mt-2">
                    <div class="bg-green-500 h-3 rounded-full" id="budgetUtilizationBar" style="width: 0%"></div>
                  </div>
                  <p class="text-sm text-gray-600 mt-1" id="budgetUtilizationText">0% utilized</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-600">Funding Source</label>
                  <p class="text-sm font-semibold text-gray-800" id="fundingSource">-</p>
                </div>
              </div>
            </div>
          </div>

          <!-- Division Progress Details -->
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <h3 class="text-lg font-semibold text-gray-800 mb-6">Division Progress Details</h3>
            
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <!-- Timeline Division -->
              <div class="border border-gray-200 rounded-lg p-4">
                <div class="flex items-center gap-3 mb-4">
                  <div class="p-2 bg-blue-100 rounded-full">
                    <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                  <h4 class="font-semibold text-gray-800">Timeline Division</h4>
                </div>
                
                <div class="space-y-3">
                  <div>
                    <div class="flex items-center justify-between mb-1">
                      <span class="text-sm text-gray-600">Progress</span>
                      <span class="text-sm font-medium text-gray-800" id="timelineProgressDetail">0%</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                      <div class="bg-blue-500 h-2 rounded-full" id="timelineProgressBar" style="width: 0%"></div>
                    </div>
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-600">Update Frequency</label>
                    <p class="text-sm text-gray-800" id="timelineFrequency">-</p>
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-600">Last Update</label>
                    <p class="text-sm text-gray-800" id="timelineLastUpdate">-</p>
                  </div>
                </div>
              </div>

              <!-- Budget Division -->
              <div class="border border-gray-200 rounded-lg p-4">
                <div class="flex items-center gap-3 mb-4">
                  <div class="p-2 bg-green-100 rounded-full">
                    <svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                    </svg>
                  </div>
                  <h4 class="font-semibold text-gray-800">Budget Division</h4>
                </div>
                
                <div class="space-y-3">
                  <div>
                    <div class="flex items-center justify-between mb-1">
                      <span class="text-sm text-gray-600">Progress</span>
                      <span class="text-sm font-medium text-gray-800" id="budgetProgressDetail">0%</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                      <div class="bg-green-500 h-2 rounded-full" id="budgetProgressBar" style="width: 0%"></div>
                    </div>
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-600">Update Frequency</label>
                    <p class="text-sm text-gray-800" id="budgetFrequency">-</p>
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-600">Last Update</label>
                    <p class="text-sm text-gray-800" id="budgetLastUpdate">-</p>
                  </div>
                </div>
              </div>

              <!-- Physical Division -->
              <div class="border border-gray-200 rounded-lg p-4">
                <div class="flex items-center gap-3 mb-4">
                  <div class="p-2 bg-purple-100 rounded-full">
                    <svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                  <h4 class="font-semibold text-gray-800">Physical Division</h4>
                </div>
                
                <div class="space-y-3">
                  <div>
                    <div class="flex items-center justify-between mb-1">
                      <span class="text-sm text-gray-600">Progress</span>
                      <span class="text-sm font-medium text-gray-800" id="physicalProgressDetail">0%</span>
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2">
                      <div class="bg-purple-500 h-2 rounded-full" id="physicalProgressBar" style="width: 0%"></div>
                    </div>
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-600">Update Frequency</label>
                    <p class="text-sm text-gray-800" id="physicalFrequency">-</p>
                  </div>
                  
                  <div>
                    <label class="block text-sm font-medium text-gray-600">Last Update</label>
                    <p class="text-sm text-gray-800" id="physicalLastUpdate">-</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <!-- Secretariat Approval Status -->
          <div class="bg-yellow-50 rounded-2xl border border-yellow-200 p-6">
            <div class="flex items-center gap-3 mb-4">
              <div class="p-3 bg-yellow-100 rounded-full">
                <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-lg font-semibold text-gray-800">Secretariat Approval Status</h3>
                <p class="text-sm text-gray-600">Overall completion rate is updated by Secretariat based on consolidated reports</p>
              </div>
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div class="text-center">
                <div class="text-2xl font-bold text-yellow-600" id="secretariatProgress">0%</div>
                <p class="text-sm text-gray-600">Secretariat Approved Progress</p>
              </div>
              
              <div class="text-center">
                <div class="text-2xl font-bold text-green-600" id="submittedReports">0</div>
                <p class="text-sm text-gray-600">Reports Submitted</p>
              </div>
              
              <div class="text-center">
                <div class="text-2xl font-bold text-blue-600" id="pendingApproval">0</div>
                <p class="text-sm text-gray-600">Pending Approval</p>
              </div>
            </div>
            
            <div class="mt-6 p-4 bg-white rounded-lg">
              <h4 class="font-semibold text-gray-800 mb-2">Latest Secretariat Update</h4>
              <p class="text-sm text-gray-600" id="latestSecretariatUpdate">No updates from Secretariat yet.</p>
            </div>
          </div>
        </div>
      )}
    </section>
  </IUImplementingOfficeLayout>
</Layout>

<script>
  let selectedProject = null;
  let projectSummary = null;

  // Project selection functionality
  document.addEventListener('DOMContentLoaded', function() {
    console.log('Summary Module page loaded');
    
    const projectCards = document.querySelectorAll('.project-card');
    console.log('Found project cards:', projectCards.length);
    
    projectCards.forEach(card => {
      const projectId = card.getAttribute('data-project-id');
      console.log('Project card found with ID:', projectId);
      
      card.addEventListener('click', function() {
        console.log('Project card clicked:', projectId);
        selectProject(projectId);
      });
    });

    // Auto-select the first project if available
    if (projectCards.length > 0) {
      console.log('Auto-selecting first project');
      const firstProjectId = projectCards[0].getAttribute('data-project-id');
      console.log('First project ID:', firstProjectId);
      
      // Add a small delay to ensure DOM is fully ready
      setTimeout(() => {
        selectProject(firstProjectId);
      }, 100);
    } else {
      console.log('No project cards found for auto-selection');
    }
  });

  // Select project and load details
  async function selectProject(projectId) {
    try {
      console.log('selectProject called with ID:', projectId);
      const token = document.cookie.split('; ').find(row => row.startsWith('token='))?.split('=')[1];
      const timestamp = new Date().getTime();
      const response = await fetch(`http://localhost:3000/api/projects/${projectId}?_t=${timestamp}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      console.log('Project API response status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('Project API response data:', data);
        
        if (data.success) {
          selectedProject = data.project;
          console.log('Selected project:', data.project);
          displayProjectSummary(data.project);
          
          // Update active state
          document.querySelectorAll('.project-card').forEach(card => {
            card.classList.remove('ring-2', 'ring-[#92751F]');
          });
          const activeCard = document.querySelector(`[data-project-id="${projectId}"]`);
          if (activeCard) {
            activeCard.classList.add('ring-2', 'ring-[#92751F]');
            console.log('Updated active card styling');
          }
        } else {
          console.error('Project API returned success: false');
        }
      } else {
        console.error('Project API request failed with status:', response.status);
      }
    } catch (error) {
      console.error('Error fetching project details:', error);
    }
  }

  // Display project summary
  function displayProjectSummary(project) {
    console.log('displayProjectSummary called with project:', project);
    console.log('Project object keys:', Object.keys(project));
    
    // Handle nested project structure from API response
    const actualProject = project.project || project;
    console.log('Actual project data:', actualProject);
    console.log('Project name:', actualProject.name);
    console.log('Project approvedBySecretariat:', actualProject.approvedBySecretariat);
    console.log('Project implementingOfficeName:', actualProject.implementingOfficeName);
    console.log('Project createdDate:', actualProject.createdDate);
    console.log('Project totalBudget:', actualProject.totalBudget);
    console.log('Project amountSpent:', actualProject.amountSpent);
    console.log('Project progress:', project.progress);
    console.log('Project progress keys:', project.progress ? Object.keys(project.progress) : 'No progress object');
    
    // Update overall progress summary - use calculated progress from ProgressCalculationService
    const overallProgress = parseFloat(project.progress?.overall || project.progress?.overallProgress || project.automatedProgress || 0);
    const timelineProgress = parseFloat(project.progress?.timeline || project.progress?.timelineProgress || project.timelineProgress || 0);
    const budgetProgress = parseFloat(project.progress?.budget || project.progress?.budgetProgress || project.budgetProgress || 0);
    const physicalProgress = parseFloat(project.progress?.physical || project.progress?.physicalProgress || project.physicalProgress || 0);
    
    document.getElementById('overallProgress').textContent = `${overallProgress.toFixed(2)}%`;
    document.getElementById('timelineProgress').textContent = `${timelineProgress}%`;
    document.getElementById('budgetProgress').textContent = `${budgetProgress}%`;
    document.getElementById('physicalProgress').textContent = `${physicalProgress}%`;

    // Update project information
    document.getElementById('projectName').textContent = actualProject.name || '-';
    document.getElementById('projectCode').textContent = actualProject.projectCode || '-';
    document.getElementById('implementingOffice').textContent = actualProject.implementingOfficeName || '-';
    document.getElementById('projectLocation').textContent = Array.isArray(actualProject.location) ? actualProject.location.join(', ') : actualProject.location || '-';
    
    // Update status with proper styling based on Secretariat approval
    const statusElement = document.getElementById('projectStatus');
    const isApprovedBySecretariat = actualProject.approvedBySecretariat === true;
    const statusText = isApprovedBySecretariat ? 'SECRETARIAT APPROVED' : 'DRAFT';
    statusElement.textContent = statusText;
    statusElement.className = `inline-block px-2 py-1 text-xs font-medium rounded-full ${
      isApprovedBySecretariat ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-700'
    }`;
    
    document.getElementById('createdDate').textContent = actualProject.createdDate || '-';

    // Update budget information
    const totalBudget = actualProject.totalBudget || 0;
    const amountSpent = actualProject.amountSpent || 0;
    const remainingBudget = totalBudget - amountSpent;
    const budgetUtilization = totalBudget > 0 ? (amountSpent / totalBudget) * 100 : 0;
    
    document.getElementById('totalBudget').textContent = `₱${totalBudget.toLocaleString()}`;
    document.getElementById('amountSpent').textContent = `₱${amountSpent.toLocaleString()}`;
    document.getElementById('remainingBudget').textContent = `₱${remainingBudget.toLocaleString()}`;
    document.getElementById('budgetUtilizationText').textContent = `${parseFloat(budgetUtilization).toFixed(2)}% utilized`;
    document.getElementById('budgetUtilizationBar').style.width = `${budgetUtilization}%`;
    document.getElementById('fundingSource').textContent = actualProject.fundingSource || '-';

    // Update division progress details - use calculated progress from ProgressCalculationService
    document.getElementById('timelineProgressDetail').textContent = `${timelineProgress}%`;
    document.getElementById('timelineProgressBar').style.width = `${timelineProgress}%`;
    document.getElementById('timelineFrequency').textContent = actualProject.timelineUpdateFrequency || '-';
    document.getElementById('timelineLastUpdate').textContent = actualProject.lastProgressUpdate || 'No updates';

    document.getElementById('budgetProgressDetail').textContent = `${budgetProgress}%`;
    document.getElementById('budgetProgressBar').style.width = `${budgetProgress}%`;
    document.getElementById('budgetFrequency').textContent = actualProject.budgetUpdateFrequency || '-';
    document.getElementById('budgetLastUpdate').textContent = actualProject.lastProgressUpdate || 'No updates';

    document.getElementById('physicalProgressDetail').textContent = `${physicalProgress}%`;
    document.getElementById('physicalProgressBar').style.width = `${physicalProgress}%`;
    document.getElementById('physicalFrequency').textContent = actualProject.physicalUpdateFrequency || '-';
    document.getElementById('physicalLastUpdate').textContent = actualProject.lastProgressUpdate || 'No updates';

    // Show the summary display
    const summaryDisplay = document.getElementById('projectSummaryDisplay');
    if (summaryDisplay) {
      summaryDisplay.style.display = 'block';
      console.log('Summary display shown');
    } else {
      console.error('projectSummaryDisplay element not found');
    }
  }

  // Export summary function
  function exportSummary() {
    if (!selectedProject) {
      alert('Please select a project first to export its summary.');
      return;
    }
    
    // Create export data - use calculated progress from ProgressCalculationService
    const exportData = {
      projectName: selectedProject.name,
      projectCode: selectedProject.projectCode,
      implementingOffice: selectedProject.implementingOfficeName,
      location: selectedProject.location,
      status: selectedProject.workflowStatus,
      createdDate: selectedProject.createdDate,
      totalBudget: selectedProject.totalBudget,
      amountSpent: selectedProject.amountSpent,
      remainingBudget: (selectedProject.totalBudget || 0) - (selectedProject.amountSpent || 0),
      budgetUtilization: selectedProject.totalBudget > 0 ? ((selectedProject.amountSpent || 0) / selectedProject.totalBudget) * 100 : 0,
      fundingSource: selectedProject.fundingSource,
      overallProgress: selectedProject.progress?.overallProgress || selectedProject.automatedProgress || 0,
      timelineProgress: selectedProject.progress?.timelineProgress || selectedProject.timelineProgress || 0,
      budgetProgress: selectedProject.progress?.budgetProgress || selectedProject.budgetProgress || 0,
      physicalProgress: selectedProject.progress?.physicalProgress || selectedProject.physicalProgress || 0,
      milestones: selectedProject.milestones || [],
      exportDate: new Date().toISOString()
    };
    
    // Create CSV content
    let csvContent = 'Project Summary Report\n\n';
    csvContent += 'Project Information\n';
    csvContent += `Project Name,${exportData.projectName}\n`;
    csvContent += `Project Code,${exportData.projectCode}\n`;
    csvContent += `Implementing Office,${exportData.implementingOffice}\n`;
    csvContent += `Location,${Array.isArray(exportData.location) ? exportData.location.join('; ') : exportData.location}\n`;
    csvContent += `Status,${exportData.status}\n`;
    csvContent += `Created Date,${exportData.createdDate}\n\n`;
    
    csvContent += 'Budget Information\n';
    csvContent += `Total Budget,₱${exportData.totalBudget.toLocaleString()}\n`;
    csvContent += `Amount Spent,₱${exportData.amountSpent.toLocaleString()}\n`;
    csvContent += `Remaining Budget,₱${exportData.remainingBudget.toLocaleString()}\n`;
    csvContent += `Budget Utilization,${parseFloat(exportData.budgetUtilization).toFixed(2)}%\n`;
    csvContent += `Funding Source,${exportData.fundingSource}\n\n`;
    
    csvContent += 'Progress Information\n';
    csvContent += `Overall Progress,${parseFloat(exportData.overallProgress).toFixed(2)}%\n`;
    csvContent += `Timeline Progress,${exportData.timelineProgress}%\n`;
    csvContent += `Budget Progress,${exportData.budgetProgress}%\n`;
    csvContent += `Physical Progress,${exportData.physicalProgress}%\n\n`;
    
    if (exportData.milestones.length > 0) {
      csvContent += 'Milestones\n';
      csvContent += 'Name,Weight,Planned Budget,Planned Start Date,Planned End Date,Status,Description\n';
      exportData.milestones.forEach(milestone => {
        csvContent += `"${milestone.title}",${milestone.weight}%,₱${(milestone.plannedBudget || 0).toLocaleString()},${milestone.plannedStartDate || ''},${milestone.plannedEndDate || ''},${milestone.status || 'pending'},"${milestone.description || ''}"\n`;
      });
    }
    
    // Download CSV file
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `project-summary-${exportData.projectCode}-${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }

  // Load summary module function
  function loadSummaryModule() {
    window.location.reload();
  }

  // Make functions globally available
  window.selectProject = selectProject;
  window.exportSummary = exportSummary;
  window.loadSummaryModule = loadSummaryModule;
</script> 