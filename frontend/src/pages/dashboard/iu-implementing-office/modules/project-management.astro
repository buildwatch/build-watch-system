---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import IUImplementingOfficeLayout from '../../../../components/IUImplementingOfficeLayout.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let projects = [];
let loading = true;
let error = '';

// Try to fetch projects data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch projects from the new API
    const projectsRes = await fetch(`${API_URL}/projects`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        projects = data.projects;
      }
    }
  }
} catch (err) {
  console.error('Error fetching projects data:', err);
  error = 'Failed to fetch projects data.';
}

loading = false;
---

<Layout title="Project Management | Implementing Office Dashboard">
  <IUImplementingOfficeLayout>
    <style>
      .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      /* Modern Tab Button Design */
      .tab-button {
        position: relative;
        overflow: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        width: 140px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        flex-grow: 0;
        border: none;
        outline: none;
        cursor: pointer;
      }

      .tab-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
      }

      .tab-button:hover::before {
        left: 100%;
      }

      .tab-button.active {
        background: linear-gradient(135deg, #92751F, #7A6219);
        color: white;
        font-weight: 600;
      }

      .tab-button:not(.active):hover {
        background: #f8f9fa;
        transform: translateY(-1px);
      }

      /* Progress bar animations */
      .progress-bar {
        transition: width 1.5s cubic-bezier(0.4, 0, 0.2, 1);
        will-change: width;
      }
      
      .progress-bar.animate {
        animation: progressFill 1.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
      }
      
      @keyframes progressFill {
        from {
          width: 0%;
        }
        to {
          width: var(--target-width);
        }
      }
      
      @keyframes progressPulse {
        0%, 100% {
          opacity: 1;
        }
        50% {
          opacity: 0.8;
        }
      }
      
      .progress-bar.animating {
        animation: progressPulse 0.6s ease-in-out;
      }
      
      /* Sink and pop animation for tab switching */
      .tab-button.switching {
        animation: sinkAndPop 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      @keyframes sinkAndPop {
        0% {
          transform: translateY(0);
        }
        50% {
          transform: translateY(2px);
        }
        100% {
          transform: translateY(0);
        }
      }

      /* Tab Content Animations */
      .tab-content {
        transition: opacity 0.3s ease-in-out;
      }

      .tab-content.fade-in {
        animation: fadeInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .tab-content.fade-out {
        opacity: 0;
        transform: translateY(10px);
      }

      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Card Grid Animation */
      .card-grid {
        animation: slideInUp 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      }

      @keyframes slideInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Staggered Card Animation */
      .project-card {
        animation: cardSlideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        opacity: 0;
        transform: translateY(20px);
      }

      .project-card:nth-child(1) { animation-delay: 0.1s; }
      .project-card:nth-child(2) { animation-delay: 0.2s; }
      .project-card:nth-child(3) { animation-delay: 0.3s; }
      .project-card:nth-child(4) { animation-delay: 0.4s; }
      .project-card:nth-child(5) { animation-delay: 0.5s; }
      .project-card:nth-child(6) { animation-delay: 0.6s; }

      @keyframes cardSlideIn {
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Enhanced global animations */
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .animate-fade-in-up {
        animation: fadeInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        opacity: 0;
      }

      /* Enhanced transitions for all elements */
      * {
        transition-property: transform, box-shadow, filter, backdrop-filter, color, background-color, border-color;
      }

      /* Enhanced focus states */
      button:focus, a:focus, input:focus, select:focus {
        outline: 2px solid #f59e0b;
        outline-offset: 2px;
      }

      /* Custom scrollbar */
      ::-webkit-scrollbar {
        width: 8px;
      }

      ::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 4px;
      }

      ::-webkit-scrollbar-thumb {
        background: linear-gradient(to bottom, #f59e0b, #d97706);
        border-radius: 4px;
      }

      ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(to bottom, #d97706, #b45309);
      }

      /* Enhanced loading animation */
      .loading-spinner {
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      /* Enhanced shimmer effect */
      .shimmer {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: shimmer 2s infinite;
      }

      @keyframes shimmer {
        0% {
          background-position: -200% 0;
        }
        100% {
          background-position: 200% 0;
        }
      }
    </style>
    <section class="p-8 bg-gradient-to-br from-gray-50 via-amber-50 to-white min-h-screen">
      <!-- Enhanced Header Section -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-6 mb-8">
        <div>
          <h1 class="text-4xl font-bold bg-gradient-to-r from-gray-800 to-amber-600 bg-clip-text text-transparent mb-3">Project & Program Management</h1>
          <p class="text-lg text-gray-600">Create, manage, and track your department's projects with comprehensive monitoring across three divisions</p>
        </div>
        <div class="flex items-center gap-4">
          <button onclick="window.openCreateProjectModal()" class="group relative px-8 py-4 bg-gradient-to-r from-amber-600 to-amber-700 text-white rounded-xl hover:from-amber-700 hover:to-amber-800 transition-all duration-300 transform hover:scale-105 hover:shadow-xl flex items-center gap-3 overflow-hidden font-semibold">
            <div class="absolute inset-0 bg-white opacity-0 group-hover:opacity-10 transition-opacity duration-300"></div>
            <svg class="w-6 h-6 transition-transform duration-300 group-hover:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Create New Project
          </button>
          <button onclick="testModal()" class="group relative px-6 py-4 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-xl hover:from-red-600 hover:to-red-700 transition-all duration-300 transform hover:scale-105 hover:shadow-xl flex items-center gap-3 overflow-hidden font-semibold">
            <div class="absolute inset-0 bg-white opacity-0 group-hover:opacity-10 transition-opacity duration-300"></div>
            <svg class="w-5 h-5 transition-transform duration-300 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
            </svg>
            Test Modal
          </button>
        </div>
      </div>

      <!-- Enhanced Statistics Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl hover:border-blue-200 transition-all duration-300 transform hover:-translate-y-2 animate-fade-in-up" style="animation-delay: 0.1s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600 group-hover:text-blue-600 transition-colors">Total Projects</p>
              <p class="text-3xl font-bold text-gray-800 group-hover:text-blue-700 transition-colors">{projects.length}</p>
            </div>
            <div class="p-4 bg-gradient-to-br from-blue-100 to-blue-200 rounded-full group-hover:from-blue-200 group-hover:to-blue-300 transition-all duration-300 transform group-hover:scale-110">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl hover:border-green-200 transition-all duration-300 transform hover:-translate-y-2 animate-fade-in-up" style="animation-delay: 0.2s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600 group-hover:text-green-600 transition-colors">Ongoing</p>
              <p class="text-3xl font-bold text-green-600 group-hover:text-green-700 transition-colors">{projects.filter(p => p.status === 'ongoing').length}</p>
            </div>
            <div class="p-4 bg-gradient-to-br from-green-100 to-green-200 rounded-full group-hover:from-green-200 group-hover:to-green-300 transition-all duration-300 transform group-hover:scale-110">
              <svg class="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl hover:border-yellow-200 transition-all duration-300 transform hover:-translate-y-2 animate-fade-in-up" style="animation-delay: 0.3s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600 group-hover:text-yellow-600 transition-colors">Pending</p>
              <p class="text-3xl font-bold text-yellow-600 group-hover:text-yellow-700 transition-colors">{projects.filter(p => p.status === 'pending').length}</p>
            </div>
            <div class="p-4 bg-gradient-to-br from-yellow-100 to-yellow-200 rounded-full group-hover:from-yellow-200 group-hover:to-yellow-300 transition-all duration-300 transform group-hover:scale-110">
              <svg class="w-8 h-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl hover:border-blue-200 transition-all duration-300 transform hover:-translate-y-2 animate-fade-in-up" style="animation-delay: 0.4s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600 group-hover:text-blue-600 transition-colors">Complete</p>
              <p class="text-3xl font-bold text-blue-600 group-hover:text-blue-700 transition-colors">{projects.filter(p => p.status === 'complete').length}</p>
            </div>
            <div class="p-4 bg-gradient-to-br from-blue-100 to-blue-200 rounded-full group-hover:from-blue-200 group-hover:to-blue-300 transition-all duration-300 transform group-hover:scale-110">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Filters and Search -->
      <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8 hover:shadow-2xl hover:border-amber-200 transition-all duration-300 transform hover:-translate-y-1">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2 group-hover:text-amber-600 transition-colors">Status</label>
            <select id="statusFilter" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-300 hover:border-amber-300">
              <option value="">All Status</option>
              <option value="pending">Pending</option>
              <option value="ongoing">Ongoing</option>
              <option value="delayed">Delayed</option>
              <option value="complete">Completed</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2 group-hover:text-amber-600 transition-colors">Category</label>
            <select id="categoryFilter" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-300 hover:border-amber-300">
              <option value="">All Categories</option>
              <option value="infrastructure">Infrastructure</option>
              <option value="health">Health</option>
              <option value="education">Education</option>
              <option value="agriculture">Agriculture</option>
              <option value="social">Social Services</option>
              <option value="environment">Environment</option>
              <option value="transportation">Transportation</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2 group-hover:text-amber-600 transition-colors">Priority</label>
            <select id="priorityFilter" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-300 hover:border-amber-300">
              <option value="">All Priorities</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2 group-hover:text-amber-600 transition-colors">Search</label>
            <input type="text" id="searchInput" placeholder="Search projects..." class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-300 hover:border-amber-300">
          </div>

        </div>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#92751F]"></div>
          <span class="ml-3 text-gray-600">Loading projects...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12">
          <p class="text-red-600 mb-4">{error}</p>
                      <button onclick="window.location.reload()" class="px-4 py-2 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-all">
            Try Again
          </button>
        </div>
      ) : projects.length === 0 ? (
        <div class="text-center py-12">
          <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">No Projects Found</h3>
          <p class="text-gray-600 mb-6">Get started by creating your first project with comprehensive monitoring across timeline, budget, and physical divisions</p>
          <button onclick="window.openCreateProjectModal()" class="px-6 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors flex items-center gap-2 mx-auto">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Create New Project
          </button>
        </div>
      ) : (
        <!-- Enhanced Projects View Tabs -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 overflow-hidden hover:shadow-2xl transition-all duration-300">
          <!-- Enhanced Tab Navigation -->
          <div class="px-6 py-6 border-b border-gray-200 bg-gradient-to-r from-gray-50 to-white">
            <div class="flex items-center justify-between">
              <h2 class="text-xl font-semibold text-gray-800">Project List</h2>
              <div class="flex bg-gradient-to-r from-gray-100 to-gray-200 border border-gray-300 rounded-2xl shadow-lg overflow-hidden" style="width: 300px;">
                <button id="cardTab" class="group/btn tab-button text-sm font-medium text-gray-900 bg-gradient-to-r from-amber-600 to-amber-700 text-white transition-all duration-300 flex items-center gap-3 active relative overflow-hidden">
                  <div class="absolute inset-0 bg-white opacity-0 group-hover/btn:opacity-10 transition-opacity duration-300"></div>
                  <svg class="w-5 h-5 transition-transform duration-300 group-hover/btn:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                  Card View
                </button>
                <button id="tableTab" class="group/btn tab-button text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gradient-to-r hover:from-gray-200 hover:to-gray-300 transition-all duration-300 flex items-center gap-3 relative overflow-hidden">
                  <div class="absolute inset-0 bg-white opacity-0 group-hover/btn:opacity-10 transition-opacity duration-300"></div>
                  <svg class="w-5 h-5 transition-transform duration-300 group-hover/btn:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                  </svg>
                  Table View
                </button>
              </div>
            </div>
          </div>

          <!-- Card View Content -->
          <div id="cardView" class="tab-content block p-6">
            <div class="card-grid grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6" id="projectsGrid">
              {projects.map((project) => {
                const progress = {
                  // Use actual progress values from the project with proper field mapping
                  timelineProgress: project.progress?.timeline || project.progress?.internalTimeline || project.timelineProgress || 0,
                  budgetProgress: project.progress?.budget || project.progress?.internalBudget || project.budgetProgress || 0,
                  physicalProgress: project.progress?.physical || project.progress?.internalPhysical || project.physicalProgress || 0,
                  overallProgress: project.progress?.overall || project.overallProgress || 0
                };
                

                

                
                return (
                  <div class="group project-card bg-gradient-to-br from-gray-50 to-white rounded-2xl shadow-lg border border-gray-200 p-6 hover:shadow-2xl hover:border-amber-300 transition-all duration-300 transform hover:-translate-y-2">
                    <div class="flex items-start justify-between mb-4">
                      <div class="flex-1">
                        <h3 class="text-lg font-semibold text-gray-800 mb-2 group-hover:text-amber-700 transition-colors">{project.name}</h3>
                        <p class="text-sm text-gray-600 mb-3 line-clamp-2 group-hover:text-gray-700 transition-colors">{project.description}</p>
                        <div class="flex items-center gap-2 mb-3">
                          <span class={`px-3 py-1.5 text-xs font-medium rounded-full transition-all duration-300 transform group-hover:scale-105 ${
                            project.category === 'infrastructure' ? 'bg-gradient-to-r from-amber-100 to-amber-200 text-amber-700 group-hover:from-amber-200 group-hover:to-amber-300' :
                            project.category === 'health' ? 'bg-gradient-to-r from-blue-100 to-blue-200 text-blue-700 group-hover:from-blue-200 group-hover:to-blue-300' :
                            project.category === 'education' ? 'bg-gradient-to-r from-purple-100 to-purple-200 text-purple-700 group-hover:from-purple-200 group-hover:to-purple-300' :
                            project.category === 'agriculture' ? 'bg-gradient-to-r from-green-100 to-green-200 text-green-700 group-hover:from-green-200 group-hover:to-green-300' :
                            project.category === 'environment' ? 'bg-gradient-to-r from-emerald-100 to-emerald-200 text-emerald-700 group-hover:from-emerald-200 group-hover:to-emerald-300' :
                            project.category === 'transportation' ? 'bg-gradient-to-r from-orange-100 to-orange-200 text-orange-700 group-hover:from-orange-200 group-hover:to-orange-300' :
                            'bg-gradient-to-r from-gray-100 to-gray-200 text-gray-700 group-hover:from-gray-200 group-hover:to-gray-300'
                          }`}>{project.category}</span>
                          <span class={`px-3 py-1.5 text-xs font-medium rounded-full transition-all duration-300 transform group-hover:scale-105 ${
                            project.status === 'ongoing' ? 'bg-gradient-to-r from-green-100 to-green-200 text-green-700 group-hover:from-green-200 group-hover:to-green-300' :
                            project.status === 'complete' ? 'bg-gradient-to-r from-blue-100 to-blue-200 text-blue-700 group-hover:from-blue-200 group-hover:to-blue-300' :
                            project.status === 'pending' ? 'bg-gradient-to-r from-yellow-100 to-yellow-200 text-yellow-700 group-hover:from-yellow-200 group-hover:to-yellow-300' :
                            'bg-gradient-to-r from-red-100 to-red-200 text-red-700 group-hover:from-red-200 group-hover:to-red-300'
                          }`}>{project.status}</span>
                        </div>
                      </div>
                      <div class="flex items-center gap-2">
                        <button onclick={`editProject('${project.id}')`} class="group/btn p-2 text-gray-400 hover:text-amber-600 transition-all duration-300 transform hover:scale-110 hover:bg-amber-50 rounded-lg">
                          <svg class="w-4 h-4 transition-transform duration-300 group-hover/btn:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                          </svg>
                        </button>
                        <button onclick={`deleteProject('${project.id}')`} class="group/btn p-2 text-gray-400 hover:text-red-500 transition-all duration-300 transform hover:scale-110 hover:bg-red-50 rounded-lg">
                          <svg class="w-4 h-4 transition-transform duration-300 group-hover/btn:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                          </svg>
                        </button>
                      </div>
                    </div>
                    
                    <div class="space-y-4 mb-4">
                      <div class="flex items-center justify-between text-sm">
                        <span class="text-gray-600 group-hover:text-amber-600 transition-colors">Overall Progress:</span>
                        <span class="font-medium text-gray-800 group-hover:text-amber-700 transition-colors">{progress.overallProgress}%</span>
                      </div>

                      <div class="w-full bg-gray-200 rounded-full h-3 overflow-hidden">
                        <div class={`h-3 rounded-full progress-bar ${project.status === 'complete' ? 'bg-gradient-to-r from-green-500 to-green-600' : 'bg-gradient-to-r from-amber-500 to-amber-600'}`} style="width: 0%" data-progress={progress.overallProgress || 0}></div>
                      </div>
                      
                      <!-- Enhanced Three Divisions Progress -->
                      <div class="grid grid-cols-3 gap-3 text-xs">
                        <div class="text-center p-2 bg-gray-50 rounded-lg group-hover:bg-amber-50 transition-colors">
                          <div class="w-full bg-gray-200 rounded-full h-2 mb-1 overflow-hidden">
                            <div class="bg-gradient-to-r from-blue-500 to-blue-600 h-2 rounded-full progress-bar" style="width: 0%" data-progress={progress.timelineProgress || 0}></div>
                          </div>
                          <span class="text-gray-600 group-hover:text-blue-600 transition-colors">Timeline</span>
                        </div>
                        <div class="text-center p-2 bg-gray-50 rounded-lg group-hover:bg-amber-50 transition-colors">
                          <div class="w-full bg-gray-200 rounded-full h-2 mb-1 overflow-hidden">
                            <div class="bg-gradient-to-r from-green-500 to-green-600 h-2 rounded-full progress-bar" style="width: 0%" data-progress={progress.budgetProgress || 0}></div>
                          </div>
                          <span class="text-gray-600 group-hover:text-green-600 transition-colors">Budget</span>
                        </div>
                        <div class="text-center p-2 bg-gray-50 rounded-lg group-hover:bg-amber-50 transition-colors">
                          <div class="w-full bg-gray-200 rounded-full h-2 mb-1 overflow-hidden">
                            <div class="bg-gradient-to-r from-purple-500 to-purple-600 h-2 rounded-full progress-bar" style="width: 0%" data-progress={progress.physicalProgress || 0}></div>
                          </div>
                          <span class="text-gray-600 group-hover:text-purple-600 transition-colors">Physical</span>
                        </div>
                      </div>
                      
                      <div class="grid grid-cols-2 gap-3 text-sm">
                        <div class="p-2 bg-gray-50 rounded-lg group-hover:bg-amber-50 transition-colors">
                          <span class="text-gray-600 group-hover:text-amber-600 transition-colors">Budget:</span>
                          <span class="font-medium text-gray-800 group-hover:text-amber-700 transition-colors ml-1">₱{project.totalBudget?.toLocaleString() || '0'}</span>
                        </div>
                        <div class="p-2 bg-gray-50 rounded-lg group-hover:bg-amber-50 transition-colors">
                          <span class="text-gray-600 group-hover:text-amber-600 transition-colors">Location:</span>
                          <span class="font-medium text-gray-800 group-hover:text-amber-700 transition-colors ml-1">{project.location}</span>
                        </div>
                      </div>
                      
                      <div class="p-2 bg-gray-50 rounded-lg group-hover:bg-amber-50 transition-colors">
                        <span class="text-gray-600 group-hover:text-amber-600 transition-colors">{project.status === 'complete' ? 'Completion Date:' : 'Target Date:'}</span>
                        <span class="font-medium text-gray-800 group-hover:text-amber-700 transition-colors ml-1">{project.status === 'complete' ? project.completionDate : project.endDate}</span>
                      </div>
                    </div>
                    
                    <div class="flex items-center gap-3">
                      <button onclick={`viewProjectDetails('${project.id}')`} class="group/btn flex-1 px-4 py-2.5 bg-gradient-to-r from-gray-100 to-gray-200 text-gray-700 rounded-lg hover:from-gray-200 hover:to-gray-300 transition-all duration-300 transform hover:scale-105 hover:shadow-lg text-sm font-medium">
                        View Details
                      </button>
                      {project.status === 'complete' ? (
                        <button onclick={`generateReport('${project.id}')`} class="group/btn px-4 py-2.5 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-lg hover:from-green-700 hover:to-green-800 transition-all duration-300 transform hover:scale-105 hover:shadow-lg text-sm font-medium">
                          Report
                        </button>
                      ) : (
                        <button onclick={`updateProgress('${project.id}')`} class="group/btn px-4 py-2.5 bg-gradient-to-r from-amber-600 to-amber-700 text-white rounded-lg hover:from-amber-700 hover:to-amber-800 transition-all duration-300 transform hover:scale-105 hover:shadow-lg text-sm font-medium">
                          Update
                        </button>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>

          <!-- Table View Content -->
          <div id="tableView" class="tab-content hidden">
            <div class="overflow-x-auto">
              <table class="w-full">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Budget</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timeline</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody id="projectsTableBody" class="bg-white divide-y divide-gray-200">
                  {projects.map((project) => {
                    const progress = project.progress || {
                      // Use new field names from backend with proper field mapping
                      timeline: project.progress?.timeline || project.progress?.internalTimeline || project.timelineProgress || 0,
                      budget: project.progress?.budget || project.progress?.internalBudget || project.budgetProgress || 0,
                      physical: project.progress?.physical || project.progress?.internalPhysical || project.physicalProgress || 0,
                      overall: project.progress?.overall || project.overallProgress || 0
                    };
                    
                    return (
                      <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div class="text-sm font-medium text-gray-900">{project.name}</div>
                            <div class="text-sm text-gray-500">{project.projectCode}</div>
                          </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                            project.category === 'infrastructure' ? 'bg-[#F8C734]/20 text-[#92751F]' :
                            project.category === 'health' ? 'bg-blue-100 text-blue-700' :
                            project.category === 'education' ? 'bg-purple-100 text-purple-700' :
                            project.category === 'agriculture' ? 'bg-green-100 text-green-700' :
                            project.category === 'environment' ? 'bg-emerald-100 text-emerald-700' :
                            project.category === 'transportation' ? 'bg-orange-100 text-orange-700' :
                            'bg-gray-100 text-gray-700'
                          }`}>{project.category}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                            project.status === 'ongoing' ? 'bg-green-100 text-green-700' :
                            project.status === 'complete' ? 'bg-blue-100 text-blue-700' :
                            project.status === 'pending' ? 'bg-yellow-100 text-yellow-700' :
                            'bg-red-100 text-red-700'
                          }`}>{project.status}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="text-sm text-gray-900">₱{project.totalBudget?.toLocaleString() || '0'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="flex items-center">
                            <div class="w-16 bg-gray-200 rounded-full h-2 mr-2">
                              <div class={`h-2 rounded-full ${
                                project.status === 'complete' ? 'bg-green-500' : 'bg-[#F8C734]'
                              }`} style={`width: ${progress.overall}%`}></div>
                            </div>
                            <span class="text-sm text-gray-900">{progress.overall}%</span>
                          </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="text-sm text-gray-900">{project.endDate || 'N/A'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="text-sm text-gray-900">{project.location || 'N/A'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <div class="flex items-center gap-2">
                            <button onclick={`viewProjectDetails('${project.id}')`} class="text-[#92751F] hover:text-[#7A6219]">
                              View
                            </button>
                            <button onclick={`editProject('${project.id}')`} class="text-blue-600 hover:text-blue-800">
                              Edit
                            </button>
                            {project.status === 'complete' ? (
                              <button onclick={`generateReport('${project.id}')`} class="text-green-600 hover:text-green-800">
                                Report
                              </button>
                            ) : (
                              <button onclick={`updateProgress('${project.id}')`} class="text-[#92751F] hover:text-[#7A6219]">
                                Update
                              </button>
                            )}
                            <button onclick={`deleteProject('${project.id}')`} class="text-red-600 hover:text-red-800">
                              Delete
                            </button>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
            <div class="px-6 py-4 border-t border-gray-200">
              <div class="flex items-center justify-between">
                <p class="text-sm text-gray-700">Showing <span id="showingCount">{projects.length}</span> of <span id="totalCount">{projects.length}</span> projects</p>
              </div>
            </div>
          </div>
        </div>
      )}
    </section>

    <!-- Create Project Modal -->
    <div id="createProjectModal" class="fixed inset-0 bg-black bg-opacity-60 hidden z-50 backdrop-blur-sm">
      <div class="flex items-start justify-center min-h-screen p-4 pt-8">
        <div class="bg-white rounded-3xl shadow-2xl w-full max-w-7xl max-h-[95vh] overflow-y-auto border border-gray-100">
          <!-- Enhanced Header with Gradient -->
          <div class="bg-gradient-to-r from-[#92751F] via-[#8B6F1A] to-[#7A6219] p-8 text-white relative overflow-hidden">
            <div class="absolute inset-0 bg-black/10"></div>
            <div class="relative flex items-center justify-between">
              <div class="flex items-center gap-6">
                <div class="bg-white/20 p-4 rounded-2xl backdrop-blur-sm">
                  <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
                <div>
                  <h2 class="text-4xl font-bold mb-2">Create New Project</h2>
                  <p class="text-white/90 text-lg">Define comprehensive project details and milestones for successful implementation</p>
                </div>
              </div>
              <div class="flex items-center gap-3">
                <button onclick="window.loadSavedProjectInformation()" class="bg-white/20 hover:bg-white/30 px-4 py-3 rounded-xl transition-all duration-200 backdrop-blur-sm text-white font-semibold text-sm">
                  📂 Load Saved Data
                </button>
                <button onclick="window.clearSavedProjectInformation()" class="bg-white/20 hover:bg-white/30 px-4 py-3 rounded-xl transition-all duration-200 backdrop-blur-sm text-white font-semibold text-sm">
                  🗑️ Clear Saved Data
                </button>
                <button onclick="window.showCancelConfirmation()" class="bg-white/20 hover:bg-white/30 p-3 rounded-xl transition-all duration-200 backdrop-blur-sm">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            </div>
          </div>
          
          <form id="createProjectForm" class="p-6 space-y-8">
            <!-- Basic Project Information -->
            <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-8 border border-blue-200 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-blue-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Basic Project Information</h3>
                  <p class="text-gray-600">Essential details about your project</p>
                </div>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Code *</label>
                  <input type="text" name="projectCode" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="e.g., PRJ-2025-001" id="projectCodeField">
                  <p class="text-xs text-gray-500 mt-1">Unique identifier for the project</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project/Program Title *</label>
                  <input type="text" name="name" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="e.g., Installation of Solar and LED Streetlights at Various Barangays">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Implementing Office *</label>
                  <input type="text" name="implementingOfficeName" id="implementingOfficeName" required class="w-full px-4 py-3 border border-gray-300 rounded-xl bg-gray-100 focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="Auto-filled based on user" readonly>
                  <p class="text-xs text-gray-500 mt-1">Automatically set based on the creating user's department</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Category *</label>
                  <select name="category" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200">
                    <option value="">Select Category</option>
                    <option value="infrastructure">Infrastructure</option>
                    <option value="health">Health</option>
                    <option value="education">Education</option>
                    <option value="agriculture">Agriculture</option>
                    <option value="social">Social Services</option>
                    <option value="environment">Environment</option>
                    <option value="transportation">Transportation</option>
                  </select>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Location/Barangay *</label>
                  <div id="createBarangayContainer" class="space-y-2">
                    <div class="flex gap-2">
                      <select name="location[]" required class="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200 barangay-select">
                        <option value="">Select Barangay</option>
                        <option value="Various Barangay">Various Barangay</option>
                        <option value="Alipit">Alipit</option>
                        <option value="Bagumbayan">Bagumbayan</option>
                        <option value="Bubukal">Bubukal</option>
                        <option value="Calios">Calios</option>
                        <option value="Duhat">Duhat</option>
                        <option value="Gatid">Gatid</option>
                        <option value="Jasaan">Jasaan</option>
                        <option value="Labuin">Labuin</option>
                        <option value="Malinao">Malinao</option>
                        <option value="Oogong">Oogong</option>
                        <option value="Pagsawitan">Pagsawitan</option>
                        <option value="Palasan">Palasan</option>
                        <option value="Patimbao">Patimbao</option>
                        <option value="Poblacion I">Poblacion I</option>
                        <option value="Poblacion II">Poblacion II</option>
                        <option value="Poblacion III">Poblacion III</option>
                        <option value="Poblacion IV">Poblacion IV</option>
                        <option value="Poblacion V">Poblacion V</option>
                        <option value="San Jose">San Jose</option>
                        <option value="San Juan">San Juan</option>
                        <option value="San Pablo Norte">San Pablo Norte</option>
                        <option value="San Pablo Sur">San Pablo Sur</option>
                        <option value="Santisima Cruz">Santisima Cruz</option>
                        <option value="Santo Angel Central">Santo Angel Central</option>
                        <option value="Santo Angel Norte">Santo Angel Norte</option>
                        <option value="Santo Angel Sur">Santo Angel Sur</option>
                      </select>
                      <button type="button" onclick="addCreateBarangayDropdown()" class="px-4 py-3 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-all duration-200 shadow-lg hover:shadow-xl">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Priority *</label>
                  <select name="priority" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200">
                    <option value="">Select Priority</option>
                    <option value="high">High</option>
                    <option value="medium">Medium</option>
                    <option value="low">Low</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Funding Source *</label>
                  <select name="fundingSource" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200">
                    <option value="">Select Funding Source</option>
                    <option value="local_fund">Local Fund</option>
                    <option value="national_fund">National Fund</option>
                    <option value="foreign_fund">Foreign Fund</option>
                    <option value="private_fund">Private Fund</option>
                    <option value="mixed_fund">Mixed Fund</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Created Date *</label>
                  <input type="date" name="createdDate" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Description *</label>
                  <textarea name="description" required rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="Detailed description of the project..."></textarea>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Expected Outputs</label>
                  <textarea name="expectedOutputs" rows="2" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="Expected outputs and deliverables..."></textarea>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Target Beneficiaries</label>
                  <textarea name="targetBeneficiaries" rows="2" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="Target beneficiaries and stakeholders..."></textarea>
                </div>
              </div>
            </div>

            <!-- External Partner (EIU) -->
            <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-8 border border-green-200 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-green-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">External Partner (EIU)</h3>
                  <p class="text-gray-600">External Implementing Unit partner details</p>
                </div>
              </div>
              <div class="space-y-4">
                <div class="flex items-center">
                  <input type="checkbox" name="hasExternalPartner" id="hasExternalPartner" class="w-5 h-5 text-[#92751F] bg-gray-100 border-gray-300 rounded focus:ring-[#92751F] focus:ring-2">
                  <label for="hasExternalPartner" class="ml-3 text-sm font-medium text-gray-700">Yes</label>
                </div>
                
                <div id="eiuFields" class="hidden space-y-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">EIU Unique User ID *</label>
                    <div class="flex gap-2">
                      <input type="text" name="eiuPersonnelId" id="eiuPersonnelId" required class="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="Enter EIU Unique User ID">
                      <button type="button" onclick="validateEIUAccount()" class="px-6 py-3 bg-gradient-to-r from-[#92751F] to-[#7A6219] text-white rounded-xl hover:from-[#7A6219] hover:to-[#6B5618] transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105" title="Verify EIU Account">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                      </button>
                    </div>
                    <p class="text-xs text-gray-500 mt-1">Enter the unique user ID of the EIU personnel assigned to this project</p>
                    <div id="eiuValidationMessage" class="mt-2"></div>
                  </div>
                </div>
              </div>
            </div>

                        <!-- Timeline Info -->
            <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-8 border border-blue-200 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-blue-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Timeline Info</h3>
                  <p class="text-gray-600">Project start and end dates</p>
                </div>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Start Date *</label>
                  <input type="date" name="startDate" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">End Date *</label>
                  <input type="date" name="endDate" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200">
                </div>
              </div>
            </div>

            <!-- Budget Info -->
            <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-8 border border-green-200 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-green-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Budget Info</h3>
                  <p class="text-gray-600">Total budget allocation and description</p>
                </div>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Total Budget Allocation (₱) *</label>
                  <input type="number" name="totalBudget" required min="0" step="0.01" onchange="window.calculateTotals()" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="e.g., 5000000">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Budget Description</label>
                  <textarea name="budgetBreakdown" rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="Detailed description of budget allocation..."></textarea>
                </div>
              </div>
            </div>

            <!-- Physical Accomplishment Info -->
            <div class="bg-gradient-to-br from-orange-50 to-orange-100 rounded-2xl p-8 border border-orange-200 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-orange-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Physical Accomplishment Info</h3>
                  <p class="text-gray-600">General description of physical progress</p>
                </div>
              </div>
              <div class="grid grid-cols-1 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">General Description</label>
                  <textarea name="physicalProgressRequirements" rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent transition-all duration-200" placeholder="General description of physical accomplishment requirements..."></textarea>
                </div>
              </div>
            </div>

            <!-- Project Milestones Configuration -->
            <div class="bg-gradient-to-br from-orange-50 to-amber-50 rounded-2xl p-8 border border-orange-100 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-gradient-to-r from-orange-500 to-amber-500 p-3 rounded-xl">
                  <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Project Milestones Configuration</h3>
                  <p class="text-gray-600">Define comprehensive milestones with weights, budgets, and timelines for successful project tracking</p>
                </div>
              </div>
              
              <div id="createMilestonesContainer" class="space-y-4">
                <!-- Milestone template will be added here -->
              </div>
              
              <!-- Enhanced Totals Dashboard -->
              <div class="mt-8 bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                  <div class="text-center p-4 bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl border border-blue-200">
                    <div class="text-2xl font-bold text-blue-600 mb-1" id="createTotalWeight">0%</div>
                    <div class="text-sm font-medium text-blue-700">Total Weight</div>
                  </div>
                  <div class="text-center p-4 bg-gradient-to-br from-green-50 to-green-100 rounded-xl border border-green-200">
                    <div class="text-2xl font-bold text-green-600 mb-1" id="createTotalMilestoneBudget">₱0.00</div>
                    <div class="text-sm font-medium text-green-700">Total Budget</div>
                    <div class="text-xs text-gray-500 mt-1" id="budgetMatchStatus">Matches allocation</div>
                  </div>
                  <div class="text-center p-4 bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl border border-purple-200">
                    <div class="text-2xl font-bold text-purple-600 mb-1" id="createMilestoneCount">0</div>
                    <div class="text-sm font-medium text-purple-700">Milestone Count</div>
                  </div>
                  <div class="flex items-center justify-center">
                    <button type="button" onclick="window.addMilestone()" class="bg-gradient-to-r from-[#92751F] to-[#7A6219] text-white px-6 py-3 rounded-xl hover:from-[#7A6219] hover:to-[#6B5618] transition-all duration-200 flex items-center gap-3 shadow-lg hover:shadow-xl transform hover:scale-105">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      <span class="font-semibold">Add Milestone</span>
                    </button>
                  </div>
                </div>
              </div>
              
              <!-- Enhanced Guidelines -->
              <div class="mt-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-200">
                <div class="flex items-center gap-3 mb-4">
                  <div class="bg-blue-500 p-2 rounded-lg">
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <h4 class="text-lg font-semibold text-blue-800">Milestone Guidelines</h4>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="space-y-2">
                    <div class="flex items-center gap-2 text-sm text-blue-700">
                      <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <strong>Weight:</strong> Percentage contribution to overall project progress (must total 100%)
                    </div>
                    <div class="flex items-center gap-2 text-sm text-blue-700">
                      <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <strong>Planned Budget:</strong> Budget allocation for this milestone
                    </div>
                  </div>
                  <div class="space-y-2">
                    <div class="flex items-center gap-2 text-sm text-blue-700">
                      <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <strong>Timeline:</strong> Planned start and end dates for the milestone
                    </div>
                    <div class="flex items-center gap-2 text-sm text-blue-700">
                      <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <strong>Physical Requirements:</strong> Photos, videos, and documentation required
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="flex items-center justify-end gap-6 pt-8 border-t border-gray-200 bg-gradient-to-r from-gray-50 to-gray-100 p-6 rounded-b-3xl">
              <button type="button" onclick="window.showCancelConfirmation()" class="px-8 py-3 text-gray-600 border-2 border-gray-300 rounded-xl hover:bg-gray-100 hover:border-gray-400 transition-all duration-200 font-semibold">
                Cancel
              </button>
              <button type="button" onclick="window.saveProjectInformation()" class="px-8 py-3 bg-blue-600 text-white border-2 border-blue-600 rounded-xl hover:bg-blue-700 hover:border-blue-700 transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105">
                💾 Save Information
              </button>
              <button type="submit" class="bg-gradient-to-r from-[#92751F] to-[#7A6219] text-white px-8 py-3 rounded-xl hover:from-[#7A6219] hover:to-[#6B5618] transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105">
                Create Project
              </button>
            </div>
          </form>
        </div>
      </div>
          </div>

    <!-- Edit Project Modal -->
    <div id="editProjectModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[9999]">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-2xl shadow-2xl w-full max-w-6xl max-h-[90vh] overflow-y-auto">
          <div class="p-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h2 class="text-2xl font-bold text-gray-800">Edit Project/Program</h2>
              <button onclick="closeEditProjectModal()" class="text-gray-400 hover:text-gray-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <p class="text-gray-600 mt-2">Update project information and milestones</p>
          </div>
          
          <form id="editProjectForm" class="p-6 space-y-8">
            <!-- Basic Project Information -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">📋 Basic Project Information</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Code *</label>
                  <input type="text" name="projectCode" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="e.g., PRJ-2025-001">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project/Program Title *</label>
                  <input type="text" name="name" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="e.g., Installation of Solar and LED Streetlights at Various Barangays">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Implementing Office *</label>
                  <input type="text" name="implementingOfficeName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100 focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Auto-filled based on user" readonly>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Category *</label>
                  <select name="category" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent">
                    <option value="">Select Category</option>
                    <option value="infrastructure">Infrastructure</option>
                    <option value="health">Health</option>
                    <option value="education">Education</option>
                    <option value="agriculture">Agriculture</option>
                    <option value="social">Social Services</option>
                    <option value="environment">Environment</option>
                    <option value="transportation">Transportation</option>
                  </select>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Location/Barangay *</label>
                  <div id="editBarangayContainer" class="space-y-2">
                    <div class="flex gap-2">
                      <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent barangay-select">
                        <option value="">Select Barangay</option>
                        <option value="Various Barangay">Various Barangay</option>
                        <option value="Alipit">Alipit</option>
                        <option value="Bagumbayan">Bagumbayan</option>
                        <option value="Bubukal">Bubukal</option>
                        <option value="Calios">Calios</option>
                        <option value="Duhat">Duhat</option>
                        <option value="Gatid">Gatid</option>
                        <option value="Jasaan">Jasaan</option>
                        <option value="Labuin">Labuin</option>
                        <option value="Malinao">Malinao</option>
                        <option value="Oogong">Oogong</option>
                        <option value="Pagsawitan">Pagsawitan</option>
                        <option value="Palasan">Palasan</option>
                        <option value="Patimbao">Patimbao</option>
                        <option value="Poblacion I">Poblacion I</option>
                        <option value="Poblacion II">Poblacion II</option>
                        <option value="Poblacion III">Poblacion III</option>
                        <option value="Poblacion IV">Poblacion IV</option>
                        <option value="Poblacion V">Poblacion V</option>
                        <option value="San Jose">San Jose</option>
                        <option value="San Juan">San Juan</option>
                        <option value="San Pablo Norte">San Pablo Norte</option>
                        <option value="San Pablo Sur">San Pablo Sur</option>
                        <option value="Santisima Cruz">Santisima Cruz</option>
                        <option value="Santo Angel Central">Santo Angel Central</option>
                        <option value="Santo Angel Norte">Santo Angel Norte</option>
                        <option value="Santo Angel Sur">Santo Angel Sur</option>
                      </select>
                      <button type="button" onclick="addEditBarangayDropdown()" class="px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors text-sm">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Priority *</label>
                  <select name="priority" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent">
                    <option value="">Select Priority</option>
                    <option value="high">High</option>
                    <option value="medium">Medium</option>
                    <option value="low">Low</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Funding Source *</label>
                  <select name="fundingSource" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent">
                    <option value="">Select Funding Source</option>
                    <option value="local_fund">Local Fund</option>
                    <option value="national_fund">National Fund</option>
                    <option value="foreign_fund">Foreign Fund</option>
                    <option value="private_fund">Private Fund</option>
                    <option value="mixed_fund">Mixed Fund</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Created Date *</label>
                  <input type="date" name="createdDate" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Description *</label>
                  <textarea name="description" required rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Detailed description of the project..."></textarea>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Expected Outputs</label>
                  <textarea name="expectedOutputs" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Expected outputs and deliverables..."></textarea>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Target Beneficiaries</label>
                  <textarea name="targetBeneficiaries" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Target beneficiaries and stakeholders..."></textarea>
                </div>
              </div>
            </div>

            <!-- External Partner Information -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">🤝 External Partner Information</h3>
              <div class="space-y-4">
                <div class="flex items-center">
                  <input type="checkbox" name="hasExternalPartner" id="editHasExternalPartner" class="w-4 h-4 text-[#92751F] bg-gray-100 border-gray-300 rounded focus:ring-[#92751F] focus:ring-2">
                  <label for="editHasExternalPartner" class="ml-2 text-sm font-medium text-gray-700">Has External Implementing Unit (EIU) Partner</label>
                </div>
                
                <div id="editEiuFields" class="hidden space-y-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">EIU Personnel Account ID</label>
                    <input type="text" name="eiuPersonnelId" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Enter EIU Personnel Account ID">
                    <p class="text-xs text-gray-500 mt-1">Enter the Account ID of the EIU personnel assigned to this project</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Timeline Division -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">📅 Timeline Division</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Start Date *</label>
                  <input type="date" name="startDate" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">End Date *</label>
                  <input type="date" name="endDate" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Timeline Milestones</label>
                  <textarea name="timelineMilestones" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Key timeline milestones and deadlines..."></textarea>
                </div>
              </div>
            </div>

            <!-- Budget Division -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">💰 Budget Division</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Total Budget (₱) *</label>
                  <input type="number" name="totalBudget" required min="0" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="e.g., 5000000">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Budget Breakdown</label>
                  <textarea name="budgetBreakdown" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Detailed breakdown of budget allocation..."></textarea>
                </div>
              </div>
            </div>

            <!-- Physical Division -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">🏗️ Physical Division</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Required Documentation</label>
                  <textarea name="requiredDocumentation" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Required documentation for physical progress..."></textarea>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Physical Progress Requirements</label>
                  <textarea name="physicalProgressRequirements" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Specific requirements for physical progress tracking..."></textarea>
                </div>
              </div>
            </div>

            <!-- Additional Information -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">📋 Additional Information</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Manager</label>
                  <input type="text" name="projectManager" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Name of project manager">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Contact Number</label>
                  <input type="text" name="contactNumber" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Contact number">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Special Requirements</label>
                  <textarea name="specialRequirements" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Any special requirements or considerations..."></textarea>
                </div>
              </div>
            </div>

            <!-- Milestone Configuration -->
            <div class="bg-gray-50 rounded-lg p-6">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-800">🎯 Milestone Configuration</h3>
                <button type="button" onclick="addMilestone()" class="px-4 py-2 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                  Add Milestone
                </button>
              </div>
              
              <div class="mb-4 p-4 bg-white rounded-lg border border-gray-200">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div>
                    <span class="text-gray-600">Total Weight:</span>
                    <span id="totalWeight" class="ml-2 font-bold text-red-600">0.00%</span>
                  </div>
                  <div>
                    <span class="text-gray-600">Total Milestone Budget:</span>
                    <span id="totalMilestoneBudget" class="ml-2 font-bold">₱0.00</span>
                  </div>
                  <div>
                    <span class="text-gray-600">Milestone Count:</span>
                    <span id="milestoneCount" class="ml-2 font-bold">0</span>
                  </div>
                </div>
                <div class="mt-2 text-xs text-gray-500">
                  <p><strong>Progress Calculation:</strong> Each milestone weight is automatically distributed across 3 divisions (Timeline, Budget, Physical).</p>
                  <p><strong>Example:</strong> 5 milestones = 20% each. Each division gets 6.67% (20% × 33.33%). When all 3 divisions of Milestone 1 are approved: 6.67% × 3 = 20% total progress gain.</p>
                </div>
              </div>
              
              <div id="milestonesContainer" class="space-y-6">
                <!-- Milestones will be added here dynamically -->
              </div>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end gap-4 pt-6 border-t border-gray-200">
              <button type="button" onclick="closeEditProjectModal()" class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                Cancel
              </button>
              <button type="submit" class="px-6 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors">
                Update Project
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Project Details Modal -->
    <div id="projectDetailsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[9999]">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-2xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-y-auto">
          <div class="p-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h2 class="text-2xl font-bold text-gray-800">Project Details</h2>
              <button onclick="closeProjectDetailsModal()" class="text-gray-400 hover:text-gray-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>
          
          <div class="p-6 space-y-8">
            <!-- Project Information -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">Project Information</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-600">Project Name</label>
                  <p class="text-sm font-semibold text-gray-800" id="detailProjectName">-</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Project Code</label>
                  <p class="text-sm font-semibold text-gray-800" id="detailProjectCode">-</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Implementing Office</label>
                  <p class="text-sm font-semibold text-gray-800" id="detailImplementingOffice">-</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Location</label>
                  <p class="text-sm font-semibold text-gray-800" id="detailLocation">-</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">EIU Partner</label>
                  <p class="text-sm font-semibold text-gray-800" id="detailEIUPartner">-</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Status</label>
                  <span class="inline-block px-2 py-1 text-xs font-medium rounded-full" id="detailStatus">-</span>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Start Date</label>
                  <p class="text-sm font-semibold text-gray-800" id="detailStartDate">-</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">End Date</label>
                  <p class="text-sm font-semibold text-gray-800" id="detailEndDate">-</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Created Date</label>
                  <p class="text-sm font-semibold text-gray-800" id="detailCreatedDate">-</p>
                </div>
              </div>
            </div>

            <!-- Project Description -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">Project Description</h3>
              <div class="space-y-4">
                <div>
                  <label class="block text-sm font-medium text-gray-600 mb-2">Description</label>
                  <p class="text-sm text-gray-800 bg-white p-3 rounded-lg border" id="detailDescription">-</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600 mb-2">Expected Outputs</label>
                  <p class="text-sm text-gray-800 bg-white p-3 rounded-lg border" id="detailExpectedOutputs">-</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600 mb-2">Target Beneficiaries</label>
                  <p class="text-sm text-gray-800 bg-white p-3 rounded-lg border" id="detailTargetBeneficiaries">-</p>
                </div>
              </div>
            </div>

            <!-- Budget Information -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">Budget Information</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium text-gray-600">Total Budget</label>
                  <p class="text-lg font-bold text-gray-800" id="detailTotalBudget">₱0</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Amount Spent</label>
                  <p class="text-lg font-bold text-green-600" id="detailAmountSpent">₱0</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Remaining Budget</label>
                  <p class="text-lg font-bold text-blue-600" id="detailRemainingBudget">₱0</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Budget Utilization</label>
                  <p class="text-sm text-gray-600" id="detailBudgetUtilization">0% utilized</p>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-600">Funding Source</label>
                  <p class="text-sm font-semibold text-gray-800" id="detailFundingSource">-</p>
                </div>
              </div>
            </div>

            <!-- Progress Information -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">Progress Information</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <div class="text-center p-4 bg-blue-50 rounded-lg">
                  <div class="text-2xl font-bold text-blue-600" id="detailOverallProgress">0%</div>
                  <p class="text-sm text-gray-600 mt-1">Overall Progress</p>
                </div>
                <div class="text-center p-4 bg-green-50 rounded-lg">
                  <div class="text-2xl font-bold text-green-600" id="detailTimelineProgress">0%</div>
                  <p class="text-sm text-gray-600 mt-1">Timeline Progress</p>
                </div>
                <div class="text-center p-4 bg-purple-50 rounded-lg">
                  <div class="text-2xl font-bold text-purple-600" id="detailBudgetProgress">0%</div>
                  <p class="text-sm text-gray-600 mt-1">Budget Progress</p>
                </div>
                <div class="text-center p-4 bg-orange-50 rounded-lg">
                  <div class="text-2xl font-bold text-orange-600" id="detailPhysicalProgress">0%</div>
                  <p class="text-sm text-gray-600 mt-1">Physical Progress</p>
                </div>
              </div>
            </div>

            <!-- Milestones -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">Milestones</h3>
              <div id="detailMilestonesContainer">
                <!-- Milestones will be populated here -->
              </div>
            </div>

            <!-- Close Button -->
            <div class="flex justify-end pt-6 border-t border-gray-200">
              <button onclick="closeProjectDetailsModal()" class="px-6 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </IUImplementingOfficeLayout>
</Layout>

<!-- Global functions that need to be available immediately -->

<!-- Global functions that need to be available immediately -->
<script>
  // Auto-calculation function - must be global and available immediately
  window.updateMilestoneCalculations = function(milestoneId) {
    const milestoneElement = document.getElementById(`milestone-${milestoneId}`);
    if (!milestoneElement) return;
    
    // Get milestone weight and budget
    const weightInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][weight]"]`);
    const budgetInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][plannedBudget]"]`);
    
    const milestoneWeight = parseFloat(weightInput?.value) || 0;
    const milestoneBudget = parseFloat(budgetInput?.value) || 0;
    
    // Calculate division weights (33.33% of milestone weight)
    const divisionWeight = (milestoneWeight * 33.33) / 100;
    
    // Update division weight fields
    const timelineWeightInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][timelineWeight]"]`);
    const budgetWeightInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][budgetWeight]"]`);
    const physicalWeightInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][physicalWeight]"]`);
    
    if (timelineWeightInput) timelineWeightInput.value = divisionWeight.toFixed(2);
    if (budgetWeightInput) budgetWeightInput.value = divisionWeight.toFixed(2);
    if (physicalWeightInput) physicalWeightInput.value = divisionWeight.toFixed(2);
    
    // Update budget division planned budget
    const budgetDivisionInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][budgetPlanned]"]`);
    if (budgetDivisionInput) budgetDivisionInput.value = milestoneBudget.toFixed(2);
    
    // Update totals
    window.calculateTotals();
  };

  // Auto-populate timeline end date when due date changes
  window.updateTimelineEndDate = function(milestoneId) {
    const milestoneElement = document.getElementById(`milestone-${milestoneId}`);
    if (!milestoneElement) return;
    
    // Get the due date input
    const dueDateInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][dueDate]"]`);
    const timelineEndDateInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][timelineEndDate]"]`);
    
    if (dueDateInput && timelineEndDateInput) {
      // Auto-populate timeline end date with the due date
      timelineEndDateInput.value = dueDateInput.value;
    }
  };

  // Add proof type function
  window.addProofType = function(milestoneId) {
    const proofTypesContainer = document.getElementById(`proofTypes-${milestoneId}`);
    if (!proofTypesContainer) return;
    
    const proofTypeHtml = `
      <div class="flex items-center gap-2">
        <select name="milestones[${milestoneId}][physicalProofTypes][]" class="flex-1 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-orange-500">
          <option value="form">Form</option>
          <option value="video">Video</option>
          <option value="image">Image</option>
          <option value="document">Document</option>
          <option value="report">Report</option>
          <option value="audio">Audio</option>
          <option value="presentation">Presentation</option>
          <option value="certificate">Certificate</option>
                      </select>
        <button type="button" onclick="window.removeProofType(this)" class="px-2 py-1 text-xs bg-red-500 text-white rounded hover:bg-red-600 transition-colors">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </button>
                    </div>
    `;
    
    proofTypesContainer.insertAdjacentHTML('beforeend', proofTypeHtml);
  };

  // Remove proof type function
  window.removeProofType = function(button) {
    button.closest('.flex').remove();
  };

  // Calculate totals function - must be global and available immediately
  window.calculateTotals = function() {
    const weightInputs = document.querySelectorAll('#createMilestonesContainer input[name*="milestones"][name*="[weight]"]');
    const budgetInputs = document.querySelectorAll('#createMilestonesContainer input[name*="milestones"][name*="[plannedBudget]"]');
    const milestoneElements = document.querySelectorAll('#createMilestonesContainer [id^="milestone-"]');
    
    let totalWeight = 0;
    let totalBudget = 0;
    const milestoneCount = milestoneElements.length;
    
    weightInputs.forEach(input => {
      totalWeight += parseFloat(input.value) || 0;
    });
    
    budgetInputs.forEach(input => {
      totalBudget += parseFloat(input.value) || 0;
    });
    
    const totalWeightElement = document.getElementById('createTotalWeight');
    const totalBudgetElement = document.getElementById('createTotalMilestoneBudget');
    const milestoneCountElement = document.getElementById('createMilestoneCount');
    const addMilestoneButton = document.querySelector('button[onclick="window.addMilestone()"]');
    
    console.log('Elements found:', {
      totalWeightElement: !!totalWeightElement,
      totalBudgetElement: !!totalBudgetElement,
      milestoneCountElement: !!milestoneCountElement,
      addMilestoneButton: !!addMilestoneButton
    });
    
    if (totalWeightElement) {
      totalWeightElement.textContent = `${totalWeight.toFixed(2)}%`;
      totalWeightElement.className = totalWeight === 100 ? 'text-lg font-bold text-green-600' : 'text-lg font-bold text-red-600';
      console.log('Updated totalWeightElement to:', totalWeightElement.textContent);
    } else {
      console.error('totalWeightElement not found!');
    }
    
    if (totalBudgetElement) {
      totalBudgetElement.textContent = `₱${totalBudget.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
      
      // Get total budget allocation from the form
      const totalBudgetAllocationInput = document.querySelector('input[name="totalBudget"]');
      const totalBudgetAllocation = totalBudgetAllocationInput ? parseFloat(totalBudgetAllocationInput.value) || 0 : 0;
      
      // Compare milestone budget with total budget allocation
      const budgetMatchStatusElement = document.getElementById('budgetMatchStatus');
      
      if (Math.abs(totalBudget - totalBudgetAllocation) <= 0.01) {
        totalBudgetElement.className = 'text-lg font-bold text-green-600';
        totalBudgetElement.title = 'Budget matches Total Budget Allocation';
        if (budgetMatchStatusElement) {
          budgetMatchStatusElement.textContent = '✓ Matches allocation';
          budgetMatchStatusElement.className = 'text-xs text-green-600 mt-1 font-medium';
        }
      } else {
        totalBudgetElement.className = 'text-lg font-bold text-red-600';
        totalBudgetElement.title = `Budget mismatch! Milestone total: ₱${totalBudget.toFixed(2)}, Allocation: ₱${totalBudgetAllocation.toFixed(2)}`;
        if (budgetMatchStatusElement) {
          budgetMatchStatusElement.textContent = `✗ Mismatch: ₱${totalBudget.toFixed(2)} vs ₱${totalBudgetAllocation.toFixed(2)}`;
          budgetMatchStatusElement.className = 'text-xs text-red-600 mt-1 font-medium';
        }
      }
      
      console.log('Updated totalBudgetElement to:', totalBudgetElement.textContent);
    } else {
      console.error('totalBudgetElement not found!');
    }
    
    if (milestoneCountElement) {
      milestoneCountElement.textContent = milestoneCount;
      console.log('Updated milestoneCountElement to:', milestoneCountElement.textContent);
    } else {
      console.error('milestoneCountElement not found!');
    }
    
    // Validate total weight and disable/enable add milestone button
    if (addMilestoneButton) {
      if (totalWeight >= 100) {
        addMilestoneButton.disabled = true;
        addMilestoneButton.classList.add('opacity-50', 'cursor-not-allowed');
        addMilestoneButton.classList.remove('hover:bg-[#7A6219]');
        addMilestoneButton.title = 'Total weight cannot exceed 100%';
      } else {
        addMilestoneButton.disabled = false;
        addMilestoneButton.classList.remove('opacity-50', 'cursor-not-allowed');
        addMilestoneButton.classList.add('hover:bg-[#7A6219]');
        addMilestoneButton.title = 'Add Milestone';
      }
    }
    
    // Debug logging
    console.log('calculateTotals called:', {
      totalWeight,
      totalBudget,
      milestoneCount,
      weightInputsCount: weightInputs.length,
      budgetInputsCount: budgetInputs.length
    });
  };

  // Add milestone function - must be global and available immediately
  window.addMilestone = function() {
    const container = document.getElementById('createMilestonesContainer');
    if (!container) {
      console.error('createMilestonesContainer not found');
      return;
    }

    // Check if we can add more milestones (total weight < 100%)
    const currentWeightInputs = document.querySelectorAll('#createMilestonesContainer input[name*="milestones"][name*="[weight]"]');
    let currentTotalWeight = 0;
    currentWeightInputs.forEach(input => {
      currentTotalWeight += parseFloat(input.value) || 0;
    });
    
    if (currentTotalWeight >= 100) {
      alert('Total weight cannot exceed 100%. Please adjust existing milestone weights before adding a new one.');
      return;
    }

    // Use the global milestoneCounter
    if (typeof window.milestoneCounter === 'undefined') {
      window.milestoneCounter = 0;
    }
    window.milestoneCounter++;

                  const milestoneHtml = `
                <div id="milestone-${window.milestoneCounter}" class="bg-white border border-gray-200 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-200">
                  <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center gap-4">
                      <div class="bg-gradient-to-r from-[#92751F] to-[#7A6219] p-3 rounded-xl">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                        </svg>
                  </div>
                      <h4 class="text-2xl font-bold text-gray-800">Milestone ${window.milestoneCounter}</h4>
                </div>
                    <button type="button" onclick="window.removeMilestone(${window.milestoneCounter})" class="bg-red-50 hover:bg-red-100 p-3 rounded-xl text-red-500 hover:text-red-700 transition-all duration-200">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
              </div>
        
        <!-- Basic Milestone Information -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Milestone Name *</label>
            <input type="text" name="milestones[${window.milestoneCounter}][title]" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="e.g., Site Preparation" onchange="window.calculateTotals()">
            </div>

                <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Weight (%) *</label>
            <input type="number" name="milestones[${window.milestoneCounter}][weight]" required min="0" max="100" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="e.g., 20.00" onchange="window.updateMilestoneCalculations(${window.milestoneCounter})">
                </div>
                
                <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Planned Budget (₱) *</label>
            <input type="number" name="milestones[${window.milestoneCounter}][plannedBudget]" required min="0" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="e.g., 1250000" onchange="window.updateMilestoneCalculations(${window.milestoneCounter})">
                </div>
                
                <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Due Date *</label>
            <input type="date" name="milestones[${window.milestoneCounter}][dueDate]" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" onchange="window.updateTimelineEndDate(${window.milestoneCounter})">
                </div>
                
                <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea name="milestones[${window.milestoneCounter}][description]" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Detailed description of what this milestone accomplishes..."></textarea>
              </div>
            </div>

                          <!-- 3-Division Configuration -->
                  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <!-- Timeline Division -->
                    <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-6 border border-blue-200 shadow-lg">
                      <div class="flex items-center gap-3 mb-4">
                        <div class="bg-blue-500 p-2 rounded-lg">
                          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                          </svg>
                        </div>
                        <h5 class="text-lg font-bold text-blue-800">Timeline Division</h5>
                      </div>
            <div class="space-y-3">
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Weight (%)</label>
                <input type="number" name="milestones[${window.milestoneCounter}][timelineWeight]" min="0" max="100" step="0.01" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 bg-gray-50" placeholder="0.00" value="0.00" readonly>
                </div>
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Start Date</label>
                <input type="date" name="milestones[${window.milestoneCounter}][timelineStartDate]" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
                </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">End Date</label>
                <input type="date" name="milestones[${window.milestoneCounter}][timelineEndDate]" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500">
              </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Description</label>
                <textarea name="milestones[${window.milestoneCounter}][timelineDescription]" rows="2" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500" placeholder="Timeline activities and deliverables..."></textarea>
                </div>
              </div>
            </div>

          <!-- Budget Division -->
          <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-6 border border-green-200 shadow-lg">
            <div class="flex items-center gap-3 mb-4">
              <div class="bg-green-500 p-2 rounded-lg">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
              <h5 class="text-lg font-bold text-green-800">Budget Division</h5>
            </div>
            <div class="space-y-3">
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Weight (%)</label>
                <input type="number" name="milestones[${window.milestoneCounter}][budgetWeight]" min="0" max="100" step="0.01" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500 bg-gray-50" placeholder="0.00" value="0.00" readonly>
                </div>
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Planned Budget (₱)</label>
                <input type="number" name="milestones[${window.milestoneCounter}][budgetPlanned]" min="0" step="0.01" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500 bg-gray-50" placeholder="0.00" value="0.00" readonly>
                </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Breakdown Description</label>
                <textarea name="milestones[${window.milestoneCounter}][budgetBreakdown]" rows="2" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500" placeholder="Budget allocation breakdown..."></textarea>
                </div>
              </div>
            </div>

          <!-- Physical Division -->
          <div class="bg-gradient-to-br from-orange-50 to-orange-100 rounded-2xl p-6 border border-orange-200 shadow-lg">
            <div class="flex items-center gap-3 mb-4">
              <div class="bg-orange-500 p-2 rounded-lg">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
              <h5 class="text-lg font-bold text-orange-800">Physical Division</h5>
                </div>
            <div class="space-y-3">
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Weight (%)</label>
                <input type="number" name="milestones[${window.milestoneCounter}][physicalWeight]" min="0" max="100" step="0.01" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-orange-500 bg-gray-50" placeholder="0.00" value="0.00" readonly>
              </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Proof Types</label>
                <div id="proofTypes-${window.milestoneCounter}" class="space-y-2">
                  <div class="flex items-center gap-2">
                    <select name="milestones[${window.milestoneCounter}][physicalProofTypes][]" class="flex-1 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-orange-500">
                      <option value="form">Form</option>
                      <option value="video">Video</option>
                      <option value="image">Image</option>
                      <option value="document">Document</option>
                      <option value="report">Report</option>
                      <option value="audio">Audio</option>
                      <option value="presentation">Presentation</option>
                      <option value="certificate">Certificate</option>
                    </select>
                    <button type="button" onclick="window.addProofType(${window.milestoneCounter})" class="px-2 py-1 text-xs bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                </button>
              </div>
              </div>
            </div>
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Description</label>
                <textarea name="milestones[${window.milestoneCounter}][physicalDescription]" rows="2" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-orange-500" placeholder="Physical progress requirements..."></textarea>
                </div>
                </div>
                </div>
              </div>
            </div>
    `;
    
    container.insertAdjacentHTML('beforeend', milestoneHtml);
    
    // Only scroll to new milestone if it's not the first one (when modal opens)
    if (window.milestoneCounter > 1) {
      const addedMilestone = document.getElementById(`milestone-${window.milestoneCounter}`);
      if (addedMilestone) {
        addedMilestone.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    }
    
    // Update totals after adding milestone
    window.calculateTotals();
  };
</script>

<script>
  // Global variables
  window.milestoneCounter = 0;

  // Project service for API calls
  const projectService = {
    async createProject(projectData) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          return { success: false, error: 'Authentication token not found' };
        }
        
        const response = await fetch('http://localhost:3000/api/projects', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(projectData)
        });
        return await response.json();
      } catch (error) {
        console.error('Error creating project:', error);
        return { success: false, error: 'Network error' };
      }
    },

    async getProject(projectId) {
      try {
        const token = localStorage.getItem('token');
        
        if (!token) {
          console.error('No authentication token found');
          return { success: false, error: 'Authentication token not found' };
        }
        
        console.log('Fetching project with ID:', projectId);
        console.log('Using token:', token.substring(0, 20) + '...');
        
        const response = await fetch(`http://localhost:3000/api/projects/${projectId}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log('Response status:', response.status);
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          console.error('API error:', errorData);
          return { success: false, error: errorData.error || `HTTP ${response.status}: ${response.statusText}` };
        }
        
        const data = await response.json();
        console.log('Project data received:', data);
        return data;
      } catch (error) {
        console.error('Error fetching project:', error);
        return { success: false, error: 'Failed to fetch project: ' + error.message };
      }
    },

    async updateProject(projectId, projectData) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          return { success: false, error: 'Authentication token not found' };
        }
        
        const response = await fetch(`http://localhost:3000/api/projects/${projectId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(projectData)
        });
        return await response.json();
      } catch (error) {
        console.error('Error updating project:', error);
        return { success: false, error: 'Network error' };
      }
    },

    async deleteProject(projectId) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          return { success: false, error: 'Authentication token not found' };
        }
        
        const response = await fetch(`http://localhost:3000/api/projects/${projectId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        return await response.json();
      } catch (error) {
        console.error('Error deleting project:', error);
        return { success: false, error: 'Network error' };
      }
    }
  };

  // Global variables
  let currentEditingProject = null;

  // Modal functions - expose immediately to global scope
  window.openCreateProjectModal = function() {
    document.getElementById('createProjectModal').classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    // Ensure modal starts at the top
    const modalContent = document.querySelector('#createProjectModal .bg-white');
    if (modalContent) {
      modalContent.scrollTop = 0;
    }
    
    // Set implementing office name based on current user
    const implementingOfficeField = document.getElementById('implementingOfficeName');
    if (implementingOfficeField) {
      // Get current user data
      const userData = JSON.parse(localStorage.getItem('user') || '{}');
      const userName = userData.fullName || userData.name || '';
      
      // Map user name to correct office name
      let officeName = 'Municipal Engineer Office'; // Default
      
      if (userName.toLowerCase().includes('municipal engineer') || userName.toLowerCase().includes('meo')) {
        officeName = 'Municipal Engineer Office';
      } else if (userName.toLowerCase().includes('municipal agriculturist') || userName.toLowerCase().includes('mao')) {
        officeName = 'Municipal Agriculturist Office';
      } else if (userName.toLowerCase().includes('municipal general services') || userName.toLowerCase().includes('mgso')) {
        officeName = 'Municipal General Services Office';
      } else if (userName.toLowerCase().includes('municipal social welfare') || userName.toLowerCase().includes('mswdo')) {
        officeName = 'Municipal Social Welfare and Development Office';
      } else if (userName.toLowerCase().includes('municipal disaster') || userName.toLowerCase().includes('mdrrmo')) {
        officeName = 'Municipal Disaster and Risk Reduction Management Office';
      }
      
      implementingOfficeField.value = officeName;
    }
    
    // Generate project code
    const projectCodeField = document.getElementById('projectCodeField');
    if (projectCodeField) {
      const date = new Date();
      const year = date.getFullYear();
      const random = Math.floor(Math.random() * 1000000).toString().padStart(6, '0');
      projectCodeField.value = `PRJ-${year}-${random}`;
    }
    
    // Set current date automatically
    const createdDateField = document.querySelector('input[name="createdDate"]');
    if (createdDateField) {
      const today = new Date().toISOString().split('T')[0];
      createdDateField.value = today;
    }
    
    // Set up EIU partner field visibility
    window.setupEIUPartnerField();
    
    // Add initial milestone
    window.addMilestone();
    
    // Try to load saved project information
    setTimeout(() => {
      const hasLoaded = window.loadSavedProjectInformation();
      if (hasLoaded) {
        console.log('Saved project information loaded automatically');
      }
    }, 100);
  }

  window.closeCreateProjectModal = function() {
    try {
      const createModal = document.getElementById('createProjectModal');
      if (createModal) {
        createModal.classList.add('hidden');
    document.body.style.overflow = 'auto';
    
    // Reset form
    const form = document.getElementById('createProjectForm');
    if (form) {
      form.reset();
    }
    
    // Clear milestones
    const milestonesContainer = document.getElementById('milestonesContainer');
    if (milestonesContainer) {
      milestonesContainer.innerHTML = '';
    }
    
    // Reset counter
        if (typeof window.milestoneCounter !== 'undefined') {
          window.milestoneCounter = 0;
        }
    
    // Hide EIU field
    const eiuField = document.getElementById('eiuAccountField');
    if (eiuField) {
      eiuField.classList.add('hidden');
        }
      }
    } catch (error) {
      console.error('Error in closeCreateProjectModal:', error);
      // Fallback: try to hide all modals and reset body
      const allModals = document.querySelectorAll('.fixed');
      allModals.forEach(modal => modal.remove());
      document.body.style.overflow = 'auto';
    }
  }

  // Set up EIU partner field visibility - expose immediately to global scope
  window.setupEIUPartnerField = function() {
    const hasExternalPartnerCheckbox = document.getElementById('hasExternalPartner');
    const eiuFields = document.getElementById('eiuFields');
    
    if (hasExternalPartnerCheckbox && eiuFields) {
      hasExternalPartnerCheckbox.addEventListener('change', function() {
        if (this.checked) {
          eiuFields.classList.remove('hidden');
          const eiuInput = eiuFields.querySelector('input[name="eiuPersonnelId"]');
          if (eiuInput) eiuInput.required = true;
        } else {
          eiuFields.classList.add('hidden');
          const eiuInput = eiuFields.querySelector('input[name="eiuPersonnelId"]');
          if (eiuInput) {
            eiuInput.required = false;
            eiuInput.value = '';
          }
        }
      });
    }
  }

  // Validate EIU account - expose immediately to global scope
  window.validateEIUAccount = async function() {
    console.log('validateEIUAccount called');
    const eiuPersonnelId = document.getElementById('eiuPersonnelId').value;
    const validationMessage = document.getElementById('eiuValidationMessage');
    const verifyButton = document.querySelector('button[onclick="validateEIUAccount()"]');
    
    console.log('EIU Personnel ID:', eiuPersonnelId);
    console.log('Validation message element:', validationMessage);
    console.log('Verify button:', verifyButton);
    
    if (!eiuPersonnelId) {
      showValidationMessage('Please enter an EIU Personnel Account ID', 'error');
      return;
    }
    
    // Show loading state
    if (verifyButton) {
      verifyButton.disabled = true;
      verifyButton.innerHTML = `
        <svg class="animate-spin w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
      `;
    }
    
    try {
      // Get token from localStorage
      const token = localStorage.getItem('token');
      
      if (!token) {
        showValidationMessage('❌ Authentication token not found. Please log in again.', 'error');
        return;
      }
      
      console.log('Making API call to validate EIU account...');
      const response = await fetch(`http://localhost:3000/api/users/validate-eiu/${eiuPersonnelId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      
      console.log('API response status:', response.status);
      const data = await response.json();
      console.log('API response data:', data);
      
      if (response.ok && data.success) {
        showValidationMessage(`Valid EIU account: ${data.user.name}`, 'success');
      } else {
        showValidationMessage(`${data.error || 'Invalid EIU Personnel Account ID'}`, 'error');
      }
    } catch (error) {
      console.error('Validation error:', error);
      showValidationMessage('Error validating account. Please try again.', 'error');
    } finally {
      // Restore button state
      if (verifyButton) {
        verifyButton.disabled = false;
        verifyButton.innerHTML = `
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        `;
      }
    }
  }

  // Show validation message - expose immediately to global scope
  window.showValidationMessage = function(message, type) {
    const validationMessage = document.getElementById('eiuValidationMessage');
    if (validationMessage) {
      const icon = type === 'success' ? '✅' : '❌';
      validationMessage.innerHTML = `<div class="flex items-center gap-2"><span>${icon}</span><span>${message}</span></div>`;
      validationMessage.className = `mt-2 p-3 rounded-lg text-sm font-medium ${type === 'success' ? 'bg-green-50 text-green-700 border border-green-200' : 'bg-red-50 text-red-700 border border-red-200'}`;
      validationMessage.classList.remove('hidden');
    }
  }

  function openEditProjectModal() {
    console.log('Opening edit project modal...');
    const modal = document.getElementById('editProjectModal');
    if (!modal) {
      console.error('Edit project modal not found');
      return;
    }
    console.log('Modal found, removing hidden class...');
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    console.log('Modal should now be visible');
  }

  function closeEditProjectModal() {
    document.getElementById('editProjectModal').classList.add('hidden');
    document.body.style.overflow = 'auto';
    
    // Reset form
    const form = document.getElementById('editProjectForm');
    if (form) {
      form.reset();
    }
    
    // Clear milestones
    const milestonesContainer = document.getElementById('editMilestonesContainer');
    if (milestonesContainer) {
      milestonesContainer.innerHTML = '';
    }
    
    // Reset counter
        if (typeof window.milestoneCounter !== 'undefined') {
          window.milestoneCounter = 0;
        }
    currentEditingProject = null;
  }

  function openProjectDetailsModal() {
    console.log('Opening project details modal...');
    const modal = document.getElementById('projectDetailsModal');
    if (modal) {
      console.log('Modal element found, removing hidden class');
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      console.log('Modal should now be visible');
    } else {
      console.error('Project details modal element not found!');
    }
  }

  function testModal() {
    console.log('Testing modal...');
    const modal = document.getElementById('projectDetailsModal');
    if (modal) {
      console.log('Modal found, current classes:', modal.className);
      modal.classList.remove('hidden');
      console.log('Hidden class removed, new classes:', modal.className);
    } else {
      console.error('Modal not found!');
    }
  }

  function closeProjectDetailsModal() {
    document.getElementById('projectDetailsModal').classList.add('hidden');
    document.body.style.overflow = 'auto';
  }

  // Edit project function
  async function editProject(projectId) {
    console.log('editProject function called with ID:', projectId);
    try {
      const response = await projectService.getProjectById(projectId);
      console.log('Project service response:', response);
      
      if (response.success) {
        console.log('Project fetched successfully, setting currentEditingProject');
        currentEditingProject = response.project;
        console.log('Populating edit form...');
        populateEditForm(response.project);
        console.log('Opening edit modal...');
        openEditProjectModal();
      } else {
        console.error('Error fetching project:', response.error);
        alert('Error fetching project: ' + response.error);
      }
    } catch (error) {
      console.error('Error editing project:', error);
      alert('Error editing project. Please try again.');
    }
  }

  // View project details function
  async function viewProjectDetails(projectId) {
    try {
      console.log('Viewing project details for ID:', projectId);
      const response = await projectService.getProject(projectId);
      
      console.log('Project service response:', response);
      console.log('Response structure:', {
        success: response.success,
        hasProject: !!response.project,
        projectKeys: response.project ? Object.keys(response.project) : 'No project',
        hasProgress: !!response.progress,
        progressKeys: response.progress ? Object.keys(response.progress) : 'No progress'
      });
      
      if (response.success) {
        console.log('Opening project details modal...');
        populateProjectDetails(response);
        openProjectDetailsModal();
      } else {
        console.error('Project service error:', response.error);
        alert('Error fetching project details: ' + response.error);
      }
    } catch (error) {
      console.error('Error viewing project details:', error);
      alert('Error viewing project details: ' + error.message);
    }
  }

  // Populate edit form with project data
  function populateEditForm(project) {
    console.log('Populating edit form with project:', project);
    const form = document.getElementById('editProjectForm');
    if (!form) {
      console.error('Edit form not found');
      return;
    }

    // Populate basic fields
    try {
      const fields = [
        { selector: 'input[name="projectCode"]', value: project.projectCode },
        { selector: 'input[name="name"]', value: project.name },
        { selector: 'input[name="implementingOfficeName"]', value: project.implementingOfficeName },
        { selector: 'select[name="category"]', value: project.category },
        { selector: 'select[name="priority"]', value: project.priority },
        { selector: 'select[name="fundingSource"]', value: project.fundingSource },
        { selector: 'input[name="createdDate"]', value: project.createdDate },
        { selector: 'textarea[name="description"]', value: project.description },
        { selector: 'textarea[name="expectedOutputs"]', value: project.expectedOutputs },
        { selector: 'textarea[name="targetBeneficiaries"]', value: project.targetBeneficiaries },
        { selector: 'input[name="eiuPersonnelId"]', value: project.eiuPersonnelId },
        { selector: 'input[name="startDate"]', value: project.startDate },
        { selector: 'input[name="endDate"]', value: project.endDate },

        { selector: 'textarea[name="timelineMilestones"]', value: project.timelineMilestones },
        { selector: 'input[name="totalBudget"]', value: project.totalBudget },

        { selector: 'textarea[name="budgetBreakdown"]', value: project.budgetBreakdown },

        { selector: 'textarea[name="requiredDocumentation"]', value: project.requiredDocumentation },
        { selector: 'textarea[name="physicalProgressRequirements"]', value: project.physicalProgressRequirements },
        { selector: 'input[name="projectManager"]', value: project.projectManager },
        { selector: 'input[name="contactNumber"]', value: project.contactNumber },
        { selector: 'textarea[name="specialRequirements"]', value: project.specialRequirements }
      ];

      fields.forEach(field => {
        const element = form.querySelector(field.selector);
        if (element) {
          if (field.selector.includes('checkbox')) {
            element.checked = field.value || false;
          } else {
            element.value = field.value || '';
          }
        } else {
          console.warn(`Field not found: ${field.selector}`);
        }
      });

      // Handle checkbox separately
      const hasExternalPartnerCheckbox = form.querySelector('input[name="hasExternalPartner"]');
      if (hasExternalPartnerCheckbox) {
        hasExternalPartnerCheckbox.checked = project.hasExternalPartner || false;
      }
    } catch (error) {
      console.error('Error populating form fields:', error);
    }

    // Populate location (barangays)
    const locationContainer = document.getElementById('editBarangayContainer');
    if (locationContainer && project.location) {
      locationContainer.innerHTML = '';
      // Handle location as comma-separated string
      const locations = project.location.split(',').map(loc => loc.trim()).filter(loc => loc);
      
      if (locations.length === 0) {
        // If no locations, add one empty dropdown
        const locationDiv = document.createElement('div');
        locationDiv.className = 'flex gap-2';
        locationDiv.innerHTML = `
          <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent barangay-select">
            <option value="">Select Barangay</option>
            <option value="Various Barangay">Various Barangay</option>
            <option value="Alipit">Alipit</option>
            <option value="Bagumbayan">Bagumbayan</option>
            <option value="Bubukal">Bubukal</option>
            <option value="Calios">Calios</option>
            <option value="Duhat">Duhat</option>
            <option value="Gatid">Gatid</option>
            <option value="Jasaan">Jasaan</option>
            <option value="Labuin">Labuin</option>
            <option value="Malinao">Malinao</option>
            <option value="Oogong">Oogong</option>
            <option value="Pagsawitan">Pagsawitan</option>
            <option value="Palasan">Palasan</option>
            <option value="Patimbao">Patimbao</option>
            <option value="Poblacion I">Poblacion I</option>
            <option value="Poblacion II">Poblacion II</option>
            <option value="Poblacion III">Poblacion III</option>
            <option value="Poblacion IV">Poblacion IV</option>
            <option value="Poblacion V">Poblacion V</option>
            <option value="San Jose">San Jose</option>
            <option value="San Juan">San Juan</option>
            <option value="San Pablo Norte">San Pablo Norte</option>
            <option value="San Pablo Sur">San Pablo Sur</option>
            <option value="Santisima Cruz">Santisima Cruz</option>
            <option value="Santo Angel Central">Santo Angel Central</option>
            <option value="Santo Angel Norte">Santo Angel Norte</option>
            <option value="Santo Angel Sur">Santo Angel Sur</option>
          </select>
          <button type="button" onclick="addEditBarangayDropdown()" class="px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors text-sm">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
          </button>
        `;
        locationContainer.appendChild(locationDiv);
      } else {
        locations.forEach((location, index) => {
          const locationDiv = document.createElement('div');
          locationDiv.className = 'flex gap-2';
          locationDiv.innerHTML = `
            <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent barangay-select">
              <option value="">Select Barangay</option>
              <option value="Various Barangay" ${location === 'Various Barangay' ? 'selected' : ''}>Various Barangay</option>
              <option value="Alipit" ${location === 'Alipit' ? 'selected' : ''}>Alipit</option>
              <option value="Bagumbayan" ${location === 'Bagumbayan' ? 'selected' : ''}>Bagumbayan</option>
              <option value="Bubukal" ${location === 'Bubukal' ? 'selected' : ''}>Bubukal</option>
              <option value="Calios" ${location === 'Calios' ? 'selected' : ''}>Calios</option>
              <option value="Duhat" ${location === 'Duhat' ? 'selected' : ''}>Duhat</option>
              <option value="Gatid" ${location === 'Gatid' ? 'selected' : ''}>Gatid</option>
              <option value="Jasaan" ${location === 'Jasaan' ? 'selected' : ''}>Jasaan</option>
              <option value="Labuin" ${location === 'Labuin' ? 'selected' : ''}>Labuin</option>
              <option value="Malinao" ${location === 'Malinao' ? 'selected' : ''}>Malinao</option>
              <option value="Oogong" ${location === 'Oogong' ? 'selected' : ''}>Oogong</option>
              <option value="Pagsawitan" ${location === 'Pagsawitan' ? 'selected' : ''}>Pagsawitan</option>
              <option value="Palasan" ${location === 'Palasan' ? 'selected' : ''}>Palasan</option>
              <option value="Patimbao" ${location === 'Patimbao' ? 'selected' : ''}>Patimbao</option>
              <option value="Poblacion I" ${location === 'Poblacion I' ? 'selected' : ''}>Poblacion I</option>
              <option value="Poblacion II" ${location === 'Poblacion II' ? 'selected' : ''}>Poblacion II</option>
              <option value="Poblacion III" ${location === 'Poblacion III' ? 'selected' : ''}>Poblacion III</option>
              <option value="Poblacion IV" ${location === 'Poblacion IV' ? 'selected' : ''}>Poblacion IV</option>
              <option value="Poblacion V" ${location === 'Poblacion V' ? 'selected' : ''}>Poblacion V</option>
              <option value="San Jose" ${location === 'San Jose' ? 'selected' : ''}>San Jose</option>
              <option value="San Juan" ${location === 'San Juan' ? 'selected' : ''}>San Juan</option>
              <option value="San Pablo Norte" ${location === 'San Pablo Norte' ? 'selected' : ''}>San Pablo Norte</option>
              <option value="San Pablo Sur" ${location === 'San Pablo Sur' ? 'selected' : ''}>San Pablo Sur</option>
              <option value="Santisima Cruz" ${location === 'Santisima Cruz' ? 'selected' : ''}>Santisima Cruz</option>
              <option value="Santo Angel Central" ${location === 'Santo Angel Central' ? 'selected' : ''}>Santo Angel Central</option>
              <option value="Santo Angel Norte" ${location === 'Santo Angel Norte' ? 'selected' : ''}>Santo Angel Norte</option>
              <option value="Santo Angel Sur" ${location === 'Santo Angel Sur' ? 'selected' : ''}>Santo Angel Sur</option>
            </select>
            ${index === 0 ? `
              <button type="button" onclick="addEditBarangayDropdown()" class="px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
              </button>
            ` : `
              <button type="button" onclick="removeEditBarangayDropdown(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            `}
          `;
          locationContainer.appendChild(locationDiv);
        });
      }
    }

    // Populate milestones
    const milestonesContainer = document.getElementById('editMilestonesContainer');
    if (milestonesContainer && project.milestones && project.milestones.length > 0) {
      milestonesContainer.innerHTML = '';
      project.milestones.forEach((milestone, index) => {
        addEditMilestone(milestone);
      });
    } else {
      // Add at least one empty milestone
      addEditMilestone();
    }
  }

  // Populate project details modal
  function populateProjectDetails(project) {
    console.log('Populating project details with:', project);
    console.log('Project type:', typeof project);
    console.log('Project keys:', Object.keys(project));
    
    // Handle nested project structure from API response
    // The backend returns: { success: true, project: { project: {...}, progress: {...}, milestones: {...} } }
    const actualProject = project.project?.project || project.project || project;
    const progress = project.project?.progress || project.progress || {
      // Use proper field mapping for progress data
      internalTimeline: project.project?.progress?.internalTimeline || project.progress?.internalTimeline || project.project?.timelineProgress || 0,
      internalBudget: project.project?.progress?.internalBudget || project.progress?.internalBudget || project.project?.budgetProgress || 0,
      internalPhysical: project.project?.progress?.internalPhysical || project.progress?.internalPhysical || project.project?.physicalProgress || 0,
      overall: project.project?.progress?.overall || project.progress?.overall || project.project?.overallProgress || 0
    };
    
    console.log('Actual project data:', actualProject);
    console.log('Actual project type:', typeof actualProject);
    console.log('Actual project keys:', Object.keys(actualProject));
    console.log('Progress data:', progress);
    console.log('Progress type:', typeof progress);
    console.log('Progress keys:', Object.keys(progress));
    
    // Basic project info
    document.getElementById('detailProjectName').textContent = actualProject.name || '-';
    document.getElementById('detailProjectCode').textContent = actualProject.projectCode || '-';
    document.getElementById('detailImplementingOffice').textContent = actualProject.implementingOfficeName || actualProject.implementingOffice || '-';
    document.getElementById('detailLocation').textContent = Array.isArray(actualProject.location) ? actualProject.location.join(', ') : actualProject.location || '-';
    document.getElementById('detailEIUPartner').textContent = actualProject.eiuPartner || actualProject.eiuPersonnelName || '-';
    
    console.log('Setting EIU Partner:');
    console.log('- eiuPartner:', actualProject.eiuPartner);
    console.log('- eiuPersonnelName:', actualProject.eiuPersonnelName);
    console.log('- eiuPersonnelId:', actualProject.eiuPersonnelId);
    console.log('- Final EIU Partner text:', actualProject.eiuPartner || actualProject.eiuPersonnelName || '-');
    document.getElementById('detailStartDate').textContent = actualProject.startDate ? new Date(actualProject.startDate).toLocaleDateString() : '-';
    document.getElementById('detailEndDate').textContent = actualProject.endDate ? new Date(actualProject.endDate).toLocaleDateString() : '-';
    
    // Project description fields
    document.getElementById('detailDescription').textContent = actualProject.description || '-';
    document.getElementById('detailExpectedOutputs').textContent = actualProject.expectedOutputs || '-';
    document.getElementById('detailTargetBeneficiaries').textContent = actualProject.targetBeneficiaries || '-';
    
    console.log('Setting description fields:');
    console.log('- Description:', actualProject.description);
    console.log('- Expected Outputs:', actualProject.expectedOutputs);
    console.log('- Target Beneficiaries:', actualProject.targetBeneficiaries);
    console.log('- Expected Outputs type:', typeof actualProject.expectedOutputs);
    console.log('- Target Beneficiaries type:', typeof actualProject.targetBeneficiaries);
    
    console.log('Setting project details:');
    console.log('- Name:', actualProject.name);
    console.log('- Code:', actualProject.projectCode);
    console.log('- Office:', actualProject.implementingOfficeName);
    console.log('- Location:', actualProject.location);
    console.log('- EIU Partner:', actualProject.eiuPartner);
    console.log('- Start Date:', actualProject.startDate);
    console.log('- End Date:', actualProject.endDate);
    console.log('- Description:', actualProject.description);
    console.log('- Expected Outputs:', actualProject.expectedOutputs);
    console.log('- Target Beneficiaries:', actualProject.targetBeneficiaries);
    
    // Status based on approval logic (consistent with other modules)
    let statusText, statusClass;
    if (actualProject.status && actualProject.status.toLowerCase() === 'completed') {
      statusText = 'COMPLETE';
      statusClass = 'bg-green-100 text-green-700';
    } else if (actualProject.approvedBySecretariat === true || actualProject.approvedBySecretariat === 'true' || actualProject.approvedBySecretariat === 1) {
      statusText = 'ONGOING';
      statusClass = 'bg-blue-100 text-blue-700';
    } else {
      statusText = 'PENDING';
      statusClass = 'bg-yellow-100 text-yellow-700';
    }
    
    const statusElement = document.getElementById('detailStatus');
    statusElement.textContent = statusText;
    statusElement.className = `inline-block px-2 py-1 text-xs font-medium rounded-full ${statusClass}`;
    
    document.getElementById('detailCreatedDate').textContent = actualProject.createdDate || '-';
    
    // Budget info - calculate from actual project data
    const totalBudget = actualProject.totalBudget || 0;
    const amountSpent = actualProject.amountSpent || 0;
    const remainingBudget = totalBudget - amountSpent;
    const budgetUtilization = totalBudget > 0 ? (amountSpent / totalBudget) * 100 : 0;
    
    document.getElementById('detailTotalBudget').textContent = `₱${totalBudget.toLocaleString()}`;
    document.getElementById('detailAmountSpent').textContent = `₱${amountSpent.toLocaleString()}`;
    document.getElementById('detailRemainingBudget').textContent = `₱${remainingBudget.toLocaleString()}`;
    document.getElementById('detailBudgetUtilization').textContent = `${budgetUtilization.toFixed(2)}% utilized`;
    document.getElementById('detailFundingSource').textContent = actualProject.fundingSource || '-';
    
    console.log('Setting budget details:');
    console.log('- Total Budget:', totalBudget);
    console.log('- Amount Spent:', amountSpent);
    console.log('- Funding Source:', actualProject.fundingSource);
    
    // Progress info - use calculated progress from ProgressCalculationService with proper number conversion
    console.log('🔍 Overall progress calculation:');
    console.log('  - progress.overall (raw):', progress.overall, 'type:', typeof progress.overall);
    console.log('  - progress.overallProgress (raw):', progress.overallProgress, 'type:', typeof progress.overallProgress);
    console.log('  - actualProject.automatedProgress (raw):', actualProject.automatedProgress, 'type:', typeof actualProject.automatedProgress);
    
    const overallProgress = parseFloat(progress.overall || progress.overallProgress || actualProject.automatedProgress || 0) || 0;
    console.log('  - parseFloat result:', parseFloat(progress.overall || progress.overallProgress || actualProject.automatedProgress || 0));
    console.log('  - final overallProgress:', overallProgress);
    
    // Use internal division progress (percentage within each division) instead of contribution to overall
    const timelineProgress = parseFloat(progress.internalTimeline || progress.timeline || progress.timelineProgress || actualProject.timelineProgress || 0) || 0;
    const budgetProgress = parseFloat(progress.internalBudget || progress.budget || progress.budgetProgress || actualProject.budgetProgress || 0) || 0;
    const physicalProgress = parseFloat(progress.internalPhysical || progress.physical || progress.physicalProgress || actualProject.physicalProgress || 0) || 0;
    
    document.getElementById('detailOverallProgress').textContent = `${overallProgress.toFixed(2)}%`;
    document.getElementById('detailTimelineProgress').textContent = `${timelineProgress.toFixed(2)}%`;
    document.getElementById('detailBudgetProgress').textContent = `${budgetProgress.toFixed(2)}%`;
    document.getElementById('detailPhysicalProgress').textContent = `${physicalProgress.toFixed(2)}%`;
    
    console.log('Setting progress details:');
    console.log('- Overall Progress:', overallProgress);
    console.log('- Timeline Progress:', timelineProgress);
    console.log('- Budget Progress:', budgetProgress);
    console.log('- Physical Progress:', physicalProgress);
    console.log('Raw progress data received:', progress);
    console.log('Available progress keys:', Object.keys(progress || {}));
    console.log('🔍 Detailed progress analysis:');
    console.log('  - progress.overall:', progress.overall);
    console.log('  - progress.overallProgress:', progress.overallProgress);
    console.log('  - progress.internalTimeline:', progress.internalTimeline);
    console.log('  - progress.timeline:', progress.timeline);
    console.log('  - progress.timelineProgress:', progress.timelineProgress);
    console.log('  - progress.internalBudget:', progress.internalBudget);
    console.log('  - progress.budget:', progress.budget);
    console.log('  - progress.budgetProgress:', progress.budgetProgress);
    console.log('  - progress.internalPhysical:', progress.internalPhysical);
    console.log('  - progress.physical:', progress.physical);
    console.log('  - progress.physicalProgress:', progress.physicalProgress);
    
    // Milestones with 3-Division Structure
    const milestonesContainer = document.getElementById('detailMilestonesContainer');
    if (milestonesContainer) {
      // Handle nested milestones structure from API response
      const milestones = project.project?.milestones || project.milestones || [];
      console.log('Milestones data:', milestones);
      
      if (milestones && milestones.length > 0) {
        milestonesContainer.innerHTML = milestones.map(milestone => `
          <div class="bg-white rounded-lg border border-gray-200 p-6 mb-6">
            <div class="flex items-center justify-between mb-4">
              <h4 class="text-lg font-semibold text-gray-800">${milestone.title}</h4>
              <span class="px-3 py-1 text-sm font-medium rounded-full ${
                milestone.status === 'completed' ? 'bg-green-100 text-green-800' :
                milestone.status === 'in_progress' ? 'bg-blue-100 text-blue-800' :
                milestone.status === 'delayed' ? 'bg-red-100 text-red-800' :
                'bg-yellow-100 text-yellow-800'
              }">${milestone.status ? milestone.status.replace('_', ' ').charAt(0).toUpperCase() + milestone.status.replace('_', ' ').slice(1) : 'Pending'}</span>
            </div>
            
            <!-- Basic Milestone Info -->
            <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6 text-sm">
              <div>
                <span class="text-gray-600">Weight:</span>
                <span class="font-semibold ml-1">${milestone.weight}%</span>
              </div>
              <div>
                <span class="text-gray-600">Budget:</span>
                <span class="font-semibold ml-1">₱${parseFloat(milestone.plannedBudget || 0).toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}</span>
              </div>
              <div>
                <span class="text-gray-600">Due Date:</span>
                <span class="font-semibold ml-1">${milestone.dueDate ? new Date(milestone.dueDate).toLocaleDateString() : '-'}</span>
              </div>
              <div>
                <span class="text-gray-600">Priority:</span>
                <span class="font-semibold ml-1">${milestone.priority ? milestone.priority.charAt(0).toUpperCase() + milestone.priority.slice(1) : 'Medium'}</span>
              </div>
            </div>
            
            ${milestone.description ? `<p class="text-gray-600 mb-4">${milestone.description}</p>` : ''}
            
            <!-- 3-Division Display -->
            <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
              <!-- Timeline Division -->
              <div class="bg-blue-50 rounded-lg p-4">
                <h5 class="font-semibold text-blue-800 mb-3 flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  Timeline Division
                </h5>
                <div class="space-y-2 text-xs">
                  <div>
                    <span class="text-gray-600">Weight:</span>
                    <span class="font-semibold">${milestone.timelineWeight || 33.33}%</span>
              </div>
                  <div>
                    <span class="text-gray-600">Status:</span>
                    <span class="px-2 py-1 text-xs rounded-full ${
                      milestone.timelineStatus === 'approved' ? 'bg-green-100 text-green-800' :
                      milestone.timelineStatus === 'completed' ? 'bg-blue-100 text-blue-800' :
                      milestone.timelineStatus === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-gray-100 text-gray-800'
                    }">${milestone.timelineStatus ? milestone.timelineStatus.replace('_', ' ').charAt(0).toUpperCase() + milestone.timelineStatus.replace('_', ' ').slice(1) : 'Pending'}</span>
                  </div>
                  ${milestone.timelineDescription ? `<div><span class="text-gray-600">Description:</span><p class="mt-1">${milestone.timelineDescription}</p></div>` : ''}
                </div>
              </div>

              <!-- Budget Division -->
              <div class="bg-green-50 rounded-lg p-4">
                <h5 class="font-semibold text-green-800 mb-3 flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                  </svg>
                  Budget Division
                </h5>
                <div class="space-y-2 text-xs">
                  <div>
                    <span class="text-gray-600">Weight:</span>
                    <span class="font-semibold">${milestone.budgetWeight || 33.33}%</span>
                  </div>
                  <div>
                    <span class="text-gray-600">Status:</span>
                    <span class="px-2 py-1 text-xs rounded-full ${
                      milestone.budgetStatus === 'approved' ? 'bg-green-100 text-green-800' :
                      milestone.budgetStatus === 'completed' ? 'bg-blue-100 text-blue-800' :
                      milestone.budgetStatus === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-gray-100 text-gray-800'
                    }">${milestone.budgetStatus ? milestone.budgetStatus.replace('_', ' ').charAt(0).toUpperCase() + milestone.budgetStatus.replace('_', ' ').slice(1) : 'Pending'}</span>
                  </div>
                  ${milestone.budgetBreakdown ? `<div><span class="text-gray-600">Breakdown:</span><p class="mt-1">${milestone.budgetBreakdown}</p></div>` : ''}
                </div>
              </div>

              <!-- Physical Division -->
              <div class="bg-purple-50 rounded-lg p-4">
                <h5 class="font-semibold text-purple-800 mb-3 flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                  Physical Division
                </h5>
                <div class="space-y-2 text-xs">
                  <div>
                    <span class="text-gray-600">Weight:</span>
                    <span class="font-semibold">${milestone.physicalWeight || 33.33}%</span>
                  </div>
                  <div>
                    <span class="text-gray-600">Status:</span>
                    <span class="px-2 py-1 text-xs rounded-full ${
                      milestone.physicalStatus === 'approved' ? 'bg-green-100 text-green-800' :
                      milestone.physicalStatus === 'completed' ? 'bg-blue-100 text-blue-800' :
                      milestone.physicalStatus === 'in_progress' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-gray-100 text-gray-800'
                    }">${milestone.physicalStatus ? milestone.physicalStatus.replace('_', ' ').charAt(0).toUpperCase() + milestone.physicalStatus.replace('_', ' ').slice(1) : 'Pending'}</span>
                  </div>
                  <div>
                    <span class="text-gray-600">Proof Type:</span>
                    <span class="font-semibold">${milestone.physicalProofType ? milestone.physicalProofType.charAt(0).toUpperCase() + milestone.physicalProofType.slice(1) : 'Form'}</span>
                  </div>
                  ${milestone.physicalDescription ? `<div><span class="text-gray-600">Description:</span><p class="mt-1">${milestone.physicalDescription}</p></div>` : ''}
                </div>
              </div>
            </div>
          </div>
        `).join('');
      } else {
        milestonesContainer.innerHTML = '<p class="text-gray-500 text-center py-4">No milestones defined for this project.</p>';
      }
    }
  }

  // Add milestone to edit form
  function addEditMilestone(existingMilestone = null) {
    const container = document.getElementById('editMilestonesContainer');
    if (!container) return;

    milestoneCounter++;
    const milestoneHtml = `
      <div id="edit-milestone-${milestoneCounter}" class="bg-white border border-gray-200 rounded-lg p-4 mb-4">
        <div class="flex items-center justify-between mb-4">
          <h4 class="font-semibold text-gray-800">Milestone ${milestoneCounter}</h4>
          <button type="button" onclick="removeEditMilestone(${milestoneCounter})" class="text-red-500 hover:text-red-700">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Milestone Name *</label>
            <input type="text" name="editMilestones[${milestoneCounter}][title]" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="e.g., Site Preparation" value="${existingMilestone ? existingMilestone.title : ''}">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Weight (%) *</label>
            <input type="number" name="editMilestones[${milestoneCounter}][weight]" required min="0" max="100" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="e.g., 25.00" onchange="calculateEditTotals()" value="${existingMilestone ? existingMilestone.weight : ''}">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Planned Budget (₱) *</label>
            <input type="number" name="editMilestones[${milestoneCounter}][plannedBudget]" required min="0" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="e.g., 1250000" onchange="calculateEditTotals()" value="${existingMilestone ? existingMilestone.plannedBudget : ''}">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Planned Start Date</label>
            <input type="date" name="editMilestones[${milestoneCounter}][plannedStartDate]" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" value="${existingMilestone ? existingMilestone.plannedStartDate : ''}">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Planned End Date</label>
            <input type="date" name="editMilestones[${milestoneCounter}][plannedEndDate]" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" value="${existingMilestone ? existingMilestone.plannedEndDate : ''}">
          </div>
          
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea name="editMilestones[${milestoneCounter}][description]" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent" placeholder="Detailed description of what this milestone accomplishes...">${existingMilestone ? existingMilestone.description : ''}</textarea>
          </div>
        </div>
      </div>
    `;
    
    container.insertAdjacentHTML('beforeend', milestoneHtml);
    calculateEditTotals();
  }

  function removeEditMilestone(id) {
    const milestone = document.getElementById(`edit-milestone-${id}`);
    if (milestone) {
      milestone.remove();
      calculateEditTotals();
    }
  }

  function calculateEditTotals() {
    const weightInputs = document.querySelectorAll('input[name*="editMilestones"][name*="[weight]"]');
    const budgetInputs = document.querySelectorAll('input[name*="editMilestones"][name*="[plannedBudget]"]');
    
    let totalWeight = 0;
    let totalBudget = 0;
    
    weightInputs.forEach(input => {
      totalWeight += parseFloat(input.value) || 0;
    });
    
    budgetInputs.forEach(input => {
      totalBudget += parseFloat(input.value) || 0;
    });
    
    const totalWeightElement = document.getElementById('editTotalWeight');
    const totalBudgetElement = document.getElementById('editTotalMilestoneBudget');
    
    if (totalWeightElement) {
      totalWeightElement.textContent = `${totalWeight.toFixed(2)}%`;
      totalWeightElement.className = totalWeight === 100 ? 'text-lg font-bold text-green-600' : 'text-lg font-bold text-red-600';
    }
    
    if (totalBudgetElement) {
      totalBudgetElement.textContent = `₱${totalBudget.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    }
  }

  // Get edit milestones data
  function getEditMilestonesData() {
    const milestones = [];
    const milestoneElements = document.querySelectorAll('[id^="edit-milestone-"]');
    
    milestoneElements.forEach(element => {
      const id = element.id.replace('edit-milestone-', '');
      const title = element.querySelector(`input[name="editMilestones[${id}][title]"]`)?.value;
      const weight = element.querySelector(`input[name="editMilestones[${id}][weight]"]`)?.value;
      const plannedBudget = element.querySelector(`input[name="editMilestones[${id}][plannedBudget]"]`)?.value;
      const plannedStartDate = element.querySelector(`input[name="editMilestones[${id}][plannedStartDate]"]`)?.value;
      const plannedEndDate = element.querySelector(`input[name="editMilestones[${id}][plannedEndDate]"]`)?.value;
      const description = element.querySelector(`textarea[name="editMilestones[${id}][description]"]`)?.value;
      
      if (title && weight && plannedBudget) {
        milestones.push({
          title,
          weight: parseFloat(weight),
          plannedBudget: parseFloat(plannedBudget),
          plannedStartDate: plannedStartDate || null,
          plannedEndDate: plannedEndDate || null,
          description: description || ''
        });
      }
    });
    
    return milestones;
  }

  // Comprehensive validation function
  window.validateProjectForm = function() {
    const form = document.getElementById('createProjectForm');
    const formData = new FormData(form);
    const errors = [];
    
    // Required fields validation
    const requiredFields = [
      { name: 'projectCode', label: 'Project Code' },
      { name: 'name', label: 'Project/Program Title' },
      { name: 'implementingOfficeName', label: 'Implementing Office' },
      { name: 'category', label: 'Category' },
      { name: 'priority', label: 'Priority Level' },
      { name: 'fundingSource', label: 'Funding Source' },
      { name: 'createdDate', label: 'Created Date' },
      { name: 'description', label: 'Project Description' },
      { name: 'startDate', label: 'Start Date' },
      { name: 'endDate', label: 'End Date' },
      { name: 'totalBudget', label: 'Total Budget Allocation' }
    ];
    
    // Check required fields
    requiredFields.forEach(field => {
      const value = formData.get(field.name);
      if (!value || value.trim() === '') {
        errors.push(`❌ ${field.label} is required`);
      }
    });
    
    // Validate location/barangay
    const barangaySelects = document.querySelectorAll('#createBarangayContainer select[name="location[]"]');
    let hasBarangaySelected = false;
    barangaySelects.forEach(select => {
      if (select.value && select.value.trim() !== '') {
        hasBarangaySelected = true;
      }
    });
    if (!hasBarangaySelected) {
      errors.push('❌ At least one Location/Barangay must be selected');
    }
    
    // Validate EIU Personnel ID if external partner is selected
    const hasExternalPartner = formData.get('hasExternalPartner') === 'true';
    const eiuPersonnelId = formData.get('eiuPersonnelId');
    if (hasExternalPartner && (!eiuPersonnelId || eiuPersonnelId.trim() === '')) {
      errors.push('❌ EIU Unique User ID is required when external partner is selected');
    }
    
    // Validate milestones
    const milestones = getMilestonesData();
    if (milestones.length === 0) {
      errors.push('❌ At least one milestone must be added to the project');
    } else {
      // Validate each milestone
      milestones.forEach((milestone, index) => {
        if (!milestone.title || milestone.title.trim() === '') {
          errors.push(`❌ Milestone ${index + 1}: Title is required`);
        }
        if (!milestone.weight || milestone.weight <= 0) {
          errors.push(`❌ Milestone ${index + 1}: Weight must be greater than 0%`);
        }
        if (!milestone.plannedBudget || milestone.plannedBudget <= 0) {
          errors.push(`❌ Milestone ${index + 1}: Planned Budget must be greater than ₱0`);
        }
        if (!milestone.dueDate) {
          errors.push(`❌ Milestone ${index + 1}: Due Date is required`);
        }
      });
      
      // Validate total weight
      const totalWeight = milestones.reduce((sum, m) => sum + m.weight, 0);
      if (Math.abs(totalWeight - 100) > 0.01) {
        errors.push(`❌ Total milestone weight must equal 100%. Current total: ${totalWeight.toFixed(2)}%`);
      }
      
      // Validate milestone budget matches total budget allocation
      const totalMilestoneBudget = milestones.reduce((sum, m) => sum + m.plannedBudget, 0);
      const totalBudgetAllocation = parseFloat(formData.get('totalBudget')) || 0;
      
      if (Math.abs(totalMilestoneBudget - totalBudgetAllocation) > 0.01) {
        errors.push(`❌ Total milestone budget (₱${totalMilestoneBudget.toFixed(2)}) must match Total Budget Allocation (₱${totalBudgetAllocation.toFixed(2)})`);
      }
    }
    
    // Validate dates
    const startDate = formData.get('startDate');
    const endDate = formData.get('endDate');
    if (startDate && endDate && new Date(startDate) >= new Date(endDate)) {
      errors.push('❌ End Date must be after Start Date');
    }
    
    // Validate budget
    const totalBudget = parseFloat(formData.get('totalBudget')) || 0;
    if (totalBudget <= 0) {
      errors.push('❌ Total Budget Allocation must be greater than ₱0');
    }
    
    return errors;
  };

  // Show validation errors in a modal
  window.showValidationErrors = function(errors) {
    const errorModal = document.createElement('div');
    errorModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
    errorModal.innerHTML = `
      <div class="bg-white rounded-2xl p-8 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
        <div class="flex items-center gap-4 mb-6">
          <div class="bg-red-500 p-3 rounded-xl">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-2xl font-bold text-gray-800">Validation Errors</h3>
            <p class="text-gray-600">Please fix the following issues before creating the project:</p>
          </div>
        </div>
        
        <div class="space-y-3 mb-6">
          ${errors.map(error => `<div class="flex items-start gap-3 p-3 bg-red-50 border border-red-200 rounded-lg">
            <span class="text-red-500 mt-0.5">${error}</span>
          </div>`).join('')}
        </div>
        
        <div class="flex justify-end">
          <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-gray-500 text-white rounded-xl hover:bg-gray-600 transition-all duration-200 font-semibold">
            Close
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(errorModal);
  };

  // Check if form has unsaved changes
  window.hasUnsavedChanges = function() {
    const form = document.getElementById('createProjectForm');
    const formData = new FormData(form);
    
    // Check if any field has been filled
    const fields = ['projectCode', 'name', 'description', 'expectedOutputs', 'targetBeneficiaries', 'startDate', 'endDate', 'totalBudget', 'budgetBreakdown', 'physicalProgressRequirements', 'projectManager', 'contactNumber', 'specialRequirements'];
    
    for (let field of fields) {
      const value = formData.get(field);
      if (value && value.trim() !== '') {
        return true;
      }
    }
    
    // Check if EIU partner is selected
    const hasExternalPartner = formData.get('hasExternalPartner') === 'true';
    if (hasExternalPartner) {
      return true;
    }
    
    // Check if milestones exist
    const milestones = getMilestonesData();
    if (milestones.length > 0) {
      return true;
    }
    
    // Check if barangay is selected
    const barangaySelects = document.querySelectorAll('#createBarangayContainer select[name="location[]"]');
    for (let select of barangaySelects) {
      if (select.value && select.value.trim() !== '') {
        return true;
      }
    }
    
    return false;
  };

  // Show confirmation dialog for canceling
  window.showCancelConfirmation = function() {
    if (!window.hasUnsavedChanges()) {
      window.closeCreateProjectModal();
      return;
    }
    
    const confirmModal = document.createElement('div');
    confirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
    confirmModal.setAttribute('data-modal-type', 'cancel-confirmation');
    confirmModal.innerHTML = `
      <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
        <div class="flex items-center gap-4 mb-6">
          <div class="bg-yellow-500 p-3 rounded-xl">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-xl font-bold text-gray-800">Unsaved Changes</h3>
            <p class="text-gray-600">You have unsaved changes. Are you sure you want to cancel?</p>
          </div>
        </div>
        
        <div class="flex gap-4 justify-end">
          <button onclick="window.closeCancelConfirmation()" class="px-6 py-3 bg-gray-500 text-white rounded-xl hover:bg-gray-600 transition-all duration-200 font-semibold">
            No, Continue Editing
          </button>
          <button onclick="window.confirmCancel()" class="px-6 py-3 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-all duration-200 font-semibold">
            Yes, Cancel
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(confirmModal);
  };

  // Close cancel confirmation modal
  window.closeCancelConfirmation = function() {
    const confirmModal = document.querySelector('[data-modal-type="cancel-confirmation"]');
    if (confirmModal) {
      confirmModal.remove();
    }
  };

  // Confirm cancel action
  window.confirmCancel = function() {
    // Remove confirmation modal using specific attribute
    const confirmModal = document.querySelector('[data-modal-type="cancel-confirmation"]');
    if (confirmModal) {
      confirmModal.remove();
    }
    
    // Close the create project modal with error handling
    try {
      const createModal = document.getElementById('createProjectModal');
      if (createModal) {
        createModal.classList.add('hidden');
        document.body.style.overflow = 'auto';
        
        // Reset form
        const form = document.getElementById('createProjectForm');
        if (form) {
          form.reset();
        }
        
        // Clear milestones
        const milestonesContainer = document.getElementById('milestonesContainer');
        if (milestonesContainer) {
          milestonesContainer.innerHTML = '';
        }
        
        // Reset counter
        if (typeof window.milestoneCounter !== 'undefined') {
          window.milestoneCounter = 0;
        }
        
        // Hide EIU field
        const eiuField = document.getElementById('eiuAccountField');
        if (eiuField) {
          eiuField.classList.add('hidden');
        }
      }
    } catch (error) {
      console.error('Error closing create project modal:', error);
      // Fallback: try to hide all modals
      const allModals = document.querySelectorAll('.fixed');
      allModals.forEach(modal => modal.remove());
      document.body.style.overflow = 'auto';
    }
  };

  // Save project information to localStorage
  window.saveProjectInformation = function() {
    try {
      const form = document.getElementById('createProjectForm');
      if (!form) {
        console.error('Form not found');
        return;
      }

      const formData = new FormData(form);
      const projectData = {};

      // Collect all form data
      for (let [key, value] of formData.entries()) {
        if (key === 'location[]') {
          if (!projectData.location) projectData.location = [];
          projectData.location.push(value);
        } else {
          projectData[key] = value;
        }
      }

      // Collect milestone data
      const milestones = [];
      const milestoneElements = document.querySelectorAll('.milestone-item');
      milestoneElements.forEach((milestone, index) => {
        const milestoneData = {
          title: milestone.querySelector('[name="milestoneTitle"]')?.value || '',
          description: milestone.querySelector('[name="milestoneDescription"]')?.value || '',
          weight: milestone.querySelector('[name="milestoneWeight"]')?.value || '',
          plannedBudget: milestone.querySelector('[name="milestonePlannedBudget"]')?.value || '',
          plannedStartDate: milestone.querySelector('[name="milestonePlannedStartDate"]')?.value || '',
          plannedEndDate: milestone.querySelector('[name="milestonePlannedEndDate"]')?.value || '',
          priority: milestone.querySelector('[name="milestonePriority"]')?.value || 'medium',
          timelineDivision: {
            weight: milestone.querySelector('[name="timelineWeight"]')?.value || '33.33',
            startDate: milestone.querySelector('[name="timelineStartDate"]')?.value || '',
            endDate: milestone.querySelector('[name="timelineEndDate"]')?.value || '',
            description: milestone.querySelector('[name="timelineDescription"]')?.value || ''
          },
          budgetDivision: {
            weight: milestone.querySelector('[name="budgetWeight"]')?.value || '33.33',
            plannedBudget: milestone.querySelector('[name="budgetPlanned"]')?.value || '',
            breakdown: milestone.querySelector('[name="budgetBreakdown"]')?.value || ''
          },
          physicalDivision: {
            weight: milestone.querySelector('[name="physicalWeight"]')?.value || '33.33',
            proofType: milestone.querySelector('[name="physicalProofType"]')?.value || 'form',
            description: milestone.querySelector('[name="physicalDescription"]')?.value || ''
          }
        };
        milestones.push(milestoneData);
      });

      projectData.milestones = milestones;

      // Save to localStorage
      localStorage.setItem('savedProjectData', JSON.stringify(projectData));
      
      // Show success message
      const successModal = document.createElement('div');
      successModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
      successModal.innerHTML = `
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
          <div class="flex items-center gap-4 mb-6">
            <div class="bg-green-500 p-3 rounded-xl">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-800">Information Saved!</h3>
              <p class="text-gray-600">Your project information has been saved. You can continue editing or close the modal.</p>
            </div>
          </div>
          
          <div class="flex gap-4 justify-end">
            <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-200 font-semibold">
              Continue Editing
            </button>
          </div>
        </div>
      `;
      document.body.appendChild(successModal);

      console.log('Project information saved successfully');
    } catch (error) {
      console.error('Error saving project information:', error);
      alert('Error saving project information. Please try again.');
    }
  };

  // Clear saved project information
  window.clearSavedProjectInformation = function() {
    try {
      localStorage.removeItem('savedProjectData');
      
      // Show confirmation message
      const successModal = document.createElement('div');
      successModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
      successModal.innerHTML = `
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
          <div class="flex items-center gap-4 mb-6">
            <div class="bg-blue-500 p-3 rounded-xl">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-800">Data Cleared!</h3>
              <p class="text-gray-600">Saved project information has been cleared successfully.</p>
            </div>
          </div>
          
          <div class="flex gap-4 justify-end">
            <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-200 font-semibold">
              OK
            </button>
          </div>
        </div>
      `;
      document.body.appendChild(successModal);

      console.log('Saved project information cleared');
    } catch (error) {
      console.error('Error clearing project information:', error);
      alert('Error clearing project information. Please try again.');
    }
  };

  // Load saved project information
  window.loadSavedProjectInformation = function() {
    try {
      const savedData = localStorage.getItem('savedProjectData');
      if (!savedData) {
        console.log('No saved project data found');
        
        // Show message that no saved data exists
        const noDataModal = document.createElement('div');
        noDataModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
        noDataModal.innerHTML = `
          <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
            <div class="flex items-center gap-4 mb-6">
              <div class="bg-yellow-500 p-3 rounded-xl">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-gray-800">No Saved Data</h3>
                <p class="text-gray-600">No saved project information found. Please fill out the form and save it first.</p>
              </div>
            </div>
            
            <div class="flex gap-4 justify-end">
              <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-200 font-semibold">
                OK
              </button>
            </div>
          </div>
        `;
        document.body.appendChild(noDataModal);
        
        return false;
      }

      const projectData = JSON.parse(savedData);
      const form = document.getElementById('createProjectForm');
      if (!form) {
        console.error('Form not found');
        return false;
      }

      // Populate form fields
      Object.keys(projectData).forEach(key => {
        if (key === 'location') {
          // Handle location array
          const locationContainer = document.getElementById('createBarangayContainer');
          if (locationContainer && projectData.location.length > 0) {
            locationContainer.innerHTML = '';
            projectData.location.forEach((location, index) => {
              if (index === 0) {
                addCreateBarangayDropdown();
              } else {
                addCreateBarangayDropdown();
              }
              const selects = locationContainer.querySelectorAll('select');
              if (selects[index]) {
                selects[index].value = location;
              }
            });
          }
        } else if (key !== 'milestones') {
          const field = form.querySelector(`[name="${key}"]`);
          if (field) {
            field.value = projectData[key];
          }
        }
      });

      // Load milestones
      if (projectData.milestones && projectData.milestones.length > 0) {
        const milestonesContainer = document.getElementById('milestonesContainer');
        if (milestonesContainer) {
          milestonesContainer.innerHTML = '';
          projectData.milestones.forEach((milestone, index) => {
            addMilestone();
            const milestoneElement = milestonesContainer.children[index];
            if (milestoneElement) {
              // Populate milestone fields
              Object.keys(milestone).forEach(key => {
                if (key === 'timelineDivision' || key === 'budgetDivision' || key === 'physicalDivision') {
                  Object.keys(milestone[key]).forEach(subKey => {
                    const field = milestoneElement.querySelector(`[name="${subKey}"]`);
                    if (field) {
                      field.value = milestone[key][subKey];
                    }
                  });
                } else {
                  const field = milestoneElement.querySelector(`[name="${key}"]`);
                  if (field) {
                    field.value = milestone[key];
                  }
                }
              });
            }
          });
        }
      }

      console.log('Project information loaded successfully');
      
      // Show success message
      const successModal = document.createElement('div');
      successModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
      successModal.innerHTML = `
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
          <div class="flex items-center gap-4 mb-6">
            <div class="bg-green-500 p-3 rounded-xl">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-800">Data Loaded!</h3>
              <p class="text-gray-600">Saved project information has been loaded successfully.</p>
            </div>
          </div>
          
          <div class="flex gap-4 justify-end">
            <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-all duration-200 font-semibold">
              Continue Editing
            </button>
          </div>
        </div>
      `;
      document.body.appendChild(successModal);
      
      return true;
    } catch (error) {
      console.error('Error loading project information:', error);
      
      // Show error message
      const errorModal = document.createElement('div');
      errorModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
      errorModal.innerHTML = `
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
          <div class="flex items-center gap-4 mb-6">
            <div class="bg-red-500 p-3 rounded-xl">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-800">Error Loading Data</h3>
              <p class="text-gray-600">Failed to load saved project information. Please try again.</p>
            </div>
          </div>
          
          <div class="flex gap-4 justify-end">
            <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-all duration-200 font-semibold">
              Close
            </button>
          </div>
        </div>
      `;
      document.body.appendChild(errorModal);
      
      return false;
    }
  };

  // Handle form submissions
  document.addEventListener('DOMContentLoaded', function() {
    // Handle create form submission
    const createForm = document.getElementById('createProjectForm');
    if (createForm) {
      createForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
          // Validate form before submission
          const validationErrors = window.validateProjectForm();
          if (validationErrors.length > 0) {
            window.showValidationErrors(validationErrors);
            return;
          }
          
          const formData = new FormData(createForm);
          
          // Get milestones data
          const milestones = getMilestonesData();
          
          // Validate EIU Personnel ID if external partner is selected
          const hasExternalPartnerCheckbox = createForm.querySelector('input[name="hasExternalPartner"]');
          const hasExternalPartner = hasExternalPartnerCheckbox ? hasExternalPartnerCheckbox.checked : false;
          const eiuPersonnelId = formData.get('eiuPersonnelId');
          
          const projectData = {
            projectCode: formData.get('projectCode'),
            name: formData.get('name'),
            implementingOfficeName: formData.get('implementingOfficeName'),
            category: formData.get('category'),
            location: getSelectedBarangays(),
            priority: formData.get('priority'),
            fundingSource: formData.get('fundingSource'),
            createdDate: formData.get('createdDate'),
            description: formData.get('description'),
            expectedOutputs: formData.get('expectedOutputs'),
            targetBeneficiaries: formData.get('targetBeneficiaries'),
            hasExternalPartner: hasExternalPartner,
            eiuPersonnelId: hasExternalPartner ? eiuPersonnelId : null,
            startDate: formData.get('startDate'),
            endDate: formData.get('endDate'),
            timelineMilestones: formData.get('timelineMilestones'),
            totalBudget: parseFloat(formData.get('totalBudget')) || 0,
            budgetBreakdown: formData.get('budgetBreakdown'),
            requiredDocumentation: formData.get('requiredDocumentation'),
            physicalProgressRequirements: formData.get('physicalProgressRequirements'),
            projectManager: formData.get('projectManager'),
            contactNumber: formData.get('contactNumber'),
            specialRequirements: formData.get('specialRequirements'),
            milestones: milestones
          };

          // Create project
          const response = await projectService.createProject(projectData);
          
          if (response.success) {
            window.closeCreateProjectModal();
            window.location.reload();
            
            // Show success message
            const successModal = document.createElement('div');
            successModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
            successModal.innerHTML = `
              <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
                <div class="flex items-center gap-4 mb-6">
                  <div class="bg-green-500 p-3 rounded-xl">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-xl font-bold text-gray-800">Project Created Successfully!</h3>
                    <p class="text-gray-600">The project has been automatically forwarded to the Secretariat and all relevant users for review and approval.</p>
                  </div>
                </div>
                
                <div class="flex justify-end">
                  <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-all duration-200 font-semibold">
                    Continue
                  </button>
                </div>
              </div>
            `;
            document.body.appendChild(successModal);
            
            // Clear saved project data after successful creation
            localStorage.removeItem('savedProjectData');
            console.log('Saved project data cleared after successful creation');
            
            // Force refresh notifications to show the new project creation notification
            if (window.notificationService) {
              await window.notificationService.forceRefresh();
              console.log('Notifications refreshed after project creation');
            }
          } else {
            // Show error message
            const errorModal = document.createElement('div');
            errorModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
            errorModal.innerHTML = `
              <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
                <div class="flex items-center gap-4 mb-6">
                  <div class="bg-red-500 p-3 rounded-xl">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-xl font-bold text-gray-800">Error Creating Project</h3>
                    <p class="text-gray-600">${response.error}</p>
                  </div>
                </div>
                
                <div class="flex justify-end">
                  <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-all duration-200 font-semibold">
                    Close
                  </button>
                </div>
              </div>
            `;
            document.body.appendChild(errorModal);
          }
        } catch (error) {
          console.error('Error creating project:', error);
          
          // Show error message
          const errorModal = document.createElement('div');
          errorModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
          errorModal.innerHTML = `
            <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-red-500 p-3 rounded-xl">
                  <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-gray-800">Network Error</h3>
                  <p class="text-gray-600">Error creating project. Please check your connection and try again.</p>
                </div>
              </div>
              
              <div class="flex justify-end">
                <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-all duration-200 font-semibold">
                  Close
                </button>
              </div>
            </div>
          `;
          document.body.appendChild(errorModal);
        }
      });
    }

    // Handle edit form submission
    const editForm = document.getElementById('editProjectForm');
    if (editForm) {
      editForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!currentEditingProject) {
          alert('No project selected for editing.');
          return;
        }
        
        try {
          const formData = new FormData(editForm);
          
          // Get milestones data
          const milestones = getEditMilestonesData();
          
          // Validate milestones
          if (milestones.length === 0) {
            alert('Please add at least one milestone to the project.');
            return;
          }
          
          const totalWeight = milestones.reduce((sum, m) => sum + m.weight, 0);
          if (Math.abs(totalWeight - 100) > 0.01) {
            alert(`Total milestone weight must equal 100%. Current total: ${totalWeight.toFixed(2)}%`);
            return;
          }
          
          const projectData = {
            projectCode: formData.get('projectCode'),
            name: formData.get('name'),
            implementingOfficeName: formData.get('implementingOfficeName'),
            category: formData.get('category'),
            location: getSelectedEditBarangays(),
            priority: formData.get('priority'),
            fundingSource: formData.get('fundingSource'),
            createdDate: formData.get('createdDate'),
            description: formData.get('description'),
            expectedOutputs: formData.get('expectedOutputs'),
            targetBeneficiaries: formData.get('targetBeneficiaries'),
            hasExternalPartner: formData.get('hasExternalPartner') === 'true',
            eiuPersonnelId: formData.get('eiuPersonnelId'),
            startDate: formData.get('startDate'),
            endDate: formData.get('endDate'),
            timelineMilestones: formData.get('timelineMilestones'),
            totalBudget: parseFloat(formData.get('totalBudget')) || 0,
            budgetBreakdown: formData.get('budgetBreakdown'),
            requiredDocumentation: formData.get('requiredDocumentation'),
            physicalProgressRequirements: formData.get('physicalProgressRequirements'),
            projectManager: formData.get('projectManager'),
            contactNumber: formData.get('contactNumber'),
            specialRequirements: formData.get('specialRequirements'),
            milestones: milestones
          };

          // Update project
          const response = await projectService.updateProject(currentEditingProject.id, projectData);
          
          if (response.success) {
            closeEditProjectModal();
            window.location.reload();
            alert('Project updated successfully!');
          } else {
            alert('Error updating project: ' + response.error);
          }
        } catch (error) {
          console.error('Error updating project:', error);
          alert('Error updating project. Please try again.');
        }
      });
    }
  });

  // Helper functions
  function getSelectedBarangays() {
    const barangaySelects = document.querySelectorAll('.barangay-select');
    const selectedBarangays = [];
    barangaySelects.forEach(select => {
      if (select.value) {
        selectedBarangays.push(select.value);
      }
    });
    return selectedBarangays.join(', ');
  }

  function getSelectedEditBarangays() {
    const barangaySelects = document.querySelectorAll('#editBarangayContainer .barangay-select');
    const selectedBarangays = [];
    barangaySelects.forEach(select => {
      if (select.value) {
        selectedBarangays.push(select.value);
      }
    });
    return selectedBarangays.join(', ');
  }

  function addBarangayDropdown() {
    const container = document.getElementById('barangayContainer');
    const newDiv = document.createElement('div');
    newDiv.className = 'flex gap-2';
    newDiv.innerHTML = `
      <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent barangay-select">
        <option value="">Select Barangay</option>
        <option value="Various Barangay">Various Barangay</option>
        <option value="Alipit">Alipit</option>
        <option value="Bagumbayan">Bagumbayan</option>
        <option value="Bubukal">Bubukal</option>
        <option value="Calios">Calios</option>
        <option value="Duhat">Duhat</option>
        <option value="Gatid">Gatid</option>
        <option value="Jasaan">Jasaan</option>
        <option value="Labuin">Labuin</option>
        <option value="Malinao">Malinao</option>
        <option value="Oogong">Oogong</option>
        <option value="Pagsawitan">Pagsawitan</option>
        <option value="Palasan">Palasan</option>
        <option value="Patimbao">Patimbao</option>
        <option value="Poblacion I">Poblacion I</option>
        <option value="Poblacion II">Poblacion II</option>
        <option value="Poblacion III">Poblacion III</option>
        <option value="Poblacion IV">Poblacion IV</option>
        <option value="Poblacion V">Poblacion V</option>
        <option value="San Jose">San Jose</option>
        <option value="San Juan">San Juan</option>
        <option value="San Pablo Norte">San Pablo Norte</option>
        <option value="San Pablo Sur">San Pablo Sur</option>
        <option value="Santisima Cruz">Santisima Cruz</option>
        <option value="Santo Angel Central">Santo Angel Central</option>
        <option value="Santo Angel Norte">Santo Angel Norte</option>
        <option value="Santo Angel Sur">Santo Angel Sur</option>
      </select>
      <button type="button" onclick="removeBarangayDropdown(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(newDiv);
  }

  function removeBarangayDropdown(button) {
    button.parentElement.remove();
  }

  function addCreateBarangayDropdown() {
    const container = document.getElementById('createBarangayContainer');
    const newDiv = document.createElement('div');
    newDiv.className = 'flex gap-2';
    newDiv.innerHTML = `
      <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent barangay-select">
        <option value="">Select Barangay</option>
        <option value="Various Barangay">Various Barangay</option>
        <option value="Alipit">Alipit</option>
        <option value="Bagumbayan">Bagumbayan</option>
        <option value="Bubukal">Bubukal</option>
        <option value="Calios">Calios</option>
        <option value="Duhat">Duhat</option>
        <option value="Gatid">Gatid</option>
        <option value="Jasaan">Jasaan</option>
        <option value="Labuin">Labuin</option>
        <option value="Malinao">Malinao</option>
        <option value="Oogong">Oogong</option>
        <option value="Pagsawitan">Pagsawitan</option>
        <option value="Palasan">Palasan</option>
        <option value="Patimbao">Patimbao</option>
        <option value="Poblacion I">Poblacion I</option>
        <option value="Poblacion II">Poblacion II</option>
        <option value="Poblacion III">Poblacion III</option>
        <option value="Poblacion IV">Poblacion IV</option>
        <option value="Poblacion V">Poblacion V</option>
        <option value="San Jose">San Jose</option>
        <option value="San Juan">San Juan</option>
        <option value="San Pablo Norte">San Pablo Norte</option>
        <option value="San Pablo Sur">San Pablo Sur</option>
        <option value="Santisima Cruz">Santisima Cruz</option>
        <option value="Santo Angel Central">Santo Angel Central</option>
        <option value="Santo Angel Norte">Santo Angel Norte</option>
        <option value="Santo Angel Sur">Santo Angel Sur</option>
      </select>
      <button type="button" onclick="removeCreateBarangayDropdown(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(newDiv);
  }

  function removeCreateBarangayDropdown(button) {
    button.parentElement.remove();
  }

  function addEditBarangayDropdown() {
    const container = document.getElementById('editBarangayContainer');
    const newDiv = document.createElement('div');
    newDiv.className = 'flex gap-2';
    newDiv.innerHTML = `
      <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent barangay-select">
        <option value="">Select Barangay</option>
        <option value="Various Barangay">Various Barangay</option>
        <option value="Alipit">Alipit</option>
        <option value="Bagumbayan">Bagumbayan</option>
        <option value="Bubukal">Bubukal</option>
        <option value="Calios">Calios</option>
        <option value="Duhat">Duhat</option>
        <option value="Gatid">Gatid</option>
        <option value="Jasaan">Jasaan</option>
        <option value="Labuin">Labuin</option>
        <option value="Malinao">Malinao</option>
        <option value="Oogong">Oogong</option>
        <option value="Pagsawitan">Pagsawitan</option>
        <option value="Palasan">Palasan</option>
        <option value="Patimbao">Patimbao</option>
        <option value="Poblacion I">Poblacion I</option>
        <option value="Poblacion II">Poblacion II</option>
        <option value="Poblacion III">Poblacion III</option>
        <option value="Poblacion IV">Poblacion IV</option>
        <option value="Poblacion V">Poblacion V</option>
        <option value="San Jose">San Jose</option>
        <option value="San Juan">San Juan</option>
        <option value="San Pablo Norte">San Pablo Norte</option>
        <option value="San Pablo Sur">San Pablo Sur</option>
        <option value="Santisima Cruz">Santisima Cruz</option>
        <option value="Santo Angel Central">Santo Angel Central</option>
        <option value="Santo Angel Norte">Santo Angel Norte</option>
        <option value="Santo Angel Sur">Santo Angel Sur</option>
      </select>
      <button type="button" onclick="removeEditBarangayDropdown(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(newDiv);
  }

  function removeEditBarangayDropdown(button) {
    button.parentElement.remove();
  }

  // Delete project function
  async function deleteProject(projectId) {
    if (!confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
      return;
    }
    
    try {
      const response = await projectService.deleteProject(projectId);
      
      if (response.success) {
        window.location.reload();
        alert('Project deleted successfully!');
        
        // Force refresh notifications to show the project deletion notification
        if (window.notificationService) {
          await window.notificationService.forceRefresh();
          console.log('Notifications refreshed after project deletion');
        }
      } else {
        alert('Error deleting project: ' + response.error);
      }
    } catch (error) {
      console.error('Error deleting project:', error);
      alert('Error deleting project. Please try again.');
    }
  }

  // Update progress function
  function updateProgress(projectId) {
    // Redirect to progress timeline with project selected
    window.location.href = `/dashboard/iu-implementing-office/modules/progress-timeline?project=${projectId}`;
  }

  // Generate report function
  function generateReport(projectId) {
    // Redirect to report generation page
    window.location.href = `/dashboard/iu-implementing-office/modules/reports?project=${projectId}`;
  }





  // Filter and search functionality
  function filterProjects() {
    const statusFilter = document.getElementById('statusFilter').value;
    const categoryFilter = document.getElementById('categoryFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;
    const searchInput = document.getElementById('searchInput').value.toLowerCase();
    
    const projectCards = document.querySelectorAll('#projectsGrid > div');
    
    projectCards.forEach(card => {
      const projectName = card.querySelector('h3').textContent.toLowerCase();
      const projectStatus = card.querySelector('span:last-child').textContent.toLowerCase();
      const projectCategory = card.querySelector('span:first-child').textContent.toLowerCase();
      
      const matchesStatus = !statusFilter || projectStatus === statusFilter.toLowerCase();
      const matchesCategory = !categoryFilter || projectCategory === categoryFilter.toLowerCase();
      const matchesSearch = !searchInput || projectName.includes(searchInput);
      
      if (matchesStatus && matchesCategory && matchesSearch) {
        card.style.display = 'block';
      } else {
        card.style.display = 'none';
      }
    });
  }

  // Add event listeners for filters
  document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('statusFilter')?.addEventListener('change', filterProjects);
    document.getElementById('categoryFilter')?.addEventListener('change', filterProjects);
    document.getElementById('priorityFilter')?.addEventListener('change', filterProjects);
    document.getElementById('searchInput')?.addEventListener('input', filterProjects);
  });







  // Get milestones data
  function getMilestonesData() {
    const milestones = [];
    const milestoneElements = document.querySelectorAll('#createMilestonesContainer [id^="milestone-"]');
    
    milestoneElements.forEach(element => {
      const id = element.id.replace('milestone-', '');
      const title = element.querySelector(`input[name="milestones[${id}][title]"]`)?.value;
      const weight = element.querySelector(`input[name="milestones[${id}][weight]"]`)?.value;
      const plannedBudget = element.querySelector(`input[name="milestones[${id}][plannedBudget]"]`)?.value;
      const dueDate = element.querySelector(`input[name="milestones[${id}][dueDate]"]`)?.value;
      const plannedStartDate = element.querySelector(`input[name="milestones[${id}][plannedStartDate]"]`)?.value;
      const plannedEndDate = element.querySelector(`input[name="milestones[${id}][plannedEndDate]"]`)?.value;
      const priority = element.querySelector(`select[name="milestones[${id}][priority]"]`)?.value;
      const description = element.querySelector(`textarea[name="milestones[${id}][description]"]`)?.value;
      
      // 3-Division data
      const timelineWeight = element.querySelector(`input[name="milestones[${id}][timelineWeight]"]`)?.value;
      const timelineStartDate = element.querySelector(`input[name="milestones[${id}][timelineStartDate]"]`)?.value;
      const timelineEndDate = element.querySelector(`input[name="milestones[${id}][timelineEndDate]"]`)?.value;
      const timelineDescription = element.querySelector(`textarea[name="milestones[${id}][timelineDescription]"]`)?.value;
      
      const budgetWeight = element.querySelector(`input[name="milestones[${id}][budgetWeight]"]`)?.value;
      const budgetPlanned = element.querySelector(`input[name="milestones[${id}][budgetPlanned]"]`)?.value;
      const budgetBreakdown = element.querySelector(`textarea[name="milestones[${id}][budgetBreakdown]"]`)?.value;
      
      const physicalWeight = element.querySelector(`input[name="milestones[${id}][physicalWeight]"]`)?.value;
      const physicalProofType = element.querySelector(`select[name="milestones[${id}][physicalProofType]"]`)?.value;
      const physicalDescription = element.querySelector(`textarea[name="milestones[${id}][physicalDescription]"]`)?.value;
      
      if (title && weight && plannedBudget && dueDate) {
        milestones.push({
          title,
          weight: parseFloat(weight),
          plannedBudget: parseFloat(plannedBudget),
          dueDate,
          plannedStartDate: plannedStartDate || null,
          plannedEndDate: plannedEndDate || null,
          priority: priority || 'medium',
          description: description || '',
          // 3-Division configuration
          timelineDivision: {
            weight: parseFloat(timelineWeight) || 33.33,
            startDate: timelineStartDate || null,
            endDate: timelineEndDate || null,
            description: timelineDescription || ''
          },
          budgetDivision: {
            weight: parseFloat(budgetWeight) || 33.33,
            plannedBudget: parseFloat(budgetPlanned) || 0,
            breakdown: budgetBreakdown || ''
          },
          physicalDivision: {
            weight: parseFloat(physicalWeight) || 33.33,
            proofType: physicalProofType || 'form',
            description: physicalDescription || ''
          }
        });
      }
    });
    
    return milestones;
  }

  // Update milestone calculations - expose immediately to global scope
  window.updateMilestoneCalculations = function(milestoneId) {
    window.calculateTotals();
  }

  // Update timeline end date - expose immediately to global scope
  window.updateTimelineEndDate = function(milestoneId) {
    // This function can be expanded later for timeline logic
    window.calculateTotals();
  }

  // Calculate totals function - expose immediately to global scope
  window.calculateTotals = function() {
    const totalWeightElement = document.getElementById('createTotalWeight');
    const totalBudgetElement = document.getElementById('createTotalMilestoneBudget');
    const milestoneCountElement = document.getElementById('createMilestoneCount');
    
    if (!totalWeightElement || !totalBudgetElement || !milestoneCountElement) {
      console.error('Total elements not found');
      return;
    }
    
    const weightInputs = document.querySelectorAll('#createMilestonesContainer input[name*="[weight]"]');
    const budgetInputs = document.querySelectorAll('#createMilestonesContainer input[name*="[plannedBudget]"]');
    const milestoneElements = document.querySelectorAll('#createMilestonesContainer [id^="milestone-"]');
    
    let totalWeight = 0;
    let totalBudget = 0;
    
    weightInputs.forEach(input => {
      totalWeight += parseFloat(input.value) || 0;
    });
    
    budgetInputs.forEach(input => {
      totalBudget += parseFloat(input.value) || 0;
    });
    
    const milestoneCount = milestoneElements.length;
    
    totalWeightElement.textContent = `${totalWeight.toFixed(2)}%`;
    totalBudgetElement.textContent = `₱${totalBudget.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    milestoneCountElement.textContent = milestoneCount;
    
    // Update button state based on total weight
    const addMilestoneButton = document.querySelector('button[onclick="window.addMilestone()"]');
    if (addMilestoneButton) {
      if (totalWeight >= 100) {
        addMilestoneButton.disabled = true;
        addMilestoneButton.classList.add('opacity-50', 'cursor-not-allowed');
        addMilestoneButton.title = 'Total weight cannot exceed 100%';
      } else {
        addMilestoneButton.disabled = false;
        addMilestoneButton.classList.remove('opacity-50', 'cursor-not-allowed');
        addMilestoneButton.title = 'Add Milestone';
      }
    }
  }

  // Remove milestone function - expose immediately to global scope
  window.removeMilestone = function(id) {
    const milestone = document.getElementById(`milestone-${id}`);
    if (milestone) {
      milestone.remove();
      window.calculateTotals();
    }
  }

  // Make remaining functions globally available
  window.openEditProjectModal = openEditProjectModal;
  window.closeEditProjectModal = closeEditProjectModal;
  window.openProjectDetailsModal = openProjectDetailsModal;
  window.closeProjectDetailsModal = closeProjectDetailsModal;
  window.editProject = editProject;
  window.viewProjectDetails = viewProjectDetails;
  window.deleteProject = deleteProject;
  window.updateProgress = updateProgress;
  window.generateReport = generateReport;

  window.addBarangayDropdown = addBarangayDropdown;
  window.removeBarangayDropdown = removeBarangayDropdown;
  window.addCreateBarangayDropdown = addCreateBarangayDropdown;
  window.removeCreateBarangayDropdown = removeCreateBarangayDropdown;
  window.addEditBarangayDropdown = addEditBarangayDropdown;
  window.removeEditBarangayDropdown = removeEditBarangayDropdown;
  window.addEditMilestone = addEditMilestone;
  window.removeEditMilestone = removeEditMilestone;
  window.calculateEditTotals = calculateEditTotals;
  window.testModal = testModal;

  // Import and make notification service globally available
  import notificationService from '../../../../services/notifications.js';
  window.notificationService = notificationService;
  console.log('Notification service loaded and made globally available');
  
  // Force refresh notifications on page load to ensure we have the latest
  if (window.notificationService) {
    window.notificationService.forceRefresh();
    console.log('Notifications refreshed on page load');
  }

  // Debug: Check if functions are loaded (with delay to ensure all are defined)
  setTimeout(() => {
    console.log('Functions loaded:', {
      openCreateProjectModal: typeof window.openCreateProjectModal,
      closeCreateProjectModal: typeof window.closeCreateProjectModal,
      addMilestone: typeof window.addMilestone,
      removeMilestone: typeof window.removeMilestone,
      calculateTotals: typeof window.calculateTotals,
      validateEIUAccount: typeof window.validateEIUAccount,
      showValidationMessage: typeof window.showValidationMessage,
      setupEIUPartnerField: typeof window.setupEIUPartnerField,
      notificationService: typeof window.notificationService
    });
  }, 100);

  // Enhanced Tab switching functions with animations
  function switchToCardView() {
    const cardTab = document.getElementById('cardTab');
    const tableTab = document.getElementById('tableTab');
    const cardView = document.getElementById('cardView');
    const tableView = document.getElementById('tableView');

    // Add sink and pop animation to the clicked tab
    cardTab.classList.add('switching');
    setTimeout(() => {
      cardTab.classList.remove('switching');
    }, 300);

    // Update tab styles with active state - modern design
    cardTab.className = 'tab-button text-sm font-medium transition-all duration-300 flex items-center gap-2 active';
    tableTab.className = 'tab-button text-sm font-medium text-gray-600 hover:text-gray-900 transition-all duration-300 flex items-center gap-2';

    // Animate content switching
    tableView.classList.add('fade-out');
    
    setTimeout(() => {
      tableView.classList.add('hidden');
      tableView.classList.remove('block', 'fade-out');
      cardView.classList.remove('hidden');
      cardView.classList.add('block', 'fade-in');
      
      // Trigger staggered card animations
      const cards = document.querySelectorAll('.project-card');
      cards.forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
        card.style.animation = 'cardSlideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards';
      });
      
      setTimeout(() => {
        cardView.classList.remove('fade-in');
        // Trigger progress bar animation after switching to card view
        setTimeout(animateProgressBars, 100);
      }, 400);
    }, 300);
  }

  function switchToTableView() {
    const cardTab = document.getElementById('cardTab');
    const tableTab = document.getElementById('tableTab');
    const cardView = document.getElementById('cardView');
    const tableView = document.getElementById('tableView');

    // Add sink and pop animation to the clicked tab
    tableTab.classList.add('switching');
    setTimeout(() => {
      tableTab.classList.remove('switching');
    }, 300);

    // Update tab styles with active state - modern design
    cardTab.className = 'tab-button text-sm font-medium text-gray-600 hover:text-gray-900 transition-all duration-300 flex items-center gap-2';
    tableTab.className = 'tab-button text-sm font-medium transition-all duration-300 flex items-center gap-2 active';

    // Animate content switching
    cardView.classList.add('fade-out');
    
    setTimeout(() => {
      cardView.classList.add('hidden');
      cardView.classList.remove('block', 'fade-out');
      tableView.classList.remove('hidden');
      tableView.classList.add('block', 'fade-in');
      
      setTimeout(() => {
        tableView.classList.remove('fade-in');
        // Trigger table progress bar animation after switching to table view
        setTimeout(animateTableProgressBars, 100);
      }, 400);
    }, 300);
  }

  // Add event listeners for tab switching
  document.addEventListener('DOMContentLoaded', function() {
    const cardTab = document.getElementById('cardTab');
    const tableTab = document.getElementById('tableTab');
    
    if (cardTab) {
      cardTab.addEventListener('click', switchToCardView);
    }
    
    if (tableTab) {
      tableTab.addEventListener('click', switchToTableView);
    }
  });

  // Make tab switching functions globally available
  window.switchToCardView = switchToCardView;
  window.switchToTableView = switchToTableView;

    // Animate progress bars on page load
  function animateProgressBars() {
    // Get all progress bars
    const progressBars = document.querySelectorAll('#cardView .h-3.rounded-full, #cardView .h-2.rounded-full');
    
    if (progressBars.length === 0) {
      const altBars = document.querySelectorAll('.project-card .h-3.rounded-full, .project-card .h-2.rounded-full');
      
      altBars.forEach((bar, index) => {
        const progressValue = bar.getAttribute('data-progress');
        
        if (progressValue && progressValue !== 'null' && progressValue !== 'undefined') {
          const progress = parseFloat(progressValue);
          
          if (!isNaN(progress) && progress > 0) {
            // Ensure bar starts at 0%
            bar.style.width = '0%';
            
            // Animate to target value with staggered timing
            setTimeout(() => {
              bar.classList.add('animating');
              bar.style.width = `${progress}%`;
              
              // Remove animation class after animation completes
              setTimeout(() => {
                bar.classList.remove('animating');
              }, 600);
            }, index * 200);
          }
        }
      });
      return;
    }
    
    progressBars.forEach((bar, index) => {
      // Get the progress value from data attribute
      const progressValue = bar.getAttribute('data-progress');
      
      if (progressValue && progressValue !== 'null' && progressValue !== 'undefined') {
        const progress = parseFloat(progressValue);
        
        if (!isNaN(progress) && progress > 0) {
          // Ensure bar starts at 0%
          bar.style.width = '0%';
          
          // Animate to target value with staggered timing
          setTimeout(() => {
            bar.classList.add('animating');
            bar.style.width = `${progress}%`;
            
            // Remove animation class after animation completes
            setTimeout(() => {
              bar.classList.remove('animating');
            }, 600);
          }, index * 200);
        }
      }
    });
  }

  // Animate progress bars in table view
  function animateTableProgressBars() {
    const tableProgressBars = document.querySelectorAll('#tableView .h-2.rounded-full');
    tableProgressBars.forEach((bar, index) => {
      const currentWidth = bar.style.width;
      if (currentWidth && currentWidth !== '0%') {
        bar.style.width = '0%';
        setTimeout(() => {
          bar.style.width = currentWidth;
        }, index * 150);
      }
    });
  }

  // Run animation when page loads
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(animateProgressBars, 800);
  });

  // Also run on window load
  window.addEventListener('load', function() {
    setTimeout(animateProgressBars, 1200);
  });

  // Make animation function globally available
  window.animateProgressBars = animateProgressBars;
  
  // Trigger animation after a delay to ensure everything is loaded
  setTimeout(() => {
    animateProgressBars();
  }, 1000);


</script> 