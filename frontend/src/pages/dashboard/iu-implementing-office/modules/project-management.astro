---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import IUImplementingOfficeLayout from '../../../../components/IUImplementingOfficeLayout.astro';
import ProjectCard from '../../../../components/ProjectCard.astro';
import ProjectDetailsModal from '../../../../components/ProjectDetailsModal.astro';

const API_URL = 'http://localhost:3000/api';
let userData = null;
let projects = [];
let loading = true;

// Format budget - show full amount for clarity
const formatBudget = (amount) => {
  if (!amount) return '₱0.00';
  const num = parseFloat(amount);
  if (isNaN(num)) return '₱0.00';
  
  // For large amounts, show both full and abbreviated
  if (num >= 1000000) {
    const formatted = num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    const abbreviated = `${(num / 1000000).toFixed(1)}M`;
    return `₱${formatted}`;
  } else if (num >= 1000) {
    const formatted = num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    return `₱${formatted}`;
  }
  return `₱${num.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
};
let error = '';

// Try to fetch projects data from API
try {
  const token = Astro.cookies.get('token')?.value || '';
  if (token) {
    // Fetch user data for authentication
    const userRes = await fetch(`${API_URL}/auth/profile`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (userRes.ok) {
      const userDataResponse = await userRes.json();
      if (userDataResponse.success && userDataResponse.user) {
        userData = userDataResponse.user;
      }
    }

    // Fetch projects from the new API
    const projectsRes = await fetch(`${API_URL}/projects`, {
      headers: { 'Authorization': `Bearer ${token}` }
    });
    if (projectsRes.ok) {
      const data = await projectsRes.json();
      if (data.success) {
        projects = data.projects;
      }
    }
  }
} catch (err) {
  console.error('Error fetching projects data:', err);
  error = 'Failed to fetch projects data.';
}

loading = false;
---

<Layout title="Project Management | Implementing Office Dashboard">
  <IUImplementingOfficeLayout>
    <style>
      .line-clamp-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
      }

      /* Modern Tab Button Design */
      .tab-button {
        position: relative;
        overflow: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        width: 140px;
        height: 44px;
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
        flex-grow: 0;
        border: none;
        outline: none;
        cursor: pointer;
      }

      .tab-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
      }

      .tab-button:hover::before {
        left: 100%;
      }

      .tab-button.active {
        background: linear-gradient(135deg, #92751F, #7A6219);
        color: white;
        font-weight: 600;
      }

      .tab-button:not(.active):hover {
        background: #f8f9fa;
        transform: translateY(-1px);
      }

      /* Progress bar animations */
      .progress-bar {
        transition: width 1.5s cubic-bezier(0.4, 0, 0.2, 1);
        will-change: width;
      }
      
      .progress-bar.animate {
        animation: progressFill 1.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
      }
      
      @keyframes progressFill {
        from {
          width: 0%;
        }
        to {
          width: var(--target-width);
        }
      }
      
      @keyframes progressPulse {
        0%, 100% {
          opacity: 1;
        }
        50% {
          opacity: 0.8;
        }
      }
      
      .progress-bar.animating {
        animation: progressPulse 0.6s ease-in-out;
      }
      
      /* Sink and pop animation for tab switching */
      .tab-button.switching {
        animation: sinkAndPop 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      @keyframes sinkAndPop {
        0% {
          transform: translateY(0);
        }
        50% {
          transform: translateY(2px);
        }
        100% {
          transform: translateY(0);
        }
      }

      /* Tab Content Animations */
      .tab-content {
        transition: opacity 0.3s ease-in-out;
      }

      .tab-content.fade-in {
        animation: fadeInUp 0.4s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .tab-content.fade-out {
        opacity: 0;
        transform: translateY(10px);
      }

      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Card Grid Animation */
      .card-grid {
        animation: slideInUp 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      }

      @keyframes slideInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Staggered Card Animation */
      .project-card {
        animation: cardSlideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        opacity: 0;
        transform: translateY(20px);
      }

      .project-card:nth-child(1) { animation-delay: 0.1s; }
      .project-card:nth-child(2) { animation-delay: 0.2s; }
      .project-card:nth-child(3) { animation-delay: 0.3s; }
      .project-card:nth-child(4) { animation-delay: 0.4s; }
      .project-card:nth-child(5) { animation-delay: 0.5s; }
      .project-card:nth-child(6) { animation-delay: 0.6s; }

      @keyframes cardSlideIn {
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Enhanced global animations */
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .animate-fade-in-up {
        animation: fadeInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
        opacity: 0;
      }

      /* Enhanced Summary Card Styles */
      .profile-card {
        background: white;
        border-radius: 1rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        border: 1px solid rgba(229, 231, 235, 0.5);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        cursor: pointer;
      }

      .profile-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        border-color: rgba(245, 158, 11, 0.3);
      }

      .summary-card {
        position: relative;
        overflow: hidden;
      }

      .summary-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s;
      }

      .summary-card:hover::before {
        left: 100%;
      }

      .icon-container {
        width: 3rem;
        height: 3rem;
        border-radius: 0.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }


      .icon-container-small {
        width: 2.5rem;
        height: 2.5rem;
        border-radius: 0.75rem;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .summary-card:hover .icon-container {
        transform: scale(1.1) rotate(3deg);
      }

      /* Button Styles */
      .btn-primary {
        background: linear-gradient(135deg, #f59e0b, #d97706);
        color: white;
        border: none;
        border-radius: 0.75rem;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }

      .btn-primary:hover {
        background: linear-gradient(135deg, #d97706, #b45309);
        transform: translateY(-1px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      }

      .btn-secondary {
        background: linear-gradient(135deg, #6b7280, #4b5563);
        color: white;
        border: none;
        border-radius: 0.75rem;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }

      .btn-secondary:hover {
        background: linear-gradient(135deg, #4b5563, #374151);
        transform: translateY(-1px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      }

      .btn-success {
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
        border: none;
        border-radius: 0.75rem;
        padding: 0.5rem 1rem;
        font-weight: 600;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }

      .btn-success:hover {
        background: linear-gradient(135deg, #059669, #047857);
        transform: translateY(-1px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      }

      .btn-sm {
        padding: 0.375rem 0.75rem;
        font-size: 0.875rem;
      }

      /* Enhanced Input and Form Element Hover Effects */
      input[type="text"], input[type="search"], select {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      input[type="text"]:hover, input[type="search"]:hover, select:hover {
        border-color: #f59e0b;
        box-shadow: 0 0 0 3px rgba(245, 158, 11, 0.1);
      }

      input[type="text"]:focus, input[type="search"]:focus, select:focus {
        border-color: #f59e0b;
        box-shadow: 0 0 0 3px rgba(245, 158, 11, 0.2);
        outline: none;
      }

      /* Enhanced Label Hover Effects */
      label {
        transition: color 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      label:hover {
        color: #f59e0b;
      }

      /* Enhanced Tab Button Hover Effects */
      .tab-button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      /* Enhanced Project Card Hover Effects */
      .project-card {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .project-card:hover {
        transform: translateY(-4px);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      }

      /* Enhanced Status Badge Hover Effects */
      .status-badge {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .status-badge:hover {
        transform: scale(1.05);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }

      /* Enhanced Progress Bar Hover Effects */
      .progress-bar {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }

      .progress-bar:hover {
        box-shadow: 0 0 0 3px rgba(245, 158, 11, 0.2);
      }

      /* Enhanced transitions for all elements */
      * {
        transition-property: transform, box-shadow, filter, backdrop-filter, color, background-color, border-color;
      }

      /* Enhanced focus states */
      button:focus, a:focus, input:focus, select:focus {
        outline: 2px solid #f59e0b;
        outline-offset: 2px;
      }

      /* Custom scrollbar */
      ::-webkit-scrollbar {
        width: 8px;
      }

      ::-webkit-scrollbar-track {
        background: #f1f5f9;
        border-radius: 4px;
      }

      ::-webkit-scrollbar-thumb {
        background: linear-gradient(to bottom, #f59e0b, #d97706);
        border-radius: 4px;
      }

      ::-webkit-scrollbar-thumb:hover {
        background: linear-gradient(to bottom, #d97706, #b45309);
      }

      /* Enhanced loading animation */
      .loading-spinner {
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      /* Enhanced shimmer effect */
      .shimmer {
        background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
        background-size: 200% 100%;
        animation: shimmer 2s infinite;
      }

      @keyframes shimmer {
        0% {
          background-position: -200% 0;
        }
        100% {
          background-position: 200% 0;
        }
      }

      /* Table Progress Bar Animation */
      .table-progress-bar-fill {
        transform-origin: left;
        animation: fillTableProgress 2s ease-out forwards;
      }
      
      @keyframes fillTableProgress {
        from {
          width: 0%;
        }
        to {
          width: var(--table-progress-width);
        }
      }

      /* Global transition for smooth hover effects */
      * {
        transition-property: transform, box-shadow, filter, backdrop-filter, color, background-color, border-color;
      }

      /* Icon Container Styles - LGU-IU IOO Theme with Shimmer Effects */
      .icon-container {
        width: 56px;
        height: 56px;
        border-radius: 16px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
      }
      
      .icon-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        transition: left 0.5s ease;
      }
      
      .icon-container > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container:hover::before {
        left: 100%;
      }
      
      .icon-container:hover {
        transform: scale(1.1) rotate(3deg);
      }
      
      .icon-container-small {
        width: 40px;
        height: 40px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
      }
      
      .icon-container-small::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        transition: left 0.5s ease;
      }
      
      .icon-container-small > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container-small:hover::before {
        left: 100%;
      }
      
      .icon-container-small:hover {
        transform: scale(1.1) rotate(3deg);
      }

      /* Profile Card Styles */
      .profile-card {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
      }
      
      .profile-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .profile-card:hover::before {
        left: 100%;
      }

      /* Button Styles with Hover Effects */
      .btn-primary {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
      }
      
      .btn-primary::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .btn-primary:hover::before {
        left: 100%;
      }
      
      .btn-secondary {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
      }
      
      .btn-secondary::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .btn-secondary:hover::before {
        left: 100%;
      }
      
      .btn-success {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
      }
      
      .btn-success::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .btn-success:hover::before {
        left: 100%;
      }

      /* Summary Card Hover Effects */
      .summary-card {
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }
      
      .summary-card:hover {
        transform: translateY(-4px) scale(1.02);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      }
      
      .summary-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
        transition: left 0.5s ease;
      }
      
      .summary-card:hover::before {
        left: 100%;
      }

      /* Input Field Hover Effects */
      input:hover, select:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      }

      /* Tab Button Hover Effects */
      .tab-button {
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }
      
      .tab-button:hover {
        transform: translateY(-2px);
      }
      
      .tab-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .tab-button:hover::before {
        left: 100%;
      }

      /* Project Card Hover Effects */
      .project-card {
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }
      
      .project-card:hover {
        transform: translateY(-4px) scale(1.02);
        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      }
      
      .project-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
        transition: left 0.5s ease;
      }
      
      .project-card:hover::before {
        left: 100%;
      }

      /* Status Badge Hover Effects */
      .status-badge {
        transition: all 0.3s ease;
      }
      
      .status-badge:hover {
        transform: scale(1.05);
      }

      /* Progress Bar Hover Effects */
      .progress-bar {
        transition: all 0.3s ease;
      }
      
      .progress-bar:hover {
        transform: scaleY(1.1);
      }

      /* Enhanced Table Styling */
      .table-row {
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
      }
      
      .table-row::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
        transition: left 0.5s ease;
      }
      
      .table-row:hover::before {
        left: 100%;
      }
      
      .table-row:hover {
        transform: translateX(4px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      }

      /* Enhanced Badge Styling */
      .status-badge, .category-badge {
        position: relative;
        overflow: hidden;
      }
      
      .status-badge::before, .category-badge::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
        transition: left 0.5s ease;
      }
      
      .status-badge:hover::before, .category-badge:hover::before {
        left: 100%;
      }

      /* Enhanced Action Button Styling */
      .action-button {
        position: relative;
        overflow: hidden;
        transition: all 0.3s ease;
      }
      
      .action-button::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .action-button:hover::before {
        left: 100%;
      }
      
      .action-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
      }

      /* Enhanced Action Button Styling for Table */
      .action-button {
        white-space: nowrap;
        min-width: fit-content;
        display: inline-flex;
        align-items: center;
        justify-content: center;
      }
      
      .action-button svg {
        flex-shrink: 0;
      }
      
      /* Action Button Styles - Similar to Apply Filters */
      .btn-view {
        background: linear-gradient(135deg, #3b82f6, #2563eb);
        color: white;
        border: none;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }
      
      .btn-view::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .btn-view:hover::before {
        left: 100%;
      }
      
      .btn-view:hover {
        background: linear-gradient(135deg, #2563eb, #1d4ed8);
        transform: translateY(-1px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      }
      
      .btn-edit {
        background: linear-gradient(135deg, #f59e0b, #d97706);
        color: white;
        border: none;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }
      
      .btn-edit::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .btn-edit:hover::before {
        left: 100%;
      }
      
      .btn-edit:hover {
        background: linear-gradient(135deg, #d97706, #b45309);
        transform: translateY(-1px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      }
      
      .btn-update {
        background: linear-gradient(135deg, #10b981, #059669);
        color: white;
        border: none;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }
      
      .btn-update::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .btn-update:hover::before {
        left: 100%;
      }
      
      .btn-update:hover {
        background: linear-gradient(135deg, #059669, #047857);
        transform: translateY(-1px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      }
      
      .btn-delete {
        background: linear-gradient(135deg, #ef4444, #dc2626);
        color: white;
        border: none;
        padding: 0.375rem 0.75rem;
        border-radius: 0.375rem;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
      }
      
      .btn-delete::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease;
      }
      
      .btn-delete:hover::before {
        left: 100%;
      }
      
      .btn-delete:hover {
        background: linear-gradient(135deg, #dc2626, #b91c1c);
        transform: translateY(-1px);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
      }
      
      /* Responsive action buttons */
      @media (max-width: 768px) {
        .action-button {
          font-size: 0.75rem;
          padding: 0.25rem 0.5rem;
        }
        
        .action-button svg {
          width: 0.75rem;
          height: 0.75rem;
        }
      }
    </style>
    <!-- Page Header - LGU-IU IOO Theme - Maximized Position -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
            <div>
              <h1 class="text-3xl font-bold bg-gradient-to-r from-gray-800 to-amber-600 bg-clip-text text-transparent">Project Management</h1>
              <p class="text-sm text-gray-600">Create, manage, and track your department's projects with comprehensive monitoring across three divisions</p>
            </div>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Active Projects</p>
            <p class="text-xs text-black font-semibold" id="headerProjectCount">{projects.length} Projects Available</p>
          </div>
          <div class="w-4 h-4 bg-amber-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <main class="bg-gradient-to-br from-gray-50 via-amber-50 to-white min-h-screen px-8 py-8">

      <!-- Enhanced Create New Project Button -->
      <div class="flex items-center justify-end mb-8">
        <button onclick="window.openCreateProjectModal()" class="group relative inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white font-bold text-lg rounded-2xl shadow-2xl hover:shadow-amber-500/25 transition-all duration-300 transform hover:scale-105 hover:-translate-y-1">
          <div class="absolute inset-0 bg-gradient-to-r from-amber-400 to-orange-500 rounded-2xl blur opacity-30 group-hover:opacity-50 transition-opacity duration-300"></div>
          <div class="relative flex items-center gap-3">
            <svg class="w-6 h-6 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
          </svg>
            <span class="text-xl font-bold tracking-wide">+ Create New Project</span>
          </div>
        </button>
      </div>

      <!-- Enhanced Summary Cards - Redesigned Layout -->
      <div class="space-y-6 mb-8">
        <!-- Top Row: Primary Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Total Projects - Warm Orange #F28C00 -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('total')">
          <div class="flex items-center justify-between">
            <div>
                <p class="text-sm text-gray-600">Total Projects</p>
                <p class="text-2xl font-bold text-black" id="totalProjectsCount">{projects.length}</p>
                <p class="text-xs text-orange-600 mt-1">All assigned projects</p>
            </div>
              <div class="icon-container" style="background: #F28C00;">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
              </svg>
            </div>
          </div>
        </div>

          <!-- Average Progress (%) - Warm Orange #F28C00 -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('progress')">
          <div class="flex items-center justify-between">
            <div>
                <p class="text-sm text-gray-600">Average Progress (%)</p>
                <p class="text-2xl font-bold text-black" id="averageProgressCount">{projects.length > 0 ? Math.round(projects.reduce((sum, p) => sum + (parseFloat(p.progress?.overallProgress || p.overallProgress || 0)), 0) / projects.length) : 0}</p>
                <p class="text-xs text-orange-600 mt-1">Overall completion</p>
            </div>
              <div class="icon-container" style="background: #F28C00;">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Total Budget Monitored (₱) - Green -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('budget')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Total Budget Monitored (₱)</p>
                <p class="text-2xl font-bold text-black" id="totalBudgetCount">{projects.reduce((sum, p) => sum + parseFloat(p.totalBudget || 0), 0).toLocaleString()}</p>
                <p class="text-xs text-green-600 mt-1">Under supervision</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-green-500 to-green-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
              </svg>
            </div>
          </div>
        </div>

          <!-- Total Budget Utilized - Warm Orange #F28C00 -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('budgetUtilized')">
          <div class="flex items-center justify-between">
            <div>
                <p class="text-sm text-gray-600">Total Budget Utilized</p>
                <p class="text-2xl font-bold text-black" id="totalBudgetUtilizedCount">{projects.reduce((sum, p) => sum + parseFloat(p.usedBudget || 0), 0).toLocaleString()}</p>
                <p class="text-xs text-orange-600 mt-1">Amount spent</p>
            </div>
              <div class="icon-container" style="background: #F28C00;">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 9V7a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2m2 4h10a2 2 0 002-2v-6a2 2 0 00-2-2H9a2 2 0 00-2 2v6a2 2 0 002 2zm7-5a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
              </div>
            </div>
          </div>
        </div>

        <!-- Bottom Row: Status Metrics -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <!-- Pending Projects - Yellow/Gold -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('pending')">
          <div class="flex items-center justify-between">
            <div>
                <p class="text-sm text-gray-600">Pending Projects</p>
                <p class="text-2xl font-bold text-black" id="pendingProjectsCount">{projects.filter(p => p.status === 'pending').length}</p>
                <p class="text-xs text-yellow-600 mt-1">Awaiting approval</p>
            </div>
              <div class="icon-container bg-gradient-to-br from-yellow-500 to-yellow-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            </div>
          </div>

          <!-- Ongoing Projects - Blue -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('ongoing')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Ongoing Projects</p>
                <p class="text-2xl font-bold text-black" id="ongoingProjectsCount">{projects.filter(p => p.status === 'ongoing').length}</p>
                <p class="text-xs text-blue-600 mt-1">In progress</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
          </div>
        </div>
      </div>

          <!-- Delayed Projects - Red -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('delayed')">
            <div class="flex items-center justify-between">
          <div>
                <p class="text-sm text-gray-600">Delayed Projects</p>
                <p class="text-2xl font-bold text-black" id="delayedProjectsCount">{projects.filter(p => p.status === 'delayed').length}</p>
                <p class="text-xs text-red-600 mt-1">Behind schedule</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-red-500 to-red-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 15.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
            </div>
          </div>

          <!-- Completed Projects - Green -->
          <div class="profile-card p-6 cursor-pointer summary-card" onclick="filterByCard('completed')">
            <div class="flex items-center justify-between">
              <div>
                <p class="text-sm text-gray-600">Completed Projects</p>
                <p class="text-2xl font-bold text-black" id="completedProjectsCount">{projects.filter(p => p.status === 'complete').length}</p>
                <p class="text-xs text-green-600 mt-1">Successfully completed</p>
              </div>
              <div class="icon-container bg-gradient-to-br from-green-500 to-green-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Enhanced Search & Filter Section -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-200 p-8 mb-8 transition-all duration-300 hover:shadow-2xl hover:border-amber-300">
        <div class="flex items-center gap-4 mb-6">
          <div class="icon-container-small bg-gradient-to-br from-amber-500 to-amber-600 transition-all duration-300 hover:scale-110 hover:rotate-3 hover:shadow-xl">
            <svg class="w-5 h-5 text-white transition-transform duration-300 hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-bold text-black transition-colors duration-300 hover:text-amber-600">Filters & Project Selection</h3>
        </div>
        
        <div class="bg-gradient-to-br from-gray-50 to-gray-100/50 rounded-2xl p-6 border border-gray-200">
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">Search Projects</label>
              <div class="relative">
                <input 
                  type="text" 
                  id="projectSearchInput" 
                  placeholder="Search by project name..." 
                  class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
                >
                <svg class="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
            
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">Status</label>
              <select 
                id="statusFilter" 
                class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
              >
              <option value="">All Status</option>
              <option value="pending">Pending</option>
              <option value="ongoing">Ongoing</option>
              <option value="delayed">Delayed</option>
                <option value="completed">Completed</option>
            </select>
          </div>
            
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">Priority</label>
              <select 
                id="priorityFilter" 
                class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
              >
              <option value="">All Priorities</option>
              <option value="high">High</option>
              <option value="medium">Medium</option>
              <option value="low">Low</option>
            </select>
          </div>
            
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">Sort By</label>
              <select 
                id="sortFilter" 
                class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-amber-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
              >
                <option value="name">Project Name</option>
                <option value="status">Status</option>
                <option value="progress">Progress</option>
                <option value="budget">Budget</option>
                <option value="date">Date Created</option>
              </select>
            </div>
          </div>

          <div class="flex items-center justify-end gap-3 mt-6">
            <button onclick="clearProjectFilters()" class="btn-secondary btn-sm inline-flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
              Clear Filters
            </button>
            <button onclick="applyProjectFilters()" class="btn-primary btn-sm inline-flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
              </svg>
              Apply Filters
            </button>
          </div>
        </div>
      </div>

      {loading ? (
        <div class="flex items-center justify-center py-12">
          <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-[#92751F]"></div>
          <span class="ml-3 text-gray-600">Loading projects...</span>
        </div>
      ) : error ? (
        <div class="text-center py-12">
          <p class="text-red-600 mb-4">{error}</p>
                      <button onclick="window.location.reload()" class="px-4 py-2 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-all">
            Try Again
          </button>
        </div>
      ) : projects.length === 0 ? (
        <div class="text-center py-12">
          <svg class="w-24 h-24 text-gray-400 mx-auto mb-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          <h3 class="text-xl font-semibold text-gray-800 mb-2">No Projects Found</h3>
          <p class="text-gray-600 mb-6">Get started by creating your first project with comprehensive monitoring across timeline, budget, and physical divisions</p>
          <button onclick="window.openCreateProjectModal()" class="px-6 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors flex items-center gap-2 mx-auto">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
            Create New Project
          </button>
        </div>
      ) : (
        <!-- Enhanced Projects View Tabs -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-200 overflow-hidden hover:shadow-2xl transition-all duration-300">
          <!-- Enhanced Tab Navigation -->
          <div class="px-8 py-6 border-b border-gray-200 bg-gradient-to-r from-gray-50 to-white">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-4">
                <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600 shadow-xl">
                  <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                </div>
                <div>
                  <h2 class="text-2xl font-bold bg-gradient-to-r from-gray-800 to-amber-600 bg-clip-text text-transparent">Project List</h2>
                  <p class="text-sm text-gray-600 mt-1">Manage and monitor your department's projects with comprehensive tracking</p>
                </div>
              </div>
              <div class="flex bg-gradient-to-r from-gray-100 to-gray-200 border border-gray-300 rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300" style="width: 320px;">
                <button id="cardTab" class="tab-button text-sm font-medium text-gray-900 bg-gradient-to-r from-amber-600 to-amber-700 text-white transition-all duration-300 flex items-center gap-3 active relative overflow-hidden px-6 py-3">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                  Card View
                </button>
                <button id="tableTab" class="tab-button text-sm font-medium text-gray-600 hover:text-gray-900 hover:bg-gradient-to-r hover:from-gray-200 hover:to-gray-300 transition-all duration-300 flex items-center gap-3 relative overflow-hidden px-6 py-3">
                  <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h18M3 14h18m-9-4v8m-7 0h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
                  </svg>
                  Table View
                </button>
              </div>
            </div>
          </div>

          <!-- Card View Content -->
          <div id="cardView" class="tab-content block p-6">
            <div class="card-grid grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6" id="projectsGrid">
              {projects.map((project) => (
                <ProjectCard 
                  project={project} 
                  userTheme="iu-implementing-office"
                  onClick="viewProjectDetails"
                />
              ))}
            </div>
          </div>

          <!-- Enhanced Table View Content -->
          <div id="tableView" class="tab-content hidden p-6">
            <div class="overflow-x-auto rounded-2xl border border-gray-200 shadow-lg">
              <table class="w-full">
                <thead class="bg-gray-50">
                  <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Project</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Budget</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Progress</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timeline</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Location</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                  </tr>
                </thead>
                <tbody id="projectsTableBody" class="bg-white divide-y divide-gray-200">
                  {projects.map((project) => {
                    const progress = project.progress || {
                      // Use new field names from backend with proper field mapping
                      timeline: project.progress?.timeline || project.progress?.internalTimeline || project.timelineProgress || 0,
                      budget: project.progress?.budget || project.progress?.internalBudget || project.budgetProgress || 0,
                      physical: project.progress?.physical || project.progress?.internalPhysical || project.physicalProgress || 0,
                      overall: project.progress?.overall || project.overallProgress || 0
                    };
                    
                    return (
                      <tr class="group hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 transition-all duration-300 transform hover:scale-[1.01] cursor-pointer">
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div>
                            <div class="text-sm font-medium text-gray-900">{project.name}</div>
                            <div class="text-sm text-gray-500">{project.projectCode}</div>
                          </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class={`px-2 py-1 text-xs font-medium rounded-full capitalize ${
                            project.category === 'infrastructure' ? 'bg-blue-100 text-blue-700' :
                            project.category === 'health' ? 'bg-green-100 text-green-700' :
                            project.category === 'education' ? 'bg-purple-100 text-purple-700' :
                            project.category === 'agriculture' ? 'bg-yellow-100 text-yellow-700' :
                            project.category === 'environment' ? 'bg-emerald-100 text-emerald-700' :
                            project.category === 'transportation' ? 'bg-orange-100 text-orange-700' :
                            'bg-gray-100 text-gray-700'
                          }`}>{project.category}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <span class={`px-2 py-1 text-xs font-medium rounded-full ${
                            project.status === 'ongoing' ? 'bg-blue-100 text-blue-700' :
                            project.status === 'complete' ? 'bg-green-100 text-green-700' :
                            project.status === 'pending' ? 'bg-yellow-100 text-yellow-700' :
                            project.status === 'delayed' ? 'bg-red-100 text-red-700 animate-pulse' :
                            'bg-gray-100 text-gray-700'
                          }`}>{project.status}</span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="text-sm text-gray-900">{formatBudget(project.totalBudget)}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="flex items-center">
                            <div class="w-20 bg-gray-200 rounded-full h-3 mr-3 group-hover:bg-gray-300 transition-colors overflow-hidden">
                              <div 
                                class="h-3 rounded-full transition-all duration-2000 ease-out table-progress-bar-fill"
                                style="width: 0%"
                                data-progress={progress.overall}
                                data-progress-color={progress.overall >= 0 && progress.overall <= 25 ? 'bg-red-500' : progress.overall >= 26 && progress.overall <= 50 ? 'bg-yellow-500' : progress.overall >= 51 && progress.overall <= 75 ? 'bg-blue-500' : progress.overall >= 76 && progress.overall <= 100 ? 'bg-green-500' : 'bg-gray-500'}
                              ></div>
                            </div>
                            <span class="text-sm text-gray-900">{progress.overall}%</span>
                          </div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {project.endDate || 'N/A'}
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap">
                          <div class="text-sm text-gray-900">{project.location || 'N/A'}</div>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                          <div class="flex items-center gap-2">
                            <button 
                              onclick={`viewProjectDetails('${project.id}')`} 
                              class="btn-view"
                            >
                              View
                            </button>
                            <button 
                              onclick={`editProject('${project.id}')`} 
                              class="btn-edit"
                            >
                              Edit
                            </button>
                            {project.status === 'complete' ? (
                              <button 
                                onclick={`generateReport('${project.id}')`} 
                                class="btn-update"
                              >
                                Report
                              </button>
                            ) : (
                              <button 
                                onclick={`updateProgress('${project.id}')`} 
                                class="btn-update"
                              >
                                Update
                              </button>
                            )}
                            <button 
                              onclick={`deleteProject('${project.id}')`} 
                              class="btn-delete"
                            >
                              Delete
                            </button>
                          </div>
                        </td>
                      </tr>
                    );
                  })}
                </tbody>
              </table>
            </div>
            <div class="px-6 py-4 bg-gradient-to-r from-gray-50 to-gray-100 border-t border-gray-200">
              <div class="flex items-center justify-between">
                <div class="flex items-center gap-4">
                  <p class="text-sm font-semibold text-gray-700">Showing <span id="showingCount" class="text-amber-600 font-bold">{projects.length}</span> of <span id="totalCount" class="text-amber-600 font-bold">{projects.length}</span> projects</p>
                  <div class="flex items-center gap-2">
                    <div class="w-2 h-2 bg-amber-500 rounded-full animate-pulse"></div>
                    <span class="text-xs text-gray-500">Live Data</span>
                  </div>
                </div>
                <div class="flex items-center gap-2">
                  <button class="px-3 py-1 text-xs font-medium text-gray-600 hover:text-amber-600 hover:bg-amber-50 rounded-lg transition-all duration-300 hover:scale-105">
                    <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    Refresh
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </section>

    <!-- Project Details Modal -->
    <ProjectDetailsModal userTheme="iu-implementing-office" />

    <!-- Create Project Modal -->
    <div id="createProjectModal" class="fixed inset-0 bg-black bg-opacity-60 hidden z-50 backdrop-blur-sm">
      <div class="flex items-start justify-center min-h-screen p-4 pt-8">
        <div class="bg-white rounded-3xl shadow-2xl w-full max-w-7xl max-h-[95vh] overflow-y-auto border border-gray-100">
          <!-- Enhanced Header with Warm Orange Theme -->
          <div class="bg-gradient-to-r from-[#F28C00] via-[#E67E00] to-[#D2691E] p-8 text-white relative overflow-hidden">
            <div class="absolute inset-0 bg-black/10"></div>
            <div class="relative flex items-center justify-between">
              <div class="flex items-center gap-6">
                <div class="bg-white/20 p-4 rounded-2xl backdrop-blur-sm">
                  <svg class="w-10 h-10" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
                <div>
                  <h2 class="text-4xl font-bold mb-2">Create New Project</h2>
                  <p class="text-white/90 text-lg">Define comprehensive project details and milestones for successful implementation</p>
                </div>
              </div>
              <div class="flex items-center gap-3">
                <button onclick="window.saveProjectInformation()" class="bg-white/20 hover:bg-white/30 px-4 py-3 rounded-xl transition-all duration-200 backdrop-blur-sm text-white font-semibold text-sm">
                  💾 Save Information
                </button>
                <button onclick="window.loadSavedProjectInformation()" class="bg-white/20 hover:bg-white/30 px-4 py-3 rounded-xl transition-all duration-200 backdrop-blur-sm text-white font-semibold text-sm">
                  📂 Load Saved Data
                </button>
                <button onclick="window.clearAllProjectInformation()" class="bg-white/20 hover:bg-white/30 px-4 py-3 rounded-xl transition-all duration-200 backdrop-blur-sm text-white font-semibold text-sm">
                  🗑️ Clear All Information
                </button>
                <button onclick="window.showCancelConfirmation()" class="bg-white/20 hover:bg-white/30 p-3 rounded-xl transition-all duration-200 backdrop-blur-sm">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            </div>
          </div>

          <!-- Progress Indicator -->
          <div class="bg-gray-50 px-8 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-4">
                <div class="flex items-center gap-2">
                  <div id="step1-indicator" class="w-8 h-8 rounded-full bg-[#F28C00] text-white flex items-center justify-center text-sm font-bold">1</div>
                  <span class="text-sm font-medium text-gray-700">Basic Information</span>
                </div>
                <div class="w-8 h-0.5 bg-gray-300"></div>
                <div class="flex items-center gap-2">
                  <div id="step2-indicator" class="w-8 h-8 rounded-full bg-gray-300 text-gray-500 flex items-center justify-center text-sm font-bold">2</div>
                  <span class="text-sm font-medium text-gray-500">Timeline & Budget</span>
                </div>
                <div class="w-8 h-0.5 bg-gray-300"></div>
                <div class="flex items-center gap-2">
                  <div id="step3-indicator" class="w-8 h-8 rounded-full bg-gray-300 text-gray-500 flex items-center justify-center text-sm font-bold">3</div>
                  <span class="text-sm font-medium text-gray-500">Milestones</span>
                </div>
              </div>
              <div class="text-sm text-gray-500">
                Step <span id="current-step">1</span> of 3
            </div>
            </div>
          </div>
          
          <form id="createProjectForm" class="p-6 space-y-8">
            <style>
              .step-content {
                transition: all 0.3s ease-in-out;
              }
              .step-content.hidden {
                display: none;
              }
              .step-indicator {
                transition: all 0.3s ease-in-out;
              }
            </style>
            <!-- Step 1: Basic Project Information and External Partner (EIU) -->
            <div id="step1" class="step-content">
            <!-- Basic Project Information -->
            <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-8 border border-blue-200 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-blue-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Basic Project Information</h3>
                  <p class="text-gray-600">Essential details about your project</p>
                </div>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Code *</label>
                  <input type="text" name="projectCode" required class="w-full px-4 py-3 border border-gray-300 rounded-xl bg-gray-100 focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="Auto-generated" id="projectCodeField" readonly>
                  <p class="text-xs text-gray-500 mt-1">Automatically generated based on department and year</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project/Program Title *</label>
                  <input type="text" name="name" id="createProjectTitle" maxlength="100" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="e.g., Installation of Solar and LED Streetlights at Various Barangays" oninput="window.autoCapitalizeFirst(this); window.updateProjectCharacterCount('createProjectTitle', 'createProjectTitleCount', 100);">
                  <div class="flex items-center justify-between mt-1">
                    <span class="text-xs text-gray-500">Maximum 100 characters</span>
                    <span class="text-xs text-gray-400" id="createProjectTitleCount">0/100</span>
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Implementing Office *</label>
                  <input type="text" name="implementingOfficeName" id="implementingOfficeName" required class="w-full px-4 py-3 border border-gray-300 rounded-xl bg-gray-100 focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="Auto-filled based on user" readonly>
                  <p class="text-xs text-gray-500 mt-1">Automatically set based on the creating user's department</p>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Category *</label>
                  <select name="category" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200">
                    <option value="" disabled selected>Select Category</option>
                    <option value="infrastructure">Infrastructure</option>
                    <option value="health">Health</option>
                    <option value="education">Education</option>
                    <option value="agriculture">Agriculture</option>
                    <option value="social">Social Services</option>
                    <option value="environment">Environment</option>
                    <option value="transportation">Transportation</option>
                  </select>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Location/Barangay *</label>
                  <div id="createBarangayContainer" class="space-y-2">
                    <div class="flex gap-2">
                      <select name="location[]" required class="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200 barangay-select">
                        <option value="" disabled selected>Select Barangay</option>
                        <option value="Various Barangay">Various Barangay</option>
                        <option value="Alipit">Alipit</option>
                        <option value="Bagumbayan">Bagumbayan</option>
                        <option value="Bubukal">Bubukal</option>
                        <option value="Calios">Calios</option>
                        <option value="Duhat">Duhat</option>
                        <option value="Gatid">Gatid</option>
                        <option value="Jasaan">Jasaan</option>
                        <option value="Labuin">Labuin</option>
                        <option value="Malinao">Malinao</option>
                        <option value="Oogong">Oogong</option>
                        <option value="Pagsawitan">Pagsawitan</option>
                        <option value="Palasan">Palasan</option>
                        <option value="Patimbao">Patimbao</option>
                        <option value="Poblacion I">Poblacion I</option>
                        <option value="Poblacion II">Poblacion II</option>
                        <option value="Poblacion III">Poblacion III</option>
                        <option value="Poblacion IV">Poblacion IV</option>
                        <option value="Poblacion V">Poblacion V</option>
                        <option value="San Jose">San Jose</option>
                        <option value="San Juan">San Juan</option>
                        <option value="San Pablo Norte">San Pablo Norte</option>
                        <option value="San Pablo Sur">San Pablo Sur</option>
                        <option value="Santisima Cruz">Santisima Cruz</option>
                        <option value="Santo Angel Central">Santo Angel Central</option>
                        <option value="Santo Angel Norte">Santo Angel Norte</option>
                        <option value="Santo Angel Sur">Santo Angel Sur</option>
                      </select>
                      <button type="button" onclick="addCreateBarangayDropdown()" class="px-4 py-3 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-all duration-200 shadow-lg hover:shadow-xl">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Priority *</label>
                  <select name="priority" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200">
                    <option value="" disabled selected>Select Priority</option>
                    <option value="high">High</option>
                    <option value="medium">Medium</option>
                    <option value="low">Low</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Funding Source *</label>
                  <select name="fundingSource" required class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200">
                    <option value="" disabled selected>Select Funding Source</option>
                    <option value="local_fund">Local Fund</option>
                    <option value="national_fund">National Fund</option>
                    <option value="foreign_fund">Foreign Fund</option>
                    <option value="private_fund">Private Fund</option>
                    <option value="donor_fund">Municipal Development Fund</option>
                    <option value="mixed_fund">Mixed Fund</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Created Date *</label>
                  <input type="date" name="createdDate" required class="w-full px-4 py-3 border border-gray-300 rounded-xl bg-gray-100 focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" readonly>
                  <p class="text-xs text-gray-500 mt-1">Automatically set to current date</p>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Description *</label>
                  <textarea name="description" id="description" maxlength="500" required rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="Detailed description of the project..." oninput="window.autoCapitalizeFirst(this); window.updateProjectCharacterCount('description', 'descriptionCount', 500);"></textarea>
                  <div class="flex items-center justify-between mt-1">
                    <span class="text-xs text-gray-500">Maximum 500 characters</span>
                    <span class="text-xs text-gray-400" id="descriptionCount">0/500</span>
                  </div>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Expected Outputs *</label>
                  <textarea name="expectedOutputs" id="createExpectedOutputs" maxlength="500" rows="2" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="Expected outputs and deliverables..." required oninput="window.autoCapitalizeFirst(this); window.updateProjectCharacterCount('createExpectedOutputs', 'createExpectedOutputsCount', 500);"></textarea>
                  <div class="flex items-center justify-between mt-1">
                    <span class="text-xs text-gray-500">Maximum 500 characters</span>
                    <span class="text-xs text-gray-400" id="createExpectedOutputsCount">0/500</span>
                  </div>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Target Beneficiaries *</label>
                  <textarea name="targetBeneficiaries" id="createTargetBeneficiaries" maxlength="500" rows="2" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="Target beneficiaries and stakeholders..." required oninput="window.autoCapitalizeFirst(this); window.updateProjectCharacterCount('createTargetBeneficiaries', 'createTargetBeneficiariesCount', 500);"></textarea>
                  <div class="flex items-center justify-between mt-1">
                    <span class="text-xs text-gray-500">Maximum 500 characters</span>
                    <span class="text-xs text-gray-400" id="createTargetBeneficiariesCount">0/500</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Spacing between sections -->
            <div class="my-8"></div>

            <!-- External Partner (EIU) -->
            <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-8 border border-green-200 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-green-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">External Partner (EIU)</h3>
                  <p class="text-gray-600">External Implementing Unit partner details</p>
                </div>
              </div>
              <div class="space-y-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">EIU Unique User ID *</label>
                    <div class="flex gap-2">
                    <input type="text" name="eiuPersonnelId" id="eiuPersonnelId" required class="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="Enter EIU Unique User ID">
                    <button type="button" onclick="validateEIUAccount()" class="px-6 py-3 bg-gradient-to-r from-[#F28C00] to-[#E67E00] text-white rounded-xl hover:from-[#E67E00] hover:to-[#D2691E] transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105" title="Verify EIU Account">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                      </button>
                    </div>
                    <p class="text-xs text-gray-500 mt-1">Enter the unique user ID of the EIU personnel assigned to this project</p>
                    <div id="eiuValidationMessage" class="mt-2"></div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Step 2: Timeline Info, Budget Info, and Physical Accomplishment Info -->
            <div id="step2" class="step-content hidden">
                        <!-- Timeline Info -->
            <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-8 border border-blue-200 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-blue-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Timeline Info</h3>
                  <p class="text-gray-600">Project start and end dates</p>
                </div>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Start Date *</label>
                  <input type="date" name="startDate" id="startDate" required onchange="window.updateProjectStartDate(); window.calculateExpectedDays()" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Target Completion Date *</label>
                  <input type="date" name="targetCompletionDate" id="targetCompletionDate" required onchange="window.calculateExpectedDays(); window.syncLastMilestoneWithTargetDate();" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Expected Days of Completion</label>
                  <input type="text" name="expectedDaysOfCompletion" id="expectedDaysOfCompletion" readonly class="w-full px-4 py-3 border border-gray-300 rounded-xl bg-gray-50 text-gray-600 cursor-not-allowed" placeholder="Auto-calculated">
                  <p class="text-xs text-gray-500 mt-1">Automatically calculated from start and target dates</p>
                </div>
              </div>
            </div>

            <!-- Budget Info -->
            <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-8 border border-green-200 shadow-lg mt-8">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-green-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Budget Info</h3>
                  <p class="text-gray-600">Total budget allocation and description</p>
                </div>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Total Budget Allocation (₱) *</label>
                  <input type="text" name="totalBudget" id="totalBudget" required onchange="window.updateAllMilestoneWeights(); window.calculateTotals()" oninput="window.formatBudgetInput(this)" onkeydown="window.handleBudgetKeydown(event)" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="e.g., 1,000,000.00">
                  <p class="text-xs text-gray-500 mt-1">Format: "1,000,000.00" | Range: ₱500,000.00 - ₱999,999,999.00</p>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Budget Description *</label>
                  <textarea name="budgetBreakdown" id="budgetBreakdown" maxlength="500" rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="Detailed description of budget allocation..." required oninput="window.autoCapitalizeFirst(this); window.updateProjectCharacterCount('budgetBreakdown', 'budgetBreakdownCount', 500);"></textarea>
                  <div class="flex items-center justify-between mt-1">
                    <span class="text-xs text-gray-500">Maximum 500 characters</span>
                    <span class="text-xs text-gray-400" id="budgetBreakdownCount">0/500</span>
                  </div>
                </div>
              </div>
            </div>

            <!-- Physical Accomplishment Info -->
            <div class="bg-gradient-to-br from-orange-50 to-orange-100 rounded-2xl p-8 border border-orange-200 shadow-lg mt-8">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-orange-500 p-3 rounded-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Physical Accomplishment Info</h3>
                  <p class="text-gray-600">General description of physical progress</p>
                </div>
              </div>
              <div class="grid grid-cols-1 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">General Description *</label>
                  <textarea name="physicalProgressRequirements" id="physicalProgressRequirements" maxlength="500" rows="3" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200" placeholder="General description of physical accomplishment requirements..." required oninput="window.autoCapitalizeFirst(this); window.updateProjectCharacterCount('physicalProgressRequirements', 'physicalProgressRequirementsCount', 500);"></textarea>
                  <div class="flex items-center justify-between mt-1">
                    <span class="text-xs text-gray-500">Maximum 500 characters</span>
                    <span class="text-xs text-gray-400" id="physicalProgressRequirementsCount">0/500</span>
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Initial Photo Uploading</label>
                  <div class="space-y-4">
                    <div class="flex items-center gap-4">
                      <input type="radio" name="initialPhotoOption" id="uploadPhoto" value="upload" class="w-4 h-4 text-[#F28C00] bg-gray-100 border-gray-300 focus:ring-[#F28C00] focus:ring-2">
                      <label for="uploadPhoto" class="text-sm font-medium text-gray-700">Upload Photo</label>
                    </div>
                    <div class="flex items-center gap-4">
                      <input type="radio" name="initialPhotoOption" id="useDefault" value="default" checked class="w-4 h-4 text-[#F28C00] bg-gray-100 border-gray-300 focus:ring-[#F28C00] focus:ring-2">
                      <label for="useDefault" class="text-sm font-medium text-gray-700">None (Use Default)</label>
                    </div>
                    
                    <div id="photoUploadSection" class="hidden">
                      <input type="file" name="initialPhoto" accept="image/*" class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent transition-all duration-200">
                      <p class="text-xs text-gray-500 mt-1">Upload an initial project photo (JPG, PNG, GIF)</p>
                    </div>
                    
                    <div id="defaultPhotoInfo" class="bg-blue-50 p-3 rounded-lg border border-blue-200">
                      <p class="text-xs text-blue-700">
                        <strong>Default Photo:</strong> If "None" is selected, the system will automatically load default photo as default photo.
                      </p>
                    </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Step 3: Project Milestones Configuration -->
            <div id="step3" class="step-content hidden">
            <!-- Project Milestones Configuration -->
            <div class="bg-gradient-to-br from-orange-50 to-amber-50 rounded-2xl p-8 border border-orange-100 shadow-lg">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-gradient-to-r from-orange-500 to-amber-500 p-3 rounded-xl">
                  <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-2xl font-bold text-gray-800">Project Milestones Configuration</h3>
                  <p class="text-gray-600">Define comprehensive milestones with weights, budgets, and timelines for successful project tracking</p>
                </div>
              </div>
              
              <div id="createMilestonesContainer" class="space-y-4">
                <!-- Milestone template will be added here -->
              </div>
              
              <!-- Enhanced Totals Dashboard -->
              <div class="mt-8 bg-white rounded-2xl p-6 shadow-lg border border-gray-100">
                <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                  <div class="text-center p-4 bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl border border-blue-200">
                    <div class="text-2xl font-bold text-blue-600 mb-1" id="createTotalWeight">0%</div>
                    <div class="text-sm font-medium text-blue-700">Total Weight</div>
                  </div>
                  <div class="text-center p-4 bg-gradient-to-br from-green-50 to-green-100 rounded-xl border border-green-200">
                    <div class="text-2xl font-bold text-green-600 mb-1" id="createTotalMilestoneBudget">₱0.00</div>
                    <div class="text-sm font-medium text-green-700">Total Budget</div>
                    <div class="text-xs text-gray-500 mt-1" id="budgetMatchStatus">Matches allocation</div>
                  </div>
                  <div class="text-center p-4 bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl border border-purple-200">
                    <div class="text-2xl font-bold text-purple-600 mb-1" id="createMilestoneCount">0</div>
                    <div class="text-sm font-medium text-purple-700">Milestone Count</div>
                  </div>
                  <div class="flex items-center justify-center">
                    <button type="button" onclick="window.addMilestone()" class="bg-gradient-to-r from-[#F28C00] to-[#E67E00] text-white px-6 py-3 rounded-xl hover:from-[#E67E00] hover:to-[#D2691E] transition-all duration-200 flex items-center gap-3 shadow-lg hover:shadow-xl transform hover:scale-105">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                      </svg>
                      <span class="font-semibold">Add Milestone</span>
                    </button>
                  </div>
                </div>
              </div>
              
              <!-- Enhanced Guidelines -->
              <div class="mt-6 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-2xl p-6 border border-blue-200">
                <div class="flex items-center gap-3 mb-4">
                  <div class="bg-blue-500 p-2 rounded-lg">
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <h4 class="text-lg font-semibold text-blue-800">Milestone Guidelines</h4>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div class="space-y-2">
                    <div class="flex items-center gap-2 text-sm text-blue-700">
                      <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <strong>Weight:</strong> Percentage contribution to overall project progress (must total 100%)
                    </div>
                    <div class="flex items-center gap-2 text-sm text-blue-700">
                      <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <strong>Planned Budget:</strong> Budget allocation for this milestone
                    </div>
                  </div>
                  <div class="space-y-2">
                    <div class="flex items-center gap-2 text-sm text-blue-700">
                      <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <strong>Timeline:</strong> Planned start and end dates for the milestone
                    </div>
                    <div class="flex items-center gap-2 text-sm text-blue-700">
                      <div class="w-2 h-2 bg-blue-500 rounded-full"></div>
                      <strong>Physical Requirements:</strong> Photos, videos, and documentation required
                    </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Navigation Buttons -->
            <div class="flex items-center justify-between pt-8 border-t border-gray-200 bg-gradient-to-r from-gray-50 to-gray-100 p-6 rounded-b-3xl">
              <div class="flex items-center gap-4">
                <button type="button" onclick="window.showCancelConfirmation()" class="px-6 py-3 text-gray-600 border-2 border-gray-300 rounded-xl hover:bg-gray-100 hover:border-gray-400 transition-all duration-200 font-semibold">
                Cancel
              </button>
                <button type="button" onclick="window.saveProjectInformation()" class="px-6 py-3 bg-blue-600 text-white border-2 border-blue-600 rounded-xl hover:bg-blue-700 hover:border-blue-700 transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105">
                💾 Save Information
              </button>
              </div>
              
              <div class="flex items-center gap-4">
                <button type="button" id="prevBtn" onclick="window.changeStep(-1)" class="px-6 py-3 text-gray-600 border-2 border-gray-300 rounded-xl hover:bg-gray-100 hover:border-gray-400 transition-all duration-200 font-semibold hidden">
                  <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  Back
                </button>
                <button type="button" id="nextBtn" onclick="window.changeStep(1)" class="px-6 py-3 bg-gradient-to-r from-[#F28C00] to-[#E67E00] text-white rounded-xl hover:from-[#E67E00] hover:to-[#D2691E] transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105">
                  Next
                  <svg class="w-5 h-5 inline ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </button>
                <button type="submit" id="submitBtn" class="bg-gradient-to-r from-[#F28C00] to-[#E67E00] text-white px-8 py-3 rounded-xl hover:from-[#E67E00] hover:to-[#D2691E] transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 hidden">
                Create Project
              </button>
              </div>
            </div>
          </form>
        </div>
      </div>

    <!-- Edit Project Modal -->
    <div id="editProjectModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-[9999]">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-2xl shadow-2xl w-full max-w-6xl max-h-[90vh] overflow-y-auto">
          <div class="p-6 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h2 class="text-2xl font-bold text-gray-800">Edit Project/Program</h2>
              <button onclick="closeEditProjectModal()" class="text-gray-400 hover:text-gray-600">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
            <p class="text-gray-600 mt-2">Update project information and milestones</p>
          </div>
          
          <form id="editProjectForm" class="p-6 space-y-8">
            <!-- Basic Project Information -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">📋 Basic Project Information</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Code *</label>
                  <input type="text" name="projectCode" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="e.g., PRJ-2025-001">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project/Program Title *</label>
                  <input type="text" name="name" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="e.g., Installation of Solar and LED Streetlights at Various Barangays">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Implementing Office *</label>
                  <input type="text" name="implementingOfficeName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg bg-gray-100 focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Auto-filled based on user" readonly>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Category *</label>
                  <select name="category" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent">
                    <option value="">Select Category</option>
                    <option value="infrastructure">Infrastructure</option>
                    <option value="health">Health</option>
                    <option value="education">Education</option>
                    <option value="agriculture">Agriculture</option>
                    <option value="social">Social Services</option>
                    <option value="environment">Environment</option>
                    <option value="transportation">Transportation</option>
                  </select>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Location/Barangay *</label>
                  <div id="editBarangayContainer" class="space-y-2">
                    <div class="flex gap-2">
                      <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent barangay-select">
                        <option value="">Select Barangay</option>
                        <option value="Various Barangay">Various Barangay</option>
                        <option value="Alipit">Alipit</option>
                        <option value="Bagumbayan">Bagumbayan</option>
                        <option value="Bubukal">Bubukal</option>
                        <option value="Calios">Calios</option>
                        <option value="Duhat">Duhat</option>
                        <option value="Gatid">Gatid</option>
                        <option value="Jasaan">Jasaan</option>
                        <option value="Labuin">Labuin</option>
                        <option value="Malinao">Malinao</option>
                        <option value="Oogong">Oogong</option>
                        <option value="Pagsawitan">Pagsawitan</option>
                        <option value="Palasan">Palasan</option>
                        <option value="Patimbao">Patimbao</option>
                        <option value="Poblacion I">Poblacion I</option>
                        <option value="Poblacion II">Poblacion II</option>
                        <option value="Poblacion III">Poblacion III</option>
                        <option value="Poblacion IV">Poblacion IV</option>
                        <option value="Poblacion V">Poblacion V</option>
                        <option value="San Jose">San Jose</option>
                        <option value="San Juan">San Juan</option>
                        <option value="San Pablo Norte">San Pablo Norte</option>
                        <option value="San Pablo Sur">San Pablo Sur</option>
                        <option value="Santisima Cruz">Santisima Cruz</option>
                        <option value="Santo Angel Central">Santo Angel Central</option>
                        <option value="Santo Angel Norte">Santo Angel Norte</option>
                        <option value="Santo Angel Sur">Santo Angel Sur</option>
                      </select>
                      <button type="button" onclick="addEditBarangayDropdown()" class="px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors text-sm">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Priority *</label>
                  <select name="priority" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent">
                    <option value="">Select Priority</option>
                    <option value="high">High</option>
                    <option value="medium">Medium</option>
                    <option value="low">Low</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Funding Source *</label>
                  <select name="fundingSource" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent">
                    <option value="">Select Funding Source</option>
                    <option value="local_fund">Local Fund</option>
                    <option value="national_fund">National Fund</option>
                    <option value="foreign_fund">Foreign Fund</option>
                    <option value="private_fund">Private Fund</option>
                    <option value="donor_fund">Municipal Development Fund</option>
                    <option value="mixed_fund">Mixed Fund</option>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Created Date *</label>
                  <input type="date" name="createdDate" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Description *</label>
                  <textarea name="description" required rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Detailed description of the project..."></textarea>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Expected Outputs</label>
                  <textarea name="expectedOutputs" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Expected outputs and deliverables..."></textarea>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Target Beneficiaries</label>
                  <textarea name="targetBeneficiaries" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Target beneficiaries and stakeholders..."></textarea>
                </div>
              </div>
            </div>

            <!-- External Partner Information -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">🤝 External Partner Information</h3>
              <div class="space-y-4">
                <div class="flex items-center">
                  <input type="checkbox" name="hasExternalPartner" id="editHasExternalPartner" class="w-4 h-4 text-[#F28C00] bg-gray-100 border-gray-300 rounded focus:ring-[#F28C00] focus:ring-2">
                  <label for="editHasExternalPartner" class="ml-2 text-sm font-medium text-gray-700">Has External Implementing Unit (EIU) Partner</label>
                </div>
                
                <div id="editEiuFields" class="hidden space-y-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">EIU Personnel Account ID</label>
                    <input type="text" name="eiuPersonnelId" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Enter EIU Personnel Account ID">
                    <p class="text-xs text-gray-500 mt-1">Enter the Account ID of the EIU personnel assigned to this project</p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Timeline Division -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">📅 Timeline Division</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Start Date *</label>
                  <input type="date" name="startDate" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">End Date *</label>
                  <input type="date" name="endDate" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Timeline Milestones</label>
                  <textarea name="timelineMilestones" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Key timeline milestones and deadlines..."></textarea>
                </div>
              </div>
            </div>

            <!-- Budget Division -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">💰 Budget Division</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Total Budget (₱) *</label>
                  <input type="number" name="totalBudget" required min="0" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="e.g., 5000000">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Budget Breakdown</label>
                  <textarea name="budgetBreakdown" rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Detailed breakdown of budget allocation..."></textarea>
                </div>
              </div>
            </div>

            <!-- Physical Division -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">🏗️ Physical Division</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Required Documentation</label>
                  <textarea name="requiredDocumentation" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Required documentation for physical progress..."></textarea>
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Physical Progress Requirements</label>
                  <textarea name="physicalProgressRequirements" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Specific requirements for physical progress tracking..."></textarea>
                </div>
              </div>
            </div>

            <!-- Additional Information -->
            <div class="bg-gray-50 rounded-lg p-6">
              <h3 class="text-lg font-semibold text-gray-800 mb-4">📋 Additional Information</h3>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Project Manager</label>
                  <input type="text" name="projectManager" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Name of project manager">
                </div>
                
                <div>
                  <label class="block text-sm font-medium text-gray-700 mb-2">Contact Number</label>
                  <input type="text" name="contactNumber" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Contact number">
                </div>
                
                <div class="md:col-span-2">
                  <label class="block text-sm font-medium text-gray-700 mb-2">Special Requirements</label>
                  <textarea name="specialRequirements" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Any special requirements or considerations..."></textarea>
                </div>
              </div>
            </div>

            <!-- Milestone Configuration -->
            <div class="bg-gray-50 rounded-lg p-6">
              <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-semibold text-gray-800">🎯 Milestone Configuration</h3>
                <button type="button" onclick="addMilestone()" class="px-4 py-2 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors flex items-center gap-2">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                  Add Milestone
                </button>
              </div>
              
              <div class="mb-4 p-4 bg-white rounded-lg border border-gray-200">
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div>
                    <span class="text-gray-600">Total Weight:</span>
                    <span id="totalWeight" class="ml-2 font-bold text-red-600">0.00%</span>
                  </div>
                  <div>
                    <span class="text-gray-600">Total Milestone Budget:</span>
                    <span id="totalMilestoneBudget" class="ml-2 font-bold">₱0.00</span>
                  </div>
                  <div>
                    <span class="text-gray-600">Milestone Count:</span>
                    <span id="milestoneCount" class="ml-2 font-bold">0</span>
                  </div>
                </div>
                <div class="mt-2 text-xs text-gray-500">
                  <p><strong>Progress Calculation:</strong> Each milestone weight is automatically distributed across 3 divisions (Timeline, Budget, Physical).</p>
                  <p><strong>Example:</strong> 5 milestones = 20% each. Each division gets 6.67% (20% × 33.33%). When all 3 divisions of Milestone 1 are approved: 6.67% × 3 = 20% total progress gain.</p>
                </div>
              </div>
              
              <div id="milestonesContainer" class="space-y-6">
                <!-- Milestones will be added here dynamically -->
              </div>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end gap-4 pt-6 border-t border-gray-200">
              <button type="button" onclick="closeEditProjectModal()" class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
                Cancel
              </button>
              <button type="submit" class="px-6 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A6219] transition-colors">
                Update Project
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>


  </IUImplementingOfficeLayout>
</Layout>



<!-- Global functions that need to be available immediately -->










<!-- Enhanced Project Management Functions -->
<script>
  // Enhanced filter and search functions
  window.filterByCard = function(filterType) {
    console.log('🔍 Filtering by card:', filterType);
    
    // Remove active class from all cards
    document.querySelectorAll('.summary-card').forEach(card => {
      card.classList.remove('ring-2', 'ring-amber-500', 'ring-offset-2');
    });
    
    // Add active class to clicked card
    event.currentTarget.classList.add('ring-2', 'ring-amber-500', 'ring-offset-2');
    
    // Apply filter logic
    const projects = window.allProjects || [];
    let filteredProjects = projects;
    
    switch(filterType) {
      case 'total':
        filteredProjects = projects;
        break;
      case 'pending':
        filteredProjects = projects.filter(p => p.status === 'pending');
        break;
      case 'ongoing':
        filteredProjects = projects.filter(p => p.status === 'ongoing');
        break;
      case 'completed':
        filteredProjects = projects.filter(p => p.status === 'complete');
        break;
      case 'delayed':
        filteredProjects = projects.filter(p => p.status === 'delayed');
        break;
      case 'revision':
        filteredProjects = projects.filter(p => p.status === 'revision');
        break;
      case 'progress':
        filteredProjects = projects.sort((a, b) => {
          const progressA = parseFloat(a.progress?.overallProgress || a.overallProgress || 0);
          const progressB = parseFloat(b.progress?.overallProgress || b.overallProgress || 0);
          return progressB - progressA;
        });
        break;
      case 'budget':
        filteredProjects = projects.sort((a, b) => {
          const budgetA = parseFloat(a.totalBudget || 0);
          const budgetB = parseFloat(b.totalBudget || 0);
          return budgetB - budgetA;
        });
        break;
    }
    
    // Update project display
    window.updateProjectDisplay(filteredProjects);
  };

  window.applyProjectFilters = function() {
    const searchTerm = document.getElementById('projectSearchInput')?.value.toLowerCase() || '';
    const statusFilter = document.getElementById('statusFilter')?.value || '';
    const priorityFilter = document.getElementById('priorityFilter')?.value || '';
    const sortFilter = document.getElementById('sortFilter')?.value || 'name';
    
    console.log('🔍 Applying filters:', { searchTerm, statusFilter, priorityFilter, sortFilter });
    
    let filteredProjects = window.allProjects || [];
    
    // Apply search filter
    if (searchTerm) {
      filteredProjects = filteredProjects.filter(project => 
        project.name?.toLowerCase().includes(searchTerm) ||
        project.description?.toLowerCase().includes(searchTerm) ||
        project.projectCode?.toLowerCase().includes(searchTerm)
      );
    }
    
    // Apply status filter
    if (statusFilter) {
      filteredProjects = filteredProjects.filter(project => project.status === statusFilter);
    }
    
    // Apply priority filter
    if (priorityFilter) {
      filteredProjects = filteredProjects.filter(project => project.priority === priorityFilter);
    }
    
    // Apply sorting
    switch(sortFilter) {
      case 'name':
        filteredProjects.sort((a, b) => (a.name || '').localeCompare(b.name || ''));
        break;
      case 'status':
        filteredProjects.sort((a, b) => (a.status || '').localeCompare(b.status || ''));
        break;
      case 'progress':
        filteredProjects.sort((a, b) => {
          const progressA = parseFloat(a.progress?.overallProgress || a.overallProgress || 0);
          const progressB = parseFloat(b.progress?.overallProgress || b.overallProgress || 0);
          return progressB - progressA;
        });
        break;
      case 'budget':
        filteredProjects.sort((a, b) => {
          const budgetA = parseFloat(a.totalBudget || 0);
          const budgetB = parseFloat(b.totalBudget || 0);
          return budgetB - budgetA;
        });
        break;
      case 'date':
        filteredProjects.sort((a, b) => new Date(b.createdAt || 0) - new Date(a.createdAt || 0));
        break;
    }
    
    // Update project display
    window.updateProjectDisplay(filteredProjects);
  };

  window.clearProjectFilters = function() {
    console.log('🧹 Clearing all filters');
    
    // Clear form inputs
    const searchInput = document.getElementById('projectSearchInput');
    const statusFilter = document.getElementById('statusFilter');
    const priorityFilter = document.getElementById('priorityFilter');
    const sortFilter = document.getElementById('sortFilter');
    
    if (searchInput) searchInput.value = '';
    if (statusFilter) statusFilter.value = '';
    if (priorityFilter) priorityFilter.value = '';
    if (sortFilter) sortFilter.value = 'name';
    
    // Remove active class from all cards
    document.querySelectorAll('.summary-card').forEach(card => {
      card.classList.remove('ring-2', 'ring-amber-500', 'ring-offset-2');
    });
    
    // Reset to show all projects
    window.updateProjectDisplay(window.allProjects || []);
  };

  window.updateProjectDisplay = function(projects) {
    console.log('📊 Updating project display with', projects.length, 'projects');
    
    // Update project count in header
    const headerCount = document.getElementById('headerProjectCount');
    if (headerCount) {
      headerCount.textContent = `${projects.length} Projects Available`;
    }
    
    // Update project grid (this would need to be implemented based on your project rendering logic)
    // For now, we'll just log the filtered projects
    console.log('Filtered projects:', projects);
  };

  window.exportProjectReport = function() {
    console.log('📊 Exporting project report');
    // Implementation for exporting project data
    alert('Export functionality will be implemented');
  };

  window.refreshProjectData = function() {
    console.log('🔄 Refreshing project data');
    // Implementation for refreshing project data
    window.location.reload();
  };

  // Store all projects globally for filtering
  window.allProjects = {projects};
</script>

<!-- Global functions that need to be available immediately -->
<script>
  // Professional finance-grade budget formatting function
  window.formatBudgetInput = function(input) {
    let cursorPosition = input.selectionStart;
    let originalValue = input.value;
    
    // Remove all non-digit and non-decimal characters
    let cleanValue = originalValue.replace(/[^\d.]/g, '');
    
    // Handle empty input
    if (!cleanValue || cleanValue === '') {
      input.value = '0.00';
      setTimeout(() => {
        if (input === document.activeElement) {
          input.setSelectionRange(1, 1); // Position after "0"
        }
      }, 0);
      return;
    }
    
    // Handle multiple decimal points - keep only the first one
    let decimalIndex = cleanValue.indexOf('.');
    if (decimalIndex !== -1) {
      let beforeDecimal = cleanValue.substring(0, decimalIndex);
      let afterDecimal = cleanValue.substring(decimalIndex + 1).replace(/\./g, ''); // Remove additional decimals
      cleanValue = beforeDecimal + '.' + afterDecimal;
    }
    
    // Split into integer and decimal parts
    let parts = cleanValue.split('.');
    let integerPart = parts[0] || '0';
    let decimalPart = parts[1] || '';
    
    // Remove leading zeros from integer part (except single "0")
    integerPart = integerPart.replace(/^0+/, '') || '0';
    
    // Limit decimal part to 2 digits
    if (decimalPart.length > 2) {
      decimalPart = decimalPart.substring(0, 2);
    }
    
    // Format integer part with commas (standard thousands separator)
    let formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    
    // Build final formatted value
    let formattedValue;
    if (parts.length > 1 || originalValue.includes('.')) {
      // User has typed or is typing decimals
      if (decimalPart === '') {
        formattedValue = formattedInteger + '.';
      } else {
        // Pad decimal part to 2 digits if needed for display consistency
        let displayDecimal = decimalPart.padEnd(2, '0');
        formattedValue = formattedInteger + '.' + displayDecimal;
      }
    } else {
      // No decimal point typed, show with .00
      formattedValue = formattedInteger + '.00';
    }
    
    // Check maximum limit (999,999,999.00)
    const numericValue = parseFloat(formattedValue.replace(/,/g, ''));
    if (numericValue > 999999999) {
      // Revert to previous valid value or cap at maximum
      const maxValue = '999,999,999.00';
      input.value = maxValue;
      formattedValue = maxValue;
      
      // Show warning message
      if (input.id === 'totalBudget') {
        alert('Maximum budget limit reached: ₱999,999,999.00');
      }
    } else {
    // Set the formatted value
    input.value = formattedValue;
    }
    
    // Smart cursor positioning
    let newCursorPosition = cursorPosition;
    
    // Calculate cursor position based on the formatting changes
    let originalDigitsBeforeCursor = originalValue.substring(0, cursorPosition).replace(/[^\d]/g, '').length;
    let originalWasInDecimal = originalValue.includes('.') && cursorPosition > originalValue.indexOf('.');
    
    if (originalWasInDecimal) {
      // User was editing decimal part
      let decimalIndex = formattedValue.indexOf('.');
      let decimalOffset = Math.min(
        cursorPosition - originalValue.indexOf('.') - 1,
        decimalPart.length
      );
      newCursorPosition = decimalIndex + 1 + decimalOffset;
    } else {
      // User was editing integer part
      let digitCount = 0;
      for (let i = 0; i < formattedValue.length; i++) {
        if (/\d/.test(formattedValue[i])) {
          digitCount++;
          if (digitCount >= originalDigitsBeforeCursor) {
            newCursorPosition = i + 1;
            break;
          }
        }
      }
      
      // Don't go past the decimal point when editing integers
      let decimalIndex = formattedValue.indexOf('.');
      if (newCursorPosition > decimalIndex && !originalWasInDecimal) {
        newCursorPosition = decimalIndex;
      }
    }
    
    // Set cursor position
    setTimeout(() => {
      if (input === document.activeElement) {
        input.setSelectionRange(newCursorPosition, newCursorPosition);
      }
    }, 0);
  };

  // Parse formatted budget value to number (finance-grade)
  window.parseBudgetValue = function(formattedValue) {
    if (!formattedValue || formattedValue === '' || formattedValue === '0.00') return 0;
    
    // Remove commas and parse as float
    const cleanValue = formattedValue.replace(/,/g, '');
    const numericValue = parseFloat(cleanValue);
    return isNaN(numericValue) ? 0 : numericValue;
  };

  // Handle special keydown events for budget inputs
  // Professional finance-grade keydown handler
  window.handleBudgetKeydown = function(event) {
    const input = event.target;
    const key = event.key;
    const cursorPosition = input.selectionStart;
    const selectionEnd = input.selectionEnd;
    const value = input.value;
    
    // Allow: backspace, delete, tab, escape, enter, home, end, left, right
    if ([8, 9, 27, 13, 35, 36, 37, 39, 46].indexOf(event.keyCode) !== -1 ||
        // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X, Ctrl+Z
        (event.keyCode === 65 && event.ctrlKey === true) ||
        (event.keyCode === 67 && event.ctrlKey === true) ||
        (event.keyCode === 86 && event.ctrlKey === true) ||
        (event.keyCode === 88 && event.ctrlKey === true) ||
        (event.keyCode === 90 && event.ctrlKey === true)) {
      
      return; // Allow all navigation and editing keys
    }
    
    // Handle decimal point
    if (key === '.') {
      // Don't allow multiple decimal points
      if (value.includes('.')) {
        event.preventDefault();
        return;
      }
      
      return; // Allow decimal point
    }
    
    // Only allow digits
    if ((event.shiftKey || (event.keyCode < 48 || event.keyCode > 57)) && 
        (event.keyCode < 96 || event.keyCode > 105)) {
      event.preventDefault();
      return;
    }
    
    // If typing after decimal point, limit to 2 digits
    const decimalIndex = value.indexOf('.');
    if (decimalIndex !== -1 && cursorPosition > decimalIndex) {
      const decimalPart = value.substring(decimalIndex + 1);
      if (decimalPart.length >= 2 && cursorPosition === selectionEnd) {
        event.preventDefault();
      }
    }
  };

  // Auto-calculation function - must be global and available immediately
  window.updateMilestoneCalculations = function(milestoneId) {
    const milestoneElement = document.getElementById(`milestone-${milestoneId}`);
    if (!milestoneElement) return;
    
    // Get milestone budget input
    const budgetInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][plannedBudget]"]`);
    const weightInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][weight]"]`);
    
    const milestoneBudget = window.parseBudgetValue(budgetInput?.value) || 0;
    
    // Get total budget allocation
    const totalBudgetInput = document.querySelector('input[name="totalBudget"]');
    const totalBudget = window.parseBudgetValue(totalBudgetInput?.value) || 0;
    
    // Calculate weight as percentage of total budget
    let milestoneWeight = 0;
    if (totalBudget > 0) {
      milestoneWeight = (milestoneBudget / totalBudget) * 100;
    }
    
    // Update weight input
    if (weightInput) {
      weightInput.value = milestoneWeight.toFixed(2);
    }
    
    // Calculate division weights (33.33% of milestone weight each)
    const divisionWeight = milestoneWeight / 3;
    
    // Update division weight fields
    const timelineWeightInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][timelineWeight]"]`);
    const budgetWeightInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][budgetWeight]"]`);
    const physicalWeightInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][physicalWeight]"]`);
    
    if (timelineWeightInput) timelineWeightInput.value = divisionWeight.toFixed(2);
    if (budgetWeightInput) budgetWeightInput.value = divisionWeight.toFixed(2);
    if (physicalWeightInput) physicalWeightInput.value = divisionWeight.toFixed(2);
    
    // Update budget division planned budget with proper formatting
    const budgetDivisionInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][budgetPlanned]"]`);
    if (budgetDivisionInput && milestoneBudget > 0) {
      // Format with commas and 2 decimal places
      budgetDivisionInput.value = milestoneBudget.toLocaleString('en-US', { 
        minimumFractionDigits: 2, 
        maximumFractionDigits: 2 
      });
    } else if (budgetDivisionInput) {
      budgetDivisionInput.value = '0.00';
    }
    
    // Update totals
    window.calculateTotals();
  };

  // Sync last milestone Due Date with Target Completion Date
  window.syncLastMilestoneWithTargetDate = function() {
    const allMilestones = document.querySelectorAll('#createMilestonesContainer .milestone-item');
    if (allMilestones.length === 0) return;
    
    const lastMilestone = allMilestones[allMilestones.length - 1];
    const lastMilestoneId = lastMilestone.id.replace('milestone-', '');
    
    const targetCompletionDateInput = document.getElementById('targetCompletionDate');
    if (targetCompletionDateInput && targetCompletionDateInput.value) {
      const dueDateInput = lastMilestone.querySelector(`input[name="milestones[${lastMilestoneId}][dueDate]"]`);
      const timelineEndDateInput = lastMilestone.querySelector(`input[name="milestones[${lastMilestoneId}][timelineEndDate]"]`);
      
      if (dueDateInput && timelineEndDateInput) {
        dueDateInput.value = targetCompletionDateInput.value;
        timelineEndDateInput.value = targetCompletionDateInput.value;
        console.log(`Synced last milestone ${lastMilestoneId} dates with Target Completion Date: ${targetCompletionDateInput.value}`);
      }
    }
  };
  
  // Auto-populate first milestone timeline start date
  window.autoPopulateFirstMilestoneStartDate = function() {
    const projectStartDateInput = document.querySelector('input[name="startDate"]');
    const firstMilestoneElement = document.querySelector('#milestone-1');
    
    if (projectStartDateInput && projectStartDateInput.value && firstMilestoneElement) {
      const firstMilestoneStartDateInput = firstMilestoneElement.querySelector('input[name="milestones[1][timelineStartDate]"]');
      
      if (firstMilestoneStartDateInput) {
        firstMilestoneStartDateInput.value = projectStartDateInput.value;
        // Make it readonly to indicate it's auto-populated
        firstMilestoneStartDateInput.readOnly = true;
        firstMilestoneStartDateInput.style.backgroundColor = '#f3f4f6';
        firstMilestoneStartDateInput.style.cursor = 'not-allowed';
        console.log(`Auto-populated first milestone timeline start date: ${projectStartDateInput.value}`);
      }
    }
  };
  

  // Auto-populate timeline end date when due date changes
  window.updateTimelineEndDate = function(milestoneId) {
    const milestoneElement = document.getElementById(`milestone-${milestoneId}`);
    if (!milestoneElement) return;
    
    // Get the due date input
    const dueDateInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][dueDate]"]`);
    const timelineEndDateInput = milestoneElement.querySelector(`input[name="milestones[${milestoneId}][timelineEndDate]"]`);
    
    if (dueDateInput && timelineEndDateInput) {
      // Auto-populate timeline end date with the due date
      timelineEndDateInput.value = dueDateInput.value;
      
      // For the last milestone, also sync with Target Completion Date
      const allMilestones = document.querySelectorAll('[id^="milestone-"]');
      const isLastMilestone = milestoneId == allMilestones.length;
      
      if (isLastMilestone) {
        const targetCompletionDateInput = document.getElementById('targetCompletionDate');
        if (targetCompletionDateInput && targetCompletionDateInput.value) {
          // Sync Due Date with Target Completion Date for last milestone
          dueDateInput.value = targetCompletionDateInput.value;
          timelineEndDateInput.value = targetCompletionDateInput.value;
        }
      }
    }
  };

  // Add proof type function
  window.addProofType = function(milestoneId) {
    const proofTypesContainer = document.getElementById(`proofTypes-${milestoneId}`);
    if (!proofTypesContainer) return;
    
    const proofTypeHtml = `
      <div class="flex items-center gap-2">
        <select name="milestones[${milestoneId}][physicalProofTypes][]" class="flex-1 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-orange-500">
          <option value="form">Form</option>
          <option value="video">Video</option>
          <option value="image">Image</option>
          <option value="document">Document</option>
          <option value="report">Report</option>
          <option value="audio">Audio</option>
          <option value="presentation">Presentation</option>
          <option value="certificate">Certificate</option>
                      </select>
        <button type="button" onclick="window.removeProofType(this)" class="px-2 py-1 text-xs bg-red-500 text-white rounded hover:bg-red-600 transition-colors">
          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </button>
                    </div>
    `;
    
    proofTypesContainer.insertAdjacentHTML('beforeend', proofTypeHtml);
  };

  // Remove proof type function
  window.removeProofType = function(button) {
    button.closest('.flex').remove();
  };

  // Calculate totals function - must be global and available immediately
  window.calculateTotals = function() {
    const weightInputs = document.querySelectorAll('#createMilestonesContainer input[name*="milestones"][name*="[weight]"]');
    const budgetInputs = document.querySelectorAll('#createMilestonesContainer input[name*="milestones"][name*="[plannedBudget]"]');
    const milestoneElements = document.querySelectorAll('#createMilestonesContainer .milestone-item');
    
    let totalWeight = 0;
    let totalBudget = 0;
    const milestoneCount = milestoneElements.length;
    
    weightInputs.forEach(input => {
      totalWeight += parseFloat(input.value) || 0;
    });
    
    budgetInputs.forEach(input => {
      totalBudget += window.parseBudgetValue(input.value) || 0;
    });
    
    const totalWeightElement = document.getElementById('createTotalWeight');
    const totalBudgetElement = document.getElementById('createTotalMilestoneBudget');
    const milestoneCountElement = document.getElementById('createMilestoneCount');
    const addMilestoneButton = document.querySelector('button[onclick="window.addMilestone()"]');
    
    console.log('Elements found:', {
      totalWeightElement: !!totalWeightElement,
      totalBudgetElement: !!totalBudgetElement,
      milestoneCountElement: !!milestoneCountElement,
      addMilestoneButton: !!addMilestoneButton
    });
    
    if (totalWeightElement) {
      totalWeightElement.textContent = `${totalWeight.toFixed(2)}%`;
      totalWeightElement.className = Math.abs(totalWeight - 100) <= 0.01 ? 'text-2xl font-bold text-green-600 mb-1' : 'text-2xl font-bold text-red-600 mb-1';
      console.log('Updated totalWeightElement to:', totalWeightElement.textContent);
    } else {
      console.error('totalWeightElement not found!');
    }
    
    if (totalBudgetElement) {
      totalBudgetElement.textContent = `₱${totalBudget.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
      
      // Get total budget allocation from the form
      const totalBudgetAllocationInput = document.querySelector('input[name="totalBudget"]');
      const totalBudgetAllocation = window.parseBudgetValue(totalBudgetAllocationInput?.value) || 0;
      
      // Compare milestone budget with total budget allocation
      const budgetMatchStatusElement = document.getElementById('budgetMatchStatus');
      
      if (Math.abs(totalBudget - totalBudgetAllocation) <= 0.01) {
        totalBudgetElement.className = 'text-2xl font-bold text-green-600 mb-1';
        totalBudgetElement.title = 'Budget matches Total Budget Allocation';
        if (budgetMatchStatusElement) {
          budgetMatchStatusElement.textContent = '✓ Matches allocation';
          budgetMatchStatusElement.className = 'text-xs text-green-600 mt-1 font-medium';
        }
      } else {
        totalBudgetElement.className = 'text-2xl font-bold text-red-600 mb-1';
        totalBudgetElement.title = `Budget mismatch! Milestone total: ₱${totalBudget.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}, Allocation: ₱${totalBudgetAllocation.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
        if (budgetMatchStatusElement) {
          budgetMatchStatusElement.textContent = `✗ Mismatch: ₱${totalBudget.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })} vs ₱${totalBudgetAllocation.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
          budgetMatchStatusElement.className = 'text-xs text-red-600 mt-1 font-medium';
        }
      }
      
      console.log('Updated totalBudgetElement to:', totalBudgetElement.textContent);
    } else {
      console.error('totalBudgetElement not found!');
    }
    
    if (milestoneCountElement) {
      milestoneCountElement.textContent = milestoneCount;
      milestoneCountElement.className = 'text-2xl font-bold text-purple-600 mb-1';
      console.log('Updated milestoneCountElement to:', milestoneCountElement.textContent);
    } else {
      console.error('milestoneCountElement not found!');
    }
    
    // Validate total weight and disable/enable add milestone button
    if (addMilestoneButton) {
      if (totalWeight >= 100) {
        addMilestoneButton.disabled = true;
        addMilestoneButton.classList.add('opacity-50', 'cursor-not-allowed');
        addMilestoneButton.classList.remove('hover:bg-[#7A6219]');
        addMilestoneButton.title = 'Total weight cannot exceed 100%';
      } else {
        addMilestoneButton.disabled = false;
        addMilestoneButton.classList.remove('opacity-50', 'cursor-not-allowed');
        addMilestoneButton.classList.add('hover:bg-[#7A6219]');
        addMilestoneButton.title = 'Add Milestone';
      }
    }
    
    // Debug logging
    console.log('calculateTotals called:', {
      totalWeight,
      totalBudget,
      milestoneCount,
      weightInputsCount: weightInputs.length,
      budgetInputsCount: budgetInputs.length
    });
  };

  // Add milestone function - must be global and available immediately
  window.addMilestone = function() {
    const container = document.getElementById('createMilestonesContainer');
    if (!container) {
      console.error('createMilestonesContainer not found');
      return;
    }

    // Check if we can add more milestones (total weight < 100%)
    const currentWeightInputs = document.querySelectorAll('#createMilestonesContainer input[name*="milestones"][name*="[weight]"]');
    let currentTotalWeight = 0;
    currentWeightInputs.forEach(input => {
      currentTotalWeight += parseFloat(input.value) || 0;
    });
    
    if (currentTotalWeight >= 100) {
      alert('Total weight cannot exceed 100%. Please adjust existing milestone weights before adding a new one.');
      return;
    }

    // Use the global milestoneCounter
    if (typeof window.milestoneCounter === 'undefined') {
      window.milestoneCounter = 0;
    }
    window.milestoneCounter++;

                  const milestoneHtml = `
                <div id="milestone-${window.milestoneCounter}" class="milestone-item bg-white border border-gray-200 rounded-2xl p-8 shadow-lg hover:shadow-xl transition-all duration-200">
                  <div class="flex items-center justify-between mb-6">
                    <div class="flex items-center gap-4">
                      <div class="bg-gradient-to-r from-[#F28C00] to-[#E67E00] p-3 rounded-xl">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2m-9 8h10m-3 4h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                        </svg>
                  </div>
                      <h4 class="text-2xl font-bold text-gray-800">Milestone ${window.milestoneCounter}</h4>
                </div>
                    <button type="button" onclick="window.removeMilestone(${window.milestoneCounter})" class="bg-red-50 hover:bg-red-100 p-3 rounded-xl text-red-500 hover:text-red-700 transition-all duration-200">
                      <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                      </svg>
                    </button>
              </div>
        
        <!-- Basic Milestone Information -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Milestone Name *</label>
            <input type="text" name="milestones[${window.milestoneCounter}][title]" id="milestone-${window.milestoneCounter}-title" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="e.g., Site Preparation" onchange="window.calculateTotals()">
            <div class="flex items-center justify-between mt-1">
              <span class="text-xs text-gray-500">Maximum 50 characters</span>
              <span class="text-xs text-gray-400" id="milestone-${window.milestoneCounter}-title-count">0/50</span>
            </div>
            </div>

                <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Weight (%) *</label>
            <input type="number" name="milestones[${window.milestoneCounter}][weight]" required min="0" max="100" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent bg-gray-50" placeholder="Auto-calculated" readonly>
            <p class="text-xs text-gray-500 mt-1">Not editable; auto-calculated based on Planned Budget vs Total Budget</p>
                </div>
                
                <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Planned Budget (₱) *</label>
            <input type="text" name="milestones[${window.milestoneCounter}][plannedBudget]" id="milestone-${window.milestoneCounter}-budget" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="e.g., 10,000.00" oninput="window.formatBudgetInput(this); window.updateMilestoneCalculations(${window.milestoneCounter})" onchange="window.updateMilestoneCalculations(${window.milestoneCounter})" onkeydown="window.handleBudgetKeydown(event)">
            <p class="text-xs text-gray-500 mt-1">Maximum: ₱999,999,999,999.00</p>
                </div>
                
                <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Due Date *</label>
            <input type="date" name="milestones[${window.milestoneCounter}][dueDate]" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" onchange="window.updateTimelineEndDate(${window.milestoneCounter})">
                </div>
                
                <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Description *</label>
            <textarea name="milestones[${window.milestoneCounter}][description]" id="milestone-${window.milestoneCounter}-description" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Detailed description of what this milestone accomplishes..." required></textarea>
            <div class="flex items-center justify-between mt-1">
              <span class="text-xs text-gray-500">Maximum 500 characters</span>
              <span class="text-xs text-gray-400" id="milestone-${window.milestoneCounter}-description-count">0/500</span>
            </div>
              </div>
            </div>

                          <!-- 3-Division Configuration -->
                  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <!-- Timeline Division -->
                    <div class="bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl p-6 border border-blue-200 shadow-lg">
                      <div class="flex items-center gap-3 mb-4">
                        <div class="bg-blue-500 p-2 rounded-lg">
                          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                          </svg>
                        </div>
                        <h5 class="text-lg font-bold text-blue-800">Timeline Division</h5>
                      </div>
            <div class="space-y-3">
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Weight (%)</label>
                <input type="number" name="milestones[${window.milestoneCounter}][timelineWeight]" min="0" max="100" step="0.01" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500 bg-gray-50" placeholder="0.00" value="0.00" readonly>
                </div>
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Start Date</label>
                <input type="date" name="milestones[${window.milestoneCounter}][timelineStartDate]" id="milestone-${window.milestoneCounter}-timeline-start" required class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500" ${window.milestoneCounter === 1 ? 'readonly style="background-color: #f3f4f6; cursor-not-allowed;"' : ''}>
                <p class="text-xs text-gray-500 mt-1">${window.milestoneCounter === 1 ? 'Auto-populated from Timeline Info Start Date' : 'Enter the start date for this milestone'}</p>
                </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Target Milestone Completion Date</label>
                <input type="date" name="milestones[${window.milestoneCounter}][timelineEndDate]" id="milestone-${window.milestoneCounter}-timeline-end" readonly class="w-full px-2 py-1 text-sm border border-gray-300 rounded bg-gray-100 cursor-not-allowed" style="background-color: #f3f4f6;">
              </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Description *</label>
                <textarea name="milestones[${window.milestoneCounter}][timelineDescription]" id="milestone-${window.milestoneCounter}-timeline-description" rows="2" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-blue-500" placeholder="Timeline activities and deliverables..." required></textarea>
                <div class="flex items-center justify-between mt-1">
                  <span class="text-xs text-gray-500">Maximum 500 characters</span>
                  <span class="text-xs text-gray-400" id="milestone-${window.milestoneCounter}-timeline-description-count">0/500</span>
                </div>
                </div>
              </div>
            </div>

          <!-- Budget Division -->
          <div class="bg-gradient-to-br from-green-50 to-green-100 rounded-2xl p-6 border border-green-200 shadow-lg">
            <div class="flex items-center gap-3 mb-4">
              <div class="bg-green-500 p-2 rounded-lg">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
              <h5 class="text-lg font-bold text-green-800">Budget Division</h5>
            </div>
            <div class="space-y-3">
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Weight (%)</label>
                <input type="number" name="milestones[${window.milestoneCounter}][budgetWeight]" min="0" max="100" step="0.01" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500 bg-gray-50" placeholder="0.00" value="0.00" readonly>
                </div>
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Planned Budget (₱)</label>
                <input type="text" name="milestones[${window.milestoneCounter}][budgetPlanned]" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500 bg-gray-50" placeholder="0.00" value="0.00" readonly>
                </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Breakdown Description *</label>
                <textarea name="milestones[${window.milestoneCounter}][budgetBreakdown]" id="milestone-${window.milestoneCounter}-budget-breakdown" rows="2" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-green-500" placeholder="Budget allocation breakdown..." required></textarea>
                <div class="flex items-center justify-between mt-1">
                  <span class="text-xs text-gray-500">Maximum 500 characters</span>
                  <span class="text-xs text-gray-400" id="milestone-${window.milestoneCounter}-budget-breakdown-count">0/500</span>
                </div>
                </div>
              </div>
            </div>

          <!-- Physical Division -->
          <div class="bg-gradient-to-br from-orange-50 to-orange-100 rounded-2xl p-6 border border-orange-200 shadow-lg">
            <div class="flex items-center gap-3 mb-4">
              <div class="bg-orange-500 p-2 rounded-lg">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
              <h5 class="text-lg font-bold text-orange-800">Physical Division</h5>
                </div>
            <div class="space-y-3">
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Weight (%)</label>
                <input type="number" name="milestones[${window.milestoneCounter}][physicalWeight]" min="0" max="100" step="0.01" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-orange-500 bg-gray-50" placeholder="0.00" value="0.00" readonly>
              </div>
              <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Proof Types</label>
                <div id="proofTypes-${window.milestoneCounter}" class="space-y-2">
                  <div class="flex items-center gap-2">
                    <select name="milestones[${window.milestoneCounter}][physicalProofTypes][]" class="flex-1 px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-orange-500">
                      <option value="form">Form</option>
                      <option value="video">Video</option>
                      <option value="image">Image</option>
                      <option value="document">Document</option>
                      <option value="report">Report</option>
                      <option value="audio">Audio</option>
                      <option value="presentation">Presentation</option>
                      <option value="certificate">Certificate</option>
                    </select>
                    <button type="button" onclick="window.addProofType(${window.milestoneCounter})" class="px-2 py-1 text-xs bg-orange-500 text-white rounded hover:bg-orange-600 transition-colors">
                      <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                  </svg>
                </button>
              </div>
              </div>
            </div>
                <div>
                <label class="block text-xs font-medium text-gray-700 mb-1">Description *</label>
                <textarea name="milestones[${window.milestoneCounter}][physicalDescription]" id="milestone-${window.milestoneCounter}-physical-description" rows="2" class="w-full px-2 py-1 text-sm border border-gray-300 rounded focus:outline-none focus:ring-1 focus:ring-orange-500" placeholder="Physical progress requirements..." required></textarea>
                <div class="flex items-center justify-between mt-1">
                  <span class="text-xs text-gray-500">Maximum 500 characters</span>
                  <span class="text-xs text-gray-400" id="milestone-${window.milestoneCounter}-physical-description-count">0/500</span>
                </div>
                </div>
                </div>
                </div>
              </div>
            </div>
    `;
    
    container.insertAdjacentHTML('beforeend', milestoneHtml);
    
    // Sync Due Date with Target Completion Date for the last milestone
    setTimeout(() => {
      window.syncLastMilestoneWithTargetDate();
    }, 50);
    
    // Auto-populate first milestone timeline start date if this is the first milestone
    if (window.milestoneCounter === 1) {
      setTimeout(() => {
        window.autoPopulateFirstMilestoneStartDate();
      }, 100);
    }
    
    // Only scroll to new milestone if it's not the first one (when modal opens)
    if (window.milestoneCounter > 1) {
      const addedMilestone = document.getElementById(`milestone-${window.milestoneCounter}`);
      if (addedMilestone) {
        addedMilestone.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }
    }
    
    // Auto-populate timeline start date for first milestone
    if (window.milestoneCounter === 1) {
      const projectStartDateInput = document.querySelector('input[name="startDate"]');
      const milestoneStartDateInput = document.querySelector(`input[name="milestones[${window.milestoneCounter}][timelineStartDate]"]`);
      
      if (projectStartDateInput && projectStartDateInput.value && milestoneStartDateInput) {
        milestoneStartDateInput.value = projectStartDateInput.value;
        milestoneStartDateInput.disabled = true; // Disable earlier dates
      }
    }
    
    // Initialize character counters for the new milestone
    const milestoneId = window.milestoneCounter;
    setTimeout(() => {
      console.log(`Setting up milestone ${milestoneId} functionality...`);
      
      window.setupCharacterCounter(`milestone-${milestoneId}-title`, `milestone-${milestoneId}-title-count`, 50, `Milestone ${milestoneId} Name`);
      window.setupCharacterCounter(`milestone-${milestoneId}-description`, `milestone-${milestoneId}-description-count`, 500, `Milestone ${milestoneId} Description`);
      window.setupCharacterCounter(`milestone-${milestoneId}-timeline-description`, `milestone-${milestoneId}-timeline-description-count`, 500, `Milestone ${milestoneId} Timeline Description`);
      window.setupCharacterCounter(`milestone-${milestoneId}-budget-breakdown`, `milestone-${milestoneId}-budget-breakdown-count`, 500, `Milestone ${milestoneId} Budget Breakdown`);
      window.setupCharacterCounter(`milestone-${milestoneId}-physical-description`, `milestone-${milestoneId}-physical-description-count`, 500, `Milestone ${milestoneId} Physical Description`);
      
      // Setup auto-capitalization for milestone fields
      window.setupAutoCapitalization(`milestone-${milestoneId}-title`);
      window.setupAutoCapitalization(`milestone-${milestoneId}-description`);
      window.setupAutoCapitalization(`milestone-${milestoneId}-timeline-description`);
      window.setupAutoCapitalization(`milestone-${milestoneId}-budget-breakdown`);
      window.setupAutoCapitalization(`milestone-${milestoneId}-physical-description`);
      
      // Setup budget limit for milestone planned budget
      window.setupBudgetLimit(`milestone-${milestoneId}-budget`, `Milestone ${milestoneId} Planned Budget`);
      
      // Setup date sync listeners for milestone dates
      window.addMilestoneDateSyncListeners(milestoneId);
      
      console.log(`Milestone ${milestoneId} functionality setup completed`);
    }, 100);
    
    // Update totals after adding milestone
    window.calculateTotals();
  };

  // Update all milestone weights when total budget changes
  window.updateAllMilestoneWeights = function() {
    const milestoneElements = document.querySelectorAll('#createMilestonesContainer .milestone-item');
    milestoneElements.forEach(element => {
      const id = element.id.replace('milestone-', '');
      if (id) {
        window.updateMilestoneCalculations(id);
      }
    });
  };

  // Save all project information to localStorage
  window.saveProjectInformation = function() {
    try {
      const projectData = {
        // Basic Project Information
        projectCode: document.querySelector('input[name="projectCode"]')?.value || '',
        name: document.querySelector('input[name="name"]')?.value || '',
        implementingOfficeName: document.querySelector('input[name="implementingOfficeName"]')?.value || '',
        category: document.querySelector('select[name="category"]')?.value || '',
        location: [], // Will be populated below
        priority: document.querySelector('select[name="priority"]')?.value || '',
        fundingSource: document.querySelector('select[name="fundingSource"]')?.value || '',
        createdDate: document.querySelector('input[name="createdDate"]')?.value || '',
        description: document.querySelector('textarea[name="description"]')?.value || '',
        expectedOutputs: document.querySelector('textarea[name="expectedOutputs"]')?.value || '',
        targetBeneficiaries: document.querySelector('textarea[name="targetBeneficiaries"]')?.value || '',
        
        // EIU Partner Information
        hasExternalPartner: document.querySelector('input[name="hasExternalPartner"]')?.checked || false,
        eiuPersonnelId: document.querySelector('input[name="eiuPersonnelId"]')?.value || '',
        
        // Timeline Information
        startDate: document.querySelector('input[name="startDate"]')?.value || '',
        endDate: document.querySelector('input[name="endDate"]')?.value || '',
        
        // Budget Information
        totalBudget: document.querySelector('input[name="totalBudget"]')?.value || '',
        budgetBreakdown: document.querySelector('textarea[name="budgetBreakdown"]')?.value || '',
        
        // Physical Accomplishment Information
        generalDescription: document.querySelector('textarea[name="generalDescription"]')?.value || '',
        physicalProgressRequirements: document.querySelector('textarea[name="physicalProgressRequirements"]')?.value || '',
        initialPhoto: null, // File uploads can't be easily saved to localStorage
        
        // Milestones
        milestones: [],
        
        // Metadata
        savedAt: new Date().toISOString()
      };
      
      // Get location/barangay data - collect all selected barangays
      const locationSelects = document.querySelectorAll('select[name="location[]"]');
      locationSelects.forEach(select => {
        if (select.value && select.value !== '') {
          projectData.location.push(select.value);
        }
      });
      
      // Get milestones data
      const milestoneElements = document.querySelectorAll('#createMilestonesContainer .milestone-item');
      milestoneElements.forEach(element => {
        const id = element.id.replace('milestone-', '');
        
        const milestone = {
          id: id,
          title: element.querySelector(`input[name="milestones[${id}][title]"]`)?.value || '',
          weight: element.querySelector(`input[name="milestones[${id}][weight]"]`)?.value || '',
          plannedBudget: element.querySelector(`input[name="milestones[${id}][plannedBudget]"]`)?.value || '',
          dueDate: element.querySelector(`input[name="milestones[${id}][dueDate]"]`)?.value || '',
          description: element.querySelector(`textarea[name="milestones[${id}][description]"]`)?.value || '',
          
          // Timeline Division
          timelineWeight: element.querySelector(`input[name="milestones[${id}][timelineWeight]"]`)?.value || '',
          timelineStartDate: element.querySelector(`input[name="milestones[${id}][timelineStartDate]"]`)?.value || '',
          timelineEndDate: element.querySelector(`input[name="milestones[${id}][timelineEndDate]"]`)?.value || '',
          timelineDescription: element.querySelector(`textarea[name="milestones[${id}][timelineDescription]"]`)?.value || '',
          
          // Budget Division
          budgetWeight: element.querySelector(`input[name="milestones[${id}][budgetWeight]"]`)?.value || '',
          budgetPlanned: element.querySelector(`input[name="milestones[${id}][budgetPlanned]"]`)?.value || '',
          budgetBreakdown: element.querySelector(`textarea[name="milestones[${id}][budgetBreakdown]"]`)?.value || '',
          
          // Physical Division
          physicalWeight: element.querySelector(`input[name="milestones[${id}][physicalWeight]"]`)?.value || '',
          physicalProofTypes: [], // Will be populated below
          physicalDescription: element.querySelector(`textarea[name="milestones[${id}][physicalDescription]"]`)?.value || ''
        };
        
        // Get proof types
        const proofTypeSelects = element.querySelectorAll(`select[name^="milestones[${id}][physicalProofTypes]"]`);
        proofTypeSelects.forEach(select => {
          if (select.value) {
            milestone.physicalProofTypes.push(select.value);
          }
        });
        
        projectData.milestones.push(milestone);
      });
      
      // Save to localStorage
      localStorage.setItem('savedProjectData', JSON.stringify(projectData));
      
      // Show success message
      window.showSuccessMessage('Project information saved successfully!', 'Your data has been saved and can be loaded later using the "Load Saved Data" button.');
      
      console.log('Project data saved:', projectData);
      
    } catch (error) {
      console.error('Error saving project data:', error);
      window.showErrorMessage('Failed to save project information', 'An error occurred while saving your data. Please try again.');
    }
  };

  // Load saved project information from localStorage
  window.loadSavedProjectInformation = function() {
    try {
      const savedData = localStorage.getItem('savedProjectData');
      
      if (!savedData) {
        window.showInfoMessage('No saved data found', 'There is no previously saved project information to load.');
        return;
      }
      
      const projectData = JSON.parse(savedData);
      
      // Show confirmation dialog
      const confirmLoad = confirm(`Load saved project data from ${new Date(projectData.savedAt).toLocaleString()}?\n\nThis will replace all current form data.`);
      
      if (!confirmLoad) {
        return;
      }
      
      // Clear existing milestones first
      const milestonesContainer = document.getElementById('createMilestonesContainer');
      if (milestonesContainer) {
        milestonesContainer.innerHTML = '';
      }
      window.milestoneCounter = 0;
      
      // Load basic project information
      const setFieldValue = (selector, value) => {
        const element = document.querySelector(selector);
        if (element && value !== undefined && value !== null) {
          element.value = value;
          // Trigger change event for formatted inputs
          if (element.onchange) element.onchange();
          if (element.oninput) element.oninput();
        }
      };
      
      const setCheckboxValue = (selector, value) => {
        const element = document.querySelector(selector);
        if (element) {
          element.checked = value || false;
          // Trigger change event
          if (element.onchange) element.onchange();
        }
      };
      
      // Basic Information
      setFieldValue('input[name="projectCode"]', projectData.projectCode);
      setFieldValue('input[name="name"]', projectData.name);
      setFieldValue('input[name="implementingOfficeName"]', projectData.implementingOfficeName);
      setFieldValue('select[name="category"]', projectData.category);
      setFieldValue('select[name="priority"]', projectData.priority);
      setFieldValue('select[name="fundingSource"]', projectData.fundingSource);
      setFieldValue('input[name="createdDate"]', projectData.createdDate);
      setFieldValue('textarea[name="description"]', projectData.description);
      setFieldValue('textarea[name="expectedOutputs"]', projectData.expectedOutputs);
      setFieldValue('textarea[name="targetBeneficiaries"]', projectData.targetBeneficiaries);
      
      // EIU Partner Information
      setCheckboxValue('input[name="hasExternalPartner"]', projectData.hasExternalPartner);
      setFieldValue('input[name="eiuPersonnelId"]', projectData.eiuPersonnelId);
      
      // Timeline Information
      setFieldValue('input[name="startDate"]', projectData.startDate);
      setFieldValue('input[name="endDate"]', projectData.endDate);
      
      // Budget Information
      setFieldValue('input[name="totalBudget"]', projectData.totalBudget);
      setFieldValue('textarea[name="budgetBreakdown"]', projectData.budgetBreakdown);
      
      // Physical Information
      setFieldValue('textarea[name="generalDescription"]', projectData.generalDescription);
      setFieldValue('textarea[name="physicalProgressRequirements"]', projectData.physicalProgressRequirements);
      
      // Load locations - restore all selected barangays
      if (projectData.location && projectData.location.length > 0) {
        const barangayContainer = document.getElementById('createBarangayContainer');
        if (barangayContainer) {
          // Clear existing dropdowns
          barangayContainer.innerHTML = '';
          
          // Add dropdown for each saved location
          projectData.location.forEach((location, index) => {
            if (index === 0) {
              // For the first location, create the base dropdown
              window.addCreateBarangayDropdown();
            } else {
              // For additional locations, add more dropdowns
              window.addCreateBarangayDropdown();
            }
            
            // Set the value after a brief delay to ensure DOM is updated
            setTimeout(() => {
              const locationSelects = document.querySelectorAll('#createBarangayContainer select[name="location[]"]');
              if (locationSelects[index]) {
                locationSelects[index].value = location;
              }
            }, 50);
          });
        }
      }
      
      // Load milestones
      if (projectData.milestones && projectData.milestones.length > 0) {
        projectData.milestones.forEach(milestoneData => {
          // Add a new milestone
          window.addMilestone();
          
          // Get the last added milestone element
          const milestoneElements = document.querySelectorAll('#createMilestonesContainer .milestone-item');
          const milestoneElement = milestoneElements[milestoneElements.length - 1];
          
          if (milestoneElement) {
            const id = milestoneElement.id.replace('milestone-', '');
            
            // Basic milestone data
            setFieldValue(`input[name="milestones[${id}][title]"]`, milestoneData.title);
            setFieldValue(`input[name="milestones[${id}][plannedBudget]"]`, milestoneData.plannedBudget);
            setFieldValue(`input[name="milestones[${id}][dueDate]"]`, milestoneData.dueDate);
            setFieldValue(`textarea[name="milestones[${id}][description]"]`, milestoneData.description);
            
            // Timeline Division
            setFieldValue(`input[name="milestones[${id}][timelineStartDate]"]`, milestoneData.timelineStartDate);
            setFieldValue(`input[name="milestones[${id}][timelineEndDate]"]`, milestoneData.timelineEndDate);
            setFieldValue(`textarea[name="milestones[${id}][timelineDescription]"]`, milestoneData.timelineDescription);
            
            // Budget Division
            setFieldValue(`input[name="milestones[${id}][budgetPlanned]"]`, milestoneData.budgetPlanned);
            setFieldValue(`textarea[name="milestones[${id}][budgetBreakdown]"]`, milestoneData.budgetBreakdown);
            
            // Physical Division
            setFieldValue(`textarea[name="milestones[${id}][physicalDescription]"]`, milestoneData.physicalDescription);
            
            // Load proof types (this might need adjustment based on actual implementation)
            if (milestoneData.physicalProofTypes && milestoneData.physicalProofTypes.length > 0) {
              milestoneData.physicalProofTypes.forEach((proofType, index) => {
                const proofTypeSelect = milestoneElement.querySelector(`select[name="milestones[${id}][physicalProofTypes][${index}]"]`);
                if (proofTypeSelect) {
                  proofTypeSelect.value = proofType;
                }
              });
            }
            
            // Trigger milestone calculations
            window.updateMilestoneCalculations(id);
          }
        });
      }
      
      // Recalculate totals
      setTimeout(() => {
        window.calculateTotals();
        window.updateAllMilestoneWeights();
      }, 100);
      
      window.showSuccessMessage('Project data loaded successfully!', `Data from ${new Date(projectData.savedAt).toLocaleString()} has been loaded into the form.`);
      
    } catch (error) {
      console.error('Error loading saved project data:', error);
      window.showErrorMessage('Failed to load saved data', 'An error occurred while loading your saved data. The data might be corrupted.');
    }
  };

  // Clear all project information with confirmation
  window.clearAllProjectInformation = function() {
    // First confirmation
    const firstConfirm = confirm('Are you sure you want to clear all information?\\n\\nThis will remove all entered data from the form and cannot be undone.');
    
    if (!firstConfirm) {
      return;
    }
    
    // Second confirmation for safety
    const secondConfirm = confirm('⚠️ FINAL CONFIRMATION ⚠️\\n\\nThis action will permanently clear ALL project information including:\\n• Basic project details\\n• All milestones and their configurations\\n• Budget and timeline information\\n• EIU partner details\\n\\nThis action CANNOT be undone.\\n\\nProceed with clearing all data?');
    
    if (!secondConfirm) {
      return;
    }
    
    try {
      // Clear milestones first
      const milestonesContainer = document.getElementById('createMilestonesContainer');
      if (milestonesContainer) {
        milestonesContainer.innerHTML = '';
      }
      window.milestoneCounter = 0;
      
      // Clear all form fields
      const form = document.getElementById('createProjectForm');
      if (form) {
        form.reset();
      }
      
      // Reset created date to today
      const createdDateField = document.querySelector('input[name="createdDate"]');
      if (createdDateField) {
        const today = new Date().toISOString().split('T')[0];
        createdDateField.value = today;
      }
      
      // Add initial milestone
      setTimeout(() => {
        window.addMilestone();
        window.calculateTotals();
      }, 100);
      
      // Clear saved data from localStorage (this is the ONLY place where saved data should be cleared)
      localStorage.removeItem('savedProjectData');
      
      // Reset unsaved changes flag since everything is cleared
      window.hasUnsavedChanges = false;
      
      window.showSuccessMessage('All information cleared!', 'The form has been reset and saved data has been permanently removed.');
      
    } catch (error) {
      console.error('Error clearing form data:', error);
      window.showErrorMessage('Error clearing form', 'An error occurred while clearing the form. Please refresh the page.');
        }
  };

  // Message display functions
  window.showSuccessMessage = function(title, message) {
    // Create and show success modal
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
    modal.innerHTML = `
      <div class="bg-white rounded-2xl p-8 max-w-md mx-4 shadow-2xl">
        <div class="flex items-center mb-4">
          <div class="bg-green-100 p-3 rounded-full mr-4">
            <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-800">${title}</h3>
        </div>
        <p class="text-gray-600 mb-6">${message}</p>
        <button onclick="this.closest('.fixed').remove()" class="w-full bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors font-medium">
          Continue
        </button>
      </div>
    `;
    document.body.appendChild(modal);
    
    // Auto-remove after 5 seconds
    setTimeout(() => {
      if (modal.parentNode) {
        modal.remove();
      }
    }, 5000);
  };

  window.showErrorMessage = function(title, message) {
    // Create and show error modal
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
    modal.innerHTML = `
      <div class="bg-white rounded-2xl p-8 max-w-md mx-4 shadow-2xl">
        <div class="flex items-center mb-4">
          <div class="bg-red-100 p-3 rounded-full mr-4">
            <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-800">${title}</h3>
        </div>
        <p class="text-gray-600 mb-6">${message}</p>
        <button onclick="this.closest('.fixed').remove()" class="w-full bg-red-600 text-white py-3 rounded-lg hover:bg-red-700 transition-colors font-medium">
          Close
        </button>
      </div>
    `;
    document.body.appendChild(modal);
  };

  window.showInfoMessage = function(title, message) {
    // Create and show info modal
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
    modal.innerHTML = `
      <div class="bg-white rounded-2xl p-8 max-w-md mx-4 shadow-2xl">
        <div class="flex items-center mb-4">
          <div class="bg-blue-100 p-3 rounded-full mr-4">
            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-800">${title}</h3>
        </div>
        <p class="text-gray-600 mb-6">${message}</p>
        <button onclick="this.closest('.fixed').remove()" class="w-full bg-blue-600 text-white py-3 rounded-lg hover:bg-blue-700 transition-colors font-medium">
          OK
        </button>
      </div>
    `;
    document.body.appendChild(modal);
  };

  // Unsaved changes detection
  window.hasUnsavedChanges = false;
  
  window.setupUnsavedChangesDetection = function() {
    // Track changes to form fields
    const form = document.getElementById('createProjectForm');
    if (form) {
      form.addEventListener('input', () => {
        window.hasUnsavedChanges = true;
      });
      form.addEventListener('change', () => {
        window.hasUnsavedChanges = true;
      });
    }
    
    // Track milestone changes
    document.addEventListener('input', (e) => {
      if (e.target.closest('#createMilestonesContainer')) {
        window.hasUnsavedChanges = true;
      }
    });
    
    document.addEventListener('change', (e) => {
      if (e.target.closest('#createMilestonesContainer')) {
        window.hasUnsavedChanges = true;
      }
    });
  };

  // Enhanced cancel confirmation with unsaved changes detection
  window.showCancelConfirmation = function() {
    if (window.hasUnsavedChanges) {
      const modal = document.createElement('div');
      modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
      modal.innerHTML = `
        <div class="bg-white rounded-2xl p-8 max-w-md mx-4 shadow-2xl">
          <div class="flex items-center mb-4">
            <div class="bg-yellow-100 p-3 rounded-full mr-4">
              <svg class="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
            <h3 class="text-xl font-semibold text-gray-800">Unsaved Changes</h3>
          </div>
          <p class="text-gray-600 mb-6">You have unsaved changes. Are you sure you want to cancel?</p>
          <div class="flex gap-3">
            <button onclick="window.saveProjectInformation(); this.closest('.fixed').remove(); window.closeCreateProjectModal();" class="flex-1 bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors font-medium">
              Save & Close
            </button>
            <button onclick="this.closest('.fixed').remove(); window.hasUnsavedChanges = false; window.closeCreateProjectModal();" class="flex-1 bg-red-600 text-white py-3 rounded-lg hover:bg-red-700 transition-colors font-medium">
              Discard & Close
            </button>
            <button onclick="this.closest('.fixed').remove()" class="flex-1 bg-gray-300 text-gray-700 py-3 rounded-lg hover:bg-gray-400 transition-colors font-medium">
              Cancel
            </button>
          </div>
        </div>
      `;
      document.body.appendChild(modal);
    } else {
      window.closeCreateProjectModal();
    }
  };

  // Reset unsaved changes flag when saving or creating project
  const originalSaveFunction = window.saveProjectInformation;
  window.saveProjectInformation = function() {
    originalSaveFunction();
    window.hasUnsavedChanges = false;
  };
  
  // Photo upload setup function
  window.setupPhotoUpload = function() {
    const uploadPhotoRadio = document.getElementById('uploadPhoto');
    const useDefaultRadio = document.getElementById('useDefault');
    const photoUploadSection = document.getElementById('photoUploadSection');
    const defaultPhotoInfo = document.getElementById('defaultPhotoInfo');
    
    if (uploadPhotoRadio && useDefaultRadio && photoUploadSection && defaultPhotoInfo) {
      uploadPhotoRadio.addEventListener('change', function() {
        if (this.checked) {
          photoUploadSection.classList.remove('hidden');
          defaultPhotoInfo.classList.add('hidden');
        }
      });
      
      useDefaultRadio.addEventListener('change', function() {
        if (this.checked) {
          photoUploadSection.classList.add('hidden');
          defaultPhotoInfo.classList.remove('hidden');
        }
      });
    }
  };

  // Update project start date listener to update first milestone
  window.updateProjectStartDate = function() {
    const projectStartDateInput = document.querySelector('input[name="startDate"]');
    const firstMilestoneStartDateInput = document.querySelector('input[name="milestones[1][timelineStartDate]"]');
    
    if (projectStartDateInput && firstMilestoneStartDateInput && projectStartDateInput.value) {
      firstMilestoneStartDateInput.value = projectStartDateInput.value;
      // Make it readonly to indicate it's auto-populated
      firstMilestoneStartDateInput.readOnly = true;
      firstMilestoneStartDateInput.style.backgroundColor = '#f3f4f6';
      firstMilestoneStartDateInput.style.cursor = 'not-allowed';
      console.log(`Updated first milestone timeline start date: ${projectStartDateInput.value}`);
    }
  };

  // Calculate expected days of completion
  window.calculateExpectedDays = function() {
    try {
      // Use the same robust field detection as validation
      let startDateInput = document.querySelector(`#step2 input#startDate`);
      if (!startDateInput) {
        startDateInput = document.querySelector(`#step2 input[name="startDate"]`);
      }
      if (!startDateInput) {
        startDateInput = document.getElementById('startDate');
        if (startDateInput && startDateInput.tagName !== 'INPUT') {
          startDateInput = null;
        }
      }
      
      let targetDateInput = document.querySelector(`#step2 input#targetCompletionDate`);
      if (!targetDateInput) {
        targetDateInput = document.querySelector(`#step2 input[name="targetCompletionDate"]`);
      }
      if (!targetDateInput) {
        targetDateInput = document.getElementById('targetCompletionDate');
        if (targetDateInput && targetDateInput.tagName !== 'INPUT') {
          targetDateInput = null;
        }
      }
      
      let expectedDaysInput = document.querySelector(`#step2 input#expectedDaysOfCompletion`);
      if (!expectedDaysInput) {
        expectedDaysInput = document.querySelector(`#step2 input[name="expectedDaysOfCompletion"]`);
      }
      if (!expectedDaysInput) {
        expectedDaysInput = document.getElementById('expectedDaysOfCompletion');
        if (expectedDaysInput && expectedDaysInput.tagName !== 'INPUT') {
          expectedDaysInput = null;
        }
      }
      
      console.log('calculateExpectedDays - startDateInput:', startDateInput);
      console.log('calculateExpectedDays - targetDateInput:', targetDateInput);
      console.log('calculateExpectedDays - expectedDaysInput:', expectedDaysInput);
      
      if (startDateInput && targetDateInput && expectedDaysInput) {
        const startDate = startDateInput.value;
        const targetDate = targetDateInput.value;
        
        console.log('calculateExpectedDays - startDate:', startDate);
        console.log('calculateExpectedDays - targetDate:', targetDate);
        
        if (startDate && targetDate) {
          const startDateObj = new Date(startDate);
          const targetDateObj = new Date(targetDate);
          
          console.log('calculateExpectedDays - startDateObj:', startDateObj);
          console.log('calculateExpectedDays - targetDateObj:', targetDateObj);
          
          // Calculate the difference in days
          const timeDifference = targetDateObj.getTime() - startDateObj.getTime();
          const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));
          
          console.log('calculateExpectedDays - timeDifference:', timeDifference);
          console.log('calculateExpectedDays - daysDifference:', daysDifference);
          
          if (daysDifference >= 0) {
            expectedDaysInput.value = `${daysDifference} days`;
            expectedDaysInput.classList.remove('border-red-300', 'bg-red-50');
            expectedDaysInput.classList.add('border-gray-300', 'bg-gray-50');
            console.log('calculateExpectedDays - Set value to:', `${daysDifference} days`);
          } else {
            expectedDaysInput.value = 'Invalid date range';
            expectedDaysInput.classList.remove('border-gray-300', 'bg-gray-50');
            expectedDaysInput.classList.add('border-red-300', 'bg-red-50');
            console.log('calculateExpectedDays - Set value to: Invalid date range');
          }
        } else {
          expectedDaysInput.value = '';
          expectedDaysInput.classList.remove('border-red-300', 'bg-red-50');
          expectedDaysInput.classList.add('border-gray-300', 'bg-gray-50');
          console.log('calculateExpectedDays - Cleared value');
        }
      } else {
        console.error('calculateExpectedDays - Could not find required fields');
        console.error('startDateInput:', startDateInput);
        console.error('targetDateInput:', targetDateInput);
        console.error('expectedDaysInput:', expectedDaysInput);
      }
    } catch (error) {
      console.error('Error in calculateExpectedDays:', error);
    }
  };

  // Trigger calculation when Step 2 is shown
  window.triggerExpectedDaysCalculation = function() {
    console.log('Triggering expected days calculation...');
    setTimeout(() => {
      window.calculateExpectedDays();
    }, 100);
  };

  // Validate Step 2 fields with Step 1-style validation
  window.validateStep2Fields = function() {
    try {
      // Ensure Step 2 is visible before validating
      const step2Element = document.getElementById('step2');
      if (!step2Element || step2Element.classList.contains('hidden')) {
        console.log('Step 2 is not visible, making it visible first');
        // Make Step 2 visible
        if (step2Element) {
          step2Element.classList.remove('hidden');
        }
      }
      
      // Define validation order as specified by user
      const validationFields = [
        { id: 'startDate', name: 'Start Date' },
        { id: 'targetCompletionDate', name: 'Target Completion Date' },
        { id: 'totalBudget', name: 'Total Budget Allocation' },
        { id: 'budgetBreakdown', name: 'Budget Description' },
        { id: 'physicalProgressRequirements', name: 'General Description' }
      ];
      
      // Check each field in the specified order
      for (const field of validationFields) {
        // Try multiple ways to find the field, prioritizing input/textarea elements
        let fieldElement = null;
        
        // First, try to find input or textarea with the specific ID in Step 2
        fieldElement = document.querySelector(`#step2 input#${field.id}, #step2 textarea#${field.id}`);
        
        // If not found, try by name in Step 2
        if (!fieldElement) {
          fieldElement = document.querySelector(`#step2 input[name="${field.id}"], #step2 textarea[name="${field.id}"]`);
        }
        
        // If still not found, try generic getElementById as fallback
        if (!fieldElement) {
          const elementById = document.getElementById(field.id);
          // Only use it if it's an input or textarea
          if (elementById && (elementById.tagName === 'INPUT' || elementById.tagName === 'TEXTAREA')) {
            fieldElement = elementById;
          }
        }
        
        // If still not found, try to find any input/textarea with the name (as last resort)
        if (!fieldElement) {
          fieldElement = document.querySelector(`input[name="${field.id}"], textarea[name="${field.id}"]`);
        }
        
        // Debug logging
        console.log(`Validating field: ${field.id}`, fieldElement);
        console.log(`Field element tag:`, fieldElement ? fieldElement.tagName : 'null');
        console.log(`Field element type:`, fieldElement ? fieldElement.type : 'null');
        
        if (fieldElement && (fieldElement.tagName === 'INPUT' || fieldElement.tagName === 'TEXTAREA')) {
          const fieldValue = (fieldElement.value || '').trim();
          
          console.log(`Field ${field.id} value:`, fieldValue);
          
          // Check if field is empty
          if (!fieldValue) {
            // Show error message and handle auto-scroll
            const shouldScroll = confirm(`Please fill in the ${field.name} field.\n\nClick OK to scroll to the field.`);
            
            if (shouldScroll) {
              // Scroll to the field and highlight it
              fieldElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
              
              // Add temporary highlight effect
              fieldElement.style.border = '2px solid #F28C00';
              fieldElement.style.backgroundColor = '#FFF7ED';
              fieldElement.focus();
              
              // Remove highlight after 3 seconds
              setTimeout(() => {
                fieldElement.style.border = '';
                fieldElement.style.backgroundColor = '';
              }, 3000);
            }
            
            return false;
          }
          
          // Additional validation for Total Budget
          if (field.id === 'totalBudget') {
            const numericValue = window.parseBudgetValue ? window.parseBudgetValue(fieldValue) : parseFloat(fieldValue.replace(/[,\s₱]/g, ''));
            if (isNaN(numericValue) || numericValue <= 0) {
              const shouldScroll = confirm('Please enter a valid budget amount.\n\nClick OK to scroll to the field.');
              if (shouldScroll) {
                fieldElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                fieldElement.style.border = '2px solid #F28C00';
                fieldElement.style.backgroundColor = '#FFF7ED';
                fieldElement.focus();
                setTimeout(() => {
                  fieldElement.style.border = '';
                  fieldElement.style.backgroundColor = '';
                }, 3000);
              }
              return false;
            }
            
            // Check minimum budget requirement (500,000.00)
            if (numericValue < 500000) {
              const shouldScroll = confirm(`Budget amount must be at least ₱500,000.00.\n\nCurrent amount: ₱${numericValue.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}\n\nPlease enter a budget of ₱500,000.00 or higher.\n\nClick OK to scroll to the field.`);
              if (shouldScroll) {
                fieldElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                fieldElement.style.border = '2px solid #F28C00';
                fieldElement.style.backgroundColor = '#FFF7ED';
                fieldElement.focus();
                setTimeout(() => {
                  fieldElement.style.border = '';
                  fieldElement.style.backgroundColor = '';
                }, 3000);
              }
              return false;
            }
            
            // Check maximum budget limit (999,999,999.00)
            if (numericValue > 999999999) {
              const shouldScroll = confirm('Budget amount cannot exceed ₱999,999,999.00\n\nClick OK to scroll to the field.');
              if (shouldScroll) {
                fieldElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                fieldElement.style.border = '2px solid #F28C00';
                fieldElement.style.backgroundColor = '#FFF7ED';
                fieldElement.focus();
                setTimeout(() => {
                  fieldElement.style.border = '';
                  fieldElement.style.backgroundColor = '';
                }, 3000);
              }
              return false;
            }
          }
        } else {
          console.error(`Field ${field.id} not found or not an input/textarea element`);
          console.error(`Available elements with ID ${field.id}:`, document.querySelectorAll(`#${field.id}`));
          // If field doesn't exist, show error and return false
          alert(`Error: ${field.name} field not found or is not a valid input field. Please refresh the page and try again.`);
          return false;
        }
      }
      
      // Additional validation: Check if project duration is at least 31 days
      console.log('🔍 Starting 31-day validation in validateStep2Fields...');
      
      // Use the same field finding logic that works for other fields
      const startDateInput = document.querySelector(`#step2 input#startDate`) || 
                            document.querySelector(`#step2 input[name="startDate"]`) ||
                            document.getElementById('startDate');
      const targetCompletionDateInput = document.querySelector(`#step2 input#targetCompletionDate`) || 
                                       document.querySelector(`#step2 input[name="targetCompletionDate"]`) ||
                                       document.getElementById('targetCompletionDate');
      
      console.log('🔍 Date inputs found:', {
        startDateInput: !!startDateInput,
        targetCompletionDateInput: !!targetCompletionDateInput,
        startDateValue: startDateInput?.value,
        targetDateValue: targetCompletionDateInput?.value,
        startDateTagName: startDateInput?.tagName,
        targetDateTagName: targetCompletionDateInput?.tagName
      });
      
      if (startDateInput && targetCompletionDateInput && startDateInput.value && targetCompletionDateInput.value) {
        const startDate = new Date(startDateInput.value);
        const targetDate = new Date(targetCompletionDateInput.value);
        
        // Calculate the difference in days
        const timeDifference = targetDate.getTime() - startDate.getTime();
        const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));
        
        console.log('Date validation:', {
          startDate: startDateInput.value,
          targetDate: targetCompletionDateInput.value,
          daysDifference: daysDifference
        });
        
        if (daysDifference < 31) {
          const shouldScroll = confirm(`Project duration must be at least 31 days (1 month).\n\nCurrent duration: ${daysDifference} days\n\nPlease adjust the dates to have at least 31 days between start and target completion dates.\n\nClick OK to scroll to the date fields.`);
          
          if (shouldScroll) {
            // Scroll to the start date field and highlight both date fields
            startDateInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // Highlight both date fields
            startDateInput.style.border = '2px solid #F28C00';
            startDateInput.style.backgroundColor = '#FFF7ED';
            targetCompletionDateInput.style.border = '2px solid #F28C00';
            targetCompletionDateInput.style.backgroundColor = '#FFF7ED';
            
            startDateInput.focus();
            
            // Remove highlight after 5 seconds
            setTimeout(() => {
              startDateInput.style.border = '';
              startDateInput.style.backgroundColor = '';
              targetCompletionDateInput.style.border = '';
              targetCompletionDateInput.style.backgroundColor = '';
            }, 5000);
          }
          
          return false;
        }
      } else {
        console.log('🔍 Date validation skipped - missing date inputs or values');
      }
      
      console.log('✅ validateStep2Fields returning true - all validations passed');
      return true;
    } catch (error) {
      console.error('Error in validateStep2Fields:', error);
      alert('An error occurred during validation. Please refresh the page and try again.');
      return false;
    }
  };

  // Helper function to sync Timeline Info with milestone dates
  window.syncTimelineWithMilestones = function() {
    const projectStartDateInput = document.querySelector('input[name="startDate"]');
    const projectTargetDateInput = document.querySelector('input[name="targetDateOfCompletion"]');
    const firstMilestoneStartDateInput = document.querySelector('input[name="milestones[1][timelineStartDate]"]');
    
    // Find the last milestone
    const milestoneElements = document.querySelectorAll('.milestone-item');
    const lastMilestoneIndex = milestoneElements.length;
    const lastMilestoneEndDateInput = document.querySelector(`input[name="milestones[${lastMilestoneIndex}][timelineEndDate]"]`);
    
    // Sync start date
    if (projectStartDateInput && firstMilestoneStartDateInput && firstMilestoneStartDateInput.value) {
      projectStartDateInput.value = firstMilestoneStartDateInput.value;
    }
    
    // Sync target date of completion
    if (projectTargetDateInput && lastMilestoneEndDateInput && lastMilestoneEndDateInput.value) {
      projectTargetDateInput.value = lastMilestoneEndDateInput.value;
      // Recalculate expected days after syncing
      window.calculateExpectedDays();
    }
  };

  // Add event listeners to milestone date fields to auto-sync
  window.addMilestoneDateSyncListeners = function(milestoneId) {
    const milestoneStartInput = document.querySelector(`input[name="milestones[${milestoneId}][timelineStartDate]"]`);
    const milestoneEndInput = document.querySelector(`input[name="milestones[${milestoneId}][timelineEndDate]"]`);
    
    if (milestoneStartInput) {
      milestoneStartInput.addEventListener('change', function() {
        if (milestoneId === 1) {
          // First milestone start date should sync with Timeline start date
          const projectStartDateInput = document.querySelector('input[name="startDate"]');
          if (projectStartDateInput && this.value) {
            projectStartDateInput.value = this.value;
          }
        }
      });
    }
    
    if (milestoneEndInput) {
      milestoneEndInput.addEventListener('change', function() {
        // Check if this is the last milestone and sync end date
        const milestoneElements = document.querySelectorAll('.milestone-item');
        const lastMilestoneIndex = milestoneElements.length;
        
        if (milestoneId === lastMilestoneIndex) {
          const projectEndDateInput = document.querySelector('input[name="endDate"]');
          if (projectEndDateInput && this.value) {
            projectEndDateInput.value = this.value;
          }
        }
      });
    }
  };
</script>

<script>
  // Global variables
  window.milestoneCounter = 0;

  // Project service for API calls
  const projectService = {
    async createProject(projectData) {
      try {
        console.log('🚀 Creating project with data:', projectData);
        
        const token = localStorage.getItem('token');
        if (!token) {
          return { success: false, error: 'Authentication token not found' };
        }
        
        const response = await fetch('http://localhost:3000/api/projects', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(projectData)
        });
        
        const result = await response.json();
        console.log('📡 Backend response:', result);
        
        // Return the actual response from backend (whether success or error)
        if (!response.ok) {
          return {
            success: false,
            error: result.error || result.message || `Server error: ${response.status}`
          };
        }
        
        return result;
      } catch (error) {
        console.error('❌ Network error creating project:', error);
        return { 
          success: false, 
          error: `Network error: ${error.message}` 
        };
      }
    },

    async getProject(projectId) {
      try {
        const token = localStorage.getItem('token');
        
        if (!token) {
          console.error('No authentication token found');
          return { success: false, error: 'Authentication token not found' };
        }
        
        console.log('Fetching project with ID:', projectId);
        console.log('Using token:', token.substring(0, 20) + '...');
        
        const response = await fetch(`http://localhost:3000/api/projects/${projectId}`, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log('Response status:', response.status);
        
        if (!response.ok) {
          const errorData = await response.json().catch(() => ({}));
          console.error('API error:', errorData);
          return { success: false, error: errorData.error || `HTTP ${response.status}: ${response.statusText}` };
        }
        
        const data = await response.json();
        console.log('Project data received:', data);
        return data;
      } catch (error) {
        console.error('Error fetching project:', error);
        return { success: false, error: 'Failed to fetch project: ' + error.message };
      }
    },

    async updateProject(projectId, projectData) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          return { success: false, error: 'Authentication token not found' };
        }
        
        const response = await fetch(`http://localhost:3000/api/projects/${projectId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(projectData)
        });
        return await response.json();
      } catch (error) {
        console.error('Error updating project:', error);
        return { success: false, error: 'Network error' };
      }
    },

    async deleteProject(projectId) {
      try {
        const token = localStorage.getItem('token');
        if (!token) {
          return { success: false, error: 'Authentication token not found' };
        }
        
        const response = await fetch(`http://localhost:3000/api/projects/${projectId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        return await response.json();
      } catch (error) {
        console.error('Error deleting project:', error);
        return { success: false, error: 'Network error' };
      }
    }
  };

  // Global variables
  let currentEditingProject = null;

  // Utility functions - expose immediately to global scope
  window.autoCapitalizeFirst = function(input) {
    const value = input.value;
    if (value.length === 1) {
      input.value = value.charAt(0).toUpperCase();
    }
  };

  window.updateProjectCharacterCount = function(fieldId, counterId, maxLength) {
    const input = document.getElementById(fieldId);
    const counter = document.getElementById(counterId);
    
    if (input && counter) {
      const currentLength = input.value.length;
      counter.textContent = `${currentLength}/${maxLength}`;
      
      // Color coding based on usage
      if (currentLength >= maxLength * 0.9) {
        counter.style.color = '#dc2626'; // Red
        counter.classList.add('font-bold');
      } else if (currentLength >= maxLength * 0.7) {
        counter.style.color = '#d97706'; // Orange
        counter.classList.remove('font-bold');
      } else {
        counter.style.color = '#6b7280'; // Gray
        counter.classList.remove('font-bold');
      }
    } else {
      console.error(`❌ Character counter failed for ${fieldId}: input=${!!input}, counter=${!!counter}`);
    }
  };



  // Generate unique project code based on department
  async function generateProjectCode(departmentName) {
    const projectCodeField = document.getElementById('projectCodeField');
    if (!projectCodeField) return;
    
    // Department abbreviation mapping with multiple variations
    const departmentAbbreviations = {
      // Municipal Engineer's Office variations
      'Municipal Engineer\'s Office': 'MEO',
      'Municipal Engineer\'s Office': 'MEO',
      'Municipal Engineering Office': 'MEO',
      
      // Municipal Disaster and Risk Reduction Management Office variations
      'Municipal Disaster And Risk Reduction Management Office': 'MDRRMO',
      'Municipal Disaster and Risk Reduction Management Office': 'MDRRMO',
      'Municipal Disaster and Risk Reduction Management Office': 'MDRRMO',
      'Municipal Disaster Risk Reduction Management Office': 'MDRRMO',
      'MDRRMO': 'MDRRMO',
      
      // Municipal Agriculture Office variations
      'Municipal Agriculture Office': 'MAO',
      'Municipal Agriculturist\'s Office': 'MAO',
      'Municipal Agriculturist\'s Office': 'MAO',
      
      // Municipal Social Welfare and Development Office variations
      'Municipal Social Welfare and Development Office': 'MSWDO',
      'Municipal Social Welfare And Development Office': 'MSWDO',
      'MSWDO': 'MSWDO',
      
      // Municipal Environment and Natural Resources Office variations
      'Municipal Environment and Natural Resources Office': 'MENRO',
      'Municipal Environment And Natural Resources Office': 'MENRO',
      'Municipal Environment and Natural Resources Office': 'MENRO',
      'MENRO': 'MENRO',
      
      // Municipal Health Office variations
      'Municipal Health Office': 'MHO',
      
      // Municipal Planning and Development Office variations
      'Municipal Planning and Development Office': 'MPDO',
      'Municipal Planning And Development Office': 'MPDO',
      'MPDO': 'MPDO',
      
      // Municipal Treasurer's Office variations
      'Municipal Treasurer\'s Office': 'MTO',
      'Municipal Treasurer\'s Office': 'MTO',
      
      // Municipal Budget Office variations
      'Municipal Budget Office': 'MBO',
      
      // Municipal Civil Registrar's Office variations
      'Municipal Civil Registrar\'s Office': 'MCRO',
      'Municipal Civil Registrar\'s Office': 'MCRO',
      
      // Municipal Assessor's Office variations
      'Municipal Assessor\'s Office': 'MAO',
      'Municipal Assessor\'s Office': 'MAO',
      
      // Municipal Accountant's Office variations
      'Municipal Accountant\'s Office': 'MACCO',
      'Municipal Accountant\'s Office': 'MACCO',
      
      // Municipal Administrator's Office variations
      'Municipal Administrator\'s Office': 'MADMO',
      'Municipal Administrator\'s Office': 'MADMO',
      
      // Municipal Legal Office variations
      'Municipal Legal Office': 'MLO',
      
      // Municipal Information Office variations
      'Municipal Information Office': 'MIO',
      
      // Municipal Human Resource Management Office variations
      'Municipal Human Resource Management Office': 'MHRMO',
      'Municipal Human Resource Management Office': 'MHRMO',
      
      // Municipal General Services Office variations
      'Municipal General Services Office': 'MGSO'
    };
    
    // Get department abbreviation with case-insensitive matching
    let departmentAbbr = 'LGU'; // Default fallback
    
    // First try exact match
    if (departmentAbbreviations[departmentName]) {
      departmentAbbr = departmentAbbreviations[departmentName];
    } else {
      // Try case-insensitive matching
      const lowerDepartmentName = departmentName.toLowerCase();
      for (const [key, value] of Object.entries(departmentAbbreviations)) {
        if (key.toLowerCase() === lowerDepartmentName) {
          departmentAbbr = value;
          break;
        }
      }
    }
    
    // Log for debugging
    console.log('Department mapping debug:', {
      originalDepartmentName: departmentName,
      mappedAbbreviation: departmentAbbr,
      foundMatch: departmentAbbr !== 'LGU'
    });
    
    // Get current year
    const currentYear = new Date().getFullYear();
    
    // Generate unique random number (4 digits)
    let isUnique = false;
    let projectCode = '';
    let attempts = 0;
    const maxAttempts = 10;
    
    while (!isUnique && attempts < maxAttempts) {
      const randomNumber = Math.floor(Math.random() * 10000).toString().padStart(4, '0');
      projectCode = `PRJ-${departmentAbbr}-${currentYear}${randomNumber}`;
      
      // Check if this project code already exists
      try {
        const token = localStorage.getItem('token');
        if (token) {
          const response = await fetch(`http://localhost:3000/api/projects/check-code/${projectCode}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${token}`,
              'Content-Type': 'application/json'
            }
          });
          
          if (response.ok) {
            const data = await response.json();
            isUnique = !data.exists; // If exists is false, then it's unique
          } else {
            // If API call fails, assume it's unique to avoid blocking
            isUnique = true;
          }
        } else {
          // No token, assume it's unique
          isUnique = true;
        }
      } catch (error) {
        console.error('Error checking project code uniqueness:', error);
        // If there's an error, assume it's unique to avoid blocking
        isUnique = true;
      }
      
      attempts++;
    }
    
    // If we couldn't find a unique code after max attempts, use timestamp
    if (!isUnique) {
      const timestamp = Date.now().toString().slice(-4);
      projectCode = `PRJ-${departmentAbbr}-${currentYear}${timestamp}`;
    }
    
    // Set the generated project code
    projectCodeField.value = projectCode;
    console.log('Generated project code:', projectCode);
  }

  // Modal functions - expose immediately to global scope
  window.openCreateProjectModal = function() {
    const modal = document.getElementById('createProjectModal');
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    
    // Ensure modal starts at the top
    const modalContent = document.querySelector('#createProjectModal .bg-white');
    if (modalContent) {
      modalContent.scrollTop = 0;
    }
    
    // Reset milestone counter and clear existing milestones
    window.milestoneCounter = 0;
    const milestonesContainer = document.getElementById('createMilestonesContainer');
    if (milestonesContainer) {
      milestonesContainer.innerHTML = '';
    }
    
    // Set implementing office name and generate project code based on current user's department
    const implementingOfficeField = document.getElementById('implementingOfficeName');
    const projectCodeField = document.getElementById('projectCodeField');
    
    if (implementingOfficeField && projectCodeField) {
      // Get current user data from API
      const token = localStorage.getItem('token');
      if (token) {
        fetch('http://localhost:3000/api/auth/profile', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success && data.user && data.user.department) {
            // Use the actual department name from the database
            implementingOfficeField.value = data.user.department;
            // Generate project code based on department
            generateProjectCode(data.user.department);
          } else {
            // Fallback to default
            implementingOfficeField.value = 'Municipal Engineer\'s Office';
            generateProjectCode('Municipal Engineer\'s Office');
          }
        })
        .catch(error => {
          console.error('Error fetching user profile:', error);
          implementingOfficeField.value = 'Municipal Engineer\'s Office';
          generateProjectCode('Municipal Engineer\'s Office');
        });
      } else {
        // No token, use default
        implementingOfficeField.value = 'Municipal Engineer\'s Office';
        generateProjectCode('Municipal Engineer\'s Office');
      }
    }
    
    // Set current date automatically
    const createdDateField = document.querySelector('input[name="createdDate"]');
    if (createdDateField) {
      const today = new Date().toISOString().split('T')[0];
      createdDateField.value = today;
    }
    
    // Set up EIU partner field visibility
    window.setupEIUPartnerField();
    
    // Set up photo upload functionality
    window.setupPhotoUpload();
    
    // Initialize step navigation
    window.currentStep = 1;
    window.showStep(1);
    
    // Add initial milestone
    window.addMilestone();
    
    // Calculate totals to ensure correct counts
    setTimeout(() => {
      window.calculateTotals();
    }, 100);
    
    // Set up unsaved changes detection
    window.setupUnsavedChangesDetection();
    
  // Sync existing milestones with Target Completion Date
  setTimeout(() => {
    window.syncLastMilestoneWithTargetDate();
  }, 200);
  
  // Auto-populate first milestone timeline start date
  setTimeout(() => {
    window.autoPopulateFirstMilestoneStartDate();
  }, 300);
    
    // Functions are now available globally
    
    // Setup budget limits
    window.setupBudgetLimit('totalBudget', 'Total Budget Allocation');
    
    // Initialize character counters for main project fields
    setTimeout(() => {
      // Initialize all character counters to show initial count
      window.updateProjectCharacterCount('createProjectTitle', 'createProjectTitleCount', 100);
      window.updateProjectCharacterCount('description', 'descriptionCount', 500);
      window.updateProjectCharacterCount('createExpectedOutputs', 'createExpectedOutputsCount', 500);
      window.updateProjectCharacterCount('createTargetBeneficiaries', 'createTargetBeneficiariesCount', 500);
      window.updateProjectCharacterCount('budgetBreakdown', 'budgetBreakdownCount', 500);
      window.updateProjectCharacterCount('physicalProgressRequirements', 'physicalProgressRequirementsCount', 500);
      
      console.log('✅ Character counters initialized for all main project fields');
    }, 50);
    
    // Try to load saved project information
    setTimeout(() => {
      const hasLoaded = window.loadSavedProjectInformation();
      if (hasLoaded) {
        console.log('Saved project information loaded automatically');
        // Re-update character counters after loading saved data
        setTimeout(() => {
          window.updateProjectCharacterCount('createProjectTitle', 'createProjectTitleCount', 100);
          window.updateProjectCharacterCount('description', 'descriptionCount', 500);
          window.updateProjectCharacterCount('createExpectedOutputs', 'createExpectedOutputsCount', 500);
          window.updateProjectCharacterCount('createTargetBeneficiaries', 'createTargetBeneficiariesCount', 500);
          window.updateProjectCharacterCount('budgetBreakdown', 'budgetBreakdownCount', 500);
          window.updateProjectCharacterCount('physicalProgressRequirements', 'physicalProgressRequirementsCount', 500);
        }, 50);
      }
    }, 100);
  }

  window.closeCreateProjectModal = function() {
    try {
      const createModal = document.getElementById('createProjectModal');
      if (createModal) {
        createModal.classList.add('hidden');
    document.body.style.overflow = 'auto';
    
    // Reset form
    const form = document.getElementById('createProjectForm');
    if (form) {
      form.reset();
    }
    
    // Clear milestones
    const milestonesContainer = document.getElementById('createMilestonesContainer');
    if (milestonesContainer) {
      milestonesContainer.innerHTML = '';
    }
    
    // Reset counter
        if (typeof window.milestoneCounter !== 'undefined') {
          window.milestoneCounter = 0;
        }

    // Reset totals display
    setTimeout(() => {
      window.calculateTotals();
    }, 50);
    
    // Hide EIU field
    const eiuField = document.getElementById('eiuAccountField');
    if (eiuField) {
      eiuField.classList.add('hidden');
        }
      }
    } catch (error) {
      console.error('Error in closeCreateProjectModal:', error);
      // Fallback: try to hide all modals and reset body
      const allModals = document.querySelectorAll('.fixed');
      allModals.forEach(modal => modal.remove());
      document.body.style.overflow = 'auto';
    }
  }

  // Set up EIU partner field visibility - expose immediately to global scope
  window.setupEIUPartnerField = function() {
    // EIU field is now always visible and required
    const eiuInput = document.getElementById('eiuPersonnelId');
    if (eiuInput) {
      eiuInput.required = true;
    }
  }

  // Step navigation functions
  window.changeStep = function(direction) {
    console.log('🔄 changeStep called:', { direction, currentStep: window.currentStep });
    const newStep = window.currentStep + direction;
    console.log('🔄 newStep calculated:', newStep);
    
    if (newStep >= 1 && newStep <= 3) {
      // Validate current step before proceeding
      if (direction > 0) {
        console.log('🔍 Validating current step before proceeding...');
        const validationResult = window.validateCurrentStep();
        console.log('🔍 Validation result:', validationResult);
        
        if (!validationResult) {
          console.log('❌ Validation failed, blocking step change');
        return;
      }
      }
      
      console.log('✅ Validation passed, changing to step:', newStep);
      window.showStep(newStep);
    }
  };

  window.showStep = function(step) {
    // Hide all steps
    const steps = document.querySelectorAll('.step-content');
    steps.forEach(stepEl => {
      stepEl.classList.add('hidden');
    });
    
    // Show current step
    const currentStepEl = document.getElementById(`step${step}`);
    if (currentStepEl) {
      currentStepEl.classList.remove('hidden');
    }
    
    // Update progress indicators
    for (let i = 1; i <= 3; i++) {
      const indicator = document.getElementById(`step${i}-indicator`);
      const label = indicator?.nextElementSibling;
      
      if (i <= step) {
        indicator?.classList.remove('bg-gray-300', 'text-gray-500');
        indicator?.classList.add('bg-[#F28C00]', 'text-white');
        label?.classList.remove('text-gray-500');
        label?.classList.add('text-gray-700');
        } else {
        indicator?.classList.remove('bg-[#F28C00]', 'text-white');
        indicator?.classList.add('bg-gray-300', 'text-gray-500');
        label?.classList.remove('text-gray-700');
        label?.classList.add('text-gray-500');
      }
    }
    
    // Update current step display
    const currentStepDisplay = document.getElementById('current-step');
    if (currentStepDisplay) {
      currentStepDisplay.textContent = step;
    }
    
    // Update navigation buttons
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const submitBtn = document.getElementById('submitBtn');
    
    if (prevBtn) {
      prevBtn.classList.toggle('hidden', step === 1);
    }
    
    if (nextBtn) {
      nextBtn.classList.toggle('hidden', step === 3);
    }
    
    if (submitBtn) {
      submitBtn.classList.toggle('hidden', step !== 3);
    }
    
    window.currentStep = step;
    
    // Auto-scroll to top of the modal when changing steps
    setTimeout(() => {
      const modal = document.getElementById('createProjectModal');
      if (modal) {
        // Method 1: Try to scroll the scrollable container to top
        const scrollableContainer = modal.querySelector('.bg-white.rounded-3xl.overflow-y-auto');
        if (scrollableContainer) {
          scrollableContainer.scrollTop = 0;
          console.log('Scrolled to top of modal content');
        }
        
        // Method 2: Also try to scroll the current step into view
        const currentStepEl = document.getElementById(`step${step}`);
        if (currentStepEl) {
          currentStepEl.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'start',
            inline: 'nearest'
          });
          console.log('Scrolled current step into view');
        }
        
        // Method 3: Fallback - try to find any overflow-y-auto element
        if (!scrollableContainer) {
          const fallbackContainer = modal.querySelector('.overflow-y-auto');
          if (fallbackContainer) {
            fallbackContainer.scrollTop = 0;
            console.log('Scrolled to top using fallback selector');
          }
        }
      }
    }, 200);
    
    // Trigger expected days calculation when Step 2 is shown
    if (step === 2) {
      setTimeout(() => {
        window.triggerExpectedDaysCalculation();
      }, 300);
    }
  };

  window.validateCurrentStep = function() {
    const currentStep = window.currentStep;
    
    if (currentStep === 1) {
      // Get the current step element
      const currentStepElement = document.getElementById('step1');
      
      // Validate basic information fields in correct order
      const requiredFields = [
        'createProjectTitle',
        'category',
        'priority', 
        'fundingSource',
        'description',
        'createExpectedOutputs',
        'createTargetBeneficiaries'
      ];
      
      // Check each field in order and focus on first empty one
      for (const fieldId of requiredFields) {
        // Find field in the current step (step1) only
        const field = currentStepElement.querySelector(`#${fieldId}`) || currentStepElement.querySelector(`[name="${fieldId}"]`);
        if (field && field.hasAttribute('required')) {
          let isEmpty = false;
          
          // Handle different field types
          if (field.tagName === 'SELECT') {
            // For select fields, check if value is empty or the default placeholder
            const selectedOption = field.options[field.selectedIndex];
            isEmpty = !field.value || 
                     field.value === '' || 
                     (selectedOption && selectedOption.disabled) ||
                     (selectedOption && selectedOption.textContent.includes('Select'));
          } else {
            // For other fields, check if value is empty
            isEmpty = !field.value.trim();
          }
          
          if (isEmpty) {
            field.focus();
            field.classList.add('border-red-500', 'ring-2', 'ring-red-200');
            setTimeout(() => {
              field.classList.remove('border-red-500', 'ring-2', 'ring-red-200');
            }, 3000);
            alert(`Please fill in the ${fieldId.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())} field.`);
            return false;
          }
        }
      }
      
      // Validate location selection (check after other fields) - check in current step only
      const locationSelects = currentStepElement.querySelectorAll('.barangay-select');
      let hasLocation = false;
      let firstEmptyLocation = null;
      
      locationSelects.forEach(select => {
        if (select.value && select.value.trim()) {
          hasLocation = true;
        } else if (!firstEmptyLocation) {
          firstEmptyLocation = select;
        }
      });
      
      if (!hasLocation) {
        if (firstEmptyLocation) {
          firstEmptyLocation.focus();
          firstEmptyLocation.classList.add('border-red-500', 'ring-2', 'ring-red-200');
          setTimeout(() => {
            firstEmptyLocation.classList.remove('border-red-500', 'ring-2', 'ring-red-200');
          }, 3000);
        }
        alert('Please select at least one location/barangay.');
        return false;
      }
      
      // Validate EIU field (now always required) - check in current step only
      const eiuId = currentStepElement.querySelector('#eiuPersonnelId');
      if (!eiuId || !eiuId.value.trim()) {
        eiuId?.focus();
        alert('Please enter the EIU Unique User ID.');
        return false;
      }
      
      // Check if EIU account has been verified
      const eiuValidationMessage = currentStepElement.querySelector('#eiuValidationMessage');
      const isEIUVerified = eiuValidationMessage && 
        eiuValidationMessage.getAttribute('data-verified') === 'true';
      
      if (!isEIUVerified) {
        eiuId.focus();
        alert('Please verify the EIU Unique User ID before proceeding to the next step.');
        return false;
      }
      
      
    } else if (currentStep === 2) {
      console.log('🔍 Starting Step 2 validation...');
      
      // Use the Step 1-style validation function
      const isValid = window.validateStep2Fields();
      console.log('🔍 validateStep2Fields result:', isValid);
      
      if (!isValid) {
        console.log('❌ Step 2 validation failed, blocking navigation');
          return false;
        }
      
      // Additional date range validation
      // Use the same robust field finding logic
      const startDateInput = document.querySelector(`#step2 input#startDate`) || 
                            document.querySelector(`#step2 input[name="startDate"]`) ||
                            document.getElementById('startDate');
      const targetCompletionDateInput = document.querySelector(`#step2 input#targetCompletionDate`) || 
                                       document.querySelector(`#step2 input[name="targetCompletionDate"]`) ||
                                       document.getElementById('targetCompletionDate');
      
      const startDate = startDateInput?.value;
      const targetCompletionDate = targetCompletionDateInput?.value;
      
      console.log('🔍 Date validation check:', {
        startDate,
        targetCompletionDate,
        hasStartDate: !!startDate,
        hasTargetDate: !!targetCompletionDate,
        startDateInput: !!startDateInput,
        targetCompletionDateInput: !!targetCompletionDateInput
      });
      
      if (startDate && targetCompletionDate) {
        const startDateObj = new Date(startDate);
        const targetDateObj = new Date(targetCompletionDate);
        
        if (startDateObj >= targetDateObj) {
          // Focus on the field that's causing the issue
          if (startDateObj > targetDateObj) {
            const shouldScroll = confirm('Start Date cannot be later than Target Completion Date.\n\nClick OK to scroll to the field.');
            if (shouldScroll) {
              const fieldElement = document.getElementById('startDate');
              fieldElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
              fieldElement.style.border = '2px solid #F28C00';
              fieldElement.style.backgroundColor = '#FFF7ED';
              fieldElement.focus();
              setTimeout(() => {
                fieldElement.style.border = '';
                fieldElement.style.backgroundColor = '';
              }, 3000);
            }
          } else {
            const shouldScroll = confirm('Target Completion Date must be after Start Date.\n\nClick OK to scroll to the field.');
            if (shouldScroll) {
              const fieldElement = document.getElementById('targetCompletionDate');
              fieldElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
              fieldElement.style.border = '2px solid #F28C00';
              fieldElement.style.backgroundColor = '#FFF7ED';
              fieldElement.focus();
              setTimeout(() => {
                fieldElement.style.border = '';
                fieldElement.style.backgroundColor = '';
              }, 3000);
            }
          }
          return false;
        }
        
        // Additional validation: Check if project duration is at least 31 days
        const timeDifference = targetDateObj.getTime() - startDateObj.getTime();
        const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));
        
        console.log('Date validation in validateCurrentStep:', {
          startDate: startDate,
          targetDate: targetCompletionDate,
          daysDifference: daysDifference
        });
        
        if (daysDifference < 31) {
          console.log('❌ Project duration validation failed:', {
            daysDifference,
            minimumRequired: 31,
            startDate: startDate,
            targetDate: targetCompletionDate
          });
          
          const shouldScroll = confirm(`Project duration must be at least 31 days (1 month).\n\nCurrent duration: ${daysDifference} days\n\nPlease adjust the dates to have at least 31 days between start and target completion dates.\n\nClick OK to scroll to the date fields.`);
          
          if (shouldScroll) {
            // Scroll to the start date field and highlight both date fields
            startDateInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // Highlight both date fields
            startDateInput.style.border = '2px solid #F28C00';
            startDateInput.style.backgroundColor = '#FFF7ED';
            targetCompletionDateInput.style.border = '2px solid #F28C00';
            targetCompletionDateInput.style.backgroundColor = '#FFF7ED';
            
            startDateInput.focus();
            
            // Remove highlight after 5 seconds
            setTimeout(() => {
              startDateInput.style.border = '';
              startDateInput.style.backgroundColor = '';
              targetCompletionDateInput.style.border = '';
              targetCompletionDateInput.style.backgroundColor = '';
            }, 5000);
          }
          
          console.log('❌ Returning false from Step 2 validation due to insufficient duration');
        return false;
        }
      }
      
      console.log('✅ Step 2 validation passed, allowing navigation to Step 3');
      
    } else if (currentStep === 3) {
      // Validate milestones
      const milestonesContainer = document.getElementById('createMilestonesContainer');
      const milestones = milestonesContainer?.querySelectorAll('.milestone-item');
      
      if (!milestones || milestones.length === 0) {
        alert('Please add at least one milestone.');
        return false;
      }
      
      // Validate each milestone
      for (const milestone of milestones) {
        const title = milestone.querySelector('[name*="title"]')?.value;
        const weight = milestone.querySelector('[name*="weight"]')?.value;
        const plannedBudget = milestone.querySelector('[name*="plannedBudget"]')?.value;
        const startDate = milestone.querySelector('[name*="timelineStartDate"]')?.value;
        const endDate = milestone.querySelector('[name*="timelineEndDate"]')?.value;
        
        if (!title || !weight || !plannedBudget || !startDate || !endDate) {
          alert('Please fill in all required fields for all milestones.');
          return false;
        }
      }
    }
    
    return true;
  };

  // Validate EIU account - expose immediately to global scope
  window.validateEIUAccount = async function() {
    console.log('validateEIUAccount called');
    const eiuPersonnelId = document.getElementById('eiuPersonnelId').value;
    const validationMessage = document.getElementById('eiuValidationMessage');
    const verifyButton = document.querySelector('button[onclick="validateEIUAccount()"]');
    
    console.log('EIU Personnel ID:', eiuPersonnelId);
    console.log('Validation message element:', validationMessage);
    console.log('Verify button:', verifyButton);
    
    if (!eiuPersonnelId) {
      showValidationMessage('Please enter an EIU Personnel Account ID', 'error');
      return;
    }
    
    // Show loading state
    if (verifyButton) {
      verifyButton.disabled = true;
      verifyButton.innerHTML = `
        <svg class="animate-spin w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
        </svg>
      `;
    }
    
    try {
      // Get token from localStorage
      const token = localStorage.getItem('token');
      
      if (!token) {
        showValidationMessage('❌ Authentication token not found. Please log in again.', 'error');
        return;
      }
      
      console.log('Making API call to validate EIU account...');
      const response = await fetch(`http://localhost:3000/api/users/validate-eiu/${eiuPersonnelId}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });
      
      console.log('API response status:', response.status);
      const data = await response.json();
      console.log('API response data:', data);
      
      if (response.ok && data.success) {
        // Store the actual user ID (UUID) for project creation
        document.getElementById('eiuPersonnelId').setAttribute('data-user-id', data.user.id);
        showEIUProfile(data.user);
      } else {
        showValidationMessage(`${data.error || 'Invalid EIU Personnel Account ID'}`, 'error');
      }
    } catch (error) {
      console.error('Validation error:', error);
      showValidationMessage('Error validating account. Please try again.', 'error');
    } finally {
      // Restore button state
      if (verifyButton) {
        verifyButton.disabled = false;
        verifyButton.innerHTML = `
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        `;
      }
    }
  }

  // Show validation message - expose immediately to global scope
  window.showValidationMessage = function(message, type) {
    const validationMessage = document.getElementById('eiuValidationMessage');
    if (validationMessage) {
      const icon = type === 'success' ? '✅' : '❌';
      validationMessage.innerHTML = `<div class="flex items-center gap-2"><span>${icon}</span><span>${message}</span></div>`;
      validationMessage.className = `mt-2 p-3 rounded-lg text-sm font-medium ${type === 'success' ? 'bg-green-50 text-green-700 border border-green-200' : 'bg-red-50 text-red-700 border border-red-200'}`;
      validationMessage.classList.remove('hidden');
      
      // Store verification status for validation
      if (type === 'success') {
        validationMessage.setAttribute('data-verified', 'true');
        validationMessage.classList.add('text-green-600');
      } else {
        validationMessage.setAttribute('data-verified', 'false');
        validationMessage.classList.remove('text-green-600');
      }
    }
  }

  // Show comprehensive EIU profile information - expose immediately to global scope
  window.showEIUProfile = function(user) {
    const validationMessage = document.getElementById('eiuValidationMessage');
    if (!validationMessage) return;
    
    // Set verification status for validation
    validationMessage.setAttribute('data-verified', 'true');
    validationMessage.classList.add('text-green-600');

    console.log('EIU User Data:', user); // Debug log to see all available fields

    // Format birthdate - check multiple possible field names
    const birthdateValue = user.birthdate || user.birthDate || user.birth_date;
    const birthdate = birthdateValue ? new Date(birthdateValue).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long', 
      day: 'numeric'
    }) : 'Not specified';

    // Get profile picture URL or use a default avatar
    const profilePicture = user.profilePicture || user.profile_picture || user.avatar || 'https://ui-avatars.com/api/?name=' + encodeURIComponent(user.name || 'EIU') + '&background=92751F&color=fff&size=64';

    // Build comprehensive profile display
    const profileHTML = `
      <div class="bg-green-50 border border-green-200 rounded-xl p-6 space-y-4">
        <div class="flex items-center gap-2 mb-4">
          <span class="text-green-600">✅</span>
          <span class="text-green-700 font-semibold">Valid EIU Account Verified</span>
        </div>
        
        <div class="bg-white rounded-lg p-4 shadow-sm">
          <div class="flex items-start gap-4">
            <!-- Profile Picture -->
            <div class="flex-shrink-0">
              <img 
                src="${profilePicture}" 
                alt="${user.name || 'EIU Partner'}" 
                class="w-16 h-16 rounded-full object-cover border-2 border-gray-200"
                onerror="this.src='https://ui-avatars.com/api/?name=${encodeURIComponent(user.name || 'EIU')}&background=92751F&color=fff&size=64'; this.onerror=null;"
              />
            </div>
            
            <!-- Profile Information -->
            <div class="flex-1 space-y-3">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <!-- Full Name -->
                <div>
                  <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Full Name</label>
                  <p class="text-sm font-semibold text-gray-900">${user.name || 'Not specified'}</p>
                </div>
                
                <!-- Email Username -->
                <div>
                  <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Email Username</label>
                  <p class="text-sm text-gray-700">${user.email || 'Not specified'}</p>
                </div>
                
                <!-- Contact Number -->
                <div>
                  <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Contact Number</label>
                  <p class="text-sm text-gray-700">${user.contactNumber || user.contact_number || user.phoneNumber || user.phone || 'Not specified'}</p>
                </div>
                
                <!-- Birthdate -->
                <div>
                  <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Birthdate</label>
                  <p class="text-sm text-gray-700">${birthdate}</p>
                </div>
                
                <!-- Group -->
                <div>
                  <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Group</label>
                  <p class="text-sm text-gray-700">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      ${user.group || 'EIU'}
                    </span>
                  </p>
                </div>
                
                <!-- Department -->
                <div>
                  <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Department</label>
                  <p class="text-sm text-gray-700">${user.department || 'External Partner Company'}</p>
                </div>
                
                <!-- Subrole -->
                <div>
                  <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Subrole</label>
                  <p class="text-sm text-gray-700">
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800">
                      ${user.subRole || user.subrole || 'Program Partner Head'}
                    </span>
                  </p>
                </div>
                
                <!-- Company -->
                <div>
                  <label class="text-xs font-medium text-gray-500 uppercase tracking-wide">Company</label>
                  <p class="text-sm text-gray-700">${user.externalCompanyName || user.company || 'Sample Company'}</p>
                </div>
              </div>
              
              <!-- Role Badge -->
              <div class="pt-2">
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-100 text-green-800">
                  <svg class="w-4 h-4 mr-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  ${user.role || 'EIU'} - Verified Partner
                </span>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;

    validationMessage.innerHTML = profileHTML;
    validationMessage.className = 'mt-4';
    validationMessage.classList.remove('hidden');
  }

  function openEditProjectModal() {
    console.log('Opening edit project modal...');
    const modal = document.getElementById('editProjectModal');
    if (!modal) {
      console.error('Edit project modal not found');
      return;
    }
    console.log('Modal found, removing hidden class...');
    modal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    console.log('Modal should now be visible');
  }

  function closeEditProjectModal() {
    document.getElementById('editProjectModal').classList.add('hidden');
    document.body.style.overflow = 'auto';
    
    // Reset form
    const form = document.getElementById('editProjectForm');
    if (form) {
      form.reset();
    }
    
    // Clear milestones
    const milestonesContainer = document.getElementById('editMilestonesContainer');
    if (milestonesContainer) {
      milestonesContainer.innerHTML = '';
    }
    
    // Reset counter
        if (typeof window.milestoneCounter !== 'undefined') {
          window.milestoneCounter = 0;
        }
    currentEditingProject = null;
  }

  async function viewProjectDetails(projectId) {
    try {
      console.log('🔍 viewProjectDetails called with projectId:', projectId);
      
      // Check session validity first
      if (window.authService && !window.authService.redirectIfInvalidSession()) {
        console.log('❌ Session validation failed');
        return;
      }

      console.log('✅ Session validation passed');
      
      // Wait a bit for modal functions to be available if needed
      let attempts = 0;
      const maxAttempts = 10;
      
      const tryShowModal = () => {
        console.log(`🔍 Attempt ${attempts + 1}: Checking for showProjectDetailsModal function...`);
        console.log('window.showProjectDetailsModal exists:', !!window.showProjectDetailsModal);
        console.log('window.showProjectDetailsModal type:', typeof window.showProjectDetailsModal);
        
        if (window.showProjectDetailsModal && typeof window.showProjectDetailsModal === 'function') {
          console.log('✅ Calling showProjectDetailsModal with projectId:', projectId);
          window.showProjectDetailsModal(projectId);
          return true;
        }
        
        attempts++;
        if (attempts < maxAttempts) {
          console.log(`⏳ Modal function not ready, retrying in 100ms... (attempt ${attempts}/${maxAttempts})`);
          setTimeout(tryShowModal, 100);
          return false;
        }
        
        console.error('❌ ProjectDetailsModal not available after all attempts');
        console.log('Available window functions:', Object.keys(window).filter(key => key.includes('modal') || key.includes('Modal')));
        console.log('DOM modal element exists:', !!document.getElementById('projectDetailsModal'));
        
        // Fallback: try to show modal manually if the element exists
        const modalElement = document.getElementById('projectDetailsModal');
        if (modalElement) {
          console.log('🔧 Attempting manual modal show...');
          modalElement.classList.remove('hidden');
          // Try to load project data manually if needed
          if (window.loadProjectData) {
            window.loadProjectData(projectId);
          }
        } else {
          // Last resort fallback
          window.location.href = `/dashboard/iu-implementing-office/modules/project-management?projectId=${projectId}`;
        }
        return true;
      };
      
      tryShowModal();
      
    } catch (error) {
      console.error('Error viewing project details:', error);
    }
  }

  function testModal() {
    console.log('🧪 Testing modal...');
    const modal = document.getElementById('projectDetailsModal');
    if (modal) {
      console.log('✅ Modal found in DOM, current classes:', modal.className);
      console.log('✅ Modal element:', modal);
      modal.classList.remove('hidden');
      console.log('✅ Hidden class removed, new classes:', modal.className);
    } else {
      console.error('❌ Modal not found in DOM!');
      console.log('🔍 All elements with "modal" in ID:', 
        Array.from(document.querySelectorAll('[id*="modal"]')).map(el => el.id)
      );
    }
    
    // Check if the modal functions exist
    console.log('🔍 Modal functions check:');
    console.log('- showProjectDetailsModal:', typeof window.showProjectDetailsModal);
    console.log('- showProjectModal:', typeof window.showProjectModal);
    console.log('- closeProjectDetailsModal:', typeof window.closeProjectDetailsModal);
  }



  // Edit project function
  async function editProject(projectId) {
    console.log('editProject function called with ID:', projectId);
    try {
      const response = await projectService.getProjectById(projectId);
      console.log('Project service response:', response);
      
      if (response.success) {
        console.log('Project fetched successfully, setting currentEditingProject');
        currentEditingProject = response.project;
        console.log('Populating edit form...');
        populateEditForm(response.project);
        console.log('Opening edit modal...');
        openEditProjectModal();
      } else {
        console.error('Error fetching project:', response.error);
        alert('Error fetching project: ' + response.error);
      }
    } catch (error) {
      console.error('Error editing project:', error);
      alert('Error editing project. Please try again.');
    }
  }



  // Populate edit form with project data
  function populateEditForm(project) {
    console.log('Populating edit form with project:', project);
    const form = document.getElementById('editProjectForm');
    if (!form) {
      console.error('Edit form not found');
      return;
    }

    // Populate basic fields
    try {
      const fields = [
        { selector: 'input[name="projectCode"]', value: project.projectCode },
        { selector: 'input[name="name"]', value: project.name },
        { selector: 'input[name="implementingOfficeName"]', value: project.implementingOfficeName },
        { selector: 'select[name="category"]', value: project.category },
        { selector: 'select[name="priority"]', value: project.priority },
        { selector: 'select[name="fundingSource"]', value: project.fundingSource },
        { selector: 'input[name="createdDate"]', value: project.createdDate },
        { selector: 'textarea[name="description"]', value: project.description },
        { selector: 'textarea[name="expectedOutputs"]', value: project.expectedOutputs },
        { selector: 'textarea[name="targetBeneficiaries"]', value: project.targetBeneficiaries },
        { selector: 'input[name="eiuPersonnelId"]', value: project.eiuPersonnelId },
        { selector: 'input[name="startDate"]', value: project.startDate },
        { selector: 'input[name="endDate"]', value: project.endDate },

        { selector: 'textarea[name="timelineMilestones"]', value: project.timelineMilestones },
        { selector: 'input[name="totalBudget"]', value: project.totalBudget },

        { selector: 'textarea[name="budgetBreakdown"]', value: project.budgetBreakdown },

        { selector: 'textarea[name="requiredDocumentation"]', value: project.requiredDocumentation },
        { selector: 'textarea[name="physicalProgressRequirements"]', value: project.physicalProgressRequirements },
        { selector: 'input[name="projectManager"]', value: project.projectManager },
        { selector: 'input[name="contactNumber"]', value: project.contactNumber },
        { selector: 'textarea[name="specialRequirements"]', value: project.specialRequirements }
      ];

      fields.forEach(field => {
        const element = form.querySelector(field.selector);
        if (element) {
          if (field.selector.includes('checkbox')) {
            element.checked = field.value || false;
          } else {
            element.value = field.value || '';
          }
        } else {
          console.warn(`Field not found: ${field.selector}`);
        }
      });

      // Handle checkbox separately
      const hasExternalPartnerCheckbox = form.querySelector('input[name="hasExternalPartner"]');
      if (hasExternalPartnerCheckbox) {
        hasExternalPartnerCheckbox.checked = project.hasExternalPartner || false;
      }
    } catch (error) {
      console.error('Error populating form fields:', error);
    }

    // Populate location (barangays)
    const locationContainer = document.getElementById('editBarangayContainer');
    if (locationContainer && project.location) {
      locationContainer.innerHTML = '';
      // Handle location as comma-separated string
      const locations = project.location.split(',').map(loc => loc.trim()).filter(loc => loc);
      
      if (locations.length === 0) {
        // If no locations, add one empty dropdown
        const locationDiv = document.createElement('div');
        locationDiv.className = 'flex gap-2';
        locationDiv.innerHTML = `
          <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent barangay-select">
            <option value="">Select Barangay</option>
            <option value="Various Barangay">Various Barangay</option>
            <option value="Alipit">Alipit</option>
            <option value="Bagumbayan">Bagumbayan</option>
            <option value="Bubukal">Bubukal</option>
            <option value="Calios">Calios</option>
            <option value="Duhat">Duhat</option>
            <option value="Gatid">Gatid</option>
            <option value="Jasaan">Jasaan</option>
            <option value="Labuin">Labuin</option>
            <option value="Malinao">Malinao</option>
            <option value="Oogong">Oogong</option>
            <option value="Pagsawitan">Pagsawitan</option>
            <option value="Palasan">Palasan</option>
            <option value="Patimbao">Patimbao</option>
            <option value="Poblacion I">Poblacion I</option>
            <option value="Poblacion II">Poblacion II</option>
            <option value="Poblacion III">Poblacion III</option>
            <option value="Poblacion IV">Poblacion IV</option>
            <option value="Poblacion V">Poblacion V</option>
            <option value="San Jose">San Jose</option>
            <option value="San Juan">San Juan</option>
            <option value="San Pablo Norte">San Pablo Norte</option>
            <option value="San Pablo Sur">San Pablo Sur</option>
            <option value="Santisima Cruz">Santisima Cruz</option>
            <option value="Santo Angel Central">Santo Angel Central</option>
            <option value="Santo Angel Norte">Santo Angel Norte</option>
            <option value="Santo Angel Sur">Santo Angel Sur</option>
          </select>
          <button type="button" onclick="addEditBarangayDropdown()" class="px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors text-sm">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
            </svg>
          </button>
        `;
        locationContainer.appendChild(locationDiv);
      } else {
        locations.forEach((location, index) => {
          const locationDiv = document.createElement('div');
          locationDiv.className = 'flex gap-2';
          locationDiv.innerHTML = `
            <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent barangay-select">
              <option value="">Select Barangay</option>
              <option value="Various Barangay" ${location === 'Various Barangay' ? 'selected' : ''}>Various Barangay</option>
              <option value="Alipit" ${location === 'Alipit' ? 'selected' : ''}>Alipit</option>
              <option value="Bagumbayan" ${location === 'Bagumbayan' ? 'selected' : ''}>Bagumbayan</option>
              <option value="Bubukal" ${location === 'Bubukal' ? 'selected' : ''}>Bubukal</option>
              <option value="Calios" ${location === 'Calios' ? 'selected' : ''}>Calios</option>
              <option value="Duhat" ${location === 'Duhat' ? 'selected' : ''}>Duhat</option>
              <option value="Gatid" ${location === 'Gatid' ? 'selected' : ''}>Gatid</option>
              <option value="Jasaan" ${location === 'Jasaan' ? 'selected' : ''}>Jasaan</option>
              <option value="Labuin" ${location === 'Labuin' ? 'selected' : ''}>Labuin</option>
              <option value="Malinao" ${location === 'Malinao' ? 'selected' : ''}>Malinao</option>
              <option value="Oogong" ${location === 'Oogong' ? 'selected' : ''}>Oogong</option>
              <option value="Pagsawitan" ${location === 'Pagsawitan' ? 'selected' : ''}>Pagsawitan</option>
              <option value="Palasan" ${location === 'Palasan' ? 'selected' : ''}>Palasan</option>
              <option value="Patimbao" ${location === 'Patimbao' ? 'selected' : ''}>Patimbao</option>
              <option value="Poblacion I" ${location === 'Poblacion I' ? 'selected' : ''}>Poblacion I</option>
              <option value="Poblacion II" ${location === 'Poblacion II' ? 'selected' : ''}>Poblacion II</option>
              <option value="Poblacion III" ${location === 'Poblacion III' ? 'selected' : ''}>Poblacion III</option>
              <option value="Poblacion IV" ${location === 'Poblacion IV' ? 'selected' : ''}>Poblacion IV</option>
              <option value="Poblacion V" ${location === 'Poblacion V' ? 'selected' : ''}>Poblacion V</option>
              <option value="San Jose" ${location === 'San Jose' ? 'selected' : ''}>San Jose</option>
              <option value="San Juan" ${location === 'San Juan' ? 'selected' : ''}>San Juan</option>
              <option value="San Pablo Norte" ${location === 'San Pablo Norte' ? 'selected' : ''}>San Pablo Norte</option>
              <option value="San Pablo Sur" ${location === 'San Pablo Sur' ? 'selected' : ''}>San Pablo Sur</option>
              <option value="Santisima Cruz" ${location === 'Santisima Cruz' ? 'selected' : ''}>Santisima Cruz</option>
              <option value="Santo Angel Central" ${location === 'Santo Angel Central' ? 'selected' : ''}>Santo Angel Central</option>
              <option value="Santo Angel Norte" ${location === 'Santo Angel Norte' ? 'selected' : ''}>Santo Angel Norte</option>
              <option value="Santo Angel Sur" ${location === 'Santo Angel Sur' ? 'selected' : ''}>Santo Angel Sur</option>
            </select>
            ${index === 0 ? `
              <button type="button" onclick="addEditBarangayDropdown()" class="px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600 transition-colors text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
              </button>
            ` : `
              <button type="button" onclick="removeEditBarangayDropdown(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            `}
          `;
          locationContainer.appendChild(locationDiv);
        });
      }
    }

    // Populate milestones
    const milestonesContainer = document.getElementById('editMilestonesContainer');
    if (milestonesContainer && project.milestones && project.milestones.length > 0) {
      milestonesContainer.innerHTML = '';
      project.milestones.forEach((milestone, index) => {
        addEditMilestone(milestone);
      });
    } else {
      // Add at least one empty milestone
      addEditMilestone();
    }
  }

  // Add milestone to edit form
  function addEditMilestone(existingMilestone = null) {
    const container = document.getElementById('editMilestonesContainer');
    if (!container) return;

    milestoneCounter++;
    const milestoneHtml = `
      <div id="edit-milestone-${milestoneCounter}" class="bg-white border border-gray-200 rounded-lg p-4 mb-4">
        <div class="flex items-center justify-between mb-4">
          <h4 class="font-semibold text-gray-800">Milestone ${milestoneCounter}</h4>
          <button type="button" onclick="removeEditMilestone(${milestoneCounter})" class="text-red-500 hover:text-red-700">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
            </svg>
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Milestone Name *</label>
            <input type="text" name="editMilestones[${milestoneCounter}][title]" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="e.g., Site Preparation" value="${existingMilestone ? existingMilestone.title : ''}">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Weight (%) *</label>
            <input type="number" name="editMilestones[${milestoneCounter}][weight]" required min="0" max="100" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="e.g., 25.00" onchange="calculateEditTotals()" value="${existingMilestone ? existingMilestone.weight : ''}">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Planned Budget (₱) *</label>
            <input type="number" name="editMilestones[${milestoneCounter}][plannedBudget]" required min="0" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="e.g., 1250000" onchange="calculateEditTotals()" value="${existingMilestone ? existingMilestone.plannedBudget : ''}">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Planned Start Date</label>
            <input type="date" name="editMilestones[${milestoneCounter}][plannedStartDate]" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" value="${existingMilestone ? existingMilestone.plannedStartDate : ''}">
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Planned End Date</label>
            <input type="date" name="editMilestones[${milestoneCounter}][plannedEndDate]" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" value="${existingMilestone ? existingMilestone.plannedEndDate : ''}">
          </div>
          
          <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea name="editMilestones[${milestoneCounter}][description]" rows="2" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent" placeholder="Detailed description of what this milestone accomplishes...">${existingMilestone ? existingMilestone.description : ''}</textarea>
          </div>
        </div>
      </div>
    `;
    
    container.insertAdjacentHTML('beforeend', milestoneHtml);
    calculateEditTotals();
  }

  function removeEditMilestone(id) {
    const milestone = document.getElementById(`edit-milestone-${id}`);
    if (milestone) {
      milestone.remove();
      calculateEditTotals();
    }
  }

  function calculateEditTotals() {
    const weightInputs = document.querySelectorAll('input[name*="editMilestones"][name*="[weight]"]');
    const budgetInputs = document.querySelectorAll('input[name*="editMilestones"][name*="[plannedBudget]"]');
    
    let totalWeight = 0;
    let totalBudget = 0;
    
    weightInputs.forEach(input => {
      totalWeight += parseFloat(input.value) || 0;
    });
    
    budgetInputs.forEach(input => {
      totalBudget += parseFloat(input.value) || 0;
    });
    
    const totalWeightElement = document.getElementById('editTotalWeight');
    const totalBudgetElement = document.getElementById('editTotalMilestoneBudget');
    
    if (totalWeightElement) {
      totalWeightElement.textContent = `${totalWeight.toFixed(2)}%`;
      totalWeightElement.className = totalWeight === 100 ? 'text-lg font-bold text-green-600' : 'text-lg font-bold text-red-600';
    }
    
    if (totalBudgetElement) {
      totalBudgetElement.textContent = `₱${totalBudget.toLocaleString('en-PH', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
    }
  }

  // Get edit milestones data
  function getEditMilestonesData() {
    const milestones = [];
    const milestoneElements = document.querySelectorAll('[id^="edit-milestone-"]');
    
    milestoneElements.forEach(element => {
      const id = element.id.replace('edit-milestone-', '');
      const title = element.querySelector(`input[name="editMilestones[${id}][title]"]`)?.value;
      const weight = element.querySelector(`input[name="editMilestones[${id}][weight]"]`)?.value;
      const plannedBudget = element.querySelector(`input[name="editMilestones[${id}][plannedBudget]"]`)?.value;
      const plannedStartDate = element.querySelector(`input[name="editMilestones[${id}][plannedStartDate]"]`)?.value;
      const plannedEndDate = element.querySelector(`input[name="editMilestones[${id}][plannedEndDate]"]`)?.value;
      const description = element.querySelector(`textarea[name="editMilestones[${id}][description]"]`)?.value;
      
      if (title && weight && plannedBudget) {
        milestones.push({
          title,
          weight: parseFloat(weight),
          plannedBudget: window.parseBudgetValue(plannedBudget) || 0,
          plannedStartDate: plannedStartDate || null,
          plannedEndDate: plannedEndDate || null,
          description: description || ''
        });
      }
    });
    
    return milestones;
  }

  // Comprehensive validation function
  window.validateProjectForm = function() {
    const form = document.getElementById('createProjectForm');
    const formData = new FormData(form);
    const errors = [];
    
    // Clear all previous field errors
    document.querySelectorAll('[id$="_error"]').forEach(el => el.remove());
    document.querySelectorAll('.border-red-500').forEach(el => {
      el.classList.remove('border-red-500', 'border-2');
      el.classList.add('border-gray-300');
    });
    
    // Required fields validation with field highlighting
    const requiredFields = [
      { name: 'projectCode', label: 'Project Code', fieldId: 'projectCodeField' },
      { name: 'name', label: 'Project/Program Title', fieldId: 'createProjectTitle' },
      { name: 'implementingOfficeName', label: 'Implementing Office', fieldId: 'implementingOfficeName' },
      { name: 'category', label: 'Category', fieldId: 'category' },
      { name: 'priority', label: 'Priority Level', fieldId: 'priority' },
      { name: 'fundingSource', label: 'Funding Source', fieldId: 'fundingSource' },
      { name: 'createdDate', label: 'Created Date', fieldId: 'createdDate' },
      { name: 'description', label: 'Project Description', fieldId: 'description' },
      { name: 'expectedOutputs', label: 'Expected Outputs', fieldId: 'createExpectedOutputs' },
      { name: 'targetBeneficiaries', label: 'Target Beneficiaries', fieldId: 'createTargetBeneficiaries' },
      { name: 'startDate', label: 'Start Date', fieldId: 'startDate' },
      { name: 'targetCompletionDate', label: 'Target Completion Date', fieldId: 'targetCompletionDate' },
      { name: 'totalBudget', label: 'Total Budget Allocation', fieldId: 'totalBudget' },
      { name: 'budgetBreakdown', label: 'Budget Description', fieldId: 'budgetBreakdown' },
      { name: 'physicalProgressRequirements', label: 'General Description', fieldId: 'physicalProgressRequirements' }
    ];
    
    // Check required fields and highlight them
    requiredFields.forEach(field => {
      const value = formData.get(field.name);
      const fieldElement = document.querySelector(`[name="${field.name}"], #${field.fieldId}`);
      
      if (!value || value.trim() === '') {
        errors.push(`Error: ${field.label} is required!`);
        if (fieldElement) {
          window.showFieldError(fieldElement, `${field.fieldId}_error`, `${field.label} is required!`);
        }
      }
    });
    
    // Character limit validations
    const characterLimits = [
      { name: 'name', limit: 100, label: 'Project/Program Title', fieldId: 'createProjectTitle' },
      { name: 'description', limit: 500, label: 'Project Description', fieldId: 'description' },
      { name: 'expectedOutputs', limit: 500, label: 'Expected Outputs', fieldId: 'createExpectedOutputs' },
      { name: 'targetBeneficiaries', limit: 500, label: 'Target Beneficiaries', fieldId: 'createTargetBeneficiaries' },
      { name: 'budgetBreakdown', limit: 500, label: 'Budget Description', fieldId: 'budgetBreakdown' },
      { name: 'physicalProgressRequirements', limit: 500, label: 'General Description', fieldId: 'physicalProgressRequirements' }
    ];
    
    characterLimits.forEach(field => {
      const value = formData.get(field.name);
      const fieldElement = document.querySelector(`[name="${field.name}"], #${field.fieldId}`);
      
      if (value && value.length > field.limit) {
        errors.push(`Error: ${field.label} cannot exceed ${field.limit} characters!`);
        if (fieldElement) {
          window.showFieldError(fieldElement, `${field.fieldId}_error`, `${field.label} cannot exceed ${field.limit} characters!`);
        }
      }
    });
    
    // Budget limit validations
    const budgetFields = ['totalBudget'];
    budgetFields.forEach(fieldName => {
      const value = formData.get(fieldName);
      const fieldElement = document.querySelector(`[name="${fieldName}"]`);
      
      if (value && fieldElement) {
        const numericValue = window.parseBudgetValue(value);
        const billionLimit = 999999999999; // 999 billion limit
        
        if (numericValue > billionLimit) {
          errors.push(`Error: Total Budget Allocation cannot exceed ₱999,999,999,999.00!`);
          window.showFieldError(fieldElement, `${fieldName}_error`, `Total Budget Allocation cannot exceed ₱999,999,999,999.00!`);
        }
      }
    });
    
    // Validate location/barangay
    const barangaySelects = document.querySelectorAll('#createBarangayContainer select[name="location[]"]');
    let hasBarangaySelected = false;
    barangaySelects.forEach(select => {
      if (select.value && select.value.trim() !== '') {
        hasBarangaySelected = true;
      }
    });
    if (!hasBarangaySelected) {
      errors.push('Error: At least one Location/Barangay must be selected!');
      // Highlight the barangay container
      const barangayContainer = document.getElementById('createBarangayContainer');
      if (barangayContainer) {
        barangayContainer.style.border = '2px solid #ef4444';
        barangayContainer.style.borderRadius = '8px';
        barangayContainer.style.padding = '8px';
      }
    }
    
    // Validate EIU Personnel ID if external partner is selected
    const hasExternalPartnerCheckbox = document.querySelector('input[name="hasExternalPartner"]');
    const hasExternalPartner = hasExternalPartnerCheckbox ? hasExternalPartnerCheckbox.checked : false;
    const eiuPersonnelId = formData.get('eiuPersonnelId');
    
    if (hasExternalPartner) {
      if (!eiuPersonnelId || eiuPersonnelId.trim() === '') {
        errors.push('Error: EIU Unique User ID is required when external partner is selected!');
        const eiuField = document.getElementById('eiuPersonnelId');
        if (eiuField) {
          window.showFieldError(eiuField, 'eiuPersonnelId_error', 'EIU Unique User ID is required!');
        }
      } else {
        // Check if EIU has been verified
        const validationMessage = document.getElementById('eiuValidationMessage');
        if (!validationMessage || validationMessage.classList.contains('hidden') || 
            !validationMessage.innerHTML.includes('Valid EIU Account Verified')) {
          errors.push('Error: Please verify the EIU Partner before creating the project!');
          const eiuField = document.getElementById('eiuPersonnelId');
          if (eiuField) {
            window.showFieldError(eiuField, 'eiuPersonnelId_error', 'Please verify the EIU Partner!');
          }
        }
      }
    }
    
    // Validate milestones
    const milestones = getMilestonesData();
    if (milestones.length === 0) {
      errors.push('Error: At least one milestone must be added to the project!');
    } else {
      // Validate each milestone
      milestones.forEach((milestone, index) => {
        const milestoneElement = document.getElementById(`milestone-${index + 1}`);
        
        // Milestone Name validation
        if (!milestone.title || milestone.title.trim() === '') {
          errors.push(`Error: Milestone ${index + 1} - Milestone Name is required!`);
          if (milestoneElement) {
            const titleField = milestoneElement.querySelector(`input[name="milestones[${index + 1}][title]"]`);
            if (titleField) {
              window.showFieldError(titleField, `milestone_${index + 1}_title_error`, 'Milestone Name is required!');
            }
          }
        } else if (milestone.title.length > 500) {
          errors.push(`Error: Milestone ${index + 1} - Milestone Name cannot exceed 500 characters!`);
          if (milestoneElement) {
            const titleField = milestoneElement.querySelector(`input[name="milestones[${index + 1}][title]"]`);
            if (titleField) {
              window.showFieldError(titleField, `milestone_${index + 1}_title_error`, 'Milestone Name cannot exceed 500 characters!');
            }
          }
        }
        
        // Weight validation
        if (!milestone.weight || milestone.weight <= 0) {
          errors.push(`Error: Milestone ${index + 1} - Weight must be greater than 0%!`);
        }
        
        // Planned Budget validation
        if (!milestone.plannedBudget || milestone.plannedBudget <= 0) {
          errors.push(`Error: Milestone ${index + 1} - Planned Budget must be greater than ₱0!`);
          if (milestoneElement) {
            const budgetField = milestoneElement.querySelector(`input[name="milestones[${index + 1}][plannedBudget]"]`);
            if (budgetField) {
              window.showFieldError(budgetField, `milestone_${index + 1}_budget_error`, 'Planned Budget must be greater than ₱0!');
            }
          }
        } else {
          // Check budget limit for milestones
          const billionLimit = 999999999999;
          if (milestone.plannedBudget > billionLimit) {
            errors.push(`Error: Milestone ${index + 1} - Planned Budget cannot exceed ₱999,999,999,999.00!`);
            if (milestoneElement) {
              const budgetField = milestoneElement.querySelector(`input[name="milestones[${index + 1}][plannedBudget]"]`);
              if (budgetField) {
                window.showFieldError(budgetField, `milestone_${index + 1}_budget_error`, 'Planned Budget cannot exceed ₱999,999,999,999.00!');
              }
            }
          }
        }
        
        // Due Date validation
        if (!milestone.dueDate) {
          errors.push(`Error: Milestone ${index + 1} - Due Date is required!`);
          if (milestoneElement) {
            const dueDateField = milestoneElement.querySelector(`input[name="milestones[${index + 1}][dueDate]"]`);
            if (dueDateField) {
              window.showFieldError(dueDateField, `milestone_${index + 1}_dueDate_error`, 'Due Date is required!');
            }
          }
        }
        
        // Timeline Start Date validation
        // For Milestone 1: Auto-populated from Timeline Info Start Date, so check if it exists
        // For Milestone 2+: User input required
        if (index === 0) {
          // Milestone 1: Check if Timeline Info Start Date exists and auto-populate if needed
          const projectStartDateInput = document.querySelector('input[name="startDate"]');
          const timelineStartDateField = milestoneElement.querySelector(`input[name="milestones[${index + 1}][timelineStartDate]"]`);
          const directFieldValue = timelineStartDateField?.value;
          
          
          if (projectStartDateInput && projectStartDateInput.value) {
            // Auto-populate Milestone 1 timeline start date if not already set
            if (!directFieldValue || directFieldValue.trim() === '') {
              if (timelineStartDateField) {
                timelineStartDateField.value = projectStartDateInput.value;
                // Update the milestone data
                milestone.timelineStartDate = projectStartDateInput.value;
                console.log(`✅ Auto-populated Milestone 1 timelineStartDate: ${projectStartDateInput.value}`);
              }
            } else {
              // Field already has value, validate it
              milestone.timelineStartDate = directFieldValue;
              console.log(`✅ Milestone 1 timelineStartDate validated: ${directFieldValue}`);
            }
          } else {
            // Timeline Info Start Date is required for Milestone 1
            errors.push(`Error: Timeline Info Start Date is required for Milestone 1!`);
            if (projectStartDateInput) {
              window.showFieldError(projectStartDateInput, 'timeline_start_date_error', 'Timeline Info Start Date is required!');
            }
          }
        } else {
          // Milestone 2+: Timeline Start Date is required and must be user input
          // Always read the field directly to ensure we get the current value
          const timelineStartDateField = milestoneElement.querySelector(`input[name="milestones[${index + 1}][timelineStartDate]"]`);
          const directFieldValue = timelineStartDateField?.value;
          
          
          if (!directFieldValue || directFieldValue.trim() === '') {
            errors.push(`Error: Milestone ${index + 1} - Timeline Start Date is required!`);
            if (timelineStartDateField) {
              window.showFieldError(timelineStartDateField, `milestone_${index + 1}_timelineStartDate_error`, 'Timeline Start Date is required!');
            }
          } else {
            // Field has value, update the milestone data for consistency
            milestone.timelineStartDate = directFieldValue;
            console.log(`✅ Milestone ${index + 1} timelineStartDate validated: ${directFieldValue}`);
          }
        }
        
        // Description validation - now required
        if (!milestone.description || milestone.description.trim() === '') {
          errors.push(`Error: Milestone ${index + 1} - Description is required!`);
          if (milestoneElement) {
            const descField = milestoneElement.querySelector(`textarea[name="milestones[${index + 1}][description]"]`);
            if (descField) {
              window.showFieldError(descField, `milestone_${index + 1}_description_error`, 'Description is required!');
            }
          }
        } else if (milestone.description.length > 500) {
          errors.push(`Error: Milestone ${index + 1} - Description cannot exceed 500 characters!`);
          if (milestoneElement) {
            const descField = milestoneElement.querySelector(`textarea[name="milestones[${index + 1}][description]"]`);
            if (descField) {
              window.showFieldError(descField, `milestone_${index + 1}_description_error`, 'Description cannot exceed 500 characters!');
            }
          }
        }
        
        // Timeline Division validations
        if (milestone.timelineDivision) {
          // Timeline Description is required
          if (!milestone.timelineDivision.description || milestone.timelineDivision.description.trim() === '') {
            errors.push(`Error: Milestone ${index + 1} - Timeline Division Description is required!`);
            if (milestoneElement) {
              const timelineDescField = milestoneElement.querySelector(`textarea[name="milestones[${index + 1}][timelineDescription]"]`);
              if (timelineDescField) {
                window.showFieldError(timelineDescField, `milestone_${index + 1}_timeline_desc_error`, 'Timeline Division Description is required!');
              }
            }
          } else if (milestone.timelineDivision.description.length > 500) {
            errors.push(`Error: Milestone ${index + 1} - Timeline Description cannot exceed 500 characters!`);
            if (milestoneElement) {
              const timelineDescField = milestoneElement.querySelector(`textarea[name="milestones[${index + 1}][timelineDescription]"]`);
              if (timelineDescField) {
                window.showFieldError(timelineDescField, `milestone_${index + 1}_timeline_desc_error`, 'Timeline Description cannot exceed 500 characters!');
              }
            }
          }
        }
        
        // Budget Division validations
        if (milestone.budgetDivision) {
          // Budget Breakdown Description is required
          if (!milestone.budgetDivision.breakdown || milestone.budgetDivision.breakdown.trim() === '') {
            errors.push(`Error: Milestone ${index + 1} - Budget Division Breakdown Description is required!`);
            if (milestoneElement) {
              const budgetBreakdownField = milestoneElement.querySelector(`textarea[name="milestones[${index + 1}][budgetBreakdown]"]`);
              if (budgetBreakdownField) {
                window.showFieldError(budgetBreakdownField, `milestone_${index + 1}_budget_breakdown_error`, 'Budget Division Breakdown Description is required!');
              }
            }
          } else if (milestone.budgetDivision.breakdown.length > 500) {
            errors.push(`Error: Milestone ${index + 1} - Budget Breakdown Description cannot exceed 500 characters!`);
            if (milestoneElement) {
              const budgetBreakdownField = milestoneElement.querySelector(`textarea[name="milestones[${index + 1}][budgetBreakdown]"]`);
              if (budgetBreakdownField) {
                window.showFieldError(budgetBreakdownField, `milestone_${index + 1}_budget_breakdown_error`, 'Budget Breakdown Description cannot exceed 500 characters!');
              }
            }
          }
        }
        
        // Physical Division validations
        if (milestone.physicalDivision) {
          if (!milestone.physicalDivision.proofType) {
            errors.push(`Error: Milestone ${index + 1} - Physical Division Proof Type is required!`);
          }
          // Physical Description is required
          if (!milestone.physicalDivision.description || milestone.physicalDivision.description.trim() === '') {
            errors.push(`Error: Milestone ${index + 1} - Physical Division Description is required!`);
            if (milestoneElement) {
              const physicalDescField = milestoneElement.querySelector(`textarea[name="milestones[${index + 1}][physicalDescription]"]`);
              if (physicalDescField) {
                window.showFieldError(physicalDescField, `milestone_${index + 1}_physical_desc_error`, 'Physical Division Description is required!');
              }
            }
          } else if (milestone.physicalDivision.description.length > 500) {
            errors.push(`Error: Milestone ${index + 1} - Physical Description cannot exceed 500 characters!`);
            if (milestoneElement) {
              const physicalDescField = milestoneElement.querySelector(`textarea[name="milestones[${index + 1}][physicalDescription]"]`);
              if (physicalDescField) {
                window.showFieldError(physicalDescField, `milestone_${index + 1}_physical_desc_error`, 'Physical Description cannot exceed 500 characters!');
              }
            }
          }
        }
      });
      
      // Validate total weight
      const totalWeight = milestones.reduce((sum, m) => sum + m.weight, 0);
      if (Math.abs(totalWeight - 100) > 0.01) {
        errors.push(`Error: Total milestone weight must equal 100%. Current total: ${totalWeight.toFixed(2)}%!`);
      }
      
      // Validate milestone budget matches total budget allocation
      const totalMilestoneBudget = milestones.reduce((sum, m) => sum + m.plannedBudget, 0);
      const totalBudgetAllocation = window.parseBudgetValue(formData.get('totalBudget')) || 0;
      
      // Debug logging
      console.log('Milestone Budget Validation:');
      console.log('Milestones:', milestones.map(m => ({ title: m.title, plannedBudget: m.plannedBudget })));
      console.log('Total Milestone Budget:', totalMilestoneBudget);
      console.log('Total Budget Allocation:', totalBudgetAllocation);
      console.log('Difference:', Math.abs(totalMilestoneBudget - totalBudgetAllocation));
      
      if (Math.abs(totalMilestoneBudget - totalBudgetAllocation) > 0.01) {
        errors.push(`Error: Total milestone budget (₱${totalMilestoneBudget.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})}) must match Total Budget Allocation (₱${totalBudgetAllocation.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})})!`);
        
        // Highlight the total budget field
        const totalBudgetField = document.querySelector('[name="totalBudget"]');
        if (totalBudgetField) {
          window.showFieldError(totalBudgetField, 'totalBudget_mismatch_error', 'Total Budget must match sum of milestone budgets!');
        }
        
        // Auto-scroll to and highlight the Planned Budget field in the last milestone
        const lastMilestone = milestones[milestones.length - 1];
        if (lastMilestone) {
          const lastMilestoneElement = document.getElementById(`milestone-${milestones.length}`);
          if (lastMilestoneElement) {
            const plannedBudgetField = lastMilestoneElement.querySelector(`input[name="milestones[${milestones.length}][plannedBudget]"]`);
            if (plannedBudgetField) {
              // Scroll to the planned budget field
              plannedBudgetField.scrollIntoView({ behavior: 'smooth', block: 'center' });
              
              // Highlight the field with error styling
              plannedBudgetField.style.border = '2px solid #ef4444';
              plannedBudgetField.style.backgroundColor = '#fef2f2';
              plannedBudgetField.focus();
              
              // Add error message below the field
              window.showFieldError(plannedBudgetField, `milestone_${milestones.length}_budget_mismatch_error`, 'Adjust this amount to match Total Budget Allocation!');
              
              // Remove highlight after 5 seconds
              setTimeout(() => {
                plannedBudgetField.style.border = '';
                plannedBudgetField.style.backgroundColor = '';
              }, 5000);
            }
          }
        }
      }
    }
    
    // Validate dates
    const startDate = formData.get('startDate');
    const targetDateOfCompletion = formData.get('targetDateOfCompletion');
    if (startDate && targetDateOfCompletion && new Date(startDate) >= new Date(targetDateOfCompletion)) {
      errors.push('Error: Target Date of Completion must be after Start Date!');
      const targetDateField = document.querySelector('[name="targetDateOfCompletion"]');
      if (targetDateField) {
        window.showFieldError(targetDateField, 'targetDate_error', 'Target Date of Completion must be after Start Date!');
      }
    }

    // Advanced Date Validation Rules for Milestones
    if (milestones && milestones.length > 0) {
      
      // 1. Validate each milestone's start date vs end date
      milestones.forEach((milestone, index) => {
        const milestoneElement = document.querySelector(`#milestone-${index + 1}`);
        if (milestoneElement) {
          const startDateInput = milestoneElement.querySelector(`input[name="milestones[${index + 1}][timelineStartDate]"]`);
          const endDateInput = milestoneElement.querySelector(`input[name="milestones[${index + 1}][timelineEndDate]"]`);
          
          if (startDateInput && endDateInput && startDateInput.value && endDateInput.value) {
            const milestoneStartDate = new Date(startDateInput.value);
            const milestoneEndDate = new Date(endDateInput.value);
            
            if (milestoneStartDate > milestoneEndDate) {
              errors.push(`Error: Milestone ${index + 1} - Start Date cannot be later than End Date!`);
              window.showFieldError(startDateInput, `milestone_${index + 1}_start_date_error`, 'Start Date cannot be later than End Date!');
            }
          }
        }
      });

      // 2. Validate milestone date sequence (Due Date vs Next Start Date)
      for (let i = 0; i < milestones.length - 1; i++) {
        const currentMilestone = document.querySelector(`#milestone-${i + 1}`);
        const nextMilestone = document.querySelector(`#milestone-${i + 2}`);
        
        if (currentMilestone && nextMilestone) {
          const currentDueDateInput = currentMilestone.querySelector(`input[name="milestones[${i + 1}][dueDate]"]`);
          const nextStartDateInput = nextMilestone.querySelector(`input[name="milestones[${i + 2}][timelineStartDate]"]`);
          
          if (currentDueDateInput && nextStartDateInput && currentDueDateInput.value && nextStartDateInput.value) {
            const currentDueDate = new Date(currentDueDateInput.value);
            const nextStartDate = new Date(nextStartDateInput.value);
            
            // Check if next milestone start date is not after current milestone due date
            if (nextStartDate <= currentDueDate) {
              errors.push(`Error: Milestone ${i + 2} Start Date must be after Milestone ${i + 1} Due Date!`);
              window.showFieldError(nextStartDateInput, `milestone_${i + 2}_start_date_sequence_error`, `Start Date must be after Milestone ${i + 1} Due Date!`);
            }
          }
        }
      }

      // 3. Validate Timeline Info alignment with first and last milestone
      const firstMilestone = document.querySelector('#milestone-1');
      const lastMilestone = document.querySelector(`#milestone-${milestones.length}`);
      
      if (firstMilestone && lastMilestone) {
        const firstMilestoneStartInput = firstMilestone.querySelector('input[name="milestones[1][timelineStartDate]"]');
        const lastMilestoneEndInput = lastMilestone.querySelector(`input[name="milestones[${milestones.length}][timelineEndDate]"]`);
        
        // Check if Timeline Info Start Date matches Milestone 1 Start Date
        if (startDate && firstMilestoneStartInput && firstMilestoneStartInput.value) {
          const timelineStartDate = new Date(startDate);
          const firstMilestoneStartDate = new Date(firstMilestoneStartInput.value);
          
          if (timelineStartDate.getTime() !== firstMilestoneStartDate.getTime()) {
            errors.push('Error: Timeline Info dates must align with the first and last milestone dates.');
            const startDateField = document.querySelector('[name="startDate"]');
            if (startDateField) {
              window.showFieldError(startDateField, 'timeline_start_mismatch_error', 'Timeline Start Date must match Milestone 1 Start Date!');
            }
            window.showFieldError(firstMilestoneStartInput, 'milestone_1_start_mismatch_error', 'Must match Timeline Start Date!');
          }
        }
        
        // Check if Due Date matches Target Completion Date for the last milestone
        const targetCompletionDate = formData.get('targetCompletionDate');
        if (targetCompletionDate) {
          const lastMilestone = milestones[milestones.length - 1];
          if (lastMilestone && lastMilestone.dueDate) {
            const targetDate = new Date(targetCompletionDate);
            const dueDate = new Date(lastMilestone.dueDate);
            
            if (targetDate.getTime() !== dueDate.getTime()) {
              errors.push(`Error: Milestone ${milestones.length} Due Date must match Target Completion Date (${targetCompletionDate})!`);
              const lastMilestoneElement = document.getElementById(`milestone-${milestones.length}`);
              if (lastMilestoneElement) {
                const dueDateField = lastMilestoneElement.querySelector(`input[name="milestones[${milestones.length}][dueDate]"]`);
                if (dueDateField) {
                  window.showFieldError(dueDateField, `milestone_${milestones.length}_due_date_mismatch_error`, `Due Date must match Target Completion Date (${targetCompletionDate})!`);
                }
              }
            }
          }
        }
      }
    }
    
    // Validate budget
    const totalBudget = window.parseBudgetValue(formData.get('totalBudget')) || 0;
    if (totalBudget <= 0) {
      errors.push('Error: Total Budget Allocation must be greater than ₱0!');
      const totalBudgetField = document.querySelector('[name="totalBudget"]');
      if (totalBudgetField) {
        window.showFieldError(totalBudgetField, 'totalBudget_zero_error', 'Total Budget Allocation must be greater than ₱0!');
      }
    }
    
    return errors;
  };

  // Show validation errors in a modal
  window.showValidationErrors = function(errors) {
    const errorModal = document.createElement('div');
    errorModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
    errorModal.innerHTML = `
      <div class="bg-white rounded-2xl p-8 max-w-2xl w-full mx-4 max-h-[80vh] overflow-y-auto">
        <div class="flex items-center gap-4 mb-6">
          <div class="bg-red-500 p-3 rounded-xl">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-2xl font-bold text-gray-800">Validation Errors</h3>
            <p class="text-gray-600">Please fix the following issues before creating the project:</p>
          </div>
        </div>
        
        <div class="space-y-3 mb-6">
          ${errors.map(error => `<div class="flex items-start gap-3 p-3 bg-red-50 border border-red-200 rounded-lg">
            <span class="text-red-500 mt-0.5">${error}</span>
          </div>`).join('')}
        </div>
        
        <div class="flex justify-end">
          <button onclick="window.closeValidationErrors()" class="px-6 py-3 bg-gray-500 text-white rounded-xl hover:bg-gray-600 transition-all duration-200 font-semibold">
            Close
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(errorModal);
    
    // Store errors for later use
    errorModal.setAttribute('data-errors', JSON.stringify(errors));
  };

  // Close validation errors modal and trigger UX improvements
  window.closeValidationErrors = function() {
    const errorModal = document.querySelector('.fixed.inset-0.bg-black.bg-opacity-50');
    if (errorModal) {
      const errors = JSON.parse(errorModal.getAttribute('data-errors') || '[]');
      
      // Check if there's a budget mismatch error
      const budgetMismatchError = errors.find(error => error.includes('Total milestone budget') && error.includes('must match Total Budget Allocation'));
      
      // Check if there's a timeline start date required error (for Milestone 2+)
      const timelineStartDateError = errors.find(error => error.includes('Timeline Start Date is required') && !error.includes('Timeline Info Start Date'));
      
      // Check if there's a timeline info start date required error (for Milestone 1)
      const timelineInfoStartDateError = errors.find(error => error.includes('Timeline Info Start Date is required'));
      
      // Check if there's a milestone date sequence error
      const milestoneDateSequenceError = errors.find(error => error.includes('Start Date must be after') && error.includes('Due Date'));
      
      if (budgetMismatchError) {
        // Auto-scroll to and highlight the Planned Budget field
        setTimeout(() => {
          const milestones = window.getMilestonesData ? window.getMilestonesData() : [];
          if (milestones.length > 0) {
            const lastMilestoneElement = document.getElementById(`milestone-${milestones.length}`);
            if (lastMilestoneElement) {
              const plannedBudgetField = lastMilestoneElement.querySelector(`input[name="milestones[${milestones.length}][plannedBudget]"]`);
              if (plannedBudgetField) {
                // Scroll to the planned budget field
                plannedBudgetField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                
                // Highlight the field with error styling
                plannedBudgetField.style.border = '2px solid #ef4444';
                plannedBudgetField.style.backgroundColor = '#fef2f2';
                plannedBudgetField.focus();
                
                // Add error message below the field
                const totalBudgetAllocation = window.parseBudgetValue ? window.parseBudgetValue(document.querySelector('[name="totalBudget"]')?.value) : 0;
                window.showFieldError(plannedBudgetField, `milestone_${milestones.length}_budget_mismatch_error`, `Adjust this amount to match Total Budget Allocation (₱${totalBudgetAllocation.toLocaleString('en-US', {minimumFractionDigits: 2, maximumFractionDigits: 2})})!`);
                
                // Remove highlight after 5 seconds
                setTimeout(() => {
                  plannedBudgetField.style.border = '';
                  plannedBudgetField.style.backgroundColor = '';
                }, 5000);
              }
            }
          }
        }, 300); // Small delay to ensure modal is closed
      } else if (timelineStartDateError) {
        // Auto-scroll to and highlight the Timeline Start Date field
        setTimeout(() => {
          const milestones = window.getMilestonesData ? window.getMilestonesData() : [];
          if (milestones.length > 0) {
            // Find the milestone with missing timeline start date
            for (let i = 0; i < milestones.length; i++) {
              if (!milestones[i].timelineStartDate) {
                const milestoneElement = document.getElementById(`milestone-${i + 1}`);
                if (milestoneElement) {
                  const timelineStartDateField = milestoneElement.querySelector(`input[name="milestones[${i + 1}][timelineStartDate]"]`);
                  if (timelineStartDateField) {
                    // Scroll to the timeline start date field
                    timelineStartDateField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    
                    // Highlight the field with error styling
                    timelineStartDateField.style.border = '2px solid #ef4444';
                    timelineStartDateField.style.backgroundColor = '#fef2f2';
                    timelineStartDateField.focus();
                    
                    // Add error message below the field
                    window.showFieldError(timelineStartDateField, `milestone_${i + 1}_timelineStartDate_error`, 'Timeline Start Date is required!');
                    
                    // Remove highlight after 5 seconds
                    setTimeout(() => {
                      timelineStartDateField.style.border = '';
                      timelineStartDateField.style.backgroundColor = '';
                    }, 5000);
                    break;
                  }
                }
              }
            }
          }
        }, 300);
      } else if (timelineInfoStartDateError) {
        // Auto-scroll to and highlight the Timeline Info Start Date field
        setTimeout(() => {
          const projectStartDateInput = document.querySelector('input[name="startDate"]');
          if (projectStartDateInput) {
            // Scroll to the timeline start date field
            projectStartDateInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            // Highlight the field with error styling
            projectStartDateInput.style.border = '2px solid #ef4444';
            projectStartDateInput.style.backgroundColor = '#fef2f2';
            projectStartDateInput.focus();
            
            // Add error message below the field
            window.showFieldError(projectStartDateInput, 'timeline_start_date_error', 'Timeline Info Start Date is required for Milestone 1!');
            
            // Remove highlight after 5 seconds
            setTimeout(() => {
              projectStartDateInput.style.border = '';
              projectStartDateInput.style.backgroundColor = '';
            }, 5000);
          }
        }, 300);
      } else if (milestoneDateSequenceError) {
        // Auto-scroll to and highlight the Start Date field that has sequence error
        setTimeout(() => {
          const milestones = window.getMilestonesData ? window.getMilestonesData() : [];
          if (milestones.length > 1) {
            // Find the milestone with sequence error (usually the second milestone)
            for (let i = 1; i < milestones.length; i++) {
              const milestoneElement = document.getElementById(`milestone-${i + 1}`);
              if (milestoneElement) {
                const timelineStartDateField = milestoneElement.querySelector(`input[name="milestones[${i + 1}][timelineStartDate]"]`);
                if (timelineStartDateField) {
                  // Scroll to the timeline start date field
                  timelineStartDateField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                  
                  // Highlight the field with error styling
                  timelineStartDateField.style.border = '2px solid #ef4444';
                  timelineStartDateField.style.backgroundColor = '#fef2f2';
                  timelineStartDateField.focus();
                  
                  // Add error message below the field
                  window.showFieldError(timelineStartDateField, `milestone_${i + 1}_start_date_sequence_error`, `Start Date must be after Milestone ${i} Due Date!`);
                  
                  // Remove highlight after 5 seconds
                  setTimeout(() => {
                    timelineStartDateField.style.border = '';
                    timelineStartDateField.style.backgroundColor = '';
                  }, 5000);
                  break;
                }
              }
            }
          }
        }, 300);
      }
      
      // Remove the modal
      errorModal.remove();
    }
  };

  // Check if form has unsaved changes
  window.hasUnsavedChanges = function() {
    const form = document.getElementById('createProjectForm');
    const formData = new FormData(form);
    
    // Check if any field has been filled
    const fields = ['projectCode', 'name', 'description', 'expectedOutputs', 'targetBeneficiaries', 'startDate', 'endDate', 'totalBudget', 'budgetBreakdown', 'physicalProgressRequirements', 'projectManager', 'contactNumber', 'specialRequirements'];
    
    for (let field of fields) {
      const value = formData.get(field);
      if (value && value.trim() !== '') {
        return true;
      }
    }
    
    // Check if EIU partner is selected
    const hasExternalPartner = formData.get('hasExternalPartner') === 'true';
    if (hasExternalPartner) {
      return true;
    }
    
    // Check if milestones exist
    const milestones = getMilestonesData();
    if (milestones.length > 0) {
      return true;
    }
    
    // Check if barangay is selected
    const barangaySelects = document.querySelectorAll('#createBarangayContainer select[name="location[]"]');
    for (let select of barangaySelects) {
      if (select.value && select.value.trim() !== '') {
        return true;
      }
    }
    
    return false;
  };

  // Show confirmation dialog for canceling
  window.showCancelConfirmation = function() {
    if (!window.hasUnsavedChanges()) {
      window.closeCreateProjectModal();
      return;
    }
    
    const confirmModal = document.createElement('div');
    confirmModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
    confirmModal.setAttribute('data-modal-type', 'cancel-confirmation');
    confirmModal.innerHTML = `
      <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
        <div class="flex items-center gap-4 mb-6">
          <div class="bg-yellow-500 p-3 rounded-xl">
            <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-xl font-bold text-gray-800">Unsaved Changes</h3>
            <p class="text-gray-600">You have unsaved changes. Are you sure you want to cancel?</p>
          </div>
        </div>
        
        <div class="flex gap-4 justify-end">
          <button onclick="window.closeCancelConfirmation()" class="px-6 py-3 bg-gray-500 text-white rounded-xl hover:bg-gray-600 transition-all duration-200 font-semibold">
            No, Continue Editing
          </button>
          <button onclick="window.confirmCancel()" class="px-6 py-3 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-all duration-200 font-semibold">
            Yes, Cancel
          </button>
        </div>
      </div>
    `;
    document.body.appendChild(confirmModal);
  };

  // Close cancel confirmation modal
  window.closeCancelConfirmation = function() {
    const confirmModal = document.querySelector('[data-modal-type="cancel-confirmation"]');
    if (confirmModal) {
      confirmModal.remove();
    }
  };

  // Confirm cancel action
  window.confirmCancel = function() {
    // Remove confirmation modal using specific attribute
    const confirmModal = document.querySelector('[data-modal-type="cancel-confirmation"]');
    if (confirmModal) {
      confirmModal.remove();
    }
    
    // Close the create project modal with error handling
    try {
      const createModal = document.getElementById('createProjectModal');
      if (createModal) {
        createModal.classList.add('hidden');
        document.body.style.overflow = 'auto';
        
        // Reset form
        const form = document.getElementById('createProjectForm');
        if (form) {
          form.reset();
        }
        
        // Clear milestones
        const milestonesContainer = document.getElementById('milestonesContainer');
        if (milestonesContainer) {
          milestonesContainer.innerHTML = '';
        }
        
        // Reset counter
        if (typeof window.milestoneCounter !== 'undefined') {
          window.milestoneCounter = 0;
        }
        
        // Hide EIU field
        const eiuField = document.getElementById('eiuAccountField');
        if (eiuField) {
          eiuField.classList.add('hidden');
        }
      }
    } catch (error) {
      console.error('Error closing create project modal:', error);
      // Fallback: try to hide all modals
      const allModals = document.querySelectorAll('.fixed');
      allModals.forEach(modal => modal.remove());
      document.body.style.overflow = 'auto';
    }
  };

  // Save project information to localStorage
  window.saveProjectInformation = function() {
    try {
      const form = document.getElementById('createProjectForm');
      if (!form) {
        console.error('Form not found');
        return;
      }

      const formData = new FormData(form);
      const projectData = {};

      // Collect all form data
      for (let [key, value] of formData.entries()) {
        if (key === 'location[]') {
          if (!projectData.location) projectData.location = [];
          projectData.location.push(value);
        } else {
          projectData[key] = value;
        }
      }

      // Collect milestone data
      const milestones = [];
      const milestoneElements = document.querySelectorAll('.milestone-item');
      milestoneElements.forEach((milestone, index) => {
        const milestoneData = {
          title: milestone.querySelector('[name="milestoneTitle"]')?.value || '',
          description: milestone.querySelector('[name="milestoneDescription"]')?.value || '',
          weight: milestone.querySelector('[name="milestoneWeight"]')?.value || '',
          plannedBudget: milestone.querySelector('[name="milestonePlannedBudget"]')?.value || '',
          plannedStartDate: milestone.querySelector('[name="milestonePlannedStartDate"]')?.value || '',
          plannedEndDate: milestone.querySelector('[name="milestonePlannedEndDate"]')?.value || '',
          priority: milestone.querySelector('[name="milestonePriority"]')?.value || 'medium',
          // Add budget breakdown at root level for backend compatibility
          budgetBreakdown: milestone.querySelector('[name*="budgetBreakdown"]')?.value || '',
          timelineDivision: {
            weight: milestone.querySelector('[name*="timelineWeight"]')?.value || '33.33',
            startDate: milestone.querySelector('[name*="timelineStartDate"]')?.value || '',
            endDate: milestone.querySelector('[name*="timelineEndDate"]')?.value || '',
            description: milestone.querySelector('[name*="timelineDescription"]')?.value || ''
          },
          budgetDivision: {
            weight: milestone.querySelector('[name*="budgetWeight"]')?.value || '33.33',
            plannedBudget: milestone.querySelector('[name*="budgetPlanned"]')?.value || '',
            breakdown: milestone.querySelector('[name*="budgetBreakdown"]')?.value || ''
          },
          physicalDivision: {
            weight: milestone.querySelector('[name*="physicalWeight"]')?.value || '33.33',
            proofType: milestone.querySelector('[name*="physicalProofType"]')?.value || 'form',
            description: milestone.querySelector('[name*="physicalDescription"]')?.value || ''
          }
        };
        milestones.push(milestoneData);
      });

      projectData.milestones = milestones;

      // Save to localStorage
      localStorage.setItem('savedProjectData', JSON.stringify(projectData));
      
      // Show success message
      const successModal = document.createElement('div');
      successModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
      successModal.innerHTML = `
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
          <div class="flex items-center gap-4 mb-6">
            <div class="bg-green-500 p-3 rounded-xl">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-800">Information Saved!</h3>
              <p class="text-gray-600">Your project information has been saved. You can continue editing or close the modal.</p>
            </div>
          </div>
          
          <div class="flex gap-4 justify-end">
            <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-200 font-semibold">
              Continue Editing
            </button>
          </div>
        </div>
      `;
      document.body.appendChild(successModal);

      console.log('Project information saved successfully');
    } catch (error) {
      console.error('Error saving project information:', error);
      alert('Error saving project information. Please try again.');
    }
  };

  // Clear saved project information
  window.clearSavedProjectInformation = function() {
    try {
      localStorage.removeItem('savedProjectData');
      
      // Show confirmation message
      const successModal = document.createElement('div');
      successModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
      successModal.innerHTML = `
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
          <div class="flex items-center gap-4 mb-6">
            <div class="bg-blue-500 p-3 rounded-xl">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-800">Data Cleared!</h3>
              <p class="text-gray-600">Saved project information has been cleared successfully.</p>
            </div>
          </div>
          
          <div class="flex gap-4 justify-end">
            <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-200 font-semibold">
              OK
            </button>
          </div>
        </div>
      `;
      document.body.appendChild(successModal);

      console.log('Saved project information cleared');
    } catch (error) {
      console.error('Error clearing project information:', error);
      alert('Error clearing project information. Please try again.');
    }
  };

  // Load saved project information
  window.loadSavedProjectInformation = function() {
    try {
      const savedData = localStorage.getItem('savedProjectData');
      if (!savedData) {
        console.log('No saved project data found');
        
        // Show message that no saved data exists
        const noDataModal = document.createElement('div');
        noDataModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
        noDataModal.innerHTML = `
          <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
            <div class="flex items-center gap-4 mb-6">
              <div class="bg-yellow-500 p-3 rounded-xl">
                <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-gray-800">No Saved Data</h3>
                <p class="text-gray-600">No saved project information found. Please fill out the form and save it first.</p>
              </div>
            </div>
            
            <div class="flex gap-4 justify-end">
              <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-all duration-200 font-semibold">
                OK
              </button>
            </div>
          </div>
        `;
        document.body.appendChild(noDataModal);
        
        return false;
      }

      const projectData = JSON.parse(savedData);
      const form = document.getElementById('createProjectForm');
      if (!form) {
        console.error('Form not found');
        return false;
      }

      // Populate form fields
      Object.keys(projectData).forEach(key => {
        if (key === 'location') {
          // Handle location array
          const locationContainer = document.getElementById('createBarangayContainer');
          if (locationContainer && projectData.location.length > 0) {
            locationContainer.innerHTML = '';
            projectData.location.forEach((location, index) => {
              if (index === 0) {
                addCreateBarangayDropdown();
              } else {
                addCreateBarangayDropdown();
              }
              const selects = locationContainer.querySelectorAll('select');
              if (selects[index]) {
                selects[index].value = location;
              }
            });
          }
        } else if (key !== 'milestones') {
          const field = form.querySelector(`[name="${key}"]`);
          if (field) {
            field.value = projectData[key];
          }
        }
      });

      // Load milestones
      if (projectData.milestones && projectData.milestones.length > 0) {
        const milestonesContainer = document.getElementById('milestonesContainer');
        if (milestonesContainer) {
          milestonesContainer.innerHTML = '';
          projectData.milestones.forEach((milestone, index) => {
            addMilestone();
            const milestoneElement = milestonesContainer.children[index];
            if (milestoneElement) {
              // Populate milestone fields
              Object.keys(milestone).forEach(key => {
                if (key === 'timelineDivision' || key === 'budgetDivision' || key === 'physicalDivision') {
                  Object.keys(milestone[key]).forEach(subKey => {
                    const field = milestoneElement.querySelector(`[name="${subKey}"]`);
                    if (field) {
                      field.value = milestone[key][subKey];
                    }
                  });
                } else {
                  const field = milestoneElement.querySelector(`[name="${key}"]`);
                  if (field) {
                    field.value = milestone[key];
                  }
                }
              });
            }
          });
        }
      }

      console.log('Project information loaded successfully');
      
      // Show success message
      const successModal = document.createElement('div');
      successModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
      successModal.innerHTML = `
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
          <div class="flex items-center gap-4 mb-6">
            <div class="bg-green-500 p-3 rounded-xl">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-800">Data Loaded!</h3>
              <p class="text-gray-600">Saved project information has been loaded successfully.</p>
            </div>
          </div>
          
          <div class="flex gap-4 justify-end">
            <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-all duration-200 font-semibold">
              Continue Editing
            </button>
          </div>
        </div>
      `;
      document.body.appendChild(successModal);
      
      return true;
    } catch (error) {
      console.error('Error loading project information:', error);
      
      // Show error message
      const errorModal = document.createElement('div');
      errorModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
      errorModal.innerHTML = `
        <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
          <div class="flex items-center gap-4 mb-6">
            <div class="bg-red-500 p-3 rounded-xl">
              <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold text-gray-800">Error Loading Data</h3>
              <p class="text-gray-600">Failed to load saved project information. Please try again.</p>
            </div>
          </div>
          
          <div class="flex gap-4 justify-end">
            <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-all duration-200 font-semibold">
              Close
            </button>
          </div>
        </div>
      `;
      document.body.appendChild(errorModal);
      
      return false;
    }
  };

  // Authentication check for Implementing Office
  document.addEventListener('DOMContentLoaded', function() {
    // Wait for authService to be available
    if (window.authService) {
      // Check session validity first
      if (!window.authService.redirectIfInvalidSession()) {
        return;
      }
      
      const token = localStorage.getItem('token');
      const userData = localStorage.getItem('user');
      
      if (!token || !userData) {
        window.location.href = '/';
        return;
      }
      
      try {
        const user = JSON.parse(userData);
        
        // Check if user is Implementing Office
        if (user.role !== 'LGU-IU' && user.role !== 'IU') {
          // Redirect to appropriate dashboard based on role
          window.authService.redirectToDashboard(user.role, user.subRole);
          return;
        }
        
        console.log('Project Management loaded for user:', user.username);
        
      } catch (error) {
        console.error('Error parsing user data:', error);
        window.location.href = '/';
      }
    } else {
      console.log('AuthService not yet loaded, skipping auth check');
    }
  });

  // Handle form submissions
  document.addEventListener('DOMContentLoaded', function() {
    // Handle create form submission
    const createForm = document.getElementById('createProjectForm');
    if (createForm) {
      createForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        try {
          console.log('🚀 Starting project creation process...');
          
          // Validate form before submission
          console.log('📋 Validating form...');
          const validationErrors = window.validateProjectForm();
          if (validationErrors.length > 0) {
            console.log('❌ Validation errors found:', validationErrors);
            window.showValidationErrors(validationErrors);
            return;
          }
          const formData = new FormData(createForm);
          
          // Get milestones data
          const milestones = getMilestonesData();
          
          // EIU Personnel ID (always required in Create Project Modal)
          const eiuPersonnelIdField = document.getElementById('eiuPersonnelId');
          const eiuPersonnelId = eiuPersonnelIdField?.getAttribute('data-user-id') || formData.get('eiuPersonnelId');
          
          // Handle initial photo
          const initialPhotoOption = formData.get('initialPhotoOption');
          let initialPhotoUrl = null;
          
          if (initialPhotoOption === 'default' || !initialPhotoOption) {
            // Use default photo from public folder
            initialPhotoUrl = '/projects-page-header-bg.png';
          } else if (initialPhotoOption === 'upload') {
            const initialPhotoFile = formData.get('initialPhoto');
            if (initialPhotoFile && initialPhotoFile.size > 0) {
              // Handle photo upload (would need to implement file upload)
              // For now, fallback to default
              initialPhotoUrl = '/projects-page-header-bg.png';
            } else {
              // No file uploaded, use default
              initialPhotoUrl = '/projects-page-header-bg.png';
            }
          }

          // Get form elements for fallback values
          const startDateElement = document.querySelector('input[name="startDate"]');
          const targetCompletionDateElement = document.querySelector('input[name="targetCompletionDate"]');
          
          const projectData = {
            projectCode: formData.get('projectCode'),
            name: formData.get('name'),
            implementingOfficeName: formData.get('implementingOfficeName'),
            category: formData.get('category'),
            location: getSelectedBarangays(),
            priority: formData.get('priority'),
            fundingSource: formData.get('fundingSource'),
            createdDate: formData.get('createdDate'),
            description: formData.get('description'),
            expectedOutputs: formData.get('expectedOutputs'),
            targetBeneficiaries: formData.get('targetBeneficiaries'),
            hasExternalPartner: true,
            eiuPersonnelId: eiuPersonnelId,
            startDate: formData.get('startDate') || startDateElement?.value,
            targetCompletionDate: formData.get('targetCompletionDate') || targetCompletionDateElement?.value,
            expectedDaysOfCompletion: parseInt(formData.get('expectedDaysOfCompletion')?.replace(' days', '') || '0'),
            totalBudget: window.parseBudgetValue(formData.get('totalBudget')) || 0,
            budgetBreakdown: formData.get('budgetBreakdown'),
            physicalProgressRequirements: formData.get('physicalProgressRequirements'),
            initialPhoto: initialPhotoUrl,
            milestones: milestones
          };
          

          // Create project
          const response = await projectService.createProject(projectData);
          
          if (response.success) {
            window.closeCreateProjectModal();
            window.location.reload();
            
            // Show success message
            const successModal = document.createElement('div');
            successModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
            successModal.innerHTML = `
              <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
                <div class="flex items-center gap-4 mb-6">
                  <div class="bg-green-500 p-3 rounded-xl">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-xl font-bold text-gray-800">Project Created Successfully!</h3>
                    <p class="text-gray-600">The project has been automatically forwarded to the Secretariat and all relevant users for review and approval.</p>
                  </div>
                </div>
                
                <div class="flex justify-end">
                  <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-green-500 text-white rounded-xl hover:bg-green-600 transition-all duration-200 font-semibold">
                    Continue
                  </button>
                </div>
              </div>
            `;
            document.body.appendChild(successModal);
            
            // Note: Saved project data is preserved for potential recreation
            // Data is only cleared when user explicitly clicks "Clear All Information"
            console.log('Project created successfully - saved data preserved for potential recreation');
            
            // Force refresh notifications to show the new project creation notification
            if (window.notificationService) {
              await window.notificationService.forceRefresh();
              console.log('Notifications refreshed after project creation');
            }
          } else {
            // Show error message
            const errorModal = document.createElement('div');
            errorModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
            errorModal.innerHTML = `
              <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
                <div class="flex items-center gap-4 mb-6">
                  <div class="bg-red-500 p-3 rounded-xl">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-xl font-bold text-gray-800">Error Creating Project</h3>
                    <p class="text-gray-600">${response.error}</p>
                  </div>
                </div>
                
                <div class="flex justify-end">
                  <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-all duration-200 font-semibold">
                    Close
                  </button>
                </div>
              </div>
            `;
            document.body.appendChild(errorModal);
          }
        } catch (error) {
          console.error('❌ Caught error creating project:', error);
          console.error('❌ Error details:', {
            message: error.message,
            stack: error.stack,
            name: error.name
          });
          
          // Show error message with actual error details
          const errorModal = document.createElement('div');
          errorModal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-[10000]';
          errorModal.innerHTML = `
            <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
              <div class="flex items-center gap-4 mb-6">
                <div class="bg-red-500 p-3 rounded-xl">
                  <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-gray-800">JavaScript Error</h3>
                  <p class="text-gray-600">Error: ${error.message || 'Unknown error occurred'}</p>
                  <p class="text-xs text-gray-500 mt-2">Check browser console for details</p>
                </div>
              </div>
              
              <div class="flex justify-end">
                <button onclick="this.closest('.fixed').remove()" class="px-6 py-3 bg-red-500 text-white rounded-xl hover:bg-red-600 transition-all duration-200 font-semibold">
                  Close
                </button>
              </div>
            </div>
          `;
          document.body.appendChild(errorModal);
        }
      });
    }

    // Handle edit form submission
    const editForm = document.getElementById('editProjectForm');
    if (editForm) {
      editForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        if (!currentEditingProject) {
          alert('No project selected for editing.');
          return;
        }
        
        try {
          const formData = new FormData(editForm);
          
          // Get milestones data
          const milestones = getEditMilestonesData();
          
          // Validate milestones
          if (milestones.length === 0) {
            alert('Please add at least one milestone to the project.');
            return;
          }
          
          const totalWeight = milestones.reduce((sum, m) => sum + m.weight, 0);
          if (Math.abs(totalWeight - 100) > 0.01) {
            alert(`Total milestone weight must equal 100%. Current total: ${totalWeight.toFixed(2)}%`);
            return;
          }
          
          const projectData = {
            projectCode: formData.get('projectCode'),
            name: formData.get('name'),
            implementingOfficeName: formData.get('implementingOfficeName'),
            category: formData.get('category'),
            location: getSelectedEditBarangays(),
            priority: formData.get('priority'),
            fundingSource: formData.get('fundingSource'),
            createdDate: formData.get('createdDate'),
            description: formData.get('description'),
            expectedOutputs: formData.get('expectedOutputs'),
            targetBeneficiaries: formData.get('targetBeneficiaries'),
            hasExternalPartner: formData.get('hasExternalPartner') === 'true',
            eiuPersonnelId: formData.get('eiuPersonnelId'),
            startDate: formData.get('startDate'),
            targetCompletionDate: formData.get('targetCompletionDate'),
            expectedDaysOfCompletion: formData.get('expectedDaysOfCompletion'),
            timelineMilestones: formData.get('timelineMilestones'),
            totalBudget: window.parseBudgetValue(formData.get('totalBudget')) || 0,
            budgetBreakdown: formData.get('budgetBreakdown'),
            requiredDocumentation: formData.get('requiredDocumentation'),
            physicalProgressRequirements: formData.get('physicalProgressRequirements'),
            projectManager: formData.get('projectManager'),
            contactNumber: formData.get('contactNumber'),
            specialRequirements: formData.get('specialRequirements'),
            milestones: milestones
          };

          // Update project
          const response = await projectService.updateProject(currentEditingProject.id, projectData);
          
          if (response.success) {
            closeEditProjectModal();
            window.location.reload();
            alert('Project updated successfully!');
          } else {
            alert('Error updating project: ' + response.error);
          }
        } catch (error) {
          console.error('Error updating project:', error);
          alert('Error updating project. Please try again.');
        }
      });
    }
  });

  // Helper functions
  function getSelectedBarangays() {
    const barangaySelects = document.querySelectorAll('.barangay-select');
    const selectedBarangays = [];
    barangaySelects.forEach(select => {
      if (select.value) {
        selectedBarangays.push(select.value);
      }
    });
    return selectedBarangays.join(', ');
  }

  function getSelectedEditBarangays() {
    const barangaySelects = document.querySelectorAll('#editBarangayContainer .barangay-select');
    const selectedBarangays = [];
    barangaySelects.forEach(select => {
      if (select.value) {
        selectedBarangays.push(select.value);
      }
    });
    return selectedBarangays.join(', ');
  }

  function addBarangayDropdown() {
    const container = document.getElementById('barangayContainer');
    const newDiv = document.createElement('div');
    newDiv.className = 'flex gap-2';
    newDiv.innerHTML = `
      <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent barangay-select">
        <option value="">Select Barangay</option>
        <option value="Various Barangay">Various Barangay</option>
        <option value="Alipit">Alipit</option>
        <option value="Bagumbayan">Bagumbayan</option>
        <option value="Bubukal">Bubukal</option>
        <option value="Calios">Calios</option>
        <option value="Duhat">Duhat</option>
        <option value="Gatid">Gatid</option>
        <option value="Jasaan">Jasaan</option>
        <option value="Labuin">Labuin</option>
        <option value="Malinao">Malinao</option>
        <option value="Oogong">Oogong</option>
        <option value="Pagsawitan">Pagsawitan</option>
        <option value="Palasan">Palasan</option>
        <option value="Patimbao">Patimbao</option>
        <option value="Poblacion I">Poblacion I</option>
        <option value="Poblacion II">Poblacion II</option>
        <option value="Poblacion III">Poblacion III</option>
        <option value="Poblacion IV">Poblacion IV</option>
        <option value="Poblacion V">Poblacion V</option>
        <option value="San Jose">San Jose</option>
        <option value="San Juan">San Juan</option>
        <option value="San Pablo Norte">San Pablo Norte</option>
        <option value="San Pablo Sur">San Pablo Sur</option>
        <option value="Santisima Cruz">Santisima Cruz</option>
        <option value="Santo Angel Central">Santo Angel Central</option>
        <option value="Santo Angel Norte">Santo Angel Norte</option>
        <option value="Santo Angel Sur">Santo Angel Sur</option>
      </select>
      <button type="button" onclick="removeBarangayDropdown(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(newDiv);
  }

  function removeBarangayDropdown(button) {
    button.parentElement.remove();
  }

  function addCreateBarangayDropdown() {
    const container = document.getElementById('createBarangayContainer');
    const newDiv = document.createElement('div');
    newDiv.className = 'flex gap-2';
    newDiv.innerHTML = `
      <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent barangay-select">
        <option value="">Select Barangay</option>
        <option value="Various Barangay">Various Barangay</option>
        <option value="Alipit">Alipit</option>
        <option value="Bagumbayan">Bagumbayan</option>
        <option value="Bubukal">Bubukal</option>
        <option value="Calios">Calios</option>
        <option value="Duhat">Duhat</option>
        <option value="Gatid">Gatid</option>
        <option value="Jasaan">Jasaan</option>
        <option value="Labuin">Labuin</option>
        <option value="Malinao">Malinao</option>
        <option value="Oogong">Oogong</option>
        <option value="Pagsawitan">Pagsawitan</option>
        <option value="Palasan">Palasan</option>
        <option value="Patimbao">Patimbao</option>
        <option value="Poblacion I">Poblacion I</option>
        <option value="Poblacion II">Poblacion II</option>
        <option value="Poblacion III">Poblacion III</option>
        <option value="Poblacion IV">Poblacion IV</option>
        <option value="Poblacion V">Poblacion V</option>
        <option value="San Jose">San Jose</option>
        <option value="San Juan">San Juan</option>
        <option value="San Pablo Norte">San Pablo Norte</option>
        <option value="San Pablo Sur">San Pablo Sur</option>
        <option value="Santisima Cruz">Santisima Cruz</option>
        <option value="Santo Angel Central">Santo Angel Central</option>
        <option value="Santo Angel Norte">Santo Angel Norte</option>
        <option value="Santo Angel Sur">Santo Angel Sur</option>
      </select>
      <button type="button" onclick="removeCreateBarangayDropdown(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(newDiv);
  }

  function removeCreateBarangayDropdown(button) {
    button.parentElement.remove();
  }

  function addEditBarangayDropdown() {
    const container = document.getElementById('editBarangayContainer');
    const newDiv = document.createElement('div');
    newDiv.className = 'flex gap-2';
    newDiv.innerHTML = `
      <select name="location[]" required class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#F28C00] focus:border-transparent barangay-select">
        <option value="">Select Barangay</option>
        <option value="Various Barangay">Various Barangay</option>
        <option value="Alipit">Alipit</option>
        <option value="Bagumbayan">Bagumbayan</option>
        <option value="Bubukal">Bubukal</option>
        <option value="Calios">Calios</option>
        <option value="Duhat">Duhat</option>
        <option value="Gatid">Gatid</option>
        <option value="Jasaan">Jasaan</option>
        <option value="Labuin">Labuin</option>
        <option value="Malinao">Malinao</option>
        <option value="Oogong">Oogong</option>
        <option value="Pagsawitan">Pagsawitan</option>
        <option value="Palasan">Palasan</option>
        <option value="Patimbao">Patimbao</option>
        <option value="Poblacion I">Poblacion I</option>
        <option value="Poblacion II">Poblacion II</option>
        <option value="Poblacion III">Poblacion III</option>
        <option value="Poblacion IV">Poblacion IV</option>
        <option value="Poblacion V">Poblacion V</option>
        <option value="San Jose">San Jose</option>
        <option value="San Juan">San Juan</option>
        <option value="San Pablo Norte">San Pablo Norte</option>
        <option value="San Pablo Sur">San Pablo Sur</option>
        <option value="Santisima Cruz">Santisima Cruz</option>
        <option value="Santo Angel Central">Santo Angel Central</option>
        <option value="Santo Angel Norte">Santo Angel Norte</option>
        <option value="Santo Angel Sur">Santo Angel Sur</option>
      </select>
      <button type="button" onclick="removeEditBarangayDropdown(this)" class="px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors text-sm">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    `;
    container.appendChild(newDiv);
  }

  function removeEditBarangayDropdown(button) {
    button.parentElement.remove();
  }

  // Delete project function
  async function deleteProject(projectId) {
    if (!confirm('Are you sure you want to delete this project? This action cannot be undone.')) {
      return;
    }
    
    try {
      const response = await projectService.deleteProject(projectId);
      
      if (response.success) {
        window.location.reload();
        alert('Project deleted successfully!');
        
        // Force refresh notifications to show the project deletion notification
        if (window.notificationService) {
          await window.notificationService.forceRefresh();
          console.log('Notifications refreshed after project deletion');
        }
      } else {
        alert('Error deleting project: ' + response.error);
      }
    } catch (error) {
      console.error('Error deleting project:', error);
      alert('Error deleting project. Please try again.');
    }
  }

  // Update progress function
  function updateProgress(projectId) {
    // Redirect to progress timeline with project selected
    window.location.href = `/dashboard/iu-implementing-office/modules/progress-timeline?project=${projectId}`;
  }

  // Generate report function
  function generateReport(projectId) {
    // Redirect to report generation page
    window.location.href = `/dashboard/iu-implementing-office/modules/reports?project=${projectId}`;
  }





  // Filter and search functionality
  function filterProjects() {
    const statusFilter = document.getElementById('statusFilter').value;
    const categoryFilter = document.getElementById('categoryFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;
    const searchInput = document.getElementById('searchInput').value.toLowerCase();
    
    const projectCards = document.querySelectorAll('#projectsGrid > div');
    
    projectCards.forEach(card => {
      const projectName = card.querySelector('h3').textContent.toLowerCase();
      const projectStatus = card.querySelector('span:last-child').textContent.toLowerCase();
      const projectCategory = card.querySelector('span:first-child').textContent.toLowerCase();
      
      const matchesStatus = !statusFilter || projectStatus === statusFilter.toLowerCase();
      const matchesCategory = !categoryFilter || projectCategory === categoryFilter.toLowerCase();
      const matchesSearch = !searchInput || projectName.includes(searchInput);
      
      if (matchesStatus && matchesCategory && matchesSearch) {
        card.style.display = 'block';
      } else {
        card.style.display = 'none';
      }
    });
  }

  // Add event listeners for filters
  document.addEventListener('DOMContentLoaded', function() {
    document.getElementById('statusFilter')?.addEventListener('change', filterProjects);
    document.getElementById('categoryFilter')?.addEventListener('change', filterProjects);
    document.getElementById('priorityFilter')?.addEventListener('change', filterProjects);
    document.getElementById('searchInput')?.addEventListener('input', filterProjects);
  });







  // Get milestones data
  function getMilestonesData() {
    const milestones = [];
    const milestoneElements = document.querySelectorAll('#createMilestonesContainer .milestone-item');
    
    milestoneElements.forEach(element => {
      const id = element.id.replace('milestone-', '');
      const title = element.querySelector(`input[name="milestones[${id}][title]"]`)?.value;
      const weight = element.querySelector(`input[name="milestones[${id}][weight]"]`)?.value;
      const plannedBudget = element.querySelector(`input[name="milestones[${id}][plannedBudget]"]`)?.value;
      const dueDate = element.querySelector(`input[name="milestones[${id}][dueDate]"]`)?.value;
      const priority = element.querySelector(`select[name="milestones[${id}][priority]"]`)?.value;
      const description = element.querySelector(`textarea[name="milestones[${id}][description]"]`)?.value;
      
      // 3-Division data
      const timelineWeight = element.querySelector(`input[name="milestones[${id}][timelineWeight]"]`)?.value;
      const timelineStartDate = element.querySelector(`input[name="milestones[${id}][timelineStartDate]"]`)?.value;
      const timelineEndDate = element.querySelector(`input[name="milestones[${id}][timelineEndDate]"]`)?.value;
      const timelineDescription = element.querySelector(`textarea[name="milestones[${id}][timelineDescription]"]`)?.value;
      
      const budgetWeight = element.querySelector(`input[name="milestones[${id}][budgetWeight]"]`)?.value;
      const budgetPlanned = element.querySelector(`input[name="milestones[${id}][budgetPlanned]"]`)?.value;
      const budgetBreakdown = element.querySelector(`textarea[name="milestones[${id}][budgetBreakdown]"]`)?.value;
      
      const physicalWeight = element.querySelector(`input[name="milestones[${id}][physicalWeight]"]`)?.value;
      const physicalProofType = element.querySelector(`select[name="milestones[${id}][physicalProofType]"]`)?.value;
      const physicalDescription = element.querySelector(`textarea[name="milestones[${id}][physicalDescription]"]`)?.value;
      
      if (title && weight && plannedBudget && dueDate) {
        milestones.push({
          title,
          weight: parseFloat(weight),
          plannedBudget: window.parseBudgetValue(plannedBudget) || 0,
          dueDate,
          priority: priority || 'medium',
          description: description || '',
          // 3-Division configuration
          timelineDivision: {
            weight: parseFloat(timelineWeight) || 33.33,
            startDate: timelineStartDate || null,
            endDate: timelineEndDate || null,
            description: timelineDescription || ''
          },
          budgetDivision: {
            weight: parseFloat(budgetWeight) || 33.33,
            plannedBudget: window.parseBudgetValue(budgetPlanned) || 0,
            breakdown: budgetBreakdown || ''
          },
          physicalDivision: {
            weight: parseFloat(physicalWeight) || 33.33,
            proofType: physicalProofType || 'form',
            description: physicalDescription || ''
          }
        });
      }
    });
    
    return milestones;
  }

  // These functions are already defined above with proper logic, no need to redefine

  // Error validation helper functions - expose immediately to global scope
  window.showFieldError = function(field, errorElementId, message) {
    const errorElement = document.getElementById(errorElementId);
    if (errorElement) {
      errorElement.textContent = message;
      errorElement.classList.remove('hidden');
      errorElement.classList.add('text-red-600', 'text-sm', 'mt-1');
    } else {
      // Create error element if it doesn't exist
      const errorDiv = document.createElement('div');
      errorDiv.id = errorElementId;
      errorDiv.textContent = message;
      errorDiv.className = 'text-red-600 text-sm mt-1';
      
      // Insert after the field
      if (field && field.parentNode) {
        field.parentNode.insertBefore(errorDiv, field.nextSibling);
      }
    }
    
    // Add red border to field
    if (field) {
      field.classList.add('border-red-500', 'border-2');
      field.classList.remove('border-gray-300');
    }
  };

  window.hideFieldError = function(field, errorElementId) {
    const errorElement = document.getElementById(errorElementId);
    if (errorElement) {
      errorElement.classList.add('hidden');
      errorElement.classList.remove('text-red-600', 'text-sm', 'mt-1');
    }
    
    // Remove red border from field
    if (field) {
      field.classList.remove('border-red-500', 'border-2');
      field.classList.add('border-gray-300');
    }
  };

  window.showErrorModal = function(message) {
    return new Promise((resolve) => {
      // Create modal overlay
      const overlay = document.createElement('div');
      overlay.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
      
      // Create modal content
      overlay.innerHTML = `
        <div class="bg-white rounded-lg p-6 max-w-md mx-4 shadow-xl">
          <div class="flex items-center gap-3 mb-4">
            <div class="bg-red-100 p-2 rounded-full">
              <svg class="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.232 15c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
            <h3 class="text-lg font-semibold text-gray-900">Validation Error</h3>
          </div>
          <p class="text-gray-700 mb-6">${message}</p>
          <div class="flex justify-end">
            <button onclick="this.closest('.fixed').remove(); resolve();" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
              OK
            </button>
          </div>
        </div>
      `;
      
      document.body.appendChild(overlay);
      
      // Auto-resolve after 3 seconds or when clicked
      setTimeout(() => {
        if (document.body.contains(overlay)) {
          overlay.remove();
          resolve();
        }
      }, 3000);
    });
  };

  window.validateCharacterLimit = function(field, limit, fieldName) {
    if (field && field.value.length > limit) {
      window.showFieldError(field, field.id + '_error', `${fieldName} cannot exceed ${limit} characters.`);
      return false;
    }
    return true;
  };

  window.validateBudgetLimit = function(field, fieldName) {
    if (field && field.value) {
      const numericValue = window.parseBudgetValue(field.value);
      const billionLimit = 999999999999; // 999 billion limit
      
      if (numericValue > billionLimit) {
        window.showFieldError(field, field.id + '_error', `${fieldName} cannot exceed ₱999,999,999,999.00`);
        return false;
      }
    }
    return true;
  };

    // Character counting utility function - expose immediately to global scope
  window.setupCharacterCounter = function(inputId, countId, maxLength, fieldName) {
    const input = document.getElementById(inputId);
    const counter = document.getElementById(countId);
    
    if (input && counter) {
      console.log(`✅ Setting up character counter for ${fieldName} (${inputId})`);
      
      // Set maxlength attribute to prevent typing beyond limit
      input.setAttribute('maxlength', maxLength);
      
      // Initial count
      const currentLength = input.value.length;
      counter.textContent = `${currentLength}/${maxLength}`;
      
      // Add event listener for live counting
      input.addEventListener('input', function() {
        const currentLength = this.value.length;
        counter.textContent = `${currentLength}/${maxLength}`;
        
        // Update counter color based on length
        if (currentLength >= maxLength) {
          counter.className = 'text-xs text-red-500 font-medium';
        } else if (currentLength >= maxLength * 0.8) {
          counter.className = 'text-xs text-orange-500 font-medium';
        } else {
          counter.className = 'text-xs text-gray-400';
        }
      });
      
      // Trigger initial color update
      input.dispatchEvent(new Event('input'));
    } else {
      console.log(`❌ Failed to setup character counter for ${fieldName}: input=${!!input}, counter=${!!counter}`);
    }
  };

  // Auto-capitalize first character utility function
  window.setupAutoCapitalization = function(inputId) {
    const input = document.getElementById(inputId);
    
    if (input) {
      console.log(`✅ Setting up auto-capitalization for ${inputId}`);
      
      // Handle input event (typing, pasting, etc.)
      input.addEventListener('input', function() {
        const value = this.value;
        if (value.length > 0) {
          // Find the first alphabetic character and capitalize it
          const firstAlphaIndex = value.search(/[a-zA-Z]/);
          if (firstAlphaIndex !== -1) {
            const beforeFirstAlpha = value.substring(0, firstAlphaIndex);
            const firstAlpha = value.charAt(firstAlphaIndex);
            const afterFirstAlpha = value.substring(firstAlphaIndex + 1);
            const capitalizedValue = beforeFirstAlpha + firstAlpha.toUpperCase() + afterFirstAlpha;
            
            if (value !== capitalizedValue) {
              const cursorPosition = this.selectionStart;
              this.value = capitalizedValue;
              // Maintain cursor position after capitalization
              this.setSelectionRange(cursorPosition, cursorPosition);
            }
          }
        }
      });
      
      // Handle focus event to capitalize if field already has content
      input.addEventListener('focus', function() {
        const value = this.value;
        if (value.length > 0) {
          const firstAlphaIndex = value.search(/[a-zA-Z]/);
          if (firstAlphaIndex !== -1) {
            const beforeFirstAlpha = value.substring(0, firstAlphaIndex);
            const firstAlpha = value.charAt(firstAlphaIndex);
            const afterFirstAlpha = value.substring(firstAlphaIndex + 1);
            const capitalizedValue = beforeFirstAlpha + firstAlpha.toUpperCase() + afterFirstAlpha;
            
            if (value !== capitalizedValue) {
              this.value = capitalizedValue;
            }
          }
        }
      });
    } else {
      console.log(`❌ Failed to setup auto-capitalization for ${inputId}: input not found`);
    }
  };

  // Budget limit utility function for numeric fields
  window.setupBudgetLimit = function(inputId, fieldName) {
    const input = document.getElementById(inputId);
    
    if (input) {
      console.log(`💰 Setting up budget limit for ${fieldName}`);
      
      // Store the previous valid value
      let previousValue = input.value || '';
      
      // Add event listener with more aggressive checking
      input.addEventListener('input', function(e) {
        const rawValue = this.value.replace(/[^\d.]/g, ''); // Remove all non-digit/decimal chars
        const numericValue = parseFloat(rawValue) || 0;
        const billionLimit = 999999999999; // 999 billion limit
        
        console.log(`💰 Budget check: raw=${rawValue}, numeric=${numericValue}, limit=${billionLimit}`);
        
        if (numericValue > billionLimit) {
          console.log(`⚠️ Budget limit exceeded: ${numericValue} > ${billionLimit}`);
          
          // Prevent the input and restore previous value
          e.preventDefault();
          this.value = previousValue;
          
          // Show warning message
          let warningMsg = document.getElementById('budget-warning');
          if (!warningMsg) {
            warningMsg = document.createElement('div');
            warningMsg.id = 'budget-warning';
            warningMsg.className = 'text-xs text-red-500 mt-1 font-medium';
            warningMsg.textContent = '⚠️ Maximum budget is ₱999,999,999,999.00 (999 billion)';
            this.parentNode.appendChild(warningMsg);
            
            // Remove warning after 5 seconds
            setTimeout(() => {
              if (warningMsg && warningMsg.parentNode) {
                warningMsg.parentNode.removeChild(warningMsg);
              }
            }, 5000);
          }
          
          // Flash the input border red
          this.style.borderColor = '#ef4444';
          this.style.borderWidth = '2px';
          setTimeout(() => {
            this.style.borderColor = '';
            this.style.borderWidth = '';
          }, 1000);
          
          return false;
        } else {
          // Update previous value if valid
          previousValue = this.value;
          
          // Remove any existing warning
          const warningMsg = document.getElementById('budget-warning');
          if (warningMsg && warningMsg.parentNode) {
            warningMsg.parentNode.removeChild(warningMsg);
          }
        }
      });
      
      // Also check on paste events
      input.addEventListener('paste', function(e) {
        setTimeout(() => {
          const event = new Event('input', { bubbles: true });
          this.dispatchEvent(event);
        }, 10);
      });
      
    } else {
      console.log(`❌ Failed to setup budget limit for ${fieldName}: input not found`);
    }
  };

  // Duplicate calculateTotals function removed - using the comprehensive one above

  // Remove milestone function - expose immediately to global scope
  window.removeMilestone = function(id) {
    const milestone = document.getElementById(`milestone-${id}`);
    if (milestone) {
      milestone.remove();
      window.calculateTotals();
    }
  }

  // Make remaining functions globally available
  window.openEditProjectModal = openEditProjectModal;
  window.closeEditProjectModal = closeEditProjectModal;


  window.editProject = editProject;
  window.viewProjectDetails = viewProjectDetails;
  window.deleteProject = deleteProject;
  window.updateProgress = updateProgress;
  window.generateReport = generateReport;

  window.addBarangayDropdown = addBarangayDropdown;
  window.removeBarangayDropdown = removeBarangayDropdown;
  window.addCreateBarangayDropdown = addCreateBarangayDropdown;
  window.removeCreateBarangayDropdown = removeCreateBarangayDropdown;
  window.addEditBarangayDropdown = addEditBarangayDropdown;
  window.removeEditBarangayDropdown = removeEditBarangayDropdown;
  window.addEditMilestone = addEditMilestone;
  window.removeEditMilestone = removeEditMilestone;
  window.calculateEditTotals = calculateEditTotals;
  window.testModal = testModal;

  // Import and make notification service globally available
  import notificationService from '../../../../services/notifications.js';
  window.notificationService = notificationService;
  console.log('Notification service loaded and made globally available');
  
  // Import and make auth service globally available
  import authService from '../../../../services/auth.js';
  window.authService = authService;
  console.log('Auth service loaded and made globally available');
  
  // Force refresh notifications on page load to ensure we have the latest
  if (window.notificationService) {
    window.notificationService.forceRefresh();
    console.log('Notifications refreshed on page load');
  }

  // Add immediate debugging function
  window.debugModal = function() {
    console.log('🔍 DEBUG MODAL STATUS:');
    console.log('1. Modal element exists:', !!document.getElementById('projectDetailsModal'));
    console.log('2. showProjectDetailsModal function exists:', !!window.showProjectDetailsModal);
    console.log('3. showProjectModal function exists:', !!window.showProjectModal);
    console.log('4. All modal-related elements:', 
      Array.from(document.querySelectorAll('[id*="modal"]')).map(el => ({ id: el.id, visible: !el.classList.contains('hidden') }))
    );
    
    // Try to call the modal function with a test project ID
    if (window.showProjectDetailsModal) {
      console.log('5. Attempting to call showProjectDetailsModal...');
      try {
        window.showProjectDetailsModal('test-project-id');
        console.log('✅ Modal function called successfully');
      } catch (error) {
        console.error('❌ Error calling modal function:', error);
      }
    }
  };

  // Debug: Check if functions are loaded (with delay to ensure all are defined)
  setTimeout(() => {
    console.log('Functions loaded:', {
      openCreateProjectModal: typeof window.openCreateProjectModal,
      closeCreateProjectModal: typeof window.closeCreateProjectModal,
      addMilestone: typeof window.addMilestone,
      removeMilestone: typeof window.removeMilestone,
      calculateTotals: typeof window.calculateTotals,
      validateEIUAccount: typeof window.validateEIUAccount,
      showValidationMessage: typeof window.showValidationMessage,
      setupEIUPartnerField: typeof window.setupEIUPartnerField,
      notificationService: typeof window.notificationService
    });
  }, 100);

  // Enhanced Tab switching functions with animations
  function switchToCardView() {
    const cardTab = document.getElementById('cardTab');
    const tableTab = document.getElementById('tableTab');
    const cardView = document.getElementById('cardView');
    const tableView = document.getElementById('tableView');

    // Add sink and pop animation to the clicked tab
    cardTab.classList.add('switching');
    setTimeout(() => {
      cardTab.classList.remove('switching');
    }, 300);

    // Update tab styles with active state - modern design
    cardTab.className = 'tab-button text-sm font-medium transition-all duration-300 flex items-center gap-2 active';
    tableTab.className = 'tab-button text-sm font-medium text-gray-600 hover:text-gray-900 transition-all duration-300 flex items-center gap-2';

    // Animate content switching
    tableView.classList.add('fade-out');
    
    setTimeout(() => {
      tableView.classList.add('hidden');
      tableView.classList.remove('block', 'fade-out');
      cardView.classList.remove('hidden');
      cardView.classList.add('block', 'fade-in');
      
      // Trigger staggered card animations
      const cards = document.querySelectorAll('.project-card');
      cards.forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
        card.style.animation = 'cardSlideIn 0.6s cubic-bezier(0.4, 0, 0.2, 1) forwards';
      });
      
      setTimeout(() => {
        cardView.classList.remove('fade-in');
        // Trigger progress bar animation after switching to card view
        setTimeout(animateProgressBars, 100);
      }, 400);
    }, 300);
  }

  function switchToTableView() {
    const cardTab = document.getElementById('cardTab');
    const tableTab = document.getElementById('tableTab');
    const cardView = document.getElementById('cardView');
    const tableView = document.getElementById('tableView');

    // Add sink and pop animation to the clicked tab
    tableTab.classList.add('switching');
    setTimeout(() => {
      tableTab.classList.remove('switching');
    }, 300);

    // Update tab styles with active state - modern design
    cardTab.className = 'tab-button text-sm font-medium text-gray-600 hover:text-gray-900 transition-all duration-300 flex items-center gap-2';
    tableTab.className = 'tab-button text-sm font-medium transition-all duration-300 flex items-center gap-2 active';

    // Animate content switching
    cardView.classList.add('fade-out');
    
    setTimeout(() => {
      cardView.classList.add('hidden');
      cardView.classList.remove('block', 'fade-out');
      tableView.classList.remove('hidden');
      tableView.classList.add('block', 'fade-in');
      
      setTimeout(() => {
        tableView.classList.remove('fade-in');
        // Trigger table progress bar animation after switching to table view
        setTimeout(animateTableProgressBars, 100);
      }, 400);
    }, 300);
  }

  // Add event listeners for tab switching
  document.addEventListener('DOMContentLoaded', function() {
    const cardTab = document.getElementById('cardTab');
    const tableTab = document.getElementById('tableTab');
    
    if (cardTab) {
      cardTab.addEventListener('click', switchToCardView);
    }
    
    if (tableTab) {
      tableTab.addEventListener('click', switchToTableView);
    }
  });

  // Make tab switching functions globally available
  window.switchToCardView = switchToCardView;
  window.switchToTableView = switchToTableView;

    // Animate progress bars on page load
  function animateProgressBars() {
    // Get all progress bars
    const progressBars = document.querySelectorAll('#cardView .h-3.rounded-full, #cardView .h-2.rounded-full');
    
    if (progressBars.length === 0) {
      const altBars = document.querySelectorAll('.project-card .h-3.rounded-full, .project-card .h-2.rounded-full');
      
      altBars.forEach((bar, index) => {
        const progressValue = bar.getAttribute('data-progress');
        
        if (progressValue && progressValue !== 'null' && progressValue !== 'undefined') {
          const progress = parseFloat(progressValue);
          
          if (!isNaN(progress) && progress > 0) {
            // Ensure bar starts at 0%
            bar.style.width = '0%';
            
            // Animate to target value with staggered timing
            setTimeout(() => {
              bar.classList.add('animating');
              bar.style.width = `${progress}%`;
              
              // Remove animation class after animation completes
              setTimeout(() => {
                bar.classList.remove('animating');
              }, 600);
            }, index * 200);
          }
        }
      });
      return;
    }
    
    progressBars.forEach((bar, index) => {
      // Get the progress value from data attribute
      const progressValue = bar.getAttribute('data-progress');
      
      if (progressValue && progressValue !== 'null' && progressValue !== 'undefined') {
        const progress = parseFloat(progressValue);
        
        if (!isNaN(progress) && progress > 0) {
          // Ensure bar starts at 0%
          bar.style.width = '0%';
          
          // Animate to target value with staggered timing
          setTimeout(() => {
            bar.classList.add('animating');
            bar.style.width = `${progress}%`;
            
            // Remove animation class after animation completes
            setTimeout(() => {
              bar.classList.remove('animating');
            }, 600);
          }, index * 200);
        }
      }
    });
  }

  // Animate progress bars in table view
  function animateTableProgressBars() {
    const tableProgressBars = document.querySelectorAll('#tableView .table-progress-bar-fill');
    tableProgressBars.forEach((bar, index) => {
      const progress = parseFloat(bar.getAttribute('data-progress')) || 0;
      const colorClass = bar.getAttribute('data-progress-color') || 'bg-gray-500';
      
      // Apply the color class
      bar.className = bar.className.replace(/bg-\w+-\d+/, '');
      bar.classList.add(colorClass);
      
      // Set the progress width
      bar.style.setProperty('--table-progress-width', `${progress}%`);
      
      // Reset and start animation
        bar.style.width = '0%';
      bar.style.animation = 'none';
      bar.offsetHeight; // Trigger reflow
      bar.style.animation = 'fillTableProgress 2s ease-out forwards';
    });
  }

  // Run animation when page loads
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(animateProgressBars, 800);
  });

  // Also run on window load
  window.addEventListener('load', function() {
    setTimeout(animateProgressBars, 1200);
  });

  // Make animation function globally available
  window.animateProgressBars = animateProgressBars;
  

  
  // Trigger animation after a delay to ensure everything is loaded
  setTimeout(() => {
    animateProgressBars();
  }, 1000);


</script>

<!-- Include the standardized project details modal -->
<ProjectDetailsModal userTheme="iu-implementing-office" /> 
