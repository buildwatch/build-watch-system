---
export const prerender = false;
import Layout from '../../../../layouts/Layout.astro';
import IUImplementingOfficeLayout from '../../../../components/IUImplementingOfficeLayout.astro';

const API_URL = 'http://localhost:3000/api';
let announcements = [];
let pagination = { page: 1, limit: 10, total: 0, pages: 1 };
let error = '';
let loading = true;

try {
  const token = Astro.cookies.get('token')?.value || '';
  
  // Fetch announcements from public API
  const res = await fetch(`${API_URL}/admin/public/announcements?page=1&limit=20`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  
  if (res.ok) {
    const data = await res.json();
    if (data.success) {
      announcements = data.announcements || [];
      pagination = data.pagination || { page: 1, limit: 10, total: 0, pages: 1 };
    } else {
      error = data.error || 'Failed to fetch announcements.';
    }
  } else {
    error = 'Failed to fetch announcements.';
  }
} catch (err) {
  error = 'Failed to fetch announcements.';
} finally {
  loading = false;
}

// Helper function to format date
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// Helper function to get priority color
function getPriorityColor(priority) {
  switch (priority) {
    case 'urgent': return 'bg-red-100 text-red-700 border-red-200';
    case 'high': return 'bg-orange-100 text-orange-700 border-orange-200';
    case 'normal': return 'bg-blue-100 text-blue-700 border-blue-200';
    case 'low': return 'bg-green-100 text-green-700 border-green-200';
    default: return 'bg-gray-100 text-gray-700 border-gray-200';
  }
}

// Helper function to get priority icon
function getPriorityIcon(priority) {
  switch (priority) {
    case 'urgent': return 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z';
    case 'high': return 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z';
    case 'normal': return 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';
    case 'low': return 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z';
    default: return 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';
  }
}
---

<Layout title="Announcements | Implementing Office Dashboard">
  <IUImplementingOfficeLayout>
    <section class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header Section -->
      <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-8 animate-fade-in-up" style="animation-delay: 0.1s;">
        <div>
          <h1 class="text-3xl font-bold text-gray-800 mb-2">System Announcements</h1>
          <p class="text-gray-600">Stay updated with important announcements from System Administration</p>
        </div>
        <div class="flex items-center gap-3">
          <button onclick="refreshAnnouncements()" class="px-6 py-3 bg-[#92751F] text-white rounded-lg hover:bg-[#7A641A] transition-colors flex items-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Refresh
          </button>
        </div>
      </div>

      <!-- Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.2s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Total Announcements</p>
              <p class="text-2xl font-bold text-gray-800" id="totalAnnouncements">{pagination.total}</p>
            </div>
            <div class="bg-[#F8C734]/20 p-3 rounded-xl">
              <svg class="w-8 h-8 text-[#92751F]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.3s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Urgent</p>
              <p class="text-2xl font-bold text-red-600" id="urgentCount">{announcements.filter(a => a.priority === 'urgent').length}</p>
            </div>
            <div class="bg-red-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.4s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">High Priority</p>
              <p class="text-2xl font-bold text-orange-600" id="highCount">{announcements.filter(a => a.priority === 'high').length}</p>
            </div>
            <div class="bg-orange-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.5s;">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600">Today</p>
              <p class="text-2xl font-bold text-blue-600" id="todayCount">{announcements.filter(a => {
                const today = new Date().toDateString();
                const announcementDate = new Date(a.createdAt).toDateString();
                return today === announcementDate;
              }).length}</p>
            </div>
            <div class="bg-blue-100 p-3 rounded-xl">
              <svg class="w-8 h-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Filters and Search -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8 animate-fade-in-up" style="animation-delay: 0.6s;">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div class="flex items-center gap-4">
            <select id="priorityFilter" class="px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent">
              <option value="">All Priorities</option>
              <option value="urgent">Urgent</option>
              <option value="high">High Priority</option>
              <option value="normal">Normal</option>
              <option value="low">Low Priority</option>
            </select>
          </div>
          <div class="flex items-center gap-3">
            <div class="relative">
              <input type="text" id="searchAnnouncements" placeholder="Search announcements..." class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent">
              <svg class="absolute left-3 top-2.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Announcements List -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 0.7s;">
        {loading ? (
          <div class="flex items-center justify-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-[#92751F]"></div>
          </div>
        ) : error ? (
          <div class="text-center py-12">
            <div class="text-red-600 mb-4">
              <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
            <p class="text-gray-600">{error}</p>
            <button onclick="refreshAnnouncements()" class="mt-4 px-6 py-2 bg-[#92751F] text-white rounded-lg hover:bg-[#7A641A] transition-colors">
              Try Again
            </button>
          </div>
        ) : announcements.length === 0 ? (
          <div class="text-center py-12">
            <div class="text-gray-400 mb-4">
              <svg class="w-16 h-16 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"></path>
              </svg>
            </div>
            <p class="text-gray-600">No announcements available</p>
          </div>
        ) : (
          <div class="space-y-4" id="announcementsList">
            {announcements.map((announcement, index) => (
              <div class="flex items-start gap-4 p-6 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors animate-fade-in-up" style={`animation-delay: ${0.8 + (index * 0.1)}s`}>
                <div class="flex-shrink-0">
                  <div class={`w-12 h-12 rounded-full flex items-center justify-center border-2 ${getPriorityColor(announcement.priority)}`}>
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={getPriorityIcon(announcement.priority)}></path>
                    </svg>
                  </div>
                </div>
                <div class="flex-1 min-w-0">
                  <div class="flex items-center justify-between mb-2">
                    <h3 class="text-lg font-semibold text-gray-900">{announcement.title}</h3>
                    <div class="flex items-center gap-2">
                      <span class={`px-3 py-1 rounded-full text-xs font-semibold ${getPriorityColor(announcement.priority)}`}>
                        {announcement.priority.charAt(0).toUpperCase() + announcement.priority.slice(1)} Priority
                      </span>
                      <span class="text-xs text-gray-500">{formatDate(announcement.createdAt)}</span>
                    </div>
                  </div>
                  <p class="text-gray-600 mb-3 leading-relaxed">{announcement.content}</p>
                  <div class="flex items-center gap-4 text-sm text-gray-500">
                    <span>Target: {announcement.targetAudience}</span>
                    <span>•</span>
                    <span>Published: {formatDate(announcement.publishDate)}</span>
                    {announcement.expiryDate && (
                      <>
                        <span>•</span>
                        <span>Expires: {formatDate(announcement.expiryDate)}</span>
                      </>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}

        <!-- Load More Button -->
        {pagination.pages > 1 && (
          <div class="text-center mt-8">
            <button onclick="loadMoreAnnouncements()" class="px-6 py-3 bg-[#F8C734] text-white rounded-lg hover:bg-[#E6B82A] transition-colors">
              Load More Announcements
            </button>
          </div>
        )}
      </div>
    </section>
  </IUImplementingOfficeLayout>
</Layout>

<script>
  import { announcementsAPI } from '../../../../services/admin.js';
  
  // Make API available globally
  window.announcementsAPI = announcementsAPI;
  
  // Current page for pagination
  let currentPage = 1;
  let isLoading = false;
  
  // Refresh announcements
  async function refreshAnnouncements() {
    try {
      isLoading = true;
      currentPage = 1;
      
      const response = await announcementsAPI.getPublicAnnouncements({
        page: currentPage,
        limit: 20
      });
      
      if (response.success) {
        // Update the page content
        location.reload();
      } else {
        console.error('Failed to refresh announcements:', response.error);
        alert('Failed to refresh announcements. Please try again.');
      }
    } catch (error) {
      console.error('Error refreshing announcements:', error);
      alert('Failed to refresh announcements. Please try again.');
    } finally {
      isLoading = false;
    }
  }
  
  // Load more announcements
  async function loadMoreAnnouncements() {
    if (isLoading) return;
    
    try {
      isLoading = true;
      currentPage++;
      
      const response = await announcementsAPI.getPublicAnnouncements({
        page: currentPage,
        limit: 20
      });
      
      if (response.success && response.announcements.length > 0) {
        // Append new announcements to the list
        const announcementsList = document.getElementById('announcementsList');
        
        response.announcements.forEach(announcement => {
          const announcementElement = createAnnouncementElement(announcement);
          announcementsList.appendChild(announcementElement);
        });
        
        // Update pagination info
        if (response.pagination.page >= response.pagination.pages) {
          document.querySelector('button[onclick="loadMoreAnnouncements()"]').style.display = 'none';
        }
      }
    } catch (error) {
      console.error('Error loading more announcements:', error);
      alert('Failed to load more announcements. Please try again.');
      currentPage--; // Revert page number on error
    } finally {
      isLoading = false;
    }
  }
  
  // Create announcement element
  function createAnnouncementElement(announcement) {
    const div = document.createElement('div');
    div.className = 'flex items-start gap-4 p-6 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors';
    
    const priorityColor = getPriorityColor(announcement.priority);
    const priorityIcon = getPriorityIcon(announcement.priority);
    const formattedDate = formatDate(announcement.createdAt);
    const publishDate = formatDate(announcement.publishDate);
    
    div.innerHTML = `
      <div class="flex-shrink-0">
        <div class="w-12 h-12 rounded-full flex items-center justify-center border-2 ${priorityColor}">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${priorityIcon}"></path>
          </svg>
        </div>
      </div>
      <div class="flex-1 min-w-0">
        <div class="flex items-center justify-between mb-2">
          <h3 class="text-lg font-semibold text-gray-900">${announcement.title}</h3>
          <div class="flex items-center gap-2">
            <span class="px-3 py-1 rounded-full text-xs font-semibold ${priorityColor}">
              ${announcement.priority.charAt(0).toUpperCase() + announcement.priority.slice(1)} Priority
            </span>
            <span class="text-xs text-gray-500">${formattedDate}</span>
          </div>
        </div>
        <p class="text-gray-600 mb-3 leading-relaxed">${announcement.content}</p>
        <div class="flex items-center gap-4 text-sm text-gray-500">
          <span>Target: ${announcement.targetAudience}</span>
          <span>•</span>
          <span>Published: ${publishDate}</span>
          ${announcement.expiryDate ? `
            <span>•</span>
            <span>Expires: ${formatDate(announcement.expiryDate)}</span>
          ` : ''}
        </div>
      </div>
    `;
    
    return div;
  }
  
  // Helper functions
  function getPriorityColor(priority) {
    switch (priority) {
      case 'urgent': return 'bg-red-100 text-red-700 border-red-200';
      case 'high': return 'bg-orange-100 text-orange-700 border-orange-200';
      case 'normal': return 'bg-blue-100 text-blue-700 border-blue-200';
      case 'low': return 'bg-green-100 text-green-700 border-green-200';
      default: return 'bg-gray-100 text-gray-700 border-gray-200';
    }
  }
  
  function getPriorityIcon(priority) {
    switch (priority) {
      case 'urgent': return 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z';
      case 'high': return 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z';
      case 'normal': return 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';
      case 'low': return 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z';
      default: return 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z';
    }
  }
  
  function formatDate(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  }
  
  // Add event listeners for filters
  document.addEventListener('DOMContentLoaded', function() {
    const priorityFilter = document.getElementById('priorityFilter');
    const searchInput = document.getElementById('searchAnnouncements');
    
    if (priorityFilter) {
      priorityFilter.addEventListener('change', function() {
        // Implement priority filtering
        console.log('Priority filter changed:', this.value);
      });
    }
    
    if (searchInput) {
      searchInput.addEventListener('input', function() {
        // Implement search functionality
        console.log('Search input:', this.value);
      });
    }
  });
</script>

<style>
  .animate-fade-in-up {
    animation: fadeInUp 0.6s ease-out forwards;
    opacity: 0;
    transform: translateY(20px);
  }
  
  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style> 