export const prerender = false;
---
import Layout from '../../../layouts/Layout.astro';
import SysAdminLayout from '../../../components/SysAdminLayout.astro';

const API_URL = 'http://localhost:3000/api';
let stats = [];
let recentLogs = [];
let systemHealth = '98%';
let totalUsers = 0;
let officeDepartments = 0;
let recentActivities = 0;
let recentUsers = [];

try {
  const token = Astro.cookies.get('token')?.value || '';
  
  // Fetch total users count
  const usersRes = await fetch(`${API_URL}/users`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (usersRes.ok) {
    const usersData = await usersRes.json();
    totalUsers = usersData.pagination?.total || 0;
  }
  
  // Fetch activity logs summary
  const summaryRes = await fetch(`${API_URL}/activity-logs/summary`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (summaryRes.ok) {
    const summaryData = await summaryRes.json();
    console.log('Activity summary:', summaryData.summary);
    recentActivities = summaryData.summary?.todayActivities || 0;
    
    // Get specific activity counts
    const failedLogins = summaryData.summary?.failedLogins || 0;
    const activeUsers = summaryData.summary?.activeUsers || 0;
    
    // Store these for use in the template
    globalThis.failedLogins = failedLogins;
    globalThis.activeUsers = activeUsers;
  }
  
  // Fetch recent logs (login/logout activities)
  const logsRes = await fetch(`${API_URL}/activity-logs/realtime`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (logsRes.ok) {
    const logsData = await logsRes.json();
    console.log('Raw activity logs:', logsData.logs);
    recentLogs = logsData.logs?.filter(log => 
      log.action === 'LOGIN' || log.action === 'LOGOUT' || log.action === 'FAILED_LOGIN'
    ).slice(0, 5) || [];
    console.log('Filtered recent logs:', recentLogs);
  }
  
  // Calculate system health based on various metrics
  const healthRes = await fetch(`${API_URL}/activity-logs/summary`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (healthRes.ok) {
    const healthData = await healthRes.json();
    const failedLogins = healthData.summary?.failedLogins || 0;
    const totalLogins = healthData.summary?.activeUsers || 0;
    
    // Calculate health percentage (100% - failed login percentage)
    if (totalLogins > 0) {
      const failureRate = (failedLogins / totalLogins) * 100;
      systemHealth = Math.max(85, Math.round(100 - failureRate)) + '%';
    }
  }
  
  // For now, set office departments to 0 (will be updated when office-groups.astro is revised)
  officeDepartments = 0;
  
  // Fetch recent users (last 5 created users)
  const recentUsersRes = await fetch(`${API_URL}/users?limit=5&sortBy=createdAt&sortOrder=desc`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (recentUsersRes.ok) {
    const recentUsersData = await recentUsersRes.json();
    recentUsers = recentUsersData.users || [];
  }
  
} catch (error) {
  console.error('Error fetching dashboard data:', error);
  // Fallback to default values
  totalUsers = 0;
  officeDepartments = 0;
  systemHealth = '98%';
  recentActivities = 0;
}

// Update stats with real data
stats = [
  { 
    title: 'Total Users', 
    value: totalUsers.toString(), 
    change: '+12%', 
    icon: 'M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z', 
    color: 'blue' 
  },
  { 
    title: 'Office/Department', 
    value: officeDepartments.toString(), 
    change: '+8%', 
    icon: 'M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4', 
    color: 'gray' 
  },
  { 
    title: 'System Health', 
    value: systemHealth, 
    change: '+2%', 
    icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z', 
    color: 'purple' 
  },
  { 
    title: 'Recent Logs', 
    value: recentActivities.toString(), 
    change: '+15%', 
    icon: 'M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01', 
    color: 'gray' 
  }
];

const quickActions = [
  { title: 'Add New User', icon: 'M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z', href: '/dashboard/sysadmin/modules/user-management', color: 'blue' },
  { title: 'Create Backup', icon: 'M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4', href: '/dashboard/sysadmin/modules/backup-maintenance', color: 'green' },
  { title: 'System Health Check', icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z', href: '/dashboard/sysadmin/modules/system-health', color: 'purple' },
  { title: 'View Logs', icon: 'M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01', href: '/dashboard/sysadmin/modules/user-logs', color: 'orange' }
];

// Helper function to format time ago
function formatTimeAgo(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const diffInSeconds = Math.floor((now - date) / 1000);
  
  if (diffInSeconds < 60) return `${diffInSeconds} seconds ago`;
  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;
  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;
  return `${Math.floor(diffInSeconds / 86400)} days ago`;
}

// Helper function to get action display text
function getActionDisplayText(action) {
  switch (action) {
    case 'LOGIN': return 'Logged in successfully';
    case 'LOGOUT': return 'Logged out';
    case 'FAILED_LOGIN': return 'Failed login attempt';
    default: return action;
  }
}

// Helper function to get activity type for styling
function getActivityType(action) {
  switch (action) {
    case 'LOGIN': return 'success';
    case 'LOGOUT': return 'info';
    case 'FAILED_LOGIN': return 'error';
    default: return 'system';
  }
}
---
<Layout title="System Admin Dashboard">
  <SysAdminLayout>
    <div class="bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Page Header -->
      <div class="bg-white border-b border-gray-200 px-8 py-6 shadow-sm">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="flex items-center space-x-3">
              <div class="icon-container bg-gradient-to-br from-black to-gray-800 shadow-xl">
                <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <div>
                <h1 class="text-3xl font-bold text-black">System Admin Dashboard</h1>
                <p class="text-sm text-gray-600">Welcome back, System Administrator. Here's what's happening with your system today.</p>
              </div>
            </div>
          </div>
          <div class="flex items-center space-x-4">
            <div class="text-right">
              <p class="text-sm text-gray-600">System Health</p>
              <p class="text-xs text-black font-semibold">{systemHealth} Operational</p>
            </div>
            <div class="w-4 h-4 bg-green-500 rounded-full animate-pulse shadow-lg"></div>
          </div>
        </div>
      </div>

      <!-- Main Content -->
      <main class="px-8 py-8 w-full max-w-none">
        <!-- Enhanced Stats Cards -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 sm:gap-6 mb-8">
        {stats.map((stat, index) => (
          <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-4 sm:p-6 hover:shadow-2xl hover:border-gray-200 transition-all duration-500 hover:-translate-y-2 animate-fade-in-up relative overflow-hidden" style={`animation-delay: ${0.2 + index * 0.1}s`}>
            <!-- Decorative Background -->
            <div class="absolute inset-0 bg-gradient-to-br from-gray-50/50 to-white opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            
            <div class="relative z-10">
            <div class="flex items-center justify-between mb-4">
                <div class={`w-10 h-10 sm:w-12 sm:h-12 lg:w-14 lg:h-14 rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300 ${
                  stat.color === 'blue' ? 'bg-gradient-to-br from-gray-800 to-black' :
                  stat.color === 'purple' ? 'bg-gradient-to-br from-gray-800 to-black' :
                  stat.color === 'gray' ? 'bg-gradient-to-br from-gray-700 to-gray-900' :
                  'bg-gradient-to-br from-gray-800 to-black'
                }`}>
                  <svg class="w-5 h-5 sm:w-6 sm:h-6 lg:w-7 lg:h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={stat.icon}></path>
                </svg>
              </div>
                <span class={`text-sm font-bold px-3 py-1.5 rounded-full ${
                  stat.color === 'blue' ? 'text-gray-700 bg-gray-100' :
                  stat.color === 'purple' ? 'text-gray-700 bg-gray-100' :
                  stat.color === 'gray' ? 'text-gray-700 bg-gray-100' :
                  'text-gray-700 bg-gray-100'
              }`}>
                {stat.change}
              </span>
              </div>
              <h3 class="text-2xl sm:text-3xl font-black text-gray-800 mb-2 group-hover:text-gray-900 transition-colors duration-300">{stat.value}</h3>
              <p class="text-gray-600 font-medium text-sm sm:text-base">{stat.title}</p>
            </div>
          </div>
        ))}
      </div>

      <!-- Main Content Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8">
        <!-- Enhanced Quick Actions -->
        <div class="lg:col-span-1 animate-fade-in-up" style="animation-delay: 0.6s;">
          <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-4 sm:p-6 hover:shadow-2xl transition-all duration-500 relative overflow-hidden">
            <!-- Decorative Background -->
            <div class="absolute inset-0 bg-gradient-to-br from-blue-50/30 to-indigo-50/30 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            
            <div class="relative z-10">
              <div class="flex items-center gap-3 mb-6">
                <div class="w-12 h-12 bg-gradient-to-br from-gray-800 to-black rounded-2xl flex items-center justify-center shadow-lg">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
                </div>
                <h2 class="text-xl sm:text-2xl font-black text-gray-900">Quick Actions</h2>
              </div>
            <div class="space-y-3">
              {quickActions.map((action, index) => (
                  <a href={action.href} class="group/action flex items-center p-3 sm:p-4 rounded-xl hover:bg-gray-50 transition-all duration-300 group animate-fade-in-up relative overflow-hidden" style={`animation-delay: ${0.7 + index * 0.1}s`}>
                    <!-- Action Background Effect -->
                    <div class="absolute inset-0 bg-gradient-to-r from-gray-50/50 to-white opacity-0 group-hover/action:opacity-100 transition-opacity duration-300"></div>
                    
                    <div class="relative z-10 flex items-center w-full">
                      <div class="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-br from-gray-800 to-black rounded-xl flex items-center justify-center mr-3 sm:mr-4 group-hover/action:scale-110 transition-transform duration-300 shadow-lg">
                        <svg class="w-5 h-5 sm:w-6 sm:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={action.icon}></path>
                    </svg>
                  </div>
                  <div class="flex-1">
                        <h3 class="font-bold text-gray-800 group-hover/action:text-blue-600 transition-colors duration-300 text-sm sm:text-base">{action.title}</h3>
                  </div>
                      <svg class="w-4 h-4 sm:w-5 sm:h-5 text-gray-400 group-hover/action:text-blue-600 group-hover/action:translate-x-1 transition-all duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                    </div>
                </a>
              ))}
              </div>
            </div>
          </div>
        </div>

        <!-- Enhanced Recent Logs -->
        <div class="lg:col-span-2 animate-fade-in-up" style="animation-delay: 0.8s;">
          <div class="group bg-white rounded-2xl shadow-lg border border-gray-100 p-4 sm:p-6 hover:shadow-2xl transition-all duration-500 relative overflow-hidden">
            <!-- Decorative Background -->
            <div class="absolute inset-0 bg-gradient-to-br from-indigo-50/30 to-blue-50/30 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
            
            <div class="relative z-10">
              <div class="flex flex-col sm:flex-row sm:items-center justify-between mb-6 gap-4">
                <div class="flex items-center gap-3">
                  <div class="w-10 h-10 sm:w-12 sm:h-12 bg-gradient-to-br from-gray-800 to-black rounded-2xl flex items-center justify-center shadow-lg">
                    <svg class="w-5 h-5 sm:w-6 sm:h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <div>
                    <h2 class="text-xl sm:text-2xl font-black text-gray-900">Recent Logs</h2>
                    <span class="text-xs text-gray-500 bg-gray-100 px-2 sm:px-3 py-1 rounded-full font-medium">Resets every 24 hours</span>
                  </div>
                </div>
                <a href="/dashboard/sysadmin/modules/user-logs" class="group/link flex items-center gap-2 text-blue-600 hover:text-blue-700 text-sm font-bold transition-colors duration-300">
                  <span>View All</span>
                  <svg class="w-4 h-4 group-hover/link:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              </div>
              <div class="space-y-3">
              {recentLogs.length > 0 ? (
                recentLogs.map((log, index) => {
                  const activityType = getActivityType(log.action);
                  return (
                      <div class="group/log flex items-center p-4 rounded-xl hover:bg-gray-50 transition-all duration-300 animate-fade-in-up relative overflow-hidden" style={`animation-delay: ${0.9 + index * 0.1}s`}>
                        <!-- Log Background Effect -->
                        <div class="absolute inset-0 bg-gradient-to-r from-gray-50/50 to-white opacity-0 group-hover/log:opacity-100 transition-opacity duration-300"></div>
                        
                        <div class="relative z-10 flex items-center w-full">
                          <div class={`w-12 h-12 rounded-xl flex items-center justify-center mr-4 shadow-lg group-hover/log:scale-110 transition-transform duration-300 ${
                        activityType === 'success' ? 'bg-green-100 text-green-600' :
                        activityType === 'error' ? 'bg-red-100 text-red-600' :
                        activityType === 'info' ? 'bg-blue-100 text-blue-600' :
                        'bg-gray-100 text-gray-600'
                      }`}>
                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={
                            activityType === 'success' ? 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z' :
                            activityType === 'error' ? 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z' :
                            activityType === 'info' ? 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z' :
                            'M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01'
                          }></path>
                        </svg>
                      </div>
                      <div class="flex-1">
                            <p class="font-bold text-gray-800 group-hover/log:text-gray-900 transition-colors duration-300">{log.userName || 'System'}</p>
                            <p class="text-sm text-gray-600 font-medium">{getActionDisplayText(log.action)}</p>
                        <p class="text-xs text-gray-500">IP: {log.ipAddress || 'N/A'}</p>
                          </div>
                          <span class="text-xs text-gray-500 font-medium bg-gray-100 px-2 py-1 rounded-full">{formatTimeAgo(log.createdAt)}</span>
                        </div>
                    </div>
                  );
                })
              ) : (
                  <div class="text-center py-12 text-gray-500">
                    <div class="w-16 h-16 bg-gray-100 rounded-2xl flex items-center justify-center mx-auto mb-4">
                      <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                  </svg>
                    </div>
                    <p class="text-lg font-semibold text-gray-600 mb-2">No recent activities</p>
                    <p class="text-sm text-gray-500">Login and logout activities will appear here</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      <!-- Vertical Stack: Activities, Recent Users, System Status -->
      <div class="mt-8 flex flex-col gap-8 w-full max-w-none">
      <!-- Recent Activities Section - Full Width -->
      <div class="w-full max-w-none col-span-full self-stretch group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl transition-all duration-500 animate-fade-in-up relative overflow-hidden" style="animation-delay: 1.0s;">
        <!-- Decorative Background -->
        <div class="absolute inset-0 bg-gradient-to-br from-emerald-50/30 to-green-50/30 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        
        <div class="relative z-10">
          <div class="flex items-center justify-between mb-6">
            <div class="flex items-center gap-3">
              <div class="w-12 h-12 bg-gradient-to-br from-emerald-600 to-green-600 rounded-2xl flex items-center justify-center shadow-lg">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                </svg>
              </div>
              <div>
                <h2 class="text-2xl font-black text-gray-800">Recent Activities</h2>
                <p class="text-sm text-gray-600">Today's system activities</p>
              </div>
            </div>
            <div class="text-right">
              <p class="text-3xl font-black text-emerald-600">{recentActivities}</p>
              <p class="text-sm text-gray-600 font-medium">Today's Activities</p>
            </div>
          </div>
          <!-- Horizontal Grid Layout for Activities -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div class="group/activity flex items-center p-4 bg-gray-50 rounded-xl border border-gray-200 hover:bg-gray-100 transition-all duration-300 hover:scale-105 animate-fade-in-up" style="animation-delay: 1.1s;">
              <div class="w-12 h-12 bg-gradient-to-br from-gray-800 to-black rounded-xl flex items-center justify-center mr-4 shadow-lg group-hover/activity:scale-110 transition-transform duration-300">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div class="flex-1">
                <h3 class="text-base font-bold text-gray-900 mb-1">Login Activities</h3>
                <p class="text-2xl font-black text-gray-800 mb-1">{globalThis.activeUsers || 0}</p>
                <p class="text-xs text-gray-600 font-medium">Successful logins</p>
              </div>
            </div>
            <div class="group/activity flex items-center p-4 bg-gray-50 rounded-xl border border-gray-200 hover:bg-gray-100 transition-all duration-300 hover:scale-105 animate-fade-in-up" style="animation-delay: 1.2s;">
              <div class="w-12 h-12 bg-gradient-to-br from-gray-800 to-black rounded-xl flex items-center justify-center mr-4 shadow-lg group-hover/activity:scale-110 transition-transform duration-300">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 013 3v1"></path>
                </svg>
              </div>
              <div class="flex-1">
                <h3 class="text-base font-bold text-gray-900 mb-1">Logout Activities</h3>
                <p class="text-2xl font-black text-gray-800 mb-1">0</p>
                <p class="text-xs text-gray-600 font-medium">Successful logouts</p>
              </div>
            </div>
            <div class="group/activity flex items-center p-4 bg-gray-50 rounded-xl border border-gray-200 hover:bg-gray-100 transition-all duration-300 hover:scale-105 animate-fade-in-up" style="animation-delay: 1.3s;">
              <div class="w-12 h-12 bg-gradient-to-br from-gray-800 to-black rounded-xl flex items-center justify-center mr-4 shadow-lg group-hover/activity:scale-110 transition-transform duration-300">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              <div class="flex-1">
                <h3 class="text-base font-bold text-gray-900 mb-1">Failed Attempts</h3>
                <p class="text-2xl font-black text-gray-800 mb-1">{globalThis.failedLogins || 0}</p>
                <p class="text-xs text-gray-600 font-medium">Failed logins</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Recently Created Users Section - Full Width -->
      <div class="w-full max-w-none col-span-full self-stretch group bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-2xl transition-all duration-500 animate-fade-in-up relative overflow-hidden" style="animation-delay: 1.1s;">
        <!-- Decorative Background -->
        <div class="absolute inset-0 bg-gradient-to-br from-gray-50/30 to-white opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        
        <div class="relative z-10">
          <div class="flex flex-col sm:flex-row sm:items-center justify-between mb-6 gap-4">
            <div class="flex items-center gap-3">
              <div class="w-12 h-12 bg-gradient-to-br from-gray-800 to-black rounded-2xl flex items-center justify-center shadow-lg">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                </svg>
              </div>
              <div>
                <h2 class="text-xl sm:text-2xl font-black text-gray-900">Recently Created Users</h2>
                <span class="text-xs text-gray-500 bg-gray-100 px-2 sm:px-3 py-1 rounded-full font-medium">Latest 5 users</span>
              </div>
            </div>
            <a href="/dashboard/sysadmin/modules/user-management" class="group/link flex items-center gap-2 text-gray-600 hover:text-gray-800 text-sm font-bold transition-colors duration-300">
              <span>View All Users</span>
              <svg class="w-4 h-4 group-hover/link:translate-x-1 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
            </a>
          </div>
          
          <div class="space-y-3">
            {recentUsers.length > 0 ? (
              recentUsers.map((user, index) => (
                <div class="group/user flex items-center p-4 rounded-xl hover:bg-gray-50 transition-all duration-300 animate-fade-in-up relative overflow-hidden" style={`animation-delay: ${1.2 + index * 0.1}s`}>
                  <!-- User Background Effect -->
                  <div class="absolute inset-0 bg-gradient-to-r from-gray-50/50 to-white opacity-0 group-hover/user:opacity-100 transition-opacity duration-300"></div>
                  
                  <div class="relative z-10 flex items-center w-full">
                    <div class="w-12 h-12 bg-gradient-to-br from-gray-800 to-black rounded-xl flex items-center justify-center mr-4 shadow-lg group-hover/user:scale-110 transition-transform duration-300">
                      <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                      </svg>
                    </div>
                    <div class="flex-1">
                      <p class="font-bold text-gray-900 group-hover/user:text-gray-800 transition-colors duration-300">{user.fullName || user.username}</p>
                      <p class="text-sm text-gray-600 font-medium">{user.role || 'User'}</p>
                      <p class="text-xs text-gray-500">{user.department || 'No Department'}</p>
                    </div>
                    <div class="text-right">
                      <p class="text-xs text-gray-500 font-medium bg-gray-100 px-2 py-1 rounded-full">{formatTimeAgo(user.createdAt)}</p>
                    </div>
                  </div>
                </div>
              ))
            ) : (
              <div class="text-center py-12 text-gray-500">
                <div class="w-16 h-16 bg-gray-100 rounded-2xl flex items-center justify-center mx-auto mb-4">
                  <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                  </svg>
                </div>
                <p class="text-lg font-semibold text-gray-600 mb-2">No recent users</p>
                <p class="text-sm text-gray-500">Newly created users will appear here</p>
              </div>
            )}
          </div>
        </div>
      </div>

      <!-- System Status Section - Full Width -->
      <div class="w-full max-w-none col-span-full self-stretch group bg-gradient-to-r from-gray-50 to-gray-100 border border-gray-200 rounded-2xl p-4 sm:p-6 hover:shadow-2xl transition-all duration-500 animate-fade-in-up relative overflow-hidden" style="animation-delay: 1.2s;">
        <!-- Decorative Background -->
        <div class="absolute inset-0 bg-gradient-to-r from-gray-100/50 to-gray-200/50 opacity-0 group-hover:opacity-100 transition-opacity duration-500"></div>
        
        <div class="relative z-10">
          <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div class="flex items-center gap-3 sm:gap-4">
              <div class="w-12 h-12 sm:w-14 sm:h-14 lg:w-16 lg:h-16 bg-gradient-to-br from-gray-800 to-black rounded-2xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300">
                <svg class="w-6 h-6 sm:w-7 sm:h-7 lg:w-8 lg:h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
                <h3 class="text-lg sm:text-xl lg:text-2xl font-black text-gray-900">System Status: Operational</h3>
                <p class="text-gray-600 text-sm sm:text-base lg:text-lg font-medium">All services are running smoothly</p>
              </div>
            </div>
            <div class="text-center sm:text-right">
              <p class="text-2xl sm:text-3xl lg:text-4xl font-black text-gray-900">{systemHealth}</p>
              <p class="text-xs sm:text-sm text-gray-600 font-bold">System Health</p>
            </div>
          </div>
        </div>
      </div>
      </div>
      </main>
    </div>
  </SysAdminLayout>
</Layout>

<script src="/src/scripts/profile-picture-manager.js"></script>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes slideInFromLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes slideInFromRight {
    from {
      opacity: 0;
      transform: translateX(30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes scaleIn {
    from {
      opacity: 0;
      transform: scale(0.9);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  .animate-fade-in-up {
    animation: fadeInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
  }

  .animate-slide-in-left {
    animation: slideInFromLeft 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
  }

  .animate-slide-in-right {
    animation: slideInFromRight 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
  }

  .animate-scale-in {
    animation: scaleIn 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
  }

  /* Enhanced hover effects */
  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }

  .group:hover .group-hover\:translate-x-1 {
    transform: translateX(0.25rem);
  }

  .group:hover .group-hover\:-translate-y-2 {
    transform: translateY(-0.5rem);
  }

  /* Smooth transitions for all interactive elements */
  * {
    transition-property: color, background-color, border-color, text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter, backdrop-filter;
    transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
    transition-duration: 300ms;
  }

  /* Enhanced hover effects for cards */
  .group:hover {
    transform: translateY(-2px);
  }

  /* Staggered animation delays */
  .animate-fade-in-up:nth-child(1) { animation-delay: 0.1s; }
  .animate-fade-in-up:nth-child(2) { animation-delay: 0.2s; }
  .animate-fade-in-up:nth-child(3) { animation-delay: 0.3s; }
  .animate-fade-in-up:nth-child(4) { animation-delay: 0.4s; }
  .animate-fade-in-up:nth-child(5) { animation-delay: 0.5s; }

  /* Enhanced focus states for accessibility */
  .group:focus-within {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }

  /* Improved text selection */
  ::selection {
    background-color: #3b82f6;
    color: white;
  }

  /* Icon Container Styles */
  .icon-container {
    @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
    position: relative;
    overflow: hidden;
  }
  
  .icon-container::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
    transition: left 0.5s ease-out;
    z-index: 1;
  }
  
  .icon-container > * {
    position: relative;
    z-index: 2;
  }
  
  .icon-container:hover::before {
    left: 100%;
  }
  
  .icon-container:hover {
    @apply transform scale-110 rotate-3;
  }
</style>

<script>
  import authService from '../../../services/auth.js';
  
  // Authentication check for System Admin
  document.addEventListener('DOMContentLoaded', function() {
    // Check session validity first
    if (!authService.redirectIfInvalidSession()) {
      return;
    }
    
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      window.location.href = '/login/lgu-pmt';
      return;
    }
    
    try {
      const user = JSON.parse(userData);
      
      // Check if user is System Admin
      if (user.role !== 'SYS.AD') {
        // Redirect to appropriate dashboard based on role
        if (user.role === 'SYS.AD' && user.subRole === 'EXECUTIVE') {
          window.location.href = '/dashboard/executive-viewer/ExecutiveDashboard';
        } else {
          window.location.href = '/login/lgu-pmt';
        }
        return;
      }
      
      console.log('System Admin Dashboard loaded for user:', user.username);
      
      // Auto-refresh dashboard data every 5 minutes
      setInterval(() => {
        window.location.reload();
      }, 5 * 60 * 1000);
      
    } catch (error) {
      console.error('Error parsing user data:', error);
      window.location.href = '/login/lgu-pmt';
    }
  });
</script> 