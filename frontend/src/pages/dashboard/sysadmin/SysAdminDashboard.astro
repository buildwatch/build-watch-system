export const prerender = false;
---
import Layout from '../../../layouts/Layout.astro';
import SysAdminLayout from '../../../components/SysAdminLayout.astro';

const API_URL = 'http://localhost:3000/api';
let stats = [];
let recentLogs = [];
let systemHealth = '98%';
let totalUsers = 0;
let officeDepartments = 0;
let recentActivities = 0;

try {
  const token = Astro.cookies.get('token')?.value || '';
  
  // Fetch total users count
  const usersRes = await fetch(`${API_URL}/users`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (usersRes.ok) {
    const usersData = await usersRes.json();
    totalUsers = usersData.pagination?.total || 0;
  }
  
  // Fetch activity logs summary
  const summaryRes = await fetch(`${API_URL}/activity-logs/summary`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (summaryRes.ok) {
    const summaryData = await summaryRes.json();
    console.log('Activity summary:', summaryData.summary);
    recentActivities = summaryData.summary?.todayActivities || 0;
    
    // Get specific activity counts
    const failedLogins = summaryData.summary?.failedLogins || 0;
    const activeUsers = summaryData.summary?.activeUsers || 0;
    
    // Store these for use in the template
    globalThis.failedLogins = failedLogins;
    globalThis.activeUsers = activeUsers;
  }
  
  // Fetch recent logs (login/logout activities)
  const logsRes = await fetch(`${API_URL}/activity-logs/realtime`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (logsRes.ok) {
    const logsData = await logsRes.json();
    console.log('Raw activity logs:', logsData.logs);
    recentLogs = logsData.logs?.filter(log => 
      log.action === 'LOGIN' || log.action === 'LOGOUT' || log.action === 'FAILED_LOGIN'
    ).slice(0, 5) || [];
    console.log('Filtered recent logs:', recentLogs);
  }
  
  // Calculate system health based on various metrics
  const healthRes = await fetch(`${API_URL}/activity-logs/summary`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (healthRes.ok) {
    const healthData = await healthRes.json();
    const failedLogins = healthData.summary?.failedLogins || 0;
    const totalLogins = healthData.summary?.activeUsers || 0;
    
    // Calculate health percentage (100% - failed login percentage)
    if (totalLogins > 0) {
      const failureRate = (failedLogins / totalLogins) * 100;
      systemHealth = Math.max(85, Math.round(100 - failureRate)) + '%';
    }
  }
  
  // For now, set office departments to 0 (will be updated when office-groups.astro is revised)
  officeDepartments = 0;
  
} catch (error) {
  console.error('Error fetching dashboard data:', error);
  // Fallback to default values
  totalUsers = 0;
  officeDepartments = 0;
  systemHealth = '98%';
  recentActivities = 0;
}

// Update stats with real data
stats = [
  { 
    title: 'Total Users', 
    value: totalUsers.toString(), 
    change: '+12%', 
    icon: 'M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z', 
    color: 'blue' 
  },
  { 
    title: 'Office/Department', 
    value: officeDepartments.toString(), 
    change: '+8%', 
    icon: 'M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4', 
    color: 'gray' 
  },
  { 
    title: 'System Health', 
    value: systemHealth, 
    change: '+2%', 
    icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z', 
    color: 'purple' 
  },
  { 
    title: 'Recent Logs', 
    value: recentActivities.toString(), 
    change: '+15%', 
    icon: 'M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01', 
    color: 'gray' 
  }
];

const quickActions = [
  { title: 'Add New User', icon: 'M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z', href: '/dashboard/sysadmin/modules/user-management', color: 'blue' },
  { title: 'Create Backup', icon: 'M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4', href: '/dashboard/sysadmin/modules/backup-maintenance', color: 'green' },
  { title: 'System Health Check', icon: 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z', href: '/dashboard/sysadmin/modules/system-health', color: 'purple' },
  { title: 'View Logs', icon: 'M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01', href: '/dashboard/sysadmin/modules/user-logs', color: 'orange' }
];

// Helper function to format time ago
function formatTimeAgo(dateString) {
  const date = new Date(dateString);
  const now = new Date();
  const diffInSeconds = Math.floor((now - date) / 1000);
  
  if (diffInSeconds < 60) return `${diffInSeconds} seconds ago`;
  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;
  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;
  return `${Math.floor(diffInSeconds / 86400)} days ago`;
}

// Helper function to get action display text
function getActionDisplayText(action) {
  switch (action) {
    case 'LOGIN': return 'Logged in successfully';
    case 'LOGOUT': return 'Logged out';
    case 'FAILED_LOGIN': return 'Failed login attempt';
    default: return action;
  }
}

// Helper function to get activity type for styling
function getActivityType(action) {
  switch (action) {
    case 'LOGIN': return 'success';
    case 'LOGOUT': return 'info';
    case 'FAILED_LOGIN': return 'error';
    default: return 'system';
  }
}
---
<Layout title="System Admin Dashboard">
  <SysAdminLayout>
    <div class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Welcome Section -->
      <div class="mb-8 animate-fade-in-up" style="animation-delay: 0.1s;">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">Welcome back, System Administrator</h1>
        <p class="text-gray-600">Here's what's happening with your system today</p>
      </div>

      <!-- Stats Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        {stats.map((stat, index) => (
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300 animate-fade-in-up" style={`animation-delay: ${0.2 + index * 0.1}s`}>
            <div class="flex items-center justify-between mb-4">
              <div class={`w-12 h-12 rounded-xl flex items-center justify-center shadow-lg ${
                stat.color === 'blue' ? 'bg-gradient-to-br from-blue-500 to-blue-600' :
                stat.color === 'purple' ? 'bg-gradient-to-br from-purple-500 to-purple-600' :
                stat.color === 'gray' ? 'bg-gradient-to-br from-gray-400 to-gray-500' :
                'bg-gradient-to-br from-blue-500 to-blue-600'
              }`}>
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={stat.icon}></path>
                </svg>
              </div>
              <span class={`text-sm font-semibold px-2 py-1 rounded-full ${
                stat.color === 'blue' ? 'text-blue-600 bg-blue-100' :
                stat.color === 'purple' ? 'text-purple-600 bg-purple-100' :
                stat.color === 'gray' ? 'text-gray-600 bg-gray-100' :
                'text-blue-600 bg-blue-100'
              }`}>
                {stat.change}
              </span>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-1">{stat.value}</h3>
            <p class="text-gray-600 text-sm">{stat.title}</p>
          </div>
        ))}
      </div>

      <!-- Main Content Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        <!-- Quick Actions -->
        <div class="lg:col-span-1 animate-fade-in-up" style="animation-delay: 0.6s;">
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <h2 class="text-xl font-bold text-gray-800 mb-6 flex items-center">
              <svg class="w-5 h-5 mr-2 text-[#3D50D7]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
              Quick Actions
            </h2>
            <div class="space-y-3">
              {quickActions.map((action, index) => (
                <a href={action.href} class="flex items-center p-4 rounded-xl hover:bg-gray-50 transition-all duration-200 group animate-fade-in-up" style={`animation-delay: ${0.7 + index * 0.1}s`}>
                  <div class={`w-10 h-10 bg-gradient-to-br from-${action.color}-500 to-${action.color}-600 rounded-xl flex items-center justify-center mr-4 group-hover:scale-110 transition-transform duration-200`}>
                    <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={action.icon}></path>
                    </svg>
                  </div>
                  <div class="flex-1">
                    <h3 class="font-semibold text-gray-800 group-hover:text-[#3D50D7] transition-colors">{action.title}</h3>
                  </div>
                  <svg class="w-4 h-4 text-gray-400 group-hover:text-[#3D50D7] transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </a>
              ))}
            </div>
          </div>
        </div>

        <!-- Recent Logs -->
        <div class="lg:col-span-2 animate-fade-in-up" style="animation-delay: 0.8s;">
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6">
            <div class="flex items-center justify-between mb-6">
              <div class="flex items-center">
                <h2 class="text-xl font-bold text-gray-800 flex items-center">
                  <svg class="w-5 h-5 mr-2 text-[#3D50D7]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Recent Logs
                </h2>
                <span class="ml-3 text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">Resets every 24 hours</span>
              </div>
              <a href="/dashboard/sysadmin/modules/user-logs" class="text-[#3D50D7] hover:text-[#2a3bb8] text-sm font-semibold transition-colors">
                View All
              </a>
            </div>
            <div class="space-y-4">
              {recentLogs.length > 0 ? (
                recentLogs.map((log, index) => {
                  const activityType = getActivityType(log.action);
                  return (
                    <div class="flex items-center p-4 rounded-xl hover:bg-gray-50 transition-all duration-200 animate-fade-in-up" style={`animation-delay: ${0.9 + index * 0.1}s`}>
                      <div class={`w-10 h-10 rounded-xl flex items-center justify-center mr-4 ${
                        activityType === 'success' ? 'bg-green-100 text-green-600' :
                        activityType === 'error' ? 'bg-red-100 text-red-600' :
                        activityType === 'info' ? 'bg-blue-100 text-blue-600' :
                        'bg-gray-100 text-gray-600'
                      }`}>
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={
                            activityType === 'success' ? 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z' :
                            activityType === 'error' ? 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z' :
                            activityType === 'info' ? 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z' :
                            'M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01'
                          }></path>
                        </svg>
                      </div>
                      <div class="flex-1">
                        <p class="font-semibold text-gray-800">{log.userName || 'System'}</p>
                        <p class="text-sm text-gray-600">{getActionDisplayText(log.action)}</p>
                        <p class="text-xs text-gray-500">IP: {log.ipAddress || 'N/A'}</p>
                      </div>
                      <span class="text-xs text-gray-500">{formatTimeAgo(log.createdAt)}</span>
                    </div>
                  );
                })
              ) : (
                <div class="text-center py-8 text-gray-500">
                  <svg class="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
                  </svg>
                  <p>No recent login/logout activities</p>
                  <p class="text-sm">Login and logout activities will appear here</p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      <!-- Recent Activities (Login/Logout Tracking) -->
      <div class="mt-8 bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up" style="animation-delay: 1.0s;">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-bold text-gray-800 flex items-center">
            <svg class="w-5 h-5 mr-2 text-[#3D50D7]" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01"></path>
            </svg>
            Recent Activities
          </h2>
          <div class="text-right">
            <p class="text-2xl font-bold text-[#3D50D7]">{recentActivities}</p>
            <p class="text-sm text-gray-600">Today's Activities</p>
          </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                     <div class="text-center p-4 bg-blue-50 rounded-xl">
             <div class="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center mx-auto mb-3">
               <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
               </svg>
             </div>
             <h3 class="font-semibold text-gray-800 mb-1">Login Activities</h3>
             <p class="text-2xl font-bold text-blue-600">{globalThis.activeUsers || 0}</p>
             <p class="text-sm text-gray-500">Successful logins</p>
           </div>
           <div class="text-center p-4 bg-green-50 rounded-xl">
             <div class="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center mx-auto mb-3">
               <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 013 3v1"></path>
               </svg>
             </div>
             <h3 class="font-semibold text-gray-800 mb-1">Logout Activities</h3>
             <p class="text-2xl font-bold text-green-600">0</p>
             <p class="text-sm text-gray-500">Successful logouts</p>
           </div>
           <div class="text-center p-4 bg-red-50 rounded-xl">
             <div class="w-12 h-12 bg-red-500 rounded-xl flex items-center justify-center mx-auto mb-3">
               <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                 <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
               </svg>
             </div>
             <h3 class="font-semibold text-gray-800 mb-1">Failed Attempts</h3>
             <p class="text-2xl font-bold text-red-600">{globalThis.failedLogins || 0}</p>
             <p class="text-sm text-gray-500">Failed logins</p>
           </div>
        </div>
      </div>

      <!-- System Status -->
      <div class="mt-8 bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-2xl p-6 animate-fade-in-up" style="animation-delay: 1.1s;">
        <div class="flex items-center justify-between">
          <div class="flex items-center space-x-4">
            <div class="w-12 h-12 bg-green-500 rounded-xl flex items-center justify-center shadow-lg">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            </div>
            <div>
              <h3 class="text-lg font-bold text-green-800">System Status: Operational</h3>
              <p class="text-green-600">All services are running smoothly</p>
            </div>
          </div>
          <div class="text-right">
            <p class="text-2xl font-bold text-green-800">{systemHealth}</p>
            <p class="text-sm text-green-600">System Health</p>
          </div>
        </div>
      </div>
    </div>
  </SysAdminLayout>
</Layout>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in-up {
    animation: fadeInUp 0.8s cubic-bezier(0.4, 0, 0.2, 1) forwards;
    opacity: 0;
  }
</style>

<script>
  import authService from '../../../services/auth.js';
  
  // Authentication check for System Admin
  document.addEventListener('DOMContentLoaded', function() {
    // Check session validity first
    if (!authService.redirectIfInvalidSession()) {
      return;
    }
    
    const token = localStorage.getItem('token');
    const userData = localStorage.getItem('user');
    
    if (!token || !userData) {
      window.location.href = '/login/lgu-pmt';
      return;
    }
    
    try {
      const user = JSON.parse(userData);
      
      // Check if user is System Admin
      if (user.role !== 'SYS.AD') {
        // Redirect to appropriate dashboard based on role
        if (user.role === 'SYS.AD' && user.subRole === 'EXECUTIVE') {
          window.location.href = '/dashboard/executive-viewer/ExecutiveDashboard';
        } else {
          window.location.href = '/login/lgu-pmt';
        }
        return;
      }
      
      console.log('System Admin Dashboard loaded for user:', user.username);
      
      // Auto-refresh dashboard data every 5 minutes
      setInterval(() => {
        window.location.reload();
      }, 5 * 60 * 1000);
      
    } catch (error) {
      console.error('Error parsing user data:', error);
      window.location.href = '/login/lgu-pmt';
    }
  });
</script> 