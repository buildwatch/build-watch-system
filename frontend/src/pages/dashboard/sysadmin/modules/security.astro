export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import SysAdminLayout from '../../../../components/SysAdminLayout.astro';

// Security metrics data
const securityMetrics = [
  { title: 'Active Threats', value: '0', change: '-2', icon: 'M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z', color: 'green' },
  { title: 'Failed Logins', value: '12', change: '+3', icon: 'M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z', color: 'red' },
  { title: 'Locked Accounts', value: '3', change: '-1', icon: 'M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M12 2.25a9.75 9.75 0 100 19.5 9.75 9.75 0 000-19.5z', color: 'orange' },
  { title: 'Security Score', value: '92%', change: '+5%', icon: 'M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z', color: 'blue' }
];

// Security events data
const securityEvents = [
  { id: 1, type: 'Failed Login', user: 'Maria Santos', ip: '192.168.1.45', time: '2025-07-14 09:00', status: 'warning', location: 'Manila, PH' },
  { id: 2, type: 'Password Changed', user: 'Engr. Roberto Cruz', ip: '192.168.1.23', time: '2025-07-13 15:30', status: 'info', location: 'Quezon City, PH' },
  { id: 3, type: 'Account Locked', user: 'John Doe', ip: '203.45.67.89', time: '2025-07-12 18:00', status: 'critical', location: 'Unknown' },
  { id: 4, type: 'Suspicious Activity', user: 'Unknown', ip: '185.67.23.45', time: '2025-07-12 16:30', status: 'critical', location: 'International' },
  { id: 5, type: '2FA Enabled', user: 'Admin User', ip: '192.168.1.10', time: '2025-07-12 14:20', status: 'info', location: 'Manila, PH' },
  { id: 6, type: 'Session Expired', user: 'LGU Staff', ip: '192.168.1.67', time: '2025-07-12 12:15', status: 'warning', location: 'Makati, PH' }
];

// Security policies
const securityPolicies = [
  { id: 1, name: 'Password Policy', status: 'active', description: 'Minimum 8 characters, uppercase, numbers, special chars', lastUpdated: '2025-07-10' },
  { id: 2, name: 'Session Timeout', status: 'active', description: '30 minutes of inactivity', lastUpdated: '2025-07-08' },
  { id: 3, name: 'IP Whitelist', status: 'inactive', description: 'Restrict access to specific IP ranges', lastUpdated: '2025-07-05' },
  { id: 4, name: '2FA Requirement', status: 'active', description: 'Required for all admin accounts', lastUpdated: '2025-07-03' },
  { id: 5, name: 'Login Attempts', status: 'active', description: '5 attempts before account lockout', lastUpdated: '2025-07-01' }
];

// Threat intelligence
const threatIntelligence = [
  { id: 1, type: 'IP Address', value: '185.67.23.45', threat: 'high', source: 'Known malicious IP', lastSeen: '2025-07-12 16:30' },
  { id: 2, type: 'User Agent', value: 'Suspicious Browser', threat: 'medium', source: 'Automated scanning', lastSeen: '2025-07-11 10:15' },
  { id: 3, type: 'Geographic', value: 'International Access', threat: 'low', source: 'Unusual location', lastSeen: '2025-07-10 22:45' }
];

// Access control rules
const accessControlRules = [
  { id: 1, name: 'Admin Access', users: 5, ipRanges: ['192.168.1.0/24'], timeRestriction: '24/7', status: 'active' },
  { id: 2, name: 'LGU Staff Access', users: 45, ipRanges: ['192.168.1.0/24', '10.0.0.0/8'], timeRestriction: '8AM-6PM', status: 'active' },
  { id: 3, name: 'External Access', users: 12, ipRanges: ['*'], timeRestriction: '9AM-5PM', status: 'active' },
  { id: 4, name: 'Emergency Access', users: 3, ipRanges: ['*'], timeRestriction: '24/7', status: 'inactive' }
];

let error = '';
---
<Layout title="Security Center">
  <SysAdminLayout>
    <style>
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      .animate-fade-in-up {
        animation: fadeInUp 0.6s ease-out forwards;
      }
      
      .animate-delay-100 { animation-delay: 0.1s; }
      .animate-delay-200 { animation-delay: 0.2s; }
      .animate-delay-300 { animation-delay: 0.3s; }
      .animate-delay-400 { animation-delay: 0.4s; }
      .animate-delay-500 { animation-delay: 0.5s; }
      .animate-delay-600 { animation-delay: 0.6s; }
      .animate-delay-700 { animation-delay: 0.7s; }
      .animate-delay-800 { animation-delay: 0.8s; }
    </style>
    
    <div class="p-8 bg-gradient-to-br from-gray-50 to-white min-h-screen">
      <!-- Header -->
      <div class="mb-8 animate-fade-in-up animate-delay-100">
        <h1 class="text-3xl font-bold text-gray-800 mb-2">Security Center</h1>
        <p class="text-gray-600">Monitor threats, manage access control, and maintain system security</p>
      </div>

      <!-- Security Metrics Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8 animate-fade-in-up animate-delay-200">
        {securityMetrics.map(metric => (
          <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300">
            <div class="flex items-center justify-between mb-4">
              <div class={`w-12 h-12 rounded-xl flex items-center justify-center shadow-lg ${
                metric.color === 'green' ? 'bg-gradient-to-br from-green-500 to-green-600' :
                metric.color === 'red' ? 'bg-gradient-to-br from-red-500 to-red-600' :
                metric.color === 'orange' ? 'bg-gradient-to-br from-orange-500 to-orange-600' :
                'bg-gradient-to-br from-blue-500 to-blue-600'
              }`}>
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={metric.icon}></path>
                </svg>
              </div>
              <span class={`text-sm font-semibold px-2 py-1 rounded-full ${
                metric.change.startsWith('+') ? 'text-red-600 bg-red-100' : 'text-green-600 bg-green-100'
              }`}>
                {metric.change}
              </span>
            </div>
            <h3 class="text-2xl font-bold text-gray-800 mb-1">{metric.value}</h3>
            <p class="text-gray-600 text-sm">{metric.title}</p>
          </div>
        ))}
      </div>

      <!-- Main Content Grid -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Security Events -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up animate-delay-300">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-xl font-bold text-gray-800 flex items-center">
              <svg class="w-5 h-5 mr-2 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
              Recent Security Events
            </h2>
            <button class="px-4 py-2 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-xl font-semibold shadow hover:from-red-600 hover:to-red-500 transition-all text-sm">
              Run Security Scan
            </button>
          </div>
          
          <div class="space-y-3 max-h-96 overflow-y-auto">
            {securityEvents.map(event => (
              <div class="flex items-center p-4 rounded-xl border border-gray-200 hover:bg-gray-50 transition-all">
                <div class={`w-3 h-3 rounded-full mr-4 ${
                  event.status === 'critical' ? 'bg-red-500' :
                  event.status === 'warning' ? 'bg-yellow-500' :
                  'bg-blue-500'
                }`}></div>
                <div class="flex-1">
                  <div class="flex items-center justify-between mb-1">
                    <h3 class="font-semibold text-gray-800 text-sm">{event.type}</h3>
                    <span class="text-xs text-gray-500">{event.time}</span>
                  </div>
                  <div class="flex items-center justify-between text-xs text-gray-600">
                    <span>User: {event.user}</span>
                    <span>IP: {event.ip}</span>
                    <span>{event.location}</span>
                  </div>
                </div>
                <span class={`px-2 py-1 rounded text-xs font-semibold ml-3 ${
                  event.status === 'critical' ? 'bg-red-100 text-red-700' :
                  event.status === 'warning' ? 'bg-yellow-100 text-yellow-700' :
                  'bg-blue-100 text-blue-700'
                }`}>{event.status}</span>
              </div>
            ))}
          </div>
        </div>

        <!-- Threat Intelligence -->
        <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 animate-fade-in-up animate-delay-400">
          <div class="flex items-center justify-between mb-6">
            <h2 class="text-xl font-bold text-gray-800 flex items-center">
              <svg class="w-5 h-5 mr-2 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
              </svg>
              Threat Intelligence
            </h2>
            <button class="px-4 py-2 bg-gradient-to-r from-orange-500 to-orange-600 text-white rounded-xl font-semibold shadow hover:from-orange-600 hover:to-orange-500 transition-all text-sm">
              Update Threats
            </button>
          </div>
          
          <div class="space-y-4">
            {threatIntelligence.map(threat => (
              <div class="bg-gray-50 rounded-xl p-4 border border-gray-200">
                <div class="flex items-center justify-between mb-2">
                  <div class="flex items-center">
                    <div class={`w-3 h-3 rounded-full mr-3 ${
                      threat.threat === 'high' ? 'bg-red-500' :
                      threat.threat === 'medium' ? 'bg-yellow-500' :
                      'bg-green-500'
                    }`}></div>
                    <h3 class="font-semibold text-gray-800 text-sm">{threat.type}: {threat.value}</h3>
                  </div>
                  <span class={`px-2 py-1 rounded text-xs font-semibold ${
                    threat.threat === 'high' ? 'bg-red-100 text-red-700' :
                    threat.threat === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                    'bg-green-100 text-green-700'
                  }`}>{threat.threat}</span>
                </div>
                <p class="text-xs text-gray-600 mb-1">{threat.source}</p>
                <p class="text-xs text-gray-500">Last seen: {threat.lastSeen}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Security Policies -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8 animate-fade-in-up animate-delay-500">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-bold text-gray-800 flex items-center">
            <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
            </svg>
            Security Policies
          </h2>
          <button class="px-4 py-2 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl font-semibold shadow hover:from-blue-600 hover:to-blue-500 transition-all text-sm">
            Add Policy
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {securityPolicies.map(policy => (
            <div class="bg-gray-50 rounded-xl p-4 border border-gray-200 hover:shadow-md transition-all">
              <div class="flex items-center justify-between mb-3">
                <h3 class="font-semibold text-gray-800">{policy.name}</h3>
                <span class={`px-2 py-1 rounded text-xs font-semibold ${
                  policy.status === 'active' ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'
                }`}>{policy.status}</span>
              </div>
              <p class="text-sm text-gray-600 mb-3">{policy.description}</p>
              <div class="flex items-center justify-between text-xs text-gray-500">
                <span>Updated: {policy.lastUpdated}</span>
                <div class="flex space-x-2">
                  <button class="text-blue-600 hover:text-blue-800 transition-all">Edit</button>
                  <button class="text-red-600 hover:text-red-800 transition-all">Delete</button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Access Control -->
      <div class="bg-white rounded-2xl shadow-lg border border-gray-100 p-6 mb-8 animate-fade-in-up animate-delay-600">
        <div class="flex items-center justify-between mb-6">
          <h2 class="text-xl font-bold text-gray-800 flex items-center">
            <svg class="w-5 h-5 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
            </svg>
            Access Control Rules
          </h2>
          <button class="px-4 py-2 bg-gradient-to-r from-purple-500 to-purple-600 text-white rounded-xl font-semibold shadow hover:from-purple-600 hover:to-purple-500 transition-all text-sm">
            Add Rule
          </button>
        </div>
        
        <div class="overflow-x-auto rounded-xl border border-gray-100">
          <table class="min-w-full table-auto border-collapse">
            <thead>
              <tr class="bg-gray-50 text-gray-700">
                <th class="px-4 py-3 text-left text-sm font-semibold">Rule Name</th>
                <th class="px-4 py-3 text-left text-sm font-semibold">Users</th>
                <th class="px-4 py-3 text-left text-sm font-semibold">IP Ranges</th>
                <th class="px-4 py-3 text-left text-sm font-semibold">Time Restriction</th>
                <th class="px-4 py-3 text-left text-sm font-semibold">Status</th>
                <th class="px-4 py-3 text-left text-sm font-semibold">Actions</th>
              </tr>
            </thead>
            <tbody>
              {accessControlRules.map(rule => (
                <tr key={rule.id} class="border-b hover:bg-gray-50 transition-all">
                  <td class="px-4 py-3 text-sm font-medium">{rule.name}</td>
                  <td class="px-4 py-3 text-sm">{rule.users}</td>
                  <td class="px-4 py-3 text-sm">
                    <span class="text-xs bg-gray-100 px-2 py-1 rounded">{rule.ipRanges.join(', ')}</span>
                  </td>
                  <td class="px-4 py-3 text-sm">{rule.timeRestriction}</td>
                  <td class="px-4 py-3 text-sm">
                    <span class={`px-2 py-1 rounded text-xs font-semibold ${
                      rule.status === 'active' ? 'bg-green-100 text-green-700' : 'bg-gray-100 text-gray-600'
                    }`}>{rule.status}</span>
                  </td>
                  <td class="px-4 py-3 text-sm">
                    <button class="text-blue-600 hover:text-blue-800 mr-2 transition-all text-xs">Edit</button>
                    <button class="text-red-600 hover:text-red-800 transition-all text-xs">Delete</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      <!-- Security Actions -->
      <div class="bg-gradient-to-r from-gray-50 to-gray-100 border border-gray-200 rounded-2xl p-6 animate-fade-in-up animate-delay-700">
        <h2 class="text-xl font-bold text-gray-800 mb-4">Security Actions</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <button class="flex items-center justify-center px-6 py-3 bg-gradient-to-r from-red-500 to-red-600 text-white rounded-xl font-semibold shadow hover:from-red-600 hover:to-red-500 transition-all">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
            Lock All Users
          </button>
          <button class="flex items-center justify-center px-6 py-3 bg-gradient-to-r from-orange-500 to-orange-600 text-white rounded-xl font-semibold shadow hover:from-orange-600 hover:to-orange-500 transition-all">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 5.636l-3.536 3.536m0 5.656l3.536 3.536M9.172 9.172L5.636 5.636m3.536 9.192L5.636 18.364M12 2.25a9.75 9.75 0 100 19.5 9.75 9.75 0 000-19.5z"></path>
            </svg>
            Force Logout
          </button>
          <button class="flex items-center justify-center px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl font-semibold shadow hover:from-blue-600 hover:to-blue-500 transition-all">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Clear Sessions
          </button>
          <button class="flex items-center justify-center px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl font-semibold shadow hover:from-green-600 hover:to-green-500 transition-all">
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            Security Audit
          </button>
        </div>
      </div>
    </div>
  </SysAdminLayout>
</Layout> 