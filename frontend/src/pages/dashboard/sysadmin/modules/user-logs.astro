export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import SysAdminLayout from '../../../../components/SysAdminLayout.astro';

const API_URL = 'http://localhost:3000/api/activity-logs';
const page = Astro.url.searchParams.get('page') || 1;
const search = Astro.url.searchParams.get('search') || '';
const action = Astro.url.searchParams.get('action') || '';
const entityType = Astro.url.searchParams.get('entityType') || '';
const level = Astro.url.searchParams.get('level') || '';
const module = Astro.url.searchParams.get('module') || '';
const status = Astro.url.searchParams.get('status') || '';
const dateFrom = Astro.url.searchParams.get('dateFrom') || '';
const dateTo = Astro.url.searchParams.get('dateTo') || '';
const limit = 20;
let logs = [];
let summary = { totalActivities: 0, todayActivities: 0, failedLogins: 0, activeUsers: 0 };
let pagination = { page: 1, limit: 20, total: 0, pages: 1 };
let error = '';

try {
  const token = Astro.cookies.get('token')?.value || '';
  
  // Fetch summary data
  const summaryRes = await fetch(`${API_URL}/summary`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  if (summaryRes.ok) {
    const summaryData = await summaryRes.json();
    if (summaryData.success) {
      summary = summaryData.summary;
    }
  }

  // Fetch logs with filters
  const params = new URLSearchParams({ page, limit });
  if (search) params.append('search', search);
  if (action) params.append('action', action);
  if (entityType) params.append('entityType', entityType);
  if (level) params.append('level', level);
  if (module) params.append('module', module);
  if (status) params.append('status', status);
  if (dateFrom) params.append('dateFrom', dateFrom);
  if (dateTo) params.append('dateTo', dateTo);
  
  const res = await fetch(`${API_URL}?${params.toString()}`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const data = await res.json();
  if (data.success) {
    logs = data.logs;
    pagination = data.pagination;
  } else {
    error = data.error || 'Failed to fetch activity logs.';
  }
} catch (err) {
  error = 'Failed to fetch activity logs.';
}

// Get action categories for filtering
const actionCategories = {
  'Authentication': ['LOGIN', 'LOGOUT', 'PASSWORD_CHANGE', 'FAILED_LOGIN', 'ACCOUNT_LOCKOUT', 'RESET_PASSWORD'],
  'User Management': ['CREATE_USER', 'UPDATE_USER', 'DELETE_USER', 'ENABLE_USER', 'DISABLE_USER', 'CHANGE_ROLE'],
  'System Admin': ['UPDATE_CONFIGURATION', 'BACKUP_CREATED', 'BACKUP_RESTORED', 'SYSTEM_MAINTENANCE', 'SECURITY_UPDATE'],
  'Data Management': ['CREATE_ANNOUNCEMENT', 'UPDATE_ANNOUNCEMENT', 'DELETE_ANNOUNCEMENT', 'EXPORT_DATA', 'IMPORT_DATA'],
  'Audit & Monitoring': ['VIEW_AUDIT_LOG', 'EXPORT_AUDIT_LOG', 'SECURITY_ALERT', 'PERFORMANCE_ALERT']
};

const levelColors = {
  'Info': 'bg-blue-100 text-blue-700 border-blue-200',
  'Warning': 'bg-yellow-100 text-yellow-700 border-yellow-200',
  'Error': 'bg-red-100 text-red-700 border-red-200',
  'Critical': 'bg-purple-100 text-purple-700 border-purple-200'
};

const statusColors = {
  'Success': 'bg-green-100 text-green-700 border-green-200',
  'Failed': 'bg-red-100 text-red-700 border-red-200',
  'Pending': 'bg-yellow-100 text-yellow-700 border-yellow-200'
};
---

<Layout title="Audit Trail & Activity Monitoring">
  <SysAdminLayout>
    <style>
      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }
      
      .animate-fade-in-up {
        animation: fadeInUp 0.6s ease-out forwards;
      }
      
      .animate-delay-100 { animation-delay: 0.1s; }
      .animate-delay-200 { animation-delay: 0.2s; }
      .animate-delay-300 { animation-delay: 0.3s; }
      .animate-delay-400 { animation-delay: 0.4s; }
      .animate-delay-500 { animation-delay: 0.5s; }
      .animate-delay-600 { animation-delay: 0.6s; }
      .animate-delay-700 { animation-delay: 0.7s; }
      .animate-delay-800 { animation-delay: 0.8s; }
      .animate-delay-900 { animation-delay: 0.9s; }
      .animate-delay-1000 { animation-delay: 1.0s; }
    </style>

    <section class="p-6 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 min-h-screen">
      <!-- Header Section -->
      <div class="mb-8 animate-fade-in-up">
        <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
          <div>
            <h1 class="text-3xl font-bold text-gray-900 mb-2">Audit Trail & Activity Monitoring</h1>
            <p class="text-gray-600">Comprehensive transparency and security monitoring for all system activities</p>
          </div>
          <div class="flex gap-3">
            <button id="exportLogs" class="px-4 py-2 bg-gradient-to-r from-emerald-500 to-teal-600 text-white rounded-xl font-semibold shadow-lg hover:from-emerald-600 hover:to-teal-700 transition-all duration-200 flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
              </svg>
              Export CSV
            </button>
            <button id="refreshLogs" class="px-4 py-2 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-xl font-semibold shadow-lg hover:from-blue-600 hover:to-indigo-700 transition-all duration-200 flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Refresh
            </button>
          </div>
        </div>
      </div>

      <!-- Real-time Activity Summary Cards -->
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-2xl shadow-xl border border-gray-100 p-6 hover:shadow-2xl transition-all duration-300 animate-fade-in-up animate-delay-100">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600 mb-1">Total Activities</p>
              <p class="text-3xl font-bold text-gray-900">{summary.totalActivities}</p>
            </div>
            <div class="w-12 h-12 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-xl border border-gray-100 p-6 hover:shadow-2xl transition-all duration-300 animate-fade-in-up animate-delay-200">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600 mb-1">Today's Activities</p>
              <p class="text-3xl font-bold text-emerald-600">{summary.todayActivities}</p>
            </div>
            <div class="w-12 h-12 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-xl border border-gray-100 p-6 hover:shadow-2xl transition-all duration-300 animate-fade-in-up animate-delay-300">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600 mb-1">Failed Logins</p>
              <p class="text-3xl font-bold text-red-600">{summary.failedLogins}</p>
            </div>
            <div class="w-12 h-12 bg-gradient-to-br from-red-500 to-pink-600 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-2xl shadow-xl border border-gray-100 p-6 hover:shadow-2xl transition-all duration-300 animate-fade-in-up animate-delay-400">
          <div class="flex items-center justify-between">
            <div>
              <p class="text-sm font-medium text-gray-600 mb-1">Active Users</p>
              <p class="text-3xl font-bold text-purple-600">{summary.activeUsers}</p>
            </div>
            <div class="w-12 h-12 bg-gradient-to-br from-purple-500 to-violet-600 rounded-xl flex items-center justify-center">
              <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
              </svg>
            </div>
          </div>
        </div>
      </div>

      <!-- Advanced Filters Section -->
      <div class="bg-white rounded-2xl shadow-xl border border-gray-100 p-6 mb-8 animate-fade-in-up animate-delay-500">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Advanced Activity Filters</h3>
        <form method="get" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Search Activities</label>
            <input type="text" name="search" value={search} placeholder="Search by details, action, or user..." 
                   class="w-full border border-gray-300 rounded-xl px-4 py-3 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Action Category</label>
            <select name="action" class="w-full border border-gray-300 rounded-xl px-4 py-3 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              <option value="">All Actions</option>
              {Object.entries(actionCategories).map(([category, actions]) => (
                <optgroup label={category}>
                  {actions.map(action => (
                    <option value={action} selected={action === action}>{action}</option>
                  ))}
                </optgroup>
              ))}
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Severity Level</label>
            <select name="level" class="w-full border border-gray-300 rounded-xl px-4 py-3 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              <option value="">All Levels</option>
              <option value="Info" selected={level === 'Info'}>Info</option>
              <option value="Warning" selected={level === 'Warning'}>Warning</option>
              <option value="Error" selected={level === 'Error'}>Error</option>
              <option value="Critical" selected={level === 'Critical'}>Critical</option>
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
            <select name="status" class="w-full border border-gray-300 rounded-xl px-4 py-3 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              <option value="">All Status</option>
              <option value="Success" selected={status === 'Success'}>Success</option>
              <option value="Failed" selected={status === 'Failed'}>Failed</option>
              <option value="Pending" selected={status === 'Pending'}>Pending</option>
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Date From</label>
            <input type="date" name="dateFrom" value={dateFrom} 
                   class="w-full border border-gray-300 rounded-xl px-4 py-3 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Date To</label>
            <input type="date" name="dateTo" value={dateTo} 
                   class="w-full border border-gray-300 rounded-xl px-4 py-3 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all" />
          </div>
          
          <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Module</label>
            <select name="module" class="w-full border border-gray-300 rounded-xl px-4 py-3 shadow-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all">
              <option value="">All Modules</option>
              <option value="User Management" selected={module === 'User Management'}>User Management</option>
              <option value="System Admin" selected={module === 'System Admin'}>System Admin</option>
              <option value="Authentication" selected={module === 'Authentication'}>Authentication</option>
              <option value="Data Management" selected={module === 'Data Management'}>Data Management</option>
              <option value="Audit & Monitoring" selected={module === 'Audit & Monitoring'}>Audit & Monitoring</option>
            </select>
          </div>
          
          <div class="flex items-end">
            <button type="submit" class="w-full px-6 py-3 bg-gradient-to-r from-blue-600 to-indigo-700 text-white rounded-xl font-semibold shadow-lg hover:from-blue-700 hover:to-indigo-800 transition-all duration-200 flex items-center justify-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
              Apply Filters
            </button>
          </div>
        </form>
      </div>

      <!-- Activity Logs Table -->
      <div class="bg-white rounded-2xl shadow-xl border border-gray-100 overflow-hidden animate-fade-in-up animate-delay-600">
        <div class="px-6 py-4 border-b border-gray-200 bg-gradient-to-r from-gray-50 to-gray-100">
          <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <h2 class="text-xl font-bold text-gray-900">Activity Logs</h2>
            <div class="flex items-center gap-2 text-sm text-gray-600">
              <span>Showing {logs.length} of {pagination.total} activities</span>
            </div>
          </div>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Timestamp</th>
                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>
                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Level</th>
                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Details</th>
                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">IP Address</th>
                <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              {error ? (
                <tr>
                  <td colspan="8" class="px-6 py-8 text-center">
                    <div class="flex flex-col items-center gap-2">
                      <svg class="w-12 h-12 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                      </svg>
                      <p class="text-red-600 font-medium">{error}</p>
                    </div>
                  </td>
                </tr>
              ) : logs.length === 0 ? (
                <tr>
                  <td colspan="8" class="px-6 py-8 text-center">
                    <div class="flex flex-col items-center gap-2">
                      <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      <p class="text-gray-500 font-medium">No activity logs found</p>
                      <p class="text-gray-400 text-sm">Try adjusting your filters or check back later</p>
                    </div>
                  </td>
                </tr>
              ) : (
                logs.map(log => (
                  <tr key={log.id} class="hover:bg-gray-50 transition-colors duration-150">
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="text-sm text-gray-900 font-medium">
                        {new Date(log.createdAt).toLocaleDateString()}
                      </div>
                      <div class="text-xs text-gray-500">
                        {new Date(log.createdAt).toLocaleTimeString()}
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <div class="flex items-center">
                        <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-full flex items-center justify-center text-white text-xs font-semibold">
                          {log.userName ? log.userName.charAt(0).toUpperCase() : 'S'}
                        </div>
                        <div class="ml-3">
                          <div class="text-sm font-medium text-gray-900">{log.userName || 'System'}</div>
                          <div class="text-xs text-gray-500">{log.userId || 'System Activity'}</div>
                        </div>
                      </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800 border border-blue-200">
                        {log.action}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${levelColors[log.level] || 'bg-gray-100 text-gray-700 border-gray-200'}`}>
                        {log.level || 'Info'}
                      </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                      <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-medium border ${statusColors[log.status] || 'bg-gray-100 text-gray-700 border-gray-200'}`}>
                        {log.status || 'Success'}
                      </span>
                    </td>
                    <td class="px-6 py-4">
                      <div class="text-sm text-gray-900 max-w-xs truncate" title={log.details}>
                        {log.details || 'No details provided'}
                      </div>
                      {log.entityType && (
                        <div class="text-xs text-gray-500 mt-1">
                          Entity: {log.entityType} {log.entityId ? `(${log.entityId})` : ''}
                        </div>
                      )}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {log.ipAddress || '-'}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <button onclick={`viewLogDetails('${log.id}')`} class="text-blue-600 hover:text-blue-900 transition-colors">
                        View Details
                      </button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        </div>
        
        <!-- Pagination -->
        {pagination.pages > 1 && (
          <div class="px-6 py-4 border-t border-gray-200 bg-gray-50">
            <div class="flex items-center justify-between">
              <div class="text-sm text-gray-700">
                Showing {((pagination.page - 1) * pagination.limit) + 1} to {Math.min(pagination.page * pagination.limit, pagination.total)} of {pagination.total} results
              </div>
              <div class="flex items-center gap-2">
                <a href={`?page=${pagination.page - 1}${search ? `&search=${encodeURIComponent(search)}` : ''}${action ? `&action=${encodeURIComponent(action)}` : ''}${level ? `&level=${encodeURIComponent(level)}` : ''}${status ? `&status=${encodeURIComponent(status)}` : ''}${dateFrom ? `&dateFrom=${encodeURIComponent(dateFrom)}` : ''}${dateTo ? `&dateTo=${encodeURIComponent(dateTo)}` : ''}`} 
                   class={`px-3 py-2 rounded-lg text-sm font-medium transition-all ${pagination.page === 1 ? 'bg-gray-200 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300'}`}>
                  Previous
                </a>
                
                {Array.from({ length: Math.min(5, pagination.pages) }, (_, i) => {
                  const pageNum = Math.max(1, Math.min(pagination.pages - 4, pagination.page - 2)) + i;
                  return (
                    <a href={`?page=${pageNum}${search ? `&search=${encodeURIComponent(search)}` : ''}${action ? `&action=${encodeURIComponent(action)}` : ''}${level ? `&level=${encodeURIComponent(level)}` : ''}${status ? `&status=${encodeURIComponent(status)}` : ''}${dateFrom ? `&dateFrom=${encodeURIComponent(dateFrom)}` : ''}${dateTo ? `&dateTo=${encodeURIComponent(dateTo)}` : ''}`}
                       class={`px-3 py-2 rounded-lg text-sm font-medium transition-all ${pageNum === pagination.page ? 'bg-blue-600 text-white' : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300'}`}>
                      {pageNum}
                    </a>
                  );
                })}
                
                <a href={`?page=${pagination.page + 1}${search ? `&search=${encodeURIComponent(search)}` : ''}${action ? `&action=${encodeURIComponent(action)}` : ''}${level ? `&level=${encodeURIComponent(level)}` : ''}${status ? `&status=${encodeURIComponent(status)}` : ''}${dateFrom ? `&dateFrom=${encodeURIComponent(dateFrom)}` : ''}${dateTo ? `&dateTo=${encodeURIComponent(dateTo)}` : ''}`}
                   class={`px-3 py-2 rounded-lg text-sm font-medium transition-all ${pagination.page === pagination.pages ? 'bg-gray-200 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-100 border border-gray-300'}`}>
                  Next
                </a>
              </div>
            </div>
          </div>
        )}
      </div>

      <!-- Log Details Modal -->
      <div id="logDetailsModal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
        <div class="flex items-center justify-center min-h-screen p-4">
          <div class="bg-white rounded-2xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-6 border-b border-gray-200">
              <div class="flex items-center justify-between">
                <h3 class="text-lg font-semibold text-gray-900">Activity Log Details</h3>
                <button onclick="closeLogDetails()" class="text-gray-400 hover:text-gray-600 transition-colors">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                </button>
              </div>
            </div>
            <div id="logDetailsContent" class="p-6">
              <!-- Content will be populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>

      <script>
        // Export functionality
        document.getElementById('exportLogs').addEventListener('click', function() {
          const currentUrl = new URL(window.location);
          currentUrl.searchParams.set('export', 'csv');
          window.location.href = currentUrl.toString();
        });

        // Refresh functionality
        document.getElementById('refreshLogs').addEventListener('click', function() {
          window.location.reload();
        });

        // View log details
        function viewLogDetails(logId) {
          const modal = document.getElementById('logDetailsModal');
          const content = document.getElementById('logDetailsContent');
          
          // Find the log data (in a real app, you'd fetch this from the server)
          const log = window.logsData ? window.logsData.find(l => l.id === logId) : null;
          
          if (log) {
            content.innerHTML = `
              <div class="space-y-4">
                <div class="grid grid-cols-2 gap-4">
                  <div>
                    <label class="block text-sm font-medium text-gray-700">Timestamp</label>
                    <p class="text-sm text-gray-900">${new Date(log.createdAt).toLocaleString()}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">User</label>
                    <p class="text-sm text-gray-900">${log.userName || 'System'}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">Action</label>
                    <p class="text-sm text-gray-900">${log.action}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">Level</label>
                    <p class="text-sm text-gray-900">${log.level || 'Info'}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">Status</label>
                    <p class="text-sm text-gray-900">${log.status || 'Success'}</p>
                  </div>
                  <div>
                    <label class="block text-sm font-medium text-gray-700">IP Address</label>
                    <p class="text-sm text-gray-900">${log.ipAddress || 'N/A'}</p>
                  </div>
                </div>
                <div>
                  <label class="block text-sm font-medium text-gray-700">Details</label>
                  <p class="text-sm text-gray-900 mt-1">${log.details || 'No details provided'}</p>
                </div>
                ${log.entityType ? `
                <div>
                  <label class="block text-sm font-medium text-gray-700">Entity Information</label>
                  <p class="text-sm text-gray-900 mt-1">Type: ${log.entityType}${log.entityId ? `, ID: ${log.entityId}` : ''}</p>
                </div>
                ` : ''}
                ${log.userAgent ? `
                <div>
                  <label class="block text-sm font-medium text-gray-700">User Agent</label>
                  <p class="text-sm text-gray-900 mt-1 break-all">${log.userAgent}</p>
                </div>
                ` : ''}
              </div>
            `;
          } else {
            content.innerHTML = '<p class="text-gray-500">Log details not available</p>';
          }
          
          modal.classList.remove('hidden');
        }

        // Close modal
        function closeLogDetails() {
          document.getElementById('logDetailsModal').classList.add('hidden');
        }

        // Close modal when clicking outside
        document.getElementById('logDetailsModal').addEventListener('click', function(e) {
          if (e.target === this) {
            closeLogDetails();
          }
        });

        // Auto-refresh every 30 seconds for real-time monitoring
        setInterval(function() {
          // Only refresh if user is not actively interacting
          if (!document.hidden) {
            window.location.reload();
          }
        }, 30000);
      </script>
    </section>
  </SysAdminLayout>
</Layout> 