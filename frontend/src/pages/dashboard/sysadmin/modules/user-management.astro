export const prerender = false;
---
import Layout from '../../../../layouts/Layout.astro';
import SysAdminLayout from '../../../../components/SysAdminLayout.astro';

// Determine API URL based on environment
const isProduction = import.meta.env.PROD;
const isLocalhost = Astro.url.hostname === 'localhost' || Astro.url.hostname === '127.0.0.1' || !isProduction;
const API_URL = isLocalhost 
  ? 'http://localhost:3000/api/users' 
  : (Astro.url.protocol === 'https:' 
      ? `${Astro.url.protocol}//${Astro.url.hostname}/api/users`
      : `http://${Astro.url.hostname}:3000/api/users`);
const page = Astro.url.searchParams.get('page') || 1;
const search = Astro.url.searchParams.get('search') || '';
const sortBy = Astro.url.searchParams.get('sortBy') || 'createdAt';
const sortOrder = Astro.url.searchParams.get('sortOrder') || 'desc';
const filterGroup = Astro.url.searchParams.get('filterGroup') || '';
const filterDepartment = Astro.url.searchParams.get('filterDepartment') || '';
const limit = 10;
let users = [];
let deletedUsers = [];
let deletedUsersHistory = [];
let availableDepartments = [];
let departmentOptionsHTML = '';
let pagination = { page: 1, limit: 10, total: 0, pages: 1 };
let error = '';

try {
  const token = Astro.cookies.get('token')?.value || '';
  const params = new URLSearchParams({ page, limit, sortBy, sortOrder });
  if (search) params.append('search', search);
  if (filterGroup) params.append('filterGroup', filterGroup);
  if (filterDepartment) params.append('filterDepartment', filterDepartment);
  const res = await fetch(`${API_URL}?${params.toString()}`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const data = await res.json();
  if (data.success) {
    users = data.users;
    pagination = data.pagination;
  } else {
    error = data.error || 'Failed to fetch users.';
  }
  
  // Fetch deleted users
  const deletedRes = await fetch(`${API_URL}/deleted`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const deletedData = await deletedRes.json();
  if (deletedData.success) {
    deletedUsers = deletedData.users || [];
  }
  
  // Fetch deleted users history (permanently deleted users)
  const deletedHistoryRes = await fetch(`${API_URL}/deleted-history`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const deletedHistoryData = await deletedHistoryRes.json();
  console.log('🗄️ Deleted history API response:', deletedHistoryData);
  if (deletedHistoryData.success) {
    deletedUsersHistory = deletedHistoryData.users || [];
    console.log(`📊 Found ${deletedUsersHistory.length} permanently deleted users:`, deletedUsersHistory);
  } else {
    console.log('❌ Failed to fetch deleted users history:', deletedHistoryData.error);
  }
  
  // Fetch available departments from existing users
  const departmentsRes = await fetch(`${API_URL}/departments`, {
    headers: { 'Authorization': `Bearer ${token}` }
  });
  const departmentsData = await departmentsRes.json();
  if (departmentsData.success) {
    availableDepartments = departmentsData.departments || [];
    // Build department options HTML
    departmentOptionsHTML = availableDepartments.map(department => {
      const isSelected = filterDepartment === department ? 'selected' : '';
      return `<option value="${department}" ${isSelected}>${department}</option>`;
    }).join('');
  }
} catch (err) {
  error = 'Failed to fetch users.';
}
---
<Layout title="User Management">
  <SysAdminLayout>
    <style>
      /* Modern Profile Card Styles */
      .profile-card {
        @apply bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 ease-out hover:shadow-2xl hover:border-black/20 hover:-translate-y-2;
        position: relative;
        overflow: hidden;
      }
      
      .profile-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.08), transparent);
        transition: left 0.6s ease-out;
        z-index: 1;
      }
      
      .profile-card > * {
        position: relative;
        z-index: 2;
      }
      
      .profile-card:hover::before {
        left: 100%;
      }
      
      /* Modern Button Styles */
      .btn-primary {
        @apply bg-gradient-to-r from-black to-gray-800 hover:from-gray-900 hover:to-black text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-black/25 border border-black/20;
        position: relative;
        overflow: hidden;
      }
      
      .btn-primary::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .btn-primary > * {
        position: relative;
        z-index: 2;
      }
      
      .btn-primary:hover::before {
        left: 100%;
      }
      
      .btn-secondary {
        @apply bg-gradient-to-r from-gray-700 to-gray-800 hover:from-black hover:to-gray-900 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl border border-gray-600 hover:border-black;
        position: relative;
        overflow: hidden;
      }
      
      .btn-secondary::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .btn-secondary > * {
        position: relative;
        z-index: 2;
      }
      
      .btn-secondary:hover::before {
        left: 100%;
      }
      
      /* Icon Container Styles */
      .icon-container {
        @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .icon-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .icon-container > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container:hover::before {
        left: 100%;
      }
      
      .icon-container:hover {
        @apply transform scale-110 rotate-3;
      }
      
      .icon-container-small {
        @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .icon-container-small::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .icon-container-small > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container-small:hover::before {
        left: 100%;
      }
      
      .icon-container-small:hover {
        @apply transform scale-110 rotate-3;
      }
      
      /* Request Card Hover Effects */
      .request-card {
        position: relative;
        overflow: hidden;
      }
      
      .request-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.05), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .request-card:hover::before {
        left: 100%;
      }
      
      .request-card > * {
        position: relative;
        z-index: 2;
      }
      
      /* Deleted User Card Hover Effects */
      .deleted-user-card {
        position: relative;
        overflow: hidden;
      }
      
      .deleted-user-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(239, 68, 68, 0.1), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .deleted-user-card:hover::before {
        left: 100%;
      }
      
      .deleted-user-card > * {
        position: relative;
        z-index: 2;
      }
      
      /* Ensure date picker works properly */
      input[type="date"] {
        appearance: auto !important;
        -webkit-appearance: auto !important;
        -moz-appearance: auto !important;
        background: white !important;
        cursor: pointer !important;
      }
      
      input[type="date"]::-webkit-calendar-picker-indicator {
        cursor: pointer;
        opacity: 1;
      }
      
      input[type="date"]::-webkit-inner-spin-button,
      input[type="date"]::-webkit-outer-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }
      
      /* Enhanced Modal Animations */
      #modalContent {
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      /* Input field focus animations */
      input:focus, select:focus {
        transform: translateY(-1px);
        box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
      }
      
      /* Button hover animations */
      button:hover {
        transform: translateY(-1px);
      }
      
      /* Character count animations */
      #firstNameCount, #middleNameCount, #lastNameCount, #contactNumberCount {
        transition: all 0.2s ease-in-out;
      }
      
      /* Error message animations */
      .text-red-500 {
        animation: shake 0.5s ease-in-out;
      }
      
      @keyframes shake {
        0%, 100% { transform: translateX(0); }
        25% { transform: translateX(-5px); }
        75% { transform: translateX(5px); }
      }

      /* ✅ ENHANCED: Notification highlighting animation */
      @keyframes highlight-pulse {
        0%, 100% { 
          box-shadow: 0 0 20px rgba(245, 158, 11, 0.3);
          transform: scale(1.02);
        }
        50% { 
          box-shadow: 0 0 30px rgba(245, 158, 11, 0.6);
          transform: scale(1.03);
        }
      }
      
      /* Password strength bar animation */
      #strengthBar {
        transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      /* Check mark animations */
      #lengthCheck, #caseCheck, #underscoreCheck, #strengthCheck {
        transition: all 0.3s ease-in-out;
      }
      
      /* Enhanced Modal Backdrop */
      #addUserModal {
        position: fixed !important;
        top: 0 !important;
        left: 0 !important;
        right: 0 !important;
        bottom: 0 !important;
        width: 100vw !important;
        height: 100vh !important;
        z-index: 9999 !important;
        backdrop-filter: blur(8px) !important;
        -webkit-backdrop-filter: blur(8px) !important;
        background: rgba(0, 0, 0, 0.7) !important;
      }
      
      /* Ensure modal content is properly centered */
      #addUserModal .modal-content {
        position: relative;
        z-index: 10000;
      }
      
      /* Profile Picture Styling */
      .profile-picture-container {
        position: relative;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        overflow: visible; /* Changed from hidden to visible to show full status indicators */
        background: linear-gradient(135deg, #4b5563, #1f2937);
        display: flex;
        align-items: center;
        justify-content: center;
        border: 2px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
        flex-shrink: 0;
      }
      
      .profile-picture-container:hover {
        transform: scale(1.1);
        border-color: rgba(255, 255, 255, 0.3);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }
      
      .profile-picture-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 50%;
        transition: all 0.3s ease;
      }
      
      /* Activity Status Indicator Styling */
      .activity-status-indicator {
        position: absolute;
        bottom: -2px;
        right: -2px;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        border: 3px solid white;
        background: white;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 10;
        cursor: pointer;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
      }
      
      .status-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        transition: all 0.3s ease;
      }
      
      .status-active {
        background-color: #10b981; /* Green for active */
        box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.3);
        animation: activeGlow 2s infinite;
      }
      
      .status-inactive {
        background-color: #6b7280; /* Gray for inactive */
        box-shadow: 0 0 0 2px rgba(107, 114, 128, 0.2);
      }
      
      .status-checking {
        background-color: #f59e0b; /* Amber for checking */
        animation: pulse 2s infinite;
      }
      
      @keyframes pulse {
        0%, 100% {
          opacity: 1;
          transform: scale(1);
        }
        50% {
          opacity: 0.7;
          transform: scale(0.85);
        }
      }
      
      @keyframes activeGlow {
        0%, 100% {
          box-shadow: 0 0 0 3px rgba(16, 185, 129, 0.3);
        }
        50% {
          box-shadow: 0 0 0 5px rgba(16, 185, 129, 0.5);
        }
      }
      
      /* Enhanced tooltip styling for status indicators */
      .activity-status-indicator:hover::after {
        content: attr(title);
        position: absolute;
        bottom: 140%;
        left: 50%;
        transform: translateX(-50%);
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 6px 12px;
        border-radius: 6px;
        font-size: 13px;
        font-weight: 500;
        white-space: nowrap;
        z-index: 1000;
        pointer-events: none;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      }
      
      .activity-status-indicator:hover::before {
        content: '';
        position: absolute;
        bottom: 125%;
        left: 50%;
        transform: translateX(-50%);
        border: 5px solid transparent;
        border-top-color: rgba(0, 0, 0, 0.9);
        z-index: 1000;
        pointer-events: none;
      }
      
      /* Make the indicator more visible on hover */
      .activity-status-indicator:hover {
        transform: scale(1.1);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.25);
      }
      
      .activity-status-indicator:hover .status-dot {
        transform: scale(1.1);
      }
      
      .profile-picture-fallback {
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #4b5563, #1f2937);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 12px;
        font-weight: bold;
        border-radius: 50%;
      }

      /* Deleted History Card Styles */
      .deleted-history-card {
        position: relative;
        overflow: hidden;
      }
      
      .deleted-history-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.05), transparent);
        transition: left 0.6s ease-out;
        z-index: 1;
      }
      
      .deleted-history-card > * {
        position: relative;
        z-index: 2;
      }
      
      .deleted-history-card:hover::before {
        left: 100%;
      }

      /* Enhanced Action Button Styles with Lifting and Shining Effects */
      .btn-action {
        @apply text-sm font-semibold rounded-lg transition-all duration-300 transform hover:scale-105 hover:shadow-lg flex items-center gap-2;
        position: relative;
        overflow: hidden;
      }

      .btn-action::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }

      .btn-action > * {
        position: relative;
        z-index: 2;
      }

      .btn-action:hover::before {
        left: 100%;
      }
    </style>
    <!-- Page Header -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-black to-gray-800 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
              </svg>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-black">User Management</h1>
              <p class="text-sm text-gray-600">System Administrator User Management Dashboard</p>
            </div>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Total Users</p>
            <p class="text-xs text-black font-semibold">{users.length} Active Users</p>
          </div>
          <div class="w-4 h-4 bg-green-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <main class="px-8 py-8">
      <div class="space-y-8">
        
        <!-- Enhanced User Management Overview Cards - 8 Cards in 2 Rows -->
        <div class="space-y-6">
          <!-- Top Row: System Admin Theme -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Total Users</p>
                  <p class="text-2xl font-bold text-black">{users.length}</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-black to-gray-800">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Active Users</p>
                  <p class="text-2xl font-bold text-black">{users.filter(u => u.status === 'active').length}</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-gray-600 to-gray-800">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Total Department</p>
                  <p class="text-2xl font-bold text-black">{new Set(users.map(u => u.department).filter(Boolean)).size}</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-gray-700 to-gray-900">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">Active Department</p>
                  <p class="text-2xl font-bold text-black">{new Set(users.filter(u => u.status === 'active').map(u => u.department).filter(Boolean)).size}</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-gray-500 to-gray-700">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Bottom Row: Group-Specific Colors -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">LGU-PMT Committee</p>
                  <p class="text-2xl font-bold text-black">{users.filter(u => u.group === 'LGU-PMT').length}</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-blue-500 to-blue-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">LGU-IU Officers</p>
                  <p class="text-2xl font-bold text-black">{users.filter(u => u.group === 'LGU-IU').length}</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-amber-500 to-amber-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">EIU Members</p>
                  <p class="text-2xl font-bold text-black">{users.filter(u => u.group === 'EIU').length}</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-green-500 to-green-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                  </svg>
                </div>
              </div>
            </div>
            
            <div class="profile-card p-6">
              <div class="flex items-center justify-between">
                <div>
                  <p class="text-sm text-gray-600">EMS Officers</p>
                  <p class="text-2xl font-bold text-black">{users.filter(u => u.group === 'EMS').length}</p>
                </div>
                <div class="icon-container bg-gradient-to-br from-red-500 to-red-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                  </svg>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Main User Management Section -->
        <div class="profile-card p-8">
          <!-- Enhanced Filters Section -->
          <div class="mb-8">
            <div class="flex items-center gap-3 mb-6">
              <div class="icon-container-small bg-gradient-to-br from-gray-600 to-gray-800">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                </svg>
              </div>
              <h3 class="text-xl font-bold text-black">Filters & Sorting</h3>
            </div>
            
            <div class="bg-gradient-to-br from-gray-50 to-gray-100/50 rounded-2xl p-6 border border-gray-200">
              <form method="get" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div class="space-y-2">
                  <label class="block text-sm font-semibold text-gray-700">Search Users</label>
                  <div class="relative">
              <input
                type="text"
                name="search"
                value={search}
                      placeholder="Search by name, email, or ID..."
                      class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-200 bg-white hover:shadow-md"
              />
                    <div class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                      <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                      </svg>
            </div>
                  </div>
                </div>
                
                <div class="space-y-2">
                  <label class="block text-sm font-semibold text-gray-700">Group Filter</label>
                  <select name="filterGroup" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-200 bg-white hover:shadow-md">
                <option value="">All Groups</option>
                <option value="LGU-PMT" selected={filterGroup === 'LGU-PMT'}>LGU-PMT</option>
                <option value="LGU-IU" selected={filterGroup === 'LGU-IU'}>LGU-IU</option>
                <option value="EIU" selected={filterGroup === 'EIU'}>EIU</option>
                <option value="EMS" selected={filterGroup === 'EMS'}>EMS</option>
              </select>
            </div>
                
                <div class="space-y-2">
                  <label class="block text-sm font-semibold text-gray-700">Department Filter</label>
                  <select name="filterDepartment" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-200 bg-white hover:shadow-md">
                <option value="">All Departments</option>
                <Fragment set:html={departmentOptionsHTML} />
              </select>
            </div>
                
                <div class="space-y-2">
                  <label class="block text-sm font-semibold text-gray-700">Sort By</label>
                  <select name="sortBy" class="w-full px-4 py-3 border border-gray-300 rounded-xl shadow-sm focus:ring-2 focus:ring-black focus:border-transparent transition-all duration-200 bg-white hover:shadow-md">
                <option value="createdAt" selected={sortBy === 'createdAt'}>Date Created</option>
                <option value="fullName" selected={sortBy === 'fullName'}>Full Name</option>
                <option value="group" selected={sortBy === 'group'}>Group</option>
                <option value="department" selected={sortBy === 'department'}>Department</option>
                <option value="role" selected={sortBy === 'role'}>Role</option>
              </select>
            </div>
                
            <input type="hidden" name="sortOrder" value={sortOrder} />
            <input type="hidden" name="page" value="1" />
                
                <div class="md:col-span-2 lg:col-span-4 flex gap-3 pt-4">
                  <button type="submit" class="btn-primary flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.293A1 1 0 013 6.586V4z"></path>
                    </svg>
                    Apply Filters
                  </button>
                  <a href="?" class="btn-secondary flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    Clear Filters
                  </a>
            </div>
          </form>
            </div>
        </div>

          <!-- Active Users Section Header -->
          <div class="flex flex-col md:flex-row md:items-center md:justify-between mb-8 gap-4">
            <div class="flex items-center gap-3">
              <div class="icon-container-small bg-gradient-to-br from-gray-600 to-gray-800">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                </svg>
          </div>
              <div>
                <h2 class="text-2xl font-bold text-black">Active Users</h2>
                <p class="text-sm text-gray-600">Manage and monitor user accounts</p>
        </div>
            </div>
            <div class="flex gap-3">
              <button type="button" id="addUserBtn" class="btn-primary flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                </svg>
                Add New User
              </button>
            </div>
          </div>
          <!-- Enhanced Users Table -->
          <div class="overflow-x-auto rounded-2xl border border-gray-200 shadow-lg">
          <table class="min-w-full table-auto border-collapse">
            <thead>
                <tr class="bg-gradient-to-r from-gray-50 to-gray-100 text-gray-700">
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <a href={`?sortBy=fullName&sortOrder=${sortBy === 'fullName' && sortOrder === 'asc' ? 'desc' : 'asc'}${search ? `&search=${encodeURIComponent(search)}` : ''}${filterGroup ? `&filterGroup=${encodeURIComponent(filterGroup)}` : ''}${filterDepartment ? `&filterDepartment=${encodeURIComponent(filterDepartment)}` : ''}`} class="flex items-center gap-2 hover:text-black transition-colors duration-200">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    Full Name
                    {sortBy === 'fullName' && (
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d={sortOrder === 'asc' ? "M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" : "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"} clip-rule="evenodd"></path>
                      </svg>
                    )}
                  </a>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                    </svg>
                    Email Username
                  </div>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                    </svg>
                    Contact Number
                  </div>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                    Birthdate
                  </div>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <a href={`?sortBy=group&sortOrder=${sortBy === 'group' && sortOrder === 'asc' ? 'desc' : 'asc'}${search ? `&search=${encodeURIComponent(search)}` : ''}${filterGroup ? `&filterGroup=${encodeURIComponent(filterGroup)}` : ''}${filterDepartment ? `&filterDepartment=${encodeURIComponent(filterDepartment)}` : ''}`} class="flex items-center gap-2 hover:text-black transition-colors duration-200">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    Group
                    {sortBy === 'group' && (
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d={sortOrder === 'asc' ? "M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" : "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"} clip-rule="evenodd"></path>
                      </svg>
                    )}
                  </a>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <a href={`?sortBy=department&sortOrder=${sortBy === 'department' && sortOrder === 'asc' ? 'desc' : 'asc'}${search ? `&search=${encodeURIComponent(search)}` : ''}${filterGroup ? `&filterGroup=${encodeURIComponent(filterGroup)}` : ''}${filterDepartment ? `&filterDepartment=${encodeURIComponent(filterDepartment)}` : ''}`} class="flex items-center gap-2 hover:text-black transition-colors duration-200">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                    </svg>
                    Office/Department
                    {sortBy === 'department' && (
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d={sortOrder === 'asc' ? "M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" : "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"} clip-rule="evenodd"></path>
                      </svg>
                    )}
                  </a>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <a href={`?sortBy=role&sortOrder=${sortBy === 'role' && sortOrder === 'asc' ? 'desc' : 'asc'}${search ? `&search=${encodeURIComponent(search)}` : ''}${filterGroup ? `&filterGroup=${encodeURIComponent(filterGroup)}` : ''}${filterDepartment ? `&filterDepartment=${encodeURIComponent(filterDepartment)}` : ''}`} class="flex items-center gap-2 hover:text-black transition-colors duration-200">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                    </svg>
                    Role
                    {sortBy === 'role' && (
                      <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d={sortOrder === 'asc' ? "M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z" : "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"} clip-rule="evenodd"></path>
                      </svg>
                    )}
                  </a>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    Subrole
                  </div>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                    </svg>
                    Company
                  </div>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V4a2 2 0 114 0v2m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                    </svg>
                    Unique User ID
                  </div>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Status
                  </div>
                </th>
                <th class="px-6 py-4 text-left font-semibold text-gray-800">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 5v.01M12 12v.01M12 19v.01M12 6a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2zm0 7a1 1 0 110-2 1 1 0 010 2z"></path>
                    </svg>
                    Actions
                  </div>
                </th>
              </tr>
            </thead>
            <tbody>
              {error ? (
                <tr><td colspan="13" class="text-center py-8 text-red-500">{error}</td></tr>
              ) : users.length === 0 ? (
                <tr><td colspan="13" class="text-center py-8 text-gray-400">No users found.</td></tr>
              ) : (
                users.map(user => {
                  const isProtected = user.role === 'SYS.AD' && user.subRole === 'EXECUTIVE';
                  return (
                    <tr key={user.id} class={`border-b border-gray-200 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100/50 transition-all duration-200 ${isProtected ? 'bg-gradient-to-r from-blue-50 to-blue-100/50' : ''}`}>
                      <td class="px-6 py-4 font-medium">
                        <div class="flex items-center gap-3">
                          <div class="profile-picture-container relative">
                            <img 
                              id={`profile-img-${user.userId || user.id}`}
                              src=""
                              alt={user.fullName || user.name || 'User'}
                              class="profile-picture-img"
                              style="display: none; width: 100%; height: 100%; object-fit: cover; border-radius: 50%;"
                              onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'; console.log('❌ Image failed to load for:', this.id);"
                              onload="this.style.display='block'; this.nextElementSibling.style.display='none'; console.log('✅ Image loaded successfully for:', this.id);"
                              crossorigin="anonymous"
                            />
                            <div class="profile-picture-fallback" style="display: flex; width: 100%; height: 100%; background: linear-gradient(135deg, #4b5563, #1f2937); color: white; font-size: 14px; font-weight: bold; align-items: center; justify-content: center; border-radius: 50%;">
                              {(user.fullName || user.name || 'U').charAt(0).toUpperCase()}
                            </div>
                            <!-- Activity Status Indicator -->
                            <div 
                              id={`status-indicator-${user.userId || user.id}`}
                              class="activity-status-indicator"
                              data-user-id={user.userId || user.id}
                              title="Checking status..."
                            >
                              <div class="status-dot status-checking"></div>
                            </div>
                          </div>
                          <div>
                            <div class="font-semibold text-gray-900">{user.fullName || user.name}</div>
                          {isProtected && (
                              <span class="inline-flex items-center px-2 py-1 bg-blue-100 text-blue-700 text-xs rounded-full font-medium mt-1">
                                <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                  <path fill-rule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clip-rule="evenodd"></path>
                                </svg>
                              Protected
                            </span>
                          )}
                          </div>
                        </div>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-600 font-medium">{user.username || user.email}</div>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-700">{user.contactNumber || '-'}</div>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-700">{user.birthdate ? new Date(user.birthdate).toLocaleDateString() : '-'}</div>
                      </td>
                      <td class="px-6 py-4">
                        <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold ${
                          user.group === 'EIU' ? 'bg-green-100 text-green-800' :
                          user.group === 'LGU-IU' ? 'bg-amber-100 text-amber-800' :
                          user.group === 'LGU-PMT' ? 'bg-blue-100 text-blue-800' :
                          'bg-gray-100 text-gray-800'
                        }`}>
                          {user.group || user.role}
                        </span>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-700 max-w-xs truncate">{user.department || '-'}</div>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm font-medium text-gray-900">{user.role}</div>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-600">{user.subRole || '-'}</div>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-600">{user.externalCompanyName || (user.group === 'EIU' ? 'N/A' : '-')}</div>
                      </td>
                      <td class="px-6 py-4">
                        <div class="text-sm text-gray-600 font-mono cursor-pointer hover:text-blue-600 transition-colors uuid-reveal-trigger" 
                             data-user-id={user.id} 
                             data-actual-uuid={user.userId || ''}
                             onclick={`console.log('Inline click detected for user:', '${user.id}'); revealUUID('${user.id}', '${user.userId || ''}')`}>
                          <span id={`uuid-${user.id}`}>***********</span>
                          <svg class="w-3 h-3 inline ml-1 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                          </svg>
                        </div>
                      </td>
                      <td class="px-6 py-4">
                        <span class={`inline-flex items-center px-3 py-1 rounded-full text-xs font-semibold ${
                          user.status === 'active' ? 'bg-green-100 text-green-800' : 
                          user.status === 'blocked' ? 'bg-red-100 text-red-800' : 
                          'bg-gray-100 text-gray-800'
                        }`}>
                          <div class={`w-2 h-2 rounded-full mr-2 ${
                            user.status === 'active' ? 'bg-green-500' : 
                            user.status === 'blocked' ? 'bg-red-500' : 
                            'bg-gray-500'
                          }`}></div>
                          {user.status}
                        </span>
                      </td>
                      <td class="px-6 py-4">
                        <div class="flex items-center gap-2">
                          <button class="btn-action px-4 py-2 bg-blue-600 text-white hover:bg-blue-700 hover:shadow-blue-500/25 editUserBtn" data-user={JSON.stringify(user)}>
                            <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                            Edit
                          </button>
                        {isProtected ? (
                            <button class="btn-action px-4 py-2 bg-gray-200 text-gray-400 cursor-not-allowed" title="Protected account - cannot be deleted" disabled>
                              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                              </svg>
                              Delete
                            </button>
                          ) : (
                            <button class="btn-action px-4 py-2 bg-red-600 text-white hover:bg-red-700 hover:shadow-red-500/25 deleteUserBtn" data-userid={user.id}>
                              <svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                              </svg>
                              Delete
                            </button>
                          )}
                        </div>
                      </td>
                    </tr>
                  );
                })
              )}
            </tbody>
          </table>
        </div>
          <!-- Enhanced Pagination -->
          <div class="flex justify-between items-center mt-8 pt-6 border-t border-gray-200">
            <div class="text-sm text-gray-600">
              Showing <span class="font-semibold text-gray-900">{((pagination.page - 1) * pagination.limit) + 1}</span> to <span class="font-semibold text-gray-900">{Math.min(pagination.page * pagination.limit, pagination.total)}</span> of <span class="font-semibold text-gray-900">{pagination.total}</span> users
            </div>
            <div class="flex items-center gap-2">
              <a href={`?page=${pagination.page - 1}${search ? `&search=${encodeURIComponent(search)}` : ''}${filterGroup ? `&filterGroup=${encodeURIComponent(filterGroup)}` : ''}${filterDepartment ? `&filterDepartment=${encodeURIComponent(filterDepartment)}` : ''}${sortBy ? `&sortBy=${sortBy}` : ''}${sortOrder ? `&sortOrder=${sortOrder}` : ''}`} class={`btn-action px-4 py-2 hover:bg-gray-300 hover:shadow-gray-400/25 ${pagination.page === 1 ? 'bg-gray-200 text-gray-400 cursor-not-allowed' : 'bg-gray-200 text-gray-700'}`}>
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Previous
              </a>
              <div class="flex items-center gap-1">
                <span class="px-3 py-2 text-sm font-medium text-gray-500">Page</span>
                <span class="px-3 py-2 bg-black text-white rounded-lg font-semibold">{pagination.page}</span>
                <span class="px-3 py-2 text-sm font-medium text-gray-500">of {pagination.pages}</span>
              </div>
              <a href={`?page=${pagination.page + 1}${search ? `&search=${encodeURIComponent(search)}` : ''}${filterGroup ? `&filterGroup=${encodeURIComponent(filterGroup)}` : ''}${filterDepartment ? `&filterDepartment=${encodeURIComponent(filterDepartment)}` : ''}${sortBy ? `&sortBy=${sortBy}` : ''}${sortOrder ? `&sortOrder=${sortOrder}` : ''}`} class={`btn-action px-4 py-2 hover:bg-gray-300 hover:shadow-gray-400/25 ${pagination.page === pagination.pages ? 'bg-gray-200 text-gray-400 cursor-not-allowed' : 'bg-gray-200 text-gray-700'}`}>
                Next
                <svg class="w-4 h-4 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
              </a>
            </div>
        </div>
      </div>

        <!-- New User Requests Section - Clean System Admin Theme -->
        <div class="profile-card">
          <!-- Header -->
          <div class="bg-gray-50 border-b border-gray-200 px-6 py-4">
            <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
                <div class="icon-container-small bg-gradient-to-br from-blue-500 to-blue-600">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-black">New User Requested</h3>
                <p class="text-sm text-gray-600">Pending user account approvals</p>
              </div>
            </div>
              <button id="toggleNotifications" class="w-10 h-10 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 transition-all duration-200 hover:scale-110">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
        </div>
          </div>
          
          <!-- Content -->
          <div id="notificationsContent" class="p-6 space-y-4">
            <!-- John Doe Request -->
            <div class="request-card border border-gray-200 rounded-xl p-6 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100/50 transition-all duration-200 hover:shadow-lg hover:border-blue-300 hover:-translate-y-1">
            <div class="flex items-start gap-4">
                <div class="w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold hover:scale-110 transition-transform duration-200" style="background: linear-gradient(135deg, #4b5563, #1f2937); border: 2px solid rgba(255, 255, 255, 0.1);">
                JD
              </div>
              <div class="flex-1">
                <div class="flex items-center justify-between mb-2">
                    <h4 class="text-lg font-semibold text-black">John Doe</h4>
                    <span class="text-xs text-gray-500 bg-gray-100 px-3 py-1 rounded-full">2 hours ago</span>
                </div>
                  <p class="text-sm text-gray-600 mb-3">Requesting access as <span class="text-blue-600 font-medium">LGU-PMT - MPMEC Member</span></p>
                  <div class="flex items-center gap-4 text-xs text-gray-500 mb-4">
                    <div class="flex items-center gap-2">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
                      </svg>
                      <span>john.doe@lgu.gov.ph</span>
                </div>
                    <div class="flex items-center gap-2">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                      </svg>
                      <span>Santa Cruz Infrastructure</span>
                    </div>
                  </div>
                  <div class="flex gap-3">
                    <button class="btn-action px-4 py-2 bg-green-600 text-white hover:bg-green-700 hover:shadow-green-500/25">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                      </svg>
                      Approve
                    </button>
                    <button class="btn-action px-4 py-2 bg-red-600 text-white hover:bg-red-700 hover:shadow-red-500/25">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                      </svg>
                      Reject
                    </button>
                    <button class="btn-action px-4 py-2 bg-gray-200 text-gray-700 hover:bg-gray-300 hover:shadow-gray-400/25">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                      </svg>
                      View Details
                    </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Recently Deleted Users Section - Clean System Admin Theme -->
      <div class="profile-card">
        <!-- Header -->
        <div class="bg-gray-50 border-b border-gray-200 px-6 py-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
              <div class="icon-container-small bg-gradient-to-br from-red-500 to-red-600">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-black">Recently Deleted Users</h3>
                <p class="text-sm text-gray-600">Manage soft-deleted user accounts</p>
              </div>
            </div>
            <button id="toggleDeletedUsers" class="w-10 h-10 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 transition-all duration-200 hover:scale-110">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
        </div>
        </div>
        
        <!-- Content -->
        <div id="deletedUsersContent" class="p-6 space-y-4">
          {deletedUsers.length === 0 ? (
            <div class="text-center py-12">
              <div class="w-16 h-16 mx-auto mb-4 rounded-2xl bg-gray-100 flex items-center justify-center hover:scale-110 transition-transform duration-200">
                <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 009.586 13H7"></path>
                </svg>
              </div>
              <p class="text-gray-500 text-lg font-medium">No recently deleted users</p>
              <p class="text-gray-400 text-sm">Deleted users will appear here for 30 days</p>
            </div>
          ) : (
            deletedUsers.map(user => (
              <div class="deleted-user-card border border-red-200 rounded-xl p-6 hover:bg-gradient-to-r hover:from-red-50 hover:to-red-100/50 transition-all duration-200 hover:shadow-lg hover:border-red-300 hover:-translate-y-1" data-user-id={user.id} data-deleted-at={user.deletedAt}>
                <div class="flex items-start gap-4">
                  <div class="w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold hover:scale-110 transition-transform duration-200 overflow-hidden profile-picture-container" style="border: 2px solid rgba(255, 255, 255, 0.1);">
                    <img 
                      id={`deleted-profile-img-${user.userId || user.id}`}
                      src=""
                      alt={user.fullName || user.name}
                      class="w-full h-full object-cover rounded-full"
                      style="display: none;"
                      onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'; console.log('❌ Deleted user image failed to load for:', this.id);"
                      onload="this.style.display='block'; this.nextElementSibling.style.display='none'; console.log('✅ Deleted user image loaded successfully for:', this.id);"
                      crossorigin="anonymous"
                    />
                    <div class="w-full h-full flex items-center justify-center profile-picture-fallback" style="display: flex; background: linear-gradient(135deg, #4b5563, #1f2937);">
                      {user.fullName ? user.fullName.split(' ').map(n => n[0]).join('').toUpperCase() : 'U'}
                    </div>
                  </div>
                  <div class="flex-1">
                    <div class="flex items-center justify-between mb-2">
                      <h4 class="text-lg font-semibold text-red-700">{user.fullName || user.name}</h4>
                      <div class="flex items-center gap-3">
                        <span class="text-xs text-gray-500 bg-gray-100 px-3 py-1 rounded-full">Deleted: {new Date(user.deletedAt).toLocaleDateString()}</span>
                        <span class="text-xs text-red-600 font-medium countdown-timer bg-red-100 px-3 py-1 rounded-full" data-deleted-at={user.deletedAt}></span>
                      </div>
                    </div>
                    <div class="space-y-2 mb-4">
                      <div class="flex items-center gap-2">
                        <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
                        </svg>
                        <span class="text-sm text-gray-600">{user.email}</span>
                      </div>
                      {user.contactNumber && (
                        <div class="flex items-center gap-2">
                          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                          </svg>
                          <span class="text-sm text-gray-600">{user.contactNumber}</span>
                        </div>
                      )}
                      {user.birthdate && (
                        <div class="flex items-center gap-2">
                          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                          </svg>
                          <span class="text-sm text-gray-600">{new Date(user.birthdate).toLocaleDateString()}</span>
                        </div>
                      )}
                      {user.userId && (
                        <div class="flex items-center gap-2">
                          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                          </svg>
                          <span class="text-sm text-gray-600 font-mono">{user.userId}</span>
                        </div>
                      )}
                    </div>
                    <div class="flex items-center gap-4 text-xs text-gray-500 mb-4">
                      <div class="flex items-center gap-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                        </svg>
                        <span>Group: <span class="text-red-600 font-medium">{user.group || user.role}</span></span>
                      </div>
                      <div class="flex items-center gap-2">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <span>Role: <span class="text-red-600 font-medium">{user.role}</span></span>
                      </div>
                      {user.subRole && (
                        <div class="flex items-center gap-2">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                          </svg>
                          <span>Subrole: <span class="text-red-600 font-medium">{user.subRole}</span></span>
                        </div>
                      )}
                      {user.department && (
                        <div class="flex items-center gap-2">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                          </svg>
                          <span>Dept: <span class="text-red-600 font-medium">{user.department}</span></span>
                        </div>
                      )}
                    </div>
                    <div class="flex gap-3">
                      <button class="btn-action px-4 py-2 bg-green-600 text-white hover:bg-green-700 hover:shadow-green-500/25 restoreUserBtn" data-user-id={user.id}>
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Restore User
                      </button>
                      <button class="btn-action px-4 py-2 bg-red-600 text-white hover:bg-red-700 hover:shadow-red-500/25 permanentDeleteBtn" data-user-id={user.id}>
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                        Permanent Delete
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>

      <!-- History of Deleted Users Section - Enhanced UI/UX with Filters -->
      <div class="profile-card">
        <!-- Header -->
        <div class="bg-gray-50 border-b border-gray-200 px-6 py-4">
          <div class="flex items-center justify-between">
            <div class="flex items-center gap-3">
              <div class="icon-container-small bg-gradient-to-br from-gray-600 to-gray-700">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-xl font-bold text-black">History of Deleted Users</h3>
                <p class="text-sm text-gray-600">Complete audit trail of permanently deleted user accounts</p>
              </div>
            </div>
            <div class="flex items-center gap-3">
              <!-- Display Mode Toggle -->
              <div class="flex items-center gap-2 bg-white border border-gray-200 rounded-lg p-1">
                <button id="scrollModeBtn" class="px-3 py-1 text-xs font-medium rounded-md transition-all duration-200 bg-gray-700 text-white">
                  <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7v8a2 2 0 002 2h6M8 7V5a2 2 0 012-2h4.586a1 1 0 01.707.293l4.414 4.414a1 1 0 01.293.707V15a2 2 0 01-2 2v0a2 2 0 01-2-2v-5H8z"></path>
                  </svg>
                  Scroll
                </button>
                <button id="paginationModeBtn" class="px-3 py-1 text-xs font-medium rounded-md transition-all duration-200 text-gray-600 hover:bg-gray-100">
                  <svg class="w-3 h-3 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                  </svg>
                  Pages
                </button>
                <button id="forceLoadHistoryBtn" onclick="console.log('🔘 INLINE CLICK: Force load button clicked'); if(window.attemptEmergencyRender) window.attemptEmergencyRender(); else console.error('❌ INLINE: attemptEmergencyRender not found');" class="px-2 py-1 text-xs font-medium rounded-md transition-all duration-200 bg-red-600 text-white hover:bg-red-700" title="Force load deleted users">🔄</button>
              </div>
              <button id="downloadAllReceipts" class="btn-action px-4 py-2 bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white hover:shadow-gray-500/25">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
                Download All Receipts
              </button>
              <button id="toggleDeletedHistory" class="w-10 h-10 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 transition-all duration-200 hover:scale-110">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
        
        <!-- Enhanced Filters and Controls -->
        <div class="bg-white border-b border-gray-200 px-6 py-4">
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4 mb-4">
            <!-- Status Filter -->
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">Status Filter</label>
              <select id="historyStatusFilter" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md text-sm">
                <option value="">Show All</option>
                <option value="recently-deleted">Recently Deleted</option>
                <option value="permanently-deleted">Permanently Deleted</option>
              </select>
            </div>
            
            <!-- Department Filter -->
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">Department</label>
              <select id="historyDepartmentFilter" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md text-sm">
                <option value="">All Departments</option>
                <Fragment set:html={departmentOptionsHTML} />
              </select>
            </div>
            
            <!-- Group Filter -->
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">Group</label>
              <select id="historyGroupFilter" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md text-sm">
                <option value="">All Groups</option>
                <option value="LGU-PMT">LGU-PMT</option>
                <option value="LGU-IU">LGU-IU</option>
                <option value="EIU">EIU</option>
                <option value="EMS">EMS</option>
                <option value="SYS.AD">SYS.AD</option>
              </select>
            </div>
            
            <!-- Search Bar -->
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">Search</label>
              <div class="relative">
                <input type="text" id="historySearchInput" placeholder="Search users..." class="w-full px-3 py-2 pl-9 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md text-sm">
                <svg class="w-4 h-4 text-gray-400 absolute left-3 top-1/2 transform -translate-y-1/2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
            
            <!-- Sort By -->
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">Sort By</label>
              <select id="historySortFilter" class="w-full px-3 py-2 border border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-200 bg-white hover:shadow-md text-sm">
                <option value="date-newest">Date Deleted (Newest First)</option>
                <option value="date-oldest">Date Deleted (Oldest First)</option>
                <option value="name-az">Name (A–Z)</option>
                <option value="name-za">Name (Z–A)</option>
                <option value="group-alpha">Group (Alphabetical)</option>
                <option value="department-alpha">Department (Alphabetical)</option>
              </select>
            </div>
            
            <!-- Reset Button -->
            <div class="space-y-2">
              <label class="block text-sm font-semibold text-gray-700">&nbsp;</label>
              <button id="resetHistoryFilters" class="w-full px-4 py-2 bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium rounded-lg transition-all duration-200 hover:shadow-md flex items-center justify-center gap-2 text-sm">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Reset
              </button>
            </div>
          </div>
        </div>
        
        <!-- Content -->
        <div id="deletedHistoryContent" class="p-6">
          <!-- Empty State -->
          <div id="historyEmptyState" class="text-center py-12 hidden">
            <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4 hover:scale-110 transition-transform duration-200">
              <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </div>
            <h4 class="text-lg font-semibold text-gray-500 mb-2">No Users Found</h4>
            <p class="text-gray-400 text-sm">Try adjusting your filters or search terms</p>
          </div>
          
          <!-- Scroll Mode Container -->
          <div id="historyScrollContainer" class="space-y-4 max-h-96 overflow-y-auto">
            <!-- Users will be dynamically inserted here -->
          </div>
          
          <!-- Pagination Mode Container -->
          <div id="historyPaginationContainer" class="hidden">
            <div id="historyPaginationContent" class="space-y-4 mb-6">
              <!-- Users will be dynamically inserted here -->
            </div>
            
            <!-- Pagination Controls -->
            <div id="historyPaginationControls" class="flex items-center justify-between border-t border-gray-200 pt-4">
              <div class="flex items-center gap-2 text-sm text-gray-600">
                <span>Showing</span>
                <span id="historyShowingStart" class="font-semibold">1</span>
                <span>to</span>
                <span id="historyShowingEnd" class="font-semibold">4</span>
                <span>of</span>
                <span id="historyTotalCount" class="font-semibold">0</span>
                <span>users</span>
              </div>
              
              <div class="flex items-center gap-2">
                <button id="historyPrevBtn" class="px-3 py-1 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200">
                  <svg class="w-4 h-4 inline mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                  </svg>
                  Previous
                </button>
                
                <div id="historyPageNumbers" class="flex items-center gap-1">
                  <!-- Page numbers will be dynamically generated -->
                </div>
                
                <button id="historyNextBtn" class="px-3 py-1 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200">
                  Next
                  <svg class="w-4 h-4 inline ml-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                  </svg>
                </button>
              </div>
            </div>
          </div>
          
          <!-- Initial User Data (Hidden Template) -->
          <div id="historyUserTemplate" class="hidden">
            {deletedUsersHistory.length === 0 ? (
              <div class="text-center py-12">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4 hover:scale-110 transition-transform duration-200">
                  <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                  </svg>
                </div>
                <h4 class="text-lg font-semibold text-gray-500 mb-2">No Deleted User History</h4>
                <p class="text-gray-400 text-sm">Permanently deleted users will appear here for audit purposes</p>
              </div>
            ) : (
              deletedUsersHistory.map(user => (
                <div class="deleted-history-card border border-gray-200 rounded-xl p-6 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100/50 transition-all duration-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1" 
                     data-user-id={user.id} 
                     data-deleted-at={user.deletedAt}
                     data-user-name={user.fullName || user.name}
                     data-user-email={user.email}
                     data-user-userid={user.userId}
                     data-user-group={user.group || user.role}
                     data-user-department={user.department}
                     data-user-status="permanently-deleted">
                  <div class="flex items-start gap-4">
                    <div class="w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold hover:scale-110 transition-transform duration-200 overflow-hidden profile-picture-container" style="background: linear-gradient(135deg, #4b5563, #1f2937); border: 2px solid rgba(255, 255, 255, 0.1);">
                      <img 
                        id={`history-profile-img-${user.userId || user.id}`}
                        src=""
                        alt={user.fullName || user.name}
                        class="w-full h-full object-cover rounded-full"
                        style="display: none;"
                        onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'; console.log('❌ History user image failed to load for:', this.id);"
                        onload="this.style.display='block'; this.nextElementSibling.style.display='none'; console.log('✅ History user image loaded successfully for:', this.id);"
                        crossorigin="anonymous"
                      />
                      <div class="w-full h-full flex items-center justify-center profile-picture-fallback" style="display: flex; background: linear-gradient(135deg, #4b5563, #1f2937);">
                        {user.fullName ? user.fullName.split(' ').map(n => n[0]).join('').toUpperCase() : 'U'}
                      </div>
                    </div>
                    <div class="flex-1">
                      <div class="flex items-center justify-between mb-2">
                        <h4 class="text-lg font-semibold text-gray-700">{user.fullName || user.name}</h4>
                        <div class="flex items-center gap-3">
                          <span class="text-xs text-gray-500 bg-gray-100 px-3 py-1 rounded-full">Permanently Deleted: {new Date(user.deletedAt).toLocaleDateString()}</span>
                          <span class="text-xs text-gray-600 font-medium bg-gray-100 px-3 py-1 rounded-full">{new Date(user.deletedAt).toLocaleTimeString()}</span>
                        </div>
                      </div>
                      <div class="space-y-2 mb-4">
                        <div class="flex items-center gap-2">
                          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
                          </svg>
                          <span class="text-sm text-gray-600">{user.email}</span>
                        </div>
                        {user.contactNumber && (
                          <div class="flex items-center gap-2">
                            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                            </svg>
                            <span class="text-sm text-gray-600">{user.contactNumber}</span>
                          </div>
                        )}
                        {user.birthdate && (
                          <div class="flex items-center gap-2">
                            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                            </svg>
                            <span class="text-sm text-gray-600">{new Date(user.birthdate).toLocaleDateString()}</span>
                          </div>
                        )}
                        {user.userId && (
                          <div class="flex items-center gap-2">
                            <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                            </svg>
                            <span class="text-sm text-gray-600 font-mono">{user.userId}</span>
                          </div>
                        )}
                      </div>
                      <div class="flex items-center gap-4 text-xs text-gray-500 mb-4">
                        <div class="flex items-center gap-2">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                          </svg>
                          <span>Group: <span class="text-gray-600 font-medium">{user.group || user.role}</span></span>
                        </div>
                        <div class="flex items-center gap-2">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                          <span>Role: <span class="text-gray-600 font-medium">{user.role}</span></span>
                        </div>
                        {user.subRole && (
                          <div class="flex items-center gap-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z"></path>
                            </svg>
                            <span>Subrole: <span class="text-gray-600 font-medium">{user.subRole}</span></span>
                          </div>
                        )}
                        {user.department && (
                          <div class="flex items-center gap-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                            </svg>
                            <span>Dept: <span class="text-gray-600 font-medium">{user.department}</span></span>
                          </div>
                        )}
                      </div>
                      <div class="flex items-center justify-between">
                        <div class="flex items-center gap-2 text-xs text-gray-500">
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                          </svg>
                          <span>Deleted by: <span class="font-medium">{user.deletedByUser || 'System Administrator'}</span></span>
                        </div>
                        <button class="btn-action px-4 py-2 bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white hover:shadow-gray-500/25 downloadReceiptBtn" data-user-id={user.id}>
                          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                          </svg>
                          Download Receipt
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
      <div id="addUserModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-lg hidden" style="backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px);">
        <div class="modal-content bg-gradient-to-br from-neutral-900 via-neutral-800 to-neutral-900 backdrop-blur-xl border border-white/20 rounded-3xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden relative transform transition-all duration-500 ease-out scale-95 opacity-0 mx-auto" id="modalContent">
          <!-- Enhanced Header -->
          <div class="sticky top-0 bg-gradient-to-r from-neutral-800/50 via-neutral-700/70 to-neutral-800/50 backdrop-blur-md border-b border-white/15 px-6 py-4 rounded-t-3xl shadow-lg">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-3">
                <div class="w-10 h-10 rounded-xl bg-gradient-to-br from-neutral-600 to-neutral-700 flex items-center justify-center shadow-xl">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                  </svg>
                </div>
                <div>
                  <h2 class="text-xl font-bold text-white">Add New User</h2>
                  <p class="text-sm text-gray-300 font-medium">Create a new user account with enhanced security</p>
                </div>
              </div>
              <button type="button" id="closeAddUserModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
                <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- Scrollable Content -->
          <div class="overflow-y-auto max-h-[calc(90vh-140px)] p-6">
            <form id="addUserForm" class="space-y-6">
            <div class="flex gap-2">
              <div class="w-1/3">
                <input type="text" name="firstName" id="firstNameField" placeholder="First Name" maxlength="20" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
                <div class="flex items-center justify-between mt-1">
                  <div id="firstNameError" class="text-red-400 text-xs hidden">Numbers and special characters are not allowed.</div>
                  <span class="text-xs text-gray-400" id="firstNameCount">0/20</span>
                </div>
              </div>
              <div class="w-1/3">
                <input type="text" name="middleName" id="middleNameField" placeholder="Middle Name (e.g., J.)" maxlength="20" class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
                <div class="flex items-center justify-between mt-1">
                  <div id="middleNameError" class="text-red-400 text-xs hidden">Numbers and special characters are not allowed (except dot after letters).</div>
                  <span class="text-xs text-gray-400" id="middleNameCount">0/20</span>
                </div>
              </div>
              <div class="w-1/3">
                <input type="text" name="lastName" id="lastNameField" placeholder="Last Name" maxlength="20" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
                <div class="flex items-center justify-between mt-1">
                  <div id="lastNameError" class="text-red-400 text-xs hidden">Numbers and special characters are not allowed.</div>
                  <span class="text-xs text-gray-400" id="lastNameCount">0/20</span>
                </div>
              </div>
            </div>
            <!-- Enhanced Full Name (auto) field -->
            <div class="relative">
              <input type="text" name="fullName" placeholder="Full Name (auto)" readonly class="bg-neutral-700/60 border border-white/20 rounded-lg px-4 py-2 w-full text-gray-300 cursor-not-allowed backdrop-blur-sm" />
              <div class="text-xs text-gray-400 mt-1">Automatically generated from first, middle, and last names</div>
            </div>
            
            <!-- Enhanced Email Username field with icon and tooltip -->
            <div class="relative">
              <div class="flex items-center">
                <input type="text" name="username" id="usernameField" placeholder="Email (Username)" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 pr-10 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
                <div class="absolute right-3 cursor-help group">
                  <svg class="w-5 h-5 text-gray-400 hover:text-white transition-colors" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                  </svg>
                  <div class="absolute bottom-full right-0 mb-2 w-64 p-2 bg-neutral-800/90 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10 backdrop-blur-sm border border-white/20">
                    Enter a valid email. This will serve as your login username and for account verification.
                    <div class="absolute top-full right-4 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-neutral-800/90"></div>
                  </div>
                </div>
              </div>
              <div class="flex items-center justify-between mt-1">
                <div id="usernameError" class="text-red-400 text-xs hidden">Please enter a valid email address.</div>
                <div class="text-xs text-gray-400">Enter a valid email address that will be used as the username</div>
              </div>
            </div>
            
            <input type="tel" name="contactNumber" id="contactNumberField" placeholder="09XXXXXXXXX" maxlength="11" pattern="09[0-9]{9}" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
            <div class="flex items-center justify-between mt-1">
              <div id="contactNumberError" class="text-red-400 text-xs hidden">Must start with "09" and be exactly 11 digits.</div>
              <span class="text-xs text-gray-400" id="contactNumberCount">0/11</span>
            </div>
            
            <!-- Password field -->
            <div class="relative">
              <input type="password" name="password" id="passwordField" placeholder="Password" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 pr-10 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
              <button type="button" id="togglePassword" class="absolute inset-y-0 right-0 pr-3 flex items-center">
                <svg id="eyeIcon" class="h-5 w-5 text-gray-400 hover:text-white transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </button>
            </div>
            <div id="passwordError" class="text-red-400 text-xs mt-1 hidden">Please enter a password.</div>
            
            <!-- Confirm Password field -->
            <div class="relative">
              <input type="password" name="confirmPassword" id="confirmPasswordField" placeholder="Confirm Password" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 pr-10 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
              <button type="button" id="toggleConfirmPassword" class="absolute inset-y-0 right-0 pr-3 flex items-center">
                <svg id="eyeIconConfirm" class="h-5 w-5 text-gray-400 hover:text-white transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                </svg>
              </button>
            </div>
            <div id="confirmPasswordError" class="text-red-400 text-xs mt-1 hidden">Please confirm your password.</div>
            
            <!-- Password Strength Indicator -->
            <div class="space-y-3">
              <div class="flex items-center justify-between text-sm">
                <span class="text-gray-300 font-medium">Password Strength</span>
                <span id="strengthText" class="font-semibold text-red-500">Weak</span>
              </div>
              <div class="w-full bg-neutral-800/60 rounded-full h-3 overflow-hidden">
                <div id="strengthBar" class="h-3 rounded-full transition-all duration-500 ease-out" style="width: 0%; background: linear-gradient(90deg, #ef4444 0%, #f97316 50%, #22c55e 100%);"></div>
              </div>
              <div class="space-y-2">
                <div class="flex items-center gap-2">
                  <div id="lengthCheck" class="w-4 h-4 rounded-full border-2 border-neutral-600 flex items-center justify-center transition-all duration-300">
                    <svg class="w-2.5 h-2.5 text-white opacity-0 transition-opacity duration-300" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                  </div>
                  <span class="text-sm text-gray-300">At least 8 characters</span>
                </div>
                <div class="flex items-center gap-2">
                  <div id="caseCheck" class="w-4 h-4 rounded-full border-2 border-neutral-600 flex items-center justify-center transition-all duration-300">
                    <svg class="w-2.5 h-2.5 text-white opacity-0 transition-opacity duration-300" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                  </div>
                  <span class="text-sm text-gray-300">Uppercase & lowercase</span>
                </div>
                <div class="flex items-center gap-2">
                  <div id="underscoreCheck" class="w-4 h-4 rounded-full border-2 border-neutral-600 flex items-center justify-center transition-all duration-300">
                    <svg class="w-2.5 h-2.5 text-white opacity-0 transition-opacity duration-300" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                  </div>
                  <span class="text-sm text-gray-300">Contains underscore (_)</span>
                </div>
                <div class="flex items-center gap-2">
                  <div id="strengthCheck" class="w-4 h-4 rounded-full border-2 border-neutral-600 flex items-center justify-center transition-all duration-300">
                    <svg class="w-2.5 h-2.5 text-white opacity-0 transition-opacity duration-300" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
                    </svg>
                  </div>
                  <span class="text-sm text-gray-300">Medium strength minimum</span>
                </div>
              </div>
            </div>
            
            <div class="text-xs text-gray-400 -mt-2 mb-1">Password must be at least 8 characters, include uppercase & lowercase letters, and contain an underscore (_). Minimum strength: Medium.</div>
            <!-- Enhanced Birthdate field -->
            <div class="relative">
              <label class="block text-sm font-medium text-white mb-2">Birthdate *</label>
              <div class="relative">
                <input 
                  type="date" 
                  name="birthdate" 
                  id="birthdateField" 
                  required 
                  class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 pr-10 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all cursor-pointer backdrop-blur-sm" 
                  style="appearance: none; -webkit-appearance: none; -moz-appearance: none; color-scheme: dark;"
                />
                <div class="absolute right-3 top-1/2 -translate-y-1/2 flex items-center justify-center h-5">
                  <svg class="w-5 h-5 text-gray-400 hover:text-white transition-colors cursor-pointer" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                </div>
              </div>
              <div id="birthdateError" class="text-red-400 text-xs mt-1 hidden">User must be at least 18 years old.</div>
              <div class="text-xs text-gray-400 mt-1">Select a date (user must be at least 18 years old)</div>
            </div>
            <div class="flex gap-2">
              <div class="w-1/2">
                <select name="group" id="groupSelect" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm">
                <option value="" class="bg-neutral-800 text-white">Select Group</option>
                <option value="LGU-PMT" class="bg-neutral-800 text-white">LGU-PMT</option>
                <option value="LGU-IU" class="bg-neutral-800 text-white">LGU-IU</option>
                <option value="EIU" class="bg-neutral-800 text-white">EIU</option>
                <option value="EMS" class="bg-neutral-800 text-white">EMS</option>
              </select>
                <div id="groupError" class="text-red-400 text-xs mt-1 hidden">Please select a group.</div>
              </div>
              <div class="w-1/2">
                <select name="role" id="roleSelect" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm">
                <option value="" class="bg-neutral-800 text-white">Select Role</option>
              </select>
                <div id="roleError" class="text-red-400 text-xs mt-1 hidden">Please select a role.</div>
              </div>
            </div>
            <div class="flex gap-2">
              <div id="subRoleContainer" class="w-1/2">
                <select name="subRole" id="subRoleSelect" class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm">
                  <option value="" class="bg-neutral-800 text-white">Select Subrole</option>
                </select>
                <div id="subRoleError" class="text-red-400 text-xs mt-1 hidden">Please select a subrole.</div>
              </div>
            </div>
            
            <!-- Department/Office Field -->
            <div>
              <label class="block text-sm font-medium text-white mb-2">Department/Office</label>
              <select name="departmentOffice" id="departmentOfficeSelect" class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm">
                <option value="" class="bg-neutral-800 text-white">Select Department/Office</option>
                <option value="Municipal Engineer's Office" class="bg-neutral-800 text-white">Municipal Engineer's Office</option>
                <option value="Municipal Agriculturist's Office" class="bg-neutral-800 text-white">Municipal Agriculturist's Office</option>
                <option value="Municipal General Services Office" class="bg-neutral-800 text-white">Municipal General Services Office</option>
                <option value="Municipal Social Welfare and Development Office" class="bg-neutral-800 text-white">Municipal Social Welfare and Development Office</option>
                <option value="Municipal Disaster and Risk Reduction Management Office" class="bg-neutral-800 text-white">Municipal Disaster and Risk Reduction Management Office</option>
                <option value="Municipal Planning and Development Office" class="bg-neutral-800 text-white">Municipal Planning and Development Office</option>
                <option value="Municipal Treasurer's Office" class="bg-neutral-800 text-white">Municipal Treasurer's Office</option>
                <option value="Municipal Budget Office" class="bg-neutral-800 text-white">Municipal Budget Office</option>
                <option value="Municipal Health Office" class="bg-neutral-800 text-white">Municipal Health Office</option>
                <option value="Municipal Civil Registry Office" class="bg-neutral-800 text-white">Municipal Civil Registry Office</option>
                <option value="Municipal Environment And Natural Resources Office" class="bg-neutral-800 text-white">Municipal Environment And Natural Resources Office</option>
                <option value="External Partner Company" class="bg-neutral-800 text-white">External Partner Company</option>
              </select>
              <div id="departmentError" class="text-red-400 text-xs mt-1 hidden">Please select a department/office.</div>
              <!-- Free text field for EIU External Partner Company -->
              <div id="externalCompanyContainer" class="mt-2 hidden">
                <input type="text" name="externalCompanyName" id="externalCompanyName" placeholder="Enter Company Name" class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
              </div>
            </div>
            
            <!-- Profile Photo Section -->
            <div>
              <label class="block text-sm font-medium text-white mb-2">Profile Photo</label>
              <div class="border-2 border-dashed border-white/20 rounded-lg p-6 text-center hover:border-white/40 transition-colors duration-200">
                <div class="flex flex-col items-center space-y-4">
                  <div id="profilePhotoPreview" class="w-20 h-20 rounded-full bg-neutral-700/50 flex items-center justify-center border-2 border-white/20">
                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                  </div>
                  <div>
                    <button type="button" id="uploadPhotoBtn" class="px-4 py-2 bg-gradient-to-r from-neutral-700 to-neutral-600 border border-white/20 text-white rounded-lg font-medium hover:from-neutral-600 hover:to-neutral-500 hover:border-white/40 transition-all duration-200">
                      <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                      </svg>
                      Upload Photo
                    </button>
                    <p class="text-xs text-gray-400 mt-2">JPG, PNG or GIF (Max 5MB)</p>
                  </div>
                </div>
                <input type="file" id="profilePhotoInput" name="profilePhoto" accept="image/*" class="hidden" />
              </div>
            </div>
            
            <!-- Enhanced Unique User ID field -->
            <div class="relative">
              <input type="text" name="userId" id="userIdField" placeholder="Unique User ID (Auto-generated)" required class="bg-neutral-700/60 border border-white/20 rounded-lg px-4 py-2 w-full text-gray-300 cursor-not-allowed backdrop-blur-sm" readonly />
              <div class="text-xs text-gray-400 mt-1">This field will be auto-generated after email verification.</div>
            </div>
            
            <!-- Enhanced Generate User ID button with better spacing -->
            <div class="relative mt-4">
              <button type="button" id="generateUserIdBtn" class="w-full px-6 py-3 bg-gradient-to-r from-neutral-700 to-neutral-600 border border-white/20 text-white rounded-xl font-semibold hover:from-neutral-600 hover:to-neutral-500 hover:border-white/40 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 backdrop-blur-sm">
                <svg class="w-5 h-5 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
                Generate User ID
              </button>
              <div class="text-xs text-gray-400 mt-2 text-center">Click to generate Unique User ID based on User Group</div>
            </div>
            
            <div id="addUserError" class="text-red-400 text-sm mt-2 hidden"></div>
            </form>
          </div>

          <!-- Enhanced Action Buttons -->
          <div class="sticky bottom-0 bg-gradient-to-r from-neutral-800/80 via-neutral-700/90 to-neutral-800/80 backdrop-blur-md border-t border-white/15 px-6 py-4 rounded-b-3xl shadow-lg">
            <div class="flex flex-col sm:flex-row gap-3">
              <button 
                type="button" 
                id="createUserBtn" 
                onclick="testCreateUser()" 
                class="flex-1 px-6 py-3 bg-gradient-to-r from-blue-600 to-blue-700 border border-blue-500/30 text-white rounded-xl font-semibold hover:from-blue-500 hover:to-blue-600 hover:border-blue-400/50 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 backdrop-blur-sm"
              >
                <svg class="w-5 h-5 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                </svg>
                Create User (Direct)
              </button>
              <button 
                type="button" 
                id="closeAddUserModal" 
                class="px-6 py-3 bg-neutral-600/80 border border-white/20 text-gray-200 rounded-xl font-medium hover:bg-neutral-500/80 hover:border-white/30 transition-all duration-300 backdrop-blur-sm"
              >
                Cancel
              </button>
            </div>
          </div>
          <style>
            /* Enhanced Modal Dark Theme Styling - Perfect Centering */
            #addUserModal {
              position: fixed !important;
              top: 0 !important;
              left: 0 !important;
              right: 0 !important;
              bottom: 0 !important;
              width: 100vw !important;
              height: 100vh !important;
              backdrop-filter: blur(20px) !important;
              -webkit-backdrop-filter: blur(20px) !important;
              margin: 0 !important;
              padding: 0 !important;
              box-sizing: border-box;
              z-index: 9999 !important;
            }
            
            /* Ensure no gaps at viewport edges */
            html, body {
              margin: 0 !important;
              padding: 0 !important;
              overflow-x: hidden !important;
            }
            
            #addUserModal:not(.hidden) {
              display: flex !important;
              align-items: center !important;
              justify-content: center !important;
              padding: 1rem !important;
              animation: modalBackdropFadeIn 0.6s cubic-bezier(0.4, 0, 0.2, 1);
            }
            
            @keyframes modalBackdropFadeIn {
              from { 
                backdrop-filter: blur(0px);
                background-color: rgba(0, 0, 0, 0);
                opacity: 0;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
              }
              to { 
                backdrop-filter: blur(20px);
                background-color: rgba(0, 0, 0, 0.8);
                opacity: 1;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
              }
            }
            
            #modalContent {
              box-shadow: 
                0 40px 80px -12px rgba(0, 0, 0, 0.7),
                0 0 0 1px rgba(255, 255, 255, 0.15),
                0 12px 40px rgba(0, 0, 0, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
              animation: modalSlideIn 0.7s cubic-bezier(0.34, 1.56, 0.64, 1);
              margin: auto;
              position: relative;
            }
            
            @keyframes modalSlideIn {
              from {
                transform: scale(0.9) translateY(30px);
                opacity: 0;
              }
              to {
                transform: scale(1) translateY(0);
                opacity: 1;
              }
            }
            
            /* Enhanced input focus effects with smooth transitions */
            #addUserForm input,
            #addUserForm select,
            #editUserForm input,
            #editUserForm select {
              transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
              position: relative;
            }
            
            #addUserForm input:focus,
            #addUserForm select:focus,
            #editUserForm input:focus,
            #editUserForm select:focus {
              box-shadow: 
                0 0 0 3px rgba(255, 255, 255, 0.15),
                0 4px 12px rgba(255, 255, 255, 0.1);
              transform: translateY(-1px);
            }
            
            #addUserForm input:hover,
            #addUserForm select:hover,
            #editUserForm input:hover,
            #editUserForm select:hover {
              border-color: rgba(255, 255, 255, 0.3);
              transform: translateY(-1px);
            }
            
            /* Enhanced Edit User Modal Styling */
            #editUserModal {
              position: fixed !important;
              top: 0 !important;
              left: 0 !important;
              right: 0 !important;
              bottom: 0 !important;
              width: 100vw !important;
              height: 100vh !important;
              backdrop-filter: blur(20px) !important;
              -webkit-backdrop-filter: blur(20px) !important;
              margin: 0 !important;
              padding: 0 !important;
              box-sizing: border-box;
              z-index: 9999 !important;
            }
            
            #editUserModal:not(.hidden) {
              display: flex !important;
              align-items: center !important;
              justify-content: center !important;
              padding: 1rem !important;
              visibility: visible !important;
              opacity: 1 !important;
              /* animation: modalBackdropFadeIn 0.6s cubic-bezier(0.4, 0, 0.2, 1); */
            }
            
            /* Ensure modal stays visible when shown */
            #editUserModal.show {
              display: flex !important;
              align-items: center !important;
              justify-content: center !important;
              padding: 1rem !important;
              visibility: visible !important;
              opacity: 1 !important;
            }
            
            /* Override any conflicting styles */
            #editUserModal.show:not(.hidden) {
              display: flex !important;
              align-items: center !important;
              justify-content: center !important;
              padding: 1rem !important;
              visibility: visible !important;
              opacity: 1 !important;
            }
            
            #editUserModalContent {
              box-shadow: 
                0 40px 80px -12px rgba(0, 0, 0, 0.7),
                0 0 0 1px rgba(255, 255, 255, 0.15),
                0 12px 40px rgba(0, 0, 0, 0.4),
                inset 0 1px 0 rgba(255, 255, 255, 0.1);
              /* animation: modalSlideIn 0.7s cubic-bezier(0.34, 1.56, 0.64, 1); */
              margin: auto;
              position: relative;
            }
            
            /* Ensure modal content is visible when modal is shown */
            #editUserModal:not(.hidden) #editUserModalContent {
              opacity: 1 !important;
              transform: scale(1) !important;
            }
            
            #editUserModal.show #editUserModalContent {
              opacity: 1 !important;
              transform: scale(1) !important;
            }
            
            /* Date input dark theme styling - completely override browser defaults */
            #birthdateField {
              color-scheme: dark;
              background-color: rgb(64 64 64 / 0.8) !important;
              color: white !important;
              border: 1px solid rgba(255, 255, 255, 0.2) !important;
            }
            
            #birthdateField::-webkit-calendar-picker-indicator {
              display: none !important;
            }
            
            #birthdateField::-webkit-datetime-edit {
              color: white !important;
              background: transparent !important;
            }
            
            #birthdateField::-webkit-datetime-edit-fields-wrapper {
              color: white !important;
              background: transparent !important;
            }
            
            #birthdateField::-webkit-datetime-edit-text {
              color: white !important;
              background: transparent !important;
            }
            
            #birthdateField::-webkit-datetime-edit-month-field,
            #birthdateField::-webkit-datetime-edit-day-field,
            #birthdateField::-webkit-datetime-edit-year-field {
              color: white !important;
              background: transparent !important;
            }
            
            #birthdateField::-moz-datetime-edit {
              color: white !important;
              background: transparent !important;
            }
            
            #birthdateField::-moz-datetime-edit-fields-wrapper {
              color: white !important;
              background: transparent !important;
            }
            
            #birthdateField::-moz-datetime-edit-text {
              color: white !important;
              background: transparent !important;
            }
            
            #birthdateField::-moz-datetime-edit-month-field,
            #birthdateField::-moz-datetime-edit-day-field,
            #birthdateField::-moz-datetime-edit-year-field {
              color: white !important;
              background: transparent !important;
            }
            
            /* Firefox calendar button styling */
            #birthdateField::-moz-calendar-picker-indicator {
              display: none !important;
            }
            
            /* Enhanced button hover effects with micro-interactions */
            #generateUserIdBtn {
              transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
              position: relative;
              overflow: hidden;
            }
            
            #generateUserIdBtn::before {
              content: '';
              position: absolute;
              top: 0;
              left: -100%;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
              transition: left 0.6s ease;
            }
            
            #generateUserIdBtn:hover::before {
              left: 100%;
            }
            
            #generateUserIdBtn:hover {
              box-shadow: 
                0 12px 28px -8px rgba(0, 0, 0, 0.4),
                0 4px 16px rgba(255, 255, 255, 0.1);
              transform: translateY(-2px) scale(1.02);
            }
            
            #createUserBtn {
              transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
              position: relative;
              overflow: hidden;
            }
            
            #createUserBtn::before {
              content: '';
              position: absolute;
              top: 0;
              left: -100%;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.15), transparent);
              transition: left 0.6s ease;
            }
            
            #createUserBtn:hover::before {
              left: 100%;
            }
            
            #createUserBtn:hover {
              box-shadow: 
                0 12px 28px -8px rgba(59, 130, 246, 0.5),
                0 4px 16px rgba(59, 130, 246, 0.3);
              transform: translateY(-2px) scale(1.02);
            }
            
            /* Enhanced scrollbar with smooth animations */
            #addUserModal .overflow-y-auto::-webkit-scrollbar {
              width: 10px;
              transition: all 0.3s ease;
            }
            
            #addUserModal .overflow-y-auto::-webkit-scrollbar-track {
              background: linear-gradient(to bottom, rgba(255, 255, 255, 0.05), rgba(255, 255, 255, 0.1));
              border-radius: 6px;
              transition: all 0.3s ease;
            }
            
            #addUserModal .overflow-y-auto::-webkit-scrollbar-thumb {
              background: linear-gradient(to bottom, rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.35));
              border-radius: 6px;
              border: 1px solid rgba(255, 255, 255, 0.1);
              transition: all 0.3s ease;
            }
            
            #addUserModal .overflow-y-auto::-webkit-scrollbar-thumb:hover {
              background: linear-gradient(to bottom, rgba(255, 255, 255, 0.4), rgba(255, 255, 255, 0.5));
              box-shadow: 0 0 10px rgba(255, 255, 255, 0.2);
              transform: scale(1.1);
            }
            
            /* Enhanced form field animations */
            #addUserForm > div {
              animation: fieldSlideIn 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
              animation-fill-mode: both;
            }
            
            #addUserForm > div:nth-child(1) { animation-delay: 0.1s; }
            #addUserForm > div:nth-child(2) { animation-delay: 0.15s; }
            #addUserForm > div:nth-child(3) { animation-delay: 0.2s; }
            #addUserForm > div:nth-child(4) { animation-delay: 0.25s; }
            #addUserForm > div:nth-child(5) { animation-delay: 0.3s; }
            #addUserForm > div:nth-child(6) { animation-delay: 0.35s; }
            #addUserForm > div:nth-child(7) { animation-delay: 0.4s; }
            #addUserForm > div:nth-child(8) { animation-delay: 0.45s; }
            #addUserForm > div:nth-child(9) { animation-delay: 0.5s; }
            #addUserForm > div:nth-child(10) { animation-delay: 0.55s; }
            #addUserForm > div:nth-child(11) { animation-delay: 0.6s; }
            #addUserForm > div:nth-child(12) { animation-delay: 0.65s; }
            #addUserForm > div:nth-child(13) { animation-delay: 0.7s; }
            #addUserForm > div:nth-child(14) { animation-delay: 0.75s; }
            #addUserForm > div:nth-child(15) { animation-delay: 0.8s; }
            
            @keyframes fieldSlideIn {
              from {
                opacity: 0;
                transform: translateX(-20px);
              }
              to {
                opacity: 1;
                transform: translateX(0);
              }
            }
            
            /* Enhanced header and footer animations */
            #modalContent > div:first-child,
            #modalContent > div:last-child {
              position: relative;
              overflow: hidden;
            }
            
            #modalContent > div:first-child::after,
            #modalContent > div:last-child::after {
              content: '';
              position: absolute;
              top: 0;
              left: -100%;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.05), transparent);
              transition: left 0.8s ease;
            }
            
            #modalContent > div:first-child:hover::after,
            #modalContent > div:last-child:hover::after {
              left: 100%;
            }
            
            /* Enhanced close button interactions - X button */
            #closeAddUserModal:not([type="button"]) {
              transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
              position: relative;
              overflow: hidden;
            }
            
            #closeAddUserModal:not([type="button"])::before {
              content: '';
              position: absolute;
              top: 0;
              left: -100%;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
              transition: left 0.5s ease;
            }
            
            #closeAddUserModal:not([type="button"]):hover::before {
              left: 100%;
            }
            
            #closeAddUserModal:not([type="button"]):hover {
              transform: rotate(90deg) scale(1.1);
              box-shadow: 0 4px 16px rgba(255, 255, 255, 0.2);
            }
            
            /* Enhanced password strength indicator */
            #strengthBar {
              transition: all 0.5s cubic-bezier(0.4, 0, 0.2, 1);
              position: relative;
              overflow: hidden;
            }
            
            #strengthBar::after {
              content: '';
              position: absolute;
              top: 0;
              left: -100%;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
              animation: strengthShine 2s infinite;
            }
            
            @keyframes strengthShine {
              0% { left: -100%; }
              100% { left: 100%; }
            }
            
            /* Enhanced form field labels */
            #addUserForm label {
              transition: all 0.3s ease;
              position: relative;
            }
            
            #addUserForm label:hover {
              color: rgba(255, 255, 255, 0.9);
              transform: translateX(2px);
            }
            
            /* Professional Cancel button hover effect */
            #closeAddUserModal[type="button"] {
              transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
              position: relative;
              overflow: hidden;
            }
            
            #closeAddUserModal[type="button"]::before {
              content: '';
              position: absolute;
              top: 0;
              left: -100%;
              width: 100%;
              height: 100%;
              background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.08), transparent);
              transition: left 0.5s ease;
            }
            
            #closeAddUserModal[type="button"]:hover::before {
              left: 100%;
            }
            
            #closeAddUserModal[type="button"]:hover {
              background-color: rgba(255, 255, 255, 0.1);
              border-color: rgba(255, 255, 255, 0.4);
              transform: translateY(-1px);
              box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
            }
            
            /* Hide browser default password visibility toggles */
            #passwordField::-ms-reveal,
            #confirmPasswordField::-ms-reveal {
              display: none !important;
            }
            
            #passwordField::-webkit-credentials-auto-fill-button,
            #confirmPasswordField::-webkit-credentials-auto-fill-button {
              display: none !important;
            }
            
            /* Hide any browser-generated password toggles */
            input[type="password"]::-ms-reveal,
            input[type="password"]::-webkit-credentials-auto-fill-button {
              display: none !important;
              visibility: hidden !important;
              opacity: 0 !important;
            }
            
            /* Ensure our custom eye icons are properly positioned and visible */
            #togglePassword,
            #toggleConfirmPassword {
              z-index: 10 !important;
              background: transparent !important;
            }
            
            #eyeIcon,
            #eyeIconConfirm {
              z-index: 11 !important;
              position: relative;
              background: transparent !important;
            }
            
            /* Force hide any duplicate elements that might appear */
            #passwordField + *:not(#togglePassword),
            #confirmPasswordField + *:not(#toggleConfirmPassword) {
              display: none !important;
            }
            
            /* Additional aggressive hiding of browser elements */
            input[type="password"]::-ms-clear,
            input[type="password"]::-ms-reveal,
            input[type="password"]::-webkit-credentials-auto-fill-button,
            input[type="password"]::-webkit-strong-password-auto-fill-button {
              display: none !important;
              visibility: hidden !important;
              opacity: 0 !important;
              width: 0 !important;
              height: 0 !important;
              position: absolute !important;
              left: -9999px !important;
            }
            
            /* Ensure password fields don't show browser toggles */
            #passwordField,
            #confirmPasswordField {
              -webkit-textfield-decoration-container: none !important;
            }
            
            /* Field validation highlighting */
            .field-error {
              border-color: #ef4444 !important;
              box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1) !important;
            }
            
            .field-error:focus {
              border-color: #ef4444 !important;
              box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.2) !important;
            }
            
            .error-message {
              animation: slideDown 0.3s ease-out;
            }
            
            @keyframes slideDown {
              from {
                opacity: 0;
                transform: translateY(-10px);
              }
              to {
                opacity: 1;
                transform: translateY(0);
              }
            }
            
            /* Enhanced error messages with smooth appearance */
            #addUserForm [id$="Error"] {
              transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
              transform-origin: left center;
            }
            
            #addUserForm [id$="Error"]:not(.hidden) {
              animation: errorSlideIn 0.3s ease-out;
            }
            
            @keyframes errorSlideIn {
              from {
                opacity: 0;
                transform: translateX(-10px) scale(0.95);
              }
              to {
                opacity: 1;
                transform: translateX(0) scale(1);
              }
            }
          </style>
          
          <script>
            // Enhanced modal animations - 2x Better
            const modal = document.getElementById('addUserModal');
            const modalContent = document.getElementById('modalContent');
            
            if (modal && modalContent) {
              // Show modal with enhanced animation
              window.showAddUserModal = function() {
                modal.classList.remove('hidden');
                modal.style.opacity = '0';
                modalContent.style.transform = 'scale(0.9) translateY(30px)';
                modalContent.style.opacity = '0';
                
                // Smooth backdrop blur animation
                requestAnimationFrame(() => {
                  modal.style.transition = 'opacity 0.5s cubic-bezier(0.4, 0, 0.2, 1)';
                  modal.style.opacity = '1';
                });
                
                // Enhanced modal content animation
                requestAnimationFrame(() => {
                setTimeout(() => {
                    modalContent.style.transition = 'all 0.6s cubic-bezier(0.34, 1.56, 0.64, 1)';
                  modalContent.style.transform = 'scale(1) translateY(0)';
                  modalContent.style.opacity = '1';
                }, 50);
                });
              };
              
              // Hide modal with enhanced animation
              window.hideAddUserModal = function() {
                modalContent.style.transition = 'all 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
                modalContent.style.transform = 'scale(0.95) translateY(20px)';
                modalContent.style.opacity = '0';
                
                modal.style.transition = 'opacity 0.4s cubic-bezier(0.4, 0, 0.2, 1)';
                modal.style.opacity = '0';
                
                setTimeout(() => {
                  modal.classList.add('hidden');
                  modalContent.style.transform = 'scale(0.9) translateY(30px)';
                }, 400);
              };
              
              // Close button functionality
              const closeBtn = document.getElementById('closeAddUserModal');
              if (closeBtn) {
                closeBtn.addEventListener('click', hideAddUserModal);
              }
              
              // Close on backdrop click
              modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                  hideAddUserModal();
                }
              });
            }
            
            // Single, clean implementation of user creation functionality
            // Helper function to show error modal
            function showErrorModal(message) {
              return new Promise((resolve) => {
                const modal = document.createElement('div');
                modal.innerHTML = `
                  <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.75); backdrop-filter: blur(8px); z-index: 10000; display: flex; align-items: center; justify-content: center; animation: fadeIn 0.2s ease-out;">
                    <div style="background: linear-gradient(135deg, #1f2937 0%, #374151 100%); border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 16px; box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5); max-width: 450px; width: 90%; padding: 32px; text-align: center; animation: slideIn 0.3s ease-out;">
                      <div style="display: flex; align-items: center; justify-content: center; margin-bottom: 20px;">
                        <div style="background: rgba(220, 38, 38, 0.2); padding: 12px; border-radius: 12px; display: flex; align-items: center; justify-content: center;">
                          <svg style="width: 24px; height: 24px; color: #f87171;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                          </svg>
                        </div>
                      </div>
                      <div style="margin-bottom: 24px; color: white; font-size: 18px; font-weight: 600; line-height: 1.4;">${message}</div>
                      <button id="errorOkBtn" style="background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); color: white; border: none; border-radius: 10px; padding: 14px 32px; font-weight: 600; cursor: pointer; transition: all 0.3s; box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3); font-size: 16px; min-width: 120px;" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 20px rgba(59, 130, 246, 0.4)'" onmouseout="this.style.transform='translateY(0px)'; this.style.boxShadow='0 4px 12px rgba(59, 130, 246, 0.3)'">
                        OK
                      </button>
                    </div>
                  </div>
                  
                  <style>
                    @keyframes fadeIn {
                      from { opacity: 0; }
                      to { opacity: 1; }
                    }
                    
                    @keyframes slideIn {
                      from { transform: scale(0.95) translateY(-20px); opacity: 0; }
                      to { transform: scale(1) translateY(0); opacity: 1; }
                    }
                  </style>
                `;
                
                document.body.appendChild(modal);
                
                modal.querySelector('#errorOkBtn').addEventListener('click', () => {
                  modal.style.animation = 'fadeOut 0.2s ease-out';
                  setTimeout(() => {
                    if (document.body.contains(modal)) {
                      document.body.removeChild(modal);
                    }
                    resolve();
                  }, 200);
                });
                
                // Add fadeOut animation
                const style = modal.querySelector('style');
                style.textContent += `
                  @keyframes fadeOut {
                    from { opacity: 1; }
                    to { opacity: 0; }
                  }
                `;
              });
            }

            // Helper function to highlight field with error
            function highlightFieldError(fieldId, errorMessage) {
              const field = document.getElementById(fieldId);
              if (field) {
                // Special handling for profile picture input
                if (fieldId === 'profilePhotoInput') {
                  // Find the upload container and highlight it
                  const uploadContainer = field.closest('.relative');
                  if (uploadContainer) {
                    uploadContainer.classList.add('border-red-500', 'border-2');
                    uploadContainer.classList.remove('border-white/20', 'border-neutral-600');
                  }
                } else if (fieldId === 'departmentOfficeSelect') {
                  // Handle select dropdown styling
                  field.classList.add('border-red-500', 'border-2');
                  field.classList.remove('border-white/20');
                } else {
                  field.classList.add('border-red-500', 'border-2');
                  field.classList.remove('border-white/20');
                }
                
                // Add or update inline error message
                let errorElement = document.getElementById(fieldId + '_error');
                if (!errorElement) {
                  errorElement = document.createElement('div');
                  errorElement.id = fieldId + '_error';
                  errorElement.className = 'text-red-400 text-xs mt-1';
                  errorElement.setAttribute('aria-live', 'polite');
                  errorElement.setAttribute('role', 'alert');
                  
                  // For profile photo, append to the upload container
                  if (fieldId === 'profilePhotoInput') {
                    const uploadContainer = field.closest('.relative');
                    if (uploadContainer) {
                      uploadContainer.appendChild(errorElement);
                    } else {
                      field.parentNode.appendChild(errorElement);
                    }
                  } else {
                    field.parentNode.appendChild(errorElement);
                  }
                }
                errorElement.textContent = errorMessage;
                errorElement.style.display = 'block';
              }
            }

            // Helper function to clear field error
            function clearFieldError(fieldId) {
              const field = document.getElementById(fieldId);
              if (field) {
                // Special handling for profile picture input
                if (fieldId === 'profilePhotoInput') {
                  const uploadContainer = field.closest('.relative');
                  if (uploadContainer) {
                    uploadContainer.classList.remove('border-red-500', 'border-2');
                    uploadContainer.classList.add('border-white/20');
                  }
                } else {
                  field.classList.remove('border-red-500', 'border-2');
                  field.classList.add('border-white/20');
                }
                
                const errorElement = document.getElementById(fieldId + '_error');
                if (errorElement) {
                  errorElement.style.display = 'none';
                }
              }
            }

            // Helper function to check if email already exists
            async function checkEmailExists(email) {
              try {
                const token = localStorage.getItem('token') || '';
                const response = await fetch(`http://localhost:3000/api/users/check-email`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                  },
                  body: JSON.stringify({ email })
                });
                const data = await response.json();
                return data.exists;
              } catch (error) {
                console.error('Error checking email:', error);
                return false;
              }
            }

            // Helper function to check if contact number already exists
            async function checkContactExists(contactNumber) {
              try {
                const token = localStorage.getItem('token') || '';
                const response = await fetch(`http://localhost:3000/api/users/check-contact`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                  },
                  body: JSON.stringify({ contactNumber })
                });
                const data = await response.json();
                return data.exists;
              } catch (error) {
                console.error('Error checking contact:', error);
                return false;
              }
            }

            // ✅ ENHANCED: Check if MPMEC Secretariat Admin already exists
            async function checkMPMECSecretariatAdminExists() {
              try {
                const token = localStorage.getItem('token') || '';
                const response = await fetch(`http://localhost:3000/api/users/check-mpmec-secretariat-admin`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                  }
                });
                const data = await response.json();
                if (data.success && data.exists && data.existingUser) {
                  console.log('✅ MPMEC Secretariat Admin exists:', data.existingUser);
                  return true;
                }
                return false;
              } catch (error) {
                console.error('Error checking MPMEC Secretariat Admin:', error);
                return false;
              }
            }

            async function createUserDirect() {
              console.log('createUserDirect function called');
              
              try {
                // Clear all previous error states
                ['firstNameField', 'middleNameField', 'lastNameField', 'usernameField', 'contactNumberField', 'passwordField', 'birthdateField', 'groupSelect', 'roleSelect', 'subRoleSelect', 'departmentOfficeSelect', 'externalCompanyName', 'userIdField'].forEach(clearFieldError);
                
                // Also clear the old addUserError div
                const addUserError = document.getElementById('addUserError');
                if (addUserError) {
                  addUserError.classList.add('hidden');
                  addUserError.textContent = '';
                }
                
                // Get form data directly
                const firstName = document.querySelector('input[name="firstName"]').value.trim();
                const middleName = document.querySelector('input[name="middleName"]').value.trim();
                const lastName = document.querySelector('input[name="lastName"]').value.trim();
                const username = document.querySelector('input[name="username"]').value.trim();
                const password = document.getElementById('passwordField').value;
                const birthdate = document.getElementById('birthdateField').value;
                const contactNumber = document.getElementById('contactNumberField').value.trim();
                const group = document.getElementById('groupSelect').value;
                const role = document.getElementById('roleSelect').value;
                const subRole = document.getElementById('subRoleSelect').value;
                const userId = document.getElementById('userIdField').value.trim();
                const profilePhoto = document.getElementById('profilePhotoInput').files[0];
                
                console.log('Form data collected for validation');
                
                // Get additional required fields
                const departmentOffice = document.getElementById('departmentOfficeSelect')?.value;
                const externalCompanyName = document.getElementById('externalCompanyName')?.value?.trim();
                
                // Build list of missing/invalid fields in the specified order
                const missingFields = [];
                const fieldValidations = [
                  { field: 'firstName', value: firstName, message: 'Error: First Name is required.', fieldId: 'firstNameField' },
                  { field: 'middleName', value: middleName, message: 'Error: Middle Name is required.', fieldId: 'middleNameField' },
                  { field: 'lastName', value: lastName, message: 'Error: Last Name is required.', fieldId: 'lastNameField' },
                  { field: 'email', value: username, message: 'Error: Email is required.', fieldId: 'usernameField' },
                  { field: 'contactNumber', value: contactNumber, message: 'Error: Contact Number is required.', fieldId: 'contactNumberField' },
                  { field: 'password', value: password, message: 'Error: Password is required.', fieldId: 'passwordField' },
                  { field: 'birthdate', value: birthdate, message: 'Error: Birthdate is required.', fieldId: 'birthdateField' },
                  { field: 'group', value: group, message: 'Error: Group is required.', fieldId: 'groupSelect' },
                  { field: 'role', value: role, message: 'Error: Role is required.', fieldId: 'roleSelect' },
                  { field: 'subrole', value: subRole, message: 'Error: Subrole is required.', fieldId: 'subRoleSelect' },
                  { field: 'departmentOffice', value: departmentOffice, message: 'Error: Department/Office is required.', fieldId: 'departmentOfficeSelect' },
                  { field: 'profilePicture', value: profilePhoto, message: 'Error: Profile Picture is required.', fieldId: 'profilePhotoInput' },
                  { field: 'userId', value: userId, message: 'Error: Unique User ID is required.', fieldId: 'userIdField' }
                ];
                
                // Check for missing required fields
                fieldValidations.forEach(validation => {
                  if (!validation.value) {
                    missingFields.push(validation);
                    highlightFieldError(validation.fieldId, validation.message.replace('Error: ', ''));
                  }
                });
                
                // Additional conditional validation: Company Name required for EIU group
                if (group === 'EIU' && !externalCompanyName) {
                  missingFields.push({
                    field: 'companyName',
                    value: externalCompanyName,
                    message: 'Error: Company Name is required.',
                    fieldId: 'externalCompanyName'
                  });
                  highlightFieldError('externalCompanyName', 'Company Name is required.');
                }
                
                // If there are missing fields, show sequential modals
                if (missingFields.length > 0) {
                  for (const missing of missingFields) {
                    await showErrorModal(missing.message);
                  }
                  // Focus on first missing field
                  const firstMissingField = document.getElementById(missingFields[0].fieldId);
                  if (firstMissingField) {
                    firstMissingField.focus();
                  }
                  return;
                }
                
                // Additional format validations
                
                // Contact Number format validation
                if (contactNumber && !contactNumber.startsWith('09')) {
                  highlightFieldError('contactNumberField', 'Contact number must start with 09.');
                  await showErrorModal('Error: Contact number must start with 09.');
                  document.getElementById('contactNumberField').focus();
                  return;
                }
                
                // Email format validation
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (username && !emailRegex.test(username)) {
                  highlightFieldError('usernameField', 'Enter a valid email address.');
                  await showErrorModal('Error: Enter a valid email address.');
                  document.getElementById('usernameField').focus();
                  return;
                }
                
                // Group-specific rule: Block EMS
                if (group === 'EMS') {
                  highlightFieldError('groupSelect', 'EMS group is not yet implemented.');
                  await showErrorModal('Error: EMS group is not yet implemented.');
                  document.getElementById('groupSelect').focus();
                  return;
                }
                
                // Validate Group → Role → Subrole combination
                const validRoleMapping = {
                  'LGU-PMT': ['MPMEC Secretariat', 'MPMEC'],
                  'LGU-IU': ['IO Officer', 'MDC', 'Municipal Officer'],
                  'EIU': ['Contractor', 'Program Partner Agency']
                };
                
                const validSubRoleMapping = {
                  'MPMEC Secretariat': ['Focal Person (Admin)'],
                  'MPMEC': ['Chairperson', 'Vice Chairperson', 'Member'],
                  'IO Officer': ['Department Encoder (Admin)'],
                  'MDC': ['Member'],
                  'Municipal Officer': ['Member'],
                  'Contractor': ['Head'],
                  'Program Partner Agency': ['Head']
                };
                
                // Check if the selected role is valid for the selected group
                if (!validRoleMapping[group] || !validRoleMapping[group].includes(role)) {
                  highlightFieldError('roleSelect', `Invalid Role for selected Group. Valid roles for ${group}: ${validRoleMapping[group]?.join(', ') || 'None'}`);
                  await showErrorModal(`Error: Invalid Role/Subrole combination for selected Group. Please select a valid role for ${group}.`);
                  document.getElementById('roleSelect').focus();
                  return;
                }
                
                // Check if the selected subrole is valid for the selected role
                if (!validSubRoleMapping[role] || !validSubRoleMapping[role].includes(subRole)) {
                  highlightFieldError('subRoleSelect', `Invalid Subrole for selected Role. Valid subroles for ${role}: ${validSubRoleMapping[role]?.join(', ') || 'None'}`);
                  await showErrorModal(`Error: Invalid Role/Subrole combination for selected Group. Please select a valid subrole for ${role}.`);
                  document.getElementById('subRoleSelect').focus();
                  return;
                }
                
                // Server-side uniqueness checks
                
                // Check email uniqueness
                const emailExists = await checkEmailExists(username);
                if (emailExists) {
                  highlightFieldError('usernameField', 'Email is already in use.');
                  await showErrorModal('Error: Email is already in use.');
                  document.getElementById('usernameField').focus();
                  return;
                }
                
                // Check contact number uniqueness
                const contactExists = await checkContactExists(contactNumber);
                if (contactExists) {
                  highlightFieldError('contactNumberField', 'Contact number is already in use.');
                  await showErrorModal('Error: Contact number is already in use.');
                  document.getElementById('contactNumberField').focus();
                  return;
                }
                
                // ✅ ENHANCED: Check for existing MPMEC Secretariat Admin
                if (group === 'LGU-PMT' && subRole === 'Focal Person (Admin)') {
                  console.log('🔍 Checking for existing MPMEC Secretariat Admin on client-side...');
                  
                  const secretariatExists = await checkMPMECSecretariatAdminExists();
                  if (secretariatExists) {
                    highlightFieldError('subRoleSelect', 'MPMEC Secretariat Admin already exists.');
                    await showErrorModal('MPMEC Secretariat Admin already exists. Delete the current account with safety measures before creating a new one.');
                    document.getElementById('subRoleSelect').focus();
                    return;
                  }
                }
                
                // All validations passed, proceed with user creation
                console.log('All validations passed, creating user...');
                
                const fullName = document.querySelector('input[name="fullName"]').value;
                const confirmPassword = document.getElementById('confirmPasswordField').value;
                const officeDepartment = document.getElementById('officeDepartmentSelect')?.value || '';
                
                // Validate password confirmation
                if (password !== confirmPassword) {
                  highlightFieldError('confirmPasswordField', 'Passwords do not match.');
                  await showErrorModal('Error: Passwords do not match. Please enter the same password in both fields.');
                  document.getElementById('confirmPasswordField').focus();
                  return;
                }
                
                // Validate age requirement
                const today = new Date();
                const birthDate = new Date(birthdate);
                let age = today.getFullYear() - birthDate.getFullYear();
                const monthDiff = today.getMonth() - birthDate.getMonth();
                if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
                  age--;
                }
                
                if (age < 18) {
                  highlightFieldError('birthdateField', `User must be at least 18 years old. Current age: ${age} years.`);
                  await showErrorModal(`Error: User must be at least 18 years old. Current age: ${age} years.`);
                  document.getElementById('birthdateField').focus();
                  return;
                }
                
                const payload = {
                  firstName: firstName.trim(),
                  middleName: middleName.trim(),
                  lastName: lastName.trim(),
                  fullName: fullName.trim(),
                  username: username.trim(),
                  email: username.trim(),
                  password,
                  birthdate,
                  contactNumber: contactNumber.trim(),
                  role: group.trim(), // This should be the group (LGU-PMT, LGU-IU, EIU, EMS) for the ENUM field
                  subRole: `${role.trim()} - ${subRole.trim()}`, // Combined role and subrole for storage
                  department: departmentOffice?.trim(),
                  officeDepartment: departmentOffice?.trim(),
                  externalCompanyName: externalCompanyName?.trim() || null,
                  userId: userId.trim(),
                  group: group.trim(),
                  actualRole: role.trim(), // Keep the actual role for validation
                  actualSubRole: subRole.trim() // Keep the actual subrole for validation
                };
                
                console.log('Sending payload to backend:', { ...payload, password: '***' });
                
                const token = localStorage.getItem('token') || '';
                
                const res = await fetch('http://localhost:3000/api/users', {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                  },
                  body: JSON.stringify(payload)
                });
                
                console.log('Backend response status:', res.status);
                const data = await res.json();
                console.log('Backend response data:', data);
                
                if (res.ok) {
                  // If user created successfully and profile picture exists, upload it
                  if (profilePhoto) {
                    try {
                      const formData = new FormData();
                      formData.append('profilePicture', profilePhoto);
                      formData.append('userId', userId);
                      
                      const profileRes = await fetch('http://localhost:3000/api/profile/upload-picture', {
                        method: 'POST',
                        headers: {
                          'Authorization': `Bearer ${token}`
                        },
                        body: formData
                      });
                      
                      if (profileRes.ok) {
                        console.log('Profile picture uploaded successfully');
                      } else {
                        console.log('Profile picture upload failed, but user was created');
                      }
                    } catch (profileError) {
                      console.error('Profile picture upload error:', profileError);
                    }
                  }
                  
                  alert('User created successfully!');
                  window.location.reload();
                } else {
                  alert('Failed to create user: ' + (data.error || 'Unknown error'));
                }
              } catch (err) {
                console.error('Error creating user:', err);
                alert('Failed to create user: ' + err.message);
              }
            }
            
            // Auto-generate full name
            document.addEventListener('DOMContentLoaded', function() {
              // Profile Photo Upload Functionality for Add User Modal
              const uploadPhotoBtn = document.getElementById('uploadPhotoBtn');
              const profilePhotoInput = document.getElementById('profilePhotoInput');
              const profilePhotoPreview = document.getElementById('profilePhotoPreview');
              
              if (uploadPhotoBtn && profilePhotoInput) {
                uploadPhotoBtn.addEventListener('click', () => {
                  profilePhotoInput.click();
                });
                
                profilePhotoInput.addEventListener('change', (e) => {
                  const file = e.target.files[0];
                  if (file) {
                    // Validate file size (5MB max)
                    if (file.size > 5 * 1024 * 1024) {
                      alert('File size must be less than 5MB');
                      return;
                    }
                    
                    // Validate file type
                    if (!file.type.startsWith('image/')) {
                      alert('Please select an image file');
                      return;
                    }
                    
                    // Create preview
                    const reader = new FileReader();
                    reader.onload = (e) => {
                      profilePhotoPreview.innerHTML = `<img src="${e.target.result}" alt="Profile Preview" class="w-20 h-20 rounded-full object-cover border-2 border-white/20">`;
                    };
                    reader.readAsDataURL(file);
                  }
                });
              }
              
              // Profile Photo Upload Functionality for Edit User Modal
              const editUploadPhotoBtn = document.getElementById('editUploadPhotoBtn');
              const editProfilePhotoInput = document.getElementById('editProfilePhotoInput');
              const editProfilePhotoPreview = document.getElementById('editProfilePhotoPreview');
              
              if (editUploadPhotoBtn && editProfilePhotoInput) {
                editUploadPhotoBtn.addEventListener('click', () => {
                  editProfilePhotoInput.click();
                });
                
                editProfilePhotoInput.addEventListener('change', (e) => {
                  const file = e.target.files[0];
                  if (file) {
                    // Validate file size (5MB max)
                    if (file.size > 5 * 1024 * 1024) {
                      alert('File size must be less than 5MB');
                      return;
                    }
                    
                    // Validate file type
                    if (!file.type.startsWith('image/')) {
                      alert('Please select an image file');
                      return;
                    }
                    
                    // Create preview
                    const reader = new FileReader();
                    reader.onload = (e) => {
                      editProfilePhotoPreview.innerHTML = `<img src="${e.target.result}" alt="Profile Preview" class="w-20 h-20 rounded-full object-cover border-2 border-white/20">`;
                    };
                    reader.readAsDataURL(file);
                  }
                });
              }
              
              // Make calendar icon clickable to open date picker
              const calendarIcon = document.querySelector('#birthdateField').nextElementSibling.querySelector('svg');
              const birthdateField = document.getElementById('birthdateField');
              
              if (calendarIcon && birthdateField) {
                calendarIcon.addEventListener('click', function() {
                  birthdateField.showPicker ? birthdateField.showPicker() : birthdateField.click();
                });
              }
              const first = document.querySelector('input[name="firstName"]');
              const middle = document.querySelector('input[name="middleName"]');
              const last = document.querySelector('input[name="lastName"]');
              const full = document.querySelector('input[name="fullName"]');
              
              // Error elements
              const firstNameError = document.getElementById('firstNameError');
              const middleNameError = document.getElementById('middleNameError');
              const lastNameError = document.getElementById('lastNameError');
              
              // Birthday validation elements
              const birthdateError = document.getElementById('birthdateError');
              
              // Contact number validation elements
              const contactNumberField = document.getElementById('contactNumberField');
              const contactNumberError = document.getElementById('contactNumberError');
              
              // Password validation elements
              const passwordField = document.getElementById('passwordField');
              const confirmPasswordField = document.getElementById('confirmPasswordField');
              const confirmPasswordError = document.getElementById('confirmPasswordError');
              const strengthText = document.getElementById('strengthText');
              const strengthBar = document.getElementById('strengthBar');
              const lengthCheck = document.getElementById('lengthCheck');
              const caseCheck = document.getElementById('caseCheck');
              const underscoreCheck = document.getElementById('underscoreCheck');
              const strengthCheck = document.getElementById('strengthCheck');
              
              // Office/Department container
              const officeDepartmentContainer = document.getElementById('officeDepartmentContainer');
              
              // Password validation function
              function validatePassword(password) {
                const checks = {
                  length: password.length >= 8,
                  case: /[a-z]/.test(password) && /[A-Z]/.test(password),
                  underscore: /_/.test(password)
                };
                
                // Calculate strength score
                let score = 0;
                if (checks.length) score += 25;
                if (checks.case) score += 25;
                if (checks.underscore) score += 25;
                
                // Additional complexity points
                if (/[0-9]/.test(password)) score += 15;
                if (/[^a-zA-Z0-9_]/.test(password)) score += 10;
                
                // Determine strength level
                let strength = 'Weak';
                let color = '#ef4444'; // red
                
                if (score >= 90) {
                  strength = 'Very Strong';
                  color = '#059669'; // emerald
                } else if (score >= 70) {
                  strength = 'Strong';
                  color = '#10b981'; // green
                } else if (score >= 50) {
                  strength = 'Medium';
                  color = '#f59e0b'; // amber
                } else {
                  strength = 'Weak';
                  color = '#ef4444'; // red
                }
                
                // Update UI
                strengthText.textContent = strength;
                strengthText.className = 'font-semibold';
                
                // Set text color based on strength
                if (strength === 'Very Strong') {
                  strengthText.classList.add('text-emerald-500');
                  strengthText.classList.remove('text-green-500', 'text-yellow-500', 'text-red-500');
                } else if (strength === 'Strong') {
                  strengthText.classList.add('text-green-500');
                  strengthText.classList.remove('text-emerald-500', 'text-yellow-500', 'text-red-500');
                } else if (strength === 'Medium') {
                  strengthText.classList.add('text-yellow-500');
                  strengthText.classList.remove('text-emerald-500', 'text-green-500', 'text-red-500');
                } else {
                  strengthText.classList.add('text-red-500');
                  strengthText.classList.remove('text-emerald-500', 'text-green-500', 'text-yellow-500');
                }
                
                strengthBar.style.width = score + '%';
                strengthBar.style.backgroundColor = color;
                
                // Update checkmarks with new UI
                const lengthCheckElement = lengthCheck.querySelector('svg');
                const caseCheckElement = caseCheck.querySelector('svg');
                const underscoreCheckElement = underscoreCheck.querySelector('svg');
                const strengthCheckElement = strengthCheck.querySelector('svg');
                
                if (checks.length) {
                  lengthCheck.style.backgroundColor = '#22c55e';
                  lengthCheck.style.borderColor = '#22c55e';
                  lengthCheckElement.style.opacity = '1';
                } else {
                  lengthCheck.style.backgroundColor = 'transparent';
                  lengthCheck.style.borderColor = '#4b5563';
                  lengthCheckElement.style.opacity = '0';
                }
                
                if (checks.case) {
                  caseCheck.style.backgroundColor = '#22c55e';
                  caseCheck.style.borderColor = '#22c55e';
                  caseCheckElement.style.opacity = '1';
                } else {
                  caseCheck.style.backgroundColor = 'transparent';
                  caseCheck.style.borderColor = '#4b5563';
                  caseCheckElement.style.opacity = '0';
                }
                
                if (checks.underscore) {
                  underscoreCheck.style.backgroundColor = '#22c55e';
                  underscoreCheck.style.borderColor = '#22c55e';
                  underscoreCheckElement.style.opacity = '1';
                } else {
                  underscoreCheck.style.backgroundColor = 'transparent';
                  underscoreCheck.style.borderColor = '#4b5563';
                  underscoreCheckElement.style.opacity = '0';
                }
                
                if (score >= 50) {
                  strengthCheck.style.backgroundColor = '#22c55e';
                  strengthCheck.style.borderColor = '#22c55e';
                  strengthCheckElement.style.opacity = '1';
                } else {
                  strengthCheck.style.backgroundColor = 'transparent';
                  strengthCheck.style.borderColor = '#4b5563';
                  strengthCheckElement.style.opacity = '0';
                }
                
                return score >= 50;
              }
              
              // Password field event listeners
              passwordField.addEventListener('input', function() {
                const isValid = validatePassword(this.value);
                confirmPasswordField.disabled = !isValid;
                
                if (confirmPasswordField.value && this.value !== confirmPasswordField.value) {
                  confirmPasswordError.textContent = 'Passwords do not match';
                  confirmPasswordError.classList.remove('hidden');
                } else {
                  confirmPasswordError.classList.add('hidden');
                }
                
                // Clean up any browser-generated elements
                cleanupPasswordFieldElements();
              });
              
              confirmPasswordField.addEventListener('input', function() {
                if (this.value !== passwordField.value) {
                  confirmPasswordError.textContent = 'Passwords do not match';
                  confirmPasswordError.classList.remove('hidden');
                } else {
                  confirmPasswordError.classList.add('hidden');
                }
                
                // Clean up any browser-generated elements
                cleanupPasswordFieldElements();
              });
              
              // Function to clean up any browser-generated password field elements
              function cleanupPasswordFieldElements() {
                // Remove any elements that might be added by the browser
                const passwordContainer = passwordField.parentElement;
                const confirmPasswordContainer = confirmPasswordField.parentElement;
                
                // Remove any elements that are not our custom toggle buttons
                if (passwordContainer) {
                  const children = Array.from(passwordContainer.children);
                  children.forEach(child => {
                    if (child !== passwordField && child.id !== 'togglePassword') {
                      child.remove();
                    }
                  });
                }
                
                if (confirmPasswordContainer) {
                  const children = Array.from(confirmPasswordContainer.children);
                  children.forEach(child => {
                    if (child !== confirmPasswordField && child.id !== 'toggleConfirmPassword') {
                      child.remove();
                    }
                  });
                }
              }
              
              // Add cleanup to focus and blur events
              passwordField.addEventListener('focus', cleanupPasswordFieldElements);
              passwordField.addEventListener('blur', cleanupPasswordFieldElements);
              confirmPasswordField.addEventListener('focus', cleanupPasswordFieldElements);
              confirmPasswordField.addEventListener('blur', cleanupPasswordFieldElements);
              
              // Password visibility toggle functionality
              const togglePassword = document.getElementById('togglePassword');
              const toggleConfirmPassword = document.getElementById('toggleConfirmPassword');
              const eyeIcon = document.getElementById('eyeIcon');
              const eyeIconConfirm = document.getElementById('eyeIconConfirm');
              
              // Eye icon SVG paths
              const eyeOpenPath = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>`;
              
              const eyeClosedPath = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.878 9.878L3 3m6.878 6.878L21 21"></path>`;
              
              if (togglePassword) {
                togglePassword.addEventListener('click', function() {
                  const type = passwordField.getAttribute('type') === 'password' ? 'text' : 'password';
                  passwordField.setAttribute('type', type);
                  
                  // Update the SVG content
                  if (type === 'text') {
                    eyeIcon.innerHTML = eyeClosedPath;
                  } else {
                    eyeIcon.innerHTML = eyeOpenPath;
                  }
                });
              }
              
              if (toggleConfirmPassword) {
                toggleConfirmPassword.addEventListener('click', function() {
                  const type = confirmPasswordField.getAttribute('type') === 'password' ? 'text' : 'password';
                  confirmPasswordField.setAttribute('type', type);
                  
                  // Update the SVG content
                  if (type === 'text') {
                    eyeIconConfirm.innerHTML = eyeClosedPath;
                  } else {
                    eyeIconConfirm.innerHTML = eyeOpenPath;
                  }
                });
              }
              
              // Name validation function - allow letters and spaces only, but not leading spaces
              function validateNameField(field, errorElement) {
                // Remove any non-letter and non-space characters immediately
                let originalValue = field.value;
                let lettersAndSpacesOnly = originalValue.replace(/[^a-zA-Z\s]/g, '');
                
                // Remove leading spaces
                lettersAndSpacesOnly = lettersAndSpacesOnly.replace(/^\s+/, '');
                
                // Remove multiple consecutive spaces and replace with single space
                lettersAndSpacesOnly = lettersAndSpacesOnly.replace(/\s+/g, ' ');
                
                if (originalValue !== lettersAndSpacesOnly) {
                  field.value = lettersAndSpacesOnly;
                }
                
                const value = lettersAndSpacesOnly.trim();
                if (value.length < 2) {
                  errorElement.textContent = 'Name must be at least 2 characters long';
                  errorElement.classList.remove('hidden');
                  return false;
                } else {
                  errorElement.classList.add('hidden');
                  return true;
                }
              }

              // ✅ ENHANCED: Special validation function for Middle Name - allows dot after letters
              function validateMiddleNameField(field, errorElement) {
                let originalValue = field.value;
                let processedValue = originalValue;
                
                // Remove any characters that are not letters, spaces, or dots
                processedValue = processedValue.replace(/[^a-zA-Z\s.]/g, '');
                
                // Remove leading spaces and dots
                processedValue = processedValue.replace(/^[\s.]+/, '');
                
                // Replace multiple consecutive spaces with single space
                processedValue = processedValue.replace(/\s+/g, ' ');
                
                // Handle dots - more browser-compatible approach
                // Remove leading dots
                processedValue = processedValue.replace(/^\./, '');
                // Remove dots after spaces (no dot after space)
                processedValue = processedValue.replace(/\s\./g, ' ');
                // Remove multiple consecutive dots (keep only one)
                processedValue = processedValue.replace(/\.{2,}/g, '.');
                // Remove dots followed by letters (dots should be at the end)
                processedValue = processedValue.replace(/\.([a-zA-Z])/g, '$1');
                
                // Validate the pattern: only allow dots after letters
                const invalidPattern = /^[^a-zA-Z]*\./ || /\s\./;
                if (invalidPattern.test(processedValue)) {
                  processedValue = processedValue.replace(/\./g, '');
                }
                
                // Allow only one dot in the entire string
                const dotMatches = processedValue.match(/\./g);
                if (dotMatches && dotMatches.length > 1) {
                  const firstDotIndex = processedValue.indexOf('.');
                  processedValue = processedValue.substring(0, firstDotIndex + 1) + 
                                   processedValue.substring(firstDotIndex + 1).replace(/\./g, '');
                }
                
                if (originalValue !== processedValue) {
                  field.value = processedValue;
                }
                
                const value = processedValue.trim();
                
                // For middle name, allow shorter lengths (like "J.")
                if (value.length < 1) {
                  errorElement.textContent = 'Middle name is required';
                  errorElement.classList.remove('hidden');
                  return false;
                } else if (value.length === 1 && !/[a-zA-Z]/.test(value)) {
                  errorElement.textContent = 'Middle name must contain at least one letter';
                  errorElement.classList.remove('hidden');
                  return false;
                } else {
                  errorElement.classList.add('hidden');
                  return true;
                }
              }
              
              // Capitalize words function
              function capitalizeWords(str) {
                return str.replace(/\b\w/g, l => l.toUpperCase());
              }
              
              // Birthday validation
              birthdateField.addEventListener('change', function() {
                const selectedDate = new Date(this.value);
                const today = new Date();
                const age = today.getFullYear() - selectedDate.getFullYear();
                const monthDiff = today.getMonth() - selectedDate.getMonth();
                const actualAge = monthDiff < 0 || (monthDiff === 0 && today.getDate() < selectedDate.getDate()) ? age - 1 : age;
                
                if (actualAge < 18) {
                  birthdateError.textContent = `User must be at least 18 years old. Current age: ${actualAge} years.`;
                  birthdateError.classList.remove('hidden');
                } else {
                  birthdateError.classList.add('hidden');
                }
              });
              
              // Set maximum date for birthdate field (18 years ago from today)
              function setMaxBirthdate() {
                const today = new Date();
                const maxDate = new Date(today.getFullYear() - 18, today.getMonth(), today.getDate());
                const maxDateString = maxDate.toISOString().split('T')[0];
                birthdateField.setAttribute('max', maxDateString);
              }
              
              // Initialize max date
              setMaxBirthdate();
              
              // Character counting for name fields
              const nameFields = ['firstName', 'middleName', 'lastName'];
              nameFields.forEach(fieldName => {
                const input = document.getElementById(`${fieldName}Field`);
                const countSpan = document.getElementById(`${fieldName}Count`);
                
                if (input && countSpan) {
                  input.addEventListener('input', function() {
                    const currentLength = this.value.length;
                    const maxLength = 20;
                    countSpan.textContent = `${currentLength}/${maxLength}`;
                    
                    // Update count color based on length
                    if (currentLength >= maxLength) {
                      countSpan.className = 'text-xs text-red-500 font-medium';
                    } else if (currentLength >= maxLength * 0.8) {
                      countSpan.className = 'text-xs text-orange-500 font-medium';
                    } else {
                      countSpan.className = 'text-xs text-gray-400';
                    }
                  });
                }
              });
              
              // Character counting for contact number
              const contactInput = document.getElementById('contactNumberField');
              const contactCount = document.getElementById('contactNumberCount');
              
              if (contactInput && contactCount) {
                contactInput.addEventListener('input', function() {
                  const currentLength = this.value.length;
                  const maxLength = 11;
                  contactCount.textContent = `${currentLength}/${maxLength}`;
                  
                  // Update count color based on length
                  if (currentLength >= maxLength) {
                    contactCount.className = 'text-xs text-red-500 font-medium';
                  } else if (currentLength >= maxLength * 0.8) {
                    contactCount.className = 'text-xs text-orange-500 font-medium';
                  } else {
                    contactCount.className = 'text-xs text-gray-400';
                  }
                  
                  // Validate contact number format
                  const contactValue = this.value;
                  const contactError = document.getElementById('contactNumberError');
                  
                  if (contactValue.length > 0) {
                    if (!contactValue.startsWith('09')) {
                      contactError.textContent = 'Contact number must start with "09"';
                      contactError.classList.remove('hidden');
                      this.classList.add('border-red-500');
                    } else if (contactValue.length !== 11) {
                      contactError.textContent = 'Contact number must be exactly 11 digits';
                      contactError.classList.remove('hidden');
                      this.classList.add('border-red-500');
                    } else if (!/^\d+$/.test(contactValue)) {
                      contactError.textContent = 'Contact number must contain only digits';
                      contactError.classList.remove('hidden');
                      this.classList.add('border-red-500');
                    } else {
                      contactError.classList.add('hidden');
                      this.classList.remove('border-red-500');
                    }
                  } else {
                    contactError.classList.add('hidden');
                    this.classList.remove('border-red-500');
                  }
                });
              }
              
              // Contact number validation
              contactNumberField.addEventListener('input', function() {
                const value = this.value.replace(/\D/g, '');
                if (value.length < 11) {
                  contactNumberError.textContent = 'Contact number must be at least 11 digits';
                  contactNumberError.classList.remove('hidden');
                } else {
                  contactNumberError.classList.add('hidden');
                }
                this.value = value;
              });
              
              // User ID generation functionality
              const generateUserIdBtn = document.getElementById('generateUserIdBtn');
              const userIdField = document.getElementById('userIdField');
              const usernameField = document.querySelector('input[name="username"]');
              const groupSelect = document.getElementById('groupSelect');
              
              // Store the generated User ID for validation
              let generatedUserId = null;
              
              generateUserIdBtn.addEventListener('click', function() {
                const email = usernameField.value.trim();
                const selectedGroup = groupSelect.value;
                
                if (!email) {
                  showVerificationMessage('Please enter an email address first.', 'error');
                  return;
                }
                
                if (!selectedGroup) {
                  showVerificationMessage('Please select a User Group first.', 'error');
                  return;
                }
                
                // Basic email validation
                const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailRegex.test(email)) {
                  showVerificationMessage('Please enter a valid email address.', 'error');
                  return;
                }
                
                // Show loading state
                generateUserIdBtn.disabled = true;
                generateUserIdBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Generating...';
                
                // Generate Unique User ID based on group and sequential count
                generateUniqueUserId(selectedGroup, email);
              });
              
              // Function to generate Unique User ID
              async function generateUniqueUserId(group, email) {
                try {
                  // Get the count of existing users in this group
                  const response = await fetch(`http://localhost:3000/api/users/count-by-group?group=${encodeURIComponent(group)}`, {
                    headers: {
                      'Authorization': `Bearer ${getCookie('token')}`
                    }
                  });
                  
                  let userCount = 0;
                  if (response.ok) {
                    const data = await response.json();
                    userCount = data.count || 0;
                  }
                  
                  // Generate the next sequential number
                  const nextNumber = userCount + 1;
                  const paddedNumber = nextNumber.toString().padStart(4, '0');
                  
                  // Create Unique User ID based on group
                  const userId = `${group}-${paddedNumber}`;
                  generatedUserId = userId;
                  
                  // Update the UI - auto-fill the field with the generated ID
                  userIdField.value = userId;
                  userIdField.classList.remove('border-red-500', 'border-gray-300');
                  userIdField.classList.add('border-green-500');
                  userIdField.readOnly = true;
                  userIdField.classList.add('bg-gray-100');
                  
                  showVerificationMessage(`Unique User ID ${userId} has been generated successfully!`, 'success');
                  
                  // Enable the Create User button
                  const createUserBtn = document.getElementById('createUserBtn');
                  if (createUserBtn) {
                    createUserBtn.disabled = false;
                    createUserBtn.classList.remove('opacity-50', 'cursor-not-allowed');
                    createUserBtn.classList.add('hover:bg-[#2a3bb8]');
                  }
                  
                } catch (error) {
                  console.error('Error generating User ID:', error);
                  showVerificationMessage('Failed to generate User ID. Please try again.', 'error');
                } finally {
                  // Reset button state
                  generateUserIdBtn.disabled = false;
                  generateUserIdBtn.innerHTML = 'Generate User ID';
                }
              }
              
              // Function to validate entered User ID
              function validateEnteredUserId() {
                const enteredUserId = this.value.trim();
                
                if (enteredUserId === generatedUserId) {
                  this.classList.remove('border-red-500', 'border-gray-300');
                  this.classList.add('border-green-500');
                  showVerificationMessage('User ID verified successfully!', 'success');
                } else if (enteredUserId && enteredUserId !== generatedUserId) {
                  this.classList.remove('border-green-500', 'border-gray-300');
                  this.classList.add('border-red-500');
                  showVerificationMessage('Invalid User ID. Please check your email and try again.', 'error');
                } else {
                  this.classList.remove('border-green-500', 'border-red-500');
                  this.classList.add('border-gray-300');
                }
              }
              
              // Helper function to get cookie value
              function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                if (parts.length === 2) return parts.pop().split(';').shift();
                return '';
              }
              
              function showVerificationMessage(message, type) {
                // Remove existing message
                const existingMessage = document.querySelector('.verification-message');
                if (existingMessage) {
                  existingMessage.remove();
                }
                
                // Create new message
                const messageDiv = document.createElement('div');
                messageDiv.className = `verification-message mt-2 px-3 py-2 text-xs rounded-lg ${
                  type === 'success' ? 'bg-green-100 text-green-700 border border-green-200' : 
                  type === 'error' ? 'bg-red-100 text-red-700 border border-red-200' : 
                  'bg-blue-100 text-blue-700 border border-blue-200'
                }`;
                messageDiv.textContent = message;
                
                // Insert after the generate button
                generateUserIdBtn.parentNode.insertBefore(messageDiv, generateUserIdBtn.nextSibling);
                
                // Auto-remove after 5 seconds
                setTimeout(() => {
                  if (messageDiv.parentNode) {
                    messageDiv.remove();
                  }
                }, 5000);
              }
              
              // Add validation event listeners
              first.addEventListener('input', () => validateNameField(first, firstNameError));
              middle.addEventListener('input', () => validateMiddleNameField(middle, middleNameError)); // ✅ Use special middle name validation
              last.addEventListener('input', () => validateNameField(last, lastNameError));
              
              // ✅ ENHANCED: Add input validation with special handling for middle name
              [first, last].forEach(field => {
                field.addEventListener('keypress', function(e) {
                  // Allow backspace, delete, tab, escape, enter
                  if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||
                      // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                      (e.keyCode === 65 && e.ctrlKey === true) ||
                      (e.keyCode === 67 && e.ctrlKey === true) ||
                      (e.keyCode === 86 && e.ctrlKey === true) ||
                      (e.keyCode === 88 && e.ctrlKey === true)) {
                    return;
                  }
                  // Block non-letter and non-space characters
                  if (!/[a-zA-Z\s]/.test(e.key)) {
                    e.preventDefault();
                    return;
                  }
                  
                  // Block space if it's the first character or if there's already a space at the end
                  if (e.key === ' ') {
                    const currentValue = field.value;
                    if (currentValue.length === 0 || currentValue.endsWith(' ')) {
                      e.preventDefault();
                      return;
                    }
                  }
                });
                
                // Also block paste of non-letter and non-space characters
                field.addEventListener('paste', function(e) {
                  e.preventDefault();
                  const paste = (e.clipboardData || window.clipboardData).getData('text');
                  let lettersAndSpacesOnly = paste.replace(/[^a-zA-Z\s]/g, '');
                  
                  // Remove leading spaces from pasted content
                  lettersAndSpacesOnly = lettersAndSpacesOnly.replace(/^\s+/, '');
                  
                  // Remove multiple consecutive spaces
                  lettersAndSpacesOnly = lettersAndSpacesOnly.replace(/\s+/g, ' ');
                  
                  // Only add if it doesn't start with space and current field doesn't end with space
                  const currentValue = field.value;
                  if (lettersAndSpacesOnly && !lettersAndSpacesOnly.startsWith(' ') && 
                      (!currentValue.endsWith(' ') || currentValue.length === 0)) {
                    field.value = field.value + lettersAndSpacesOnly;
                  } else if (lettersAndSpacesOnly && !lettersAndSpacesOnly.startsWith(' ')) {
                    field.value = field.value + lettersAndSpacesOnly;
                  }
                  
                  validateNameField(field, field.id === 'firstNameField' ? firstNameError : 
                    field.id === 'middleNameField' ? middleNameError : lastNameError);
                });
              });
              
              // ✅ ENHANCED: Special keypress handler for middle name to allow dots
              middle.addEventListener('keypress', function(e) {
                // Allow backspace, delete, tab, escape, enter
                if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||
                    // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                    (e.keyCode === 65 && e.ctrlKey === true) ||
                    (e.keyCode === 67 && e.ctrlKey === true) ||
                    (e.keyCode === 86 && e.ctrlKey === true) ||
                    (e.keyCode === 88 && e.ctrlKey === true)) {
                  return;
                }
                
                // For middle name, allow letters, spaces, and dots
                if (!/[a-zA-Z\s.]/.test(e.key)) {
                  e.preventDefault();
                  return;
                }
                
                // Block space if it's the first character or if there's already a space at the end
                if (e.key === ' ') {
                  const currentValue = this.value;
                  if (currentValue.length === 0 || currentValue.endsWith(' ')) {
                    e.preventDefault();
                    return;
                  }
                }
                
                // Block dot if it's the first character or if there's already a dot, or after space
                if (e.key === '.') {
                  const currentValue = this.value;
                  // Don't allow dot as first character
                  if (currentValue.length === 0) {
                    e.preventDefault();
                    return;
                  }
                  // Don't allow multiple dots
                  if (currentValue.includes('.')) {
                    e.preventDefault();
                    return;
                  }
                  // Don't allow dot after space
                  if (currentValue.endsWith(' ')) {
                    e.preventDefault();
                    return;
                  }
                }
              });
              
              // ✅ ENHANCED: Special paste handler for middle name to allow dots
              middle.addEventListener('paste', function(e) {
                e.preventDefault();
                const paste = (e.clipboardData || window.clipboardData).getData('text');
                let processedPaste = paste.replace(/[^a-zA-Z\s.]/g, ''); // Allow dots
                
                // Remove leading spaces and dots
                processedPaste = processedPaste.replace(/^[\s.]+/, '');
                
                // Remove multiple consecutive spaces
                processedPaste = processedPaste.replace(/\s+/g, ' ');
                
                // Remove multiple dots and dots after spaces
                processedPaste = processedPaste.replace(/\.{2,}/g, '.');
                processedPaste = processedPaste.replace(/\s\./g, ' ');
                
                // Only add if valid
                const currentValue = this.value;
                if (processedPaste && !processedPaste.startsWith(' ') && !processedPaste.startsWith('.')) {
                  // Check if adding this would create multiple dots
                  const combined = currentValue + processedPaste;
                  const dotCount = (combined.match(/\./g) || []).length;
                  if (dotCount <= 1) {
                    this.value = combined;
                    validateMiddleNameField(this, middleNameError);
                  }
                }
              });
              
              function updateFullName() {
                const firstName = capitalizeWords(first.value.trim());
                const middleName = capitalizeWords(middle.value.trim());
                const lastName = capitalizeWords(last.value.trim());
                full.value = [firstName, middleName, lastName].filter(Boolean).join(' ');
              }
              [first, middle, last].forEach(f => f.addEventListener('input', updateFullName));

              // Role/Subrole logic
              const roleSelect = document.getElementById('roleSelect');
              const subRoleSelect = document.getElementById('subRoleSelect');
              const subRoleContainer = document.getElementById('subRoleContainer');

              const roleOptions = {
                'LGU-PMT': ['MPMEC Secretariat', 'MPMEC'],
                'LGU-IU': ['IO Officer', 'MDC', 'Municipal Officer'],
                'EIU': ['Contractor', 'Program Partner Agency'],
                'EMS': ['Soon to be implemented']
              };

              const subRoleOptions = {
                'MPMEC Secretariat': ['Focal Person (Admin)'],
                'MPMEC': ['Chairperson', 'Vice Chairperson', 'Member'],
                'IO Officer': ['Department Encoder (Admin)'],
                'MDC': ['Member'],
                'Municipal Officer': ['Member'],
                'Contractor': ['Head'],
                'Program Partner Agency': ['Head'],
                'Soon to be implemented': []
              };

              groupSelect.addEventListener('change', function() {
                const selectedGroup = this.value;
                console.log('Group selected:', selectedGroup);
                console.log('Role select element:', roleSelect);
                console.log('Subrole select element:', subRoleSelect);
                
                roleSelect.innerHTML = '<option value="">Select Role</option>';
                subRoleSelect.innerHTML = '<option value="">Select Subrole</option>';
                if (officeDepartmentContainer) officeDepartmentContainer.classList.add('hidden');
                
                // Reset sub-role visibility
                if (subRoleContainer) subRoleContainer.classList.remove('hidden');

                // Handle Department/Office dropdown based on selected group
                const departmentSelect = document.getElementById('departmentOfficeSelect');
                const externalCompanyContainer = document.getElementById('externalCompanyContainer');
                
                if (departmentSelect) {
                  // Clear existing options except the first one
                  departmentSelect.innerHTML = '<option value="" class="bg-neutral-800 text-white">Select Department/Office</option>';
                  
                  if (selectedGroup === 'EIU') {
                    // For EIU: Show only External Partner Company
                    const option = document.createElement('option');
                    option.value = 'External Partner Company';
                    option.textContent = 'External Partner Company';
                    option.className = 'bg-neutral-800 text-white';
                    departmentSelect.appendChild(option);
                    
                    // Show free text field for company name
                    if (externalCompanyContainer) {
                      externalCompanyContainer.classList.remove('hidden');
                    }
                  } else if (selectedGroup === 'LGU-PMT' || selectedGroup === 'LGU-IU') {
                    // For LGU-PMT and LGU-IU: Show all departments except External Partner Company
                    const departments = [
                      'Municipal Engineer\'s Office',
                      'Municipal Agriculturist\'s Office',
                      'Municipal General Services Office',
                      'Municipal Social Welfare and Development Office',
                      'Municipal Disaster and Risk Reduction Management Office',
                      'Municipal Planning and Development Office',
                      'Municipal Treasurer\'s Office',
                      'Municipal Budget Office',
                      'Municipal Health Office',
                      'Municipal Civil Registry Office',
                      'Municipal Environment And Natural Resources Office'
                    ];
                    
                    departments.forEach(dept => {
                      const option = document.createElement('option');
                      option.value = dept;
                      option.textContent = dept;
                      option.className = 'bg-neutral-800 text-white';
                      departmentSelect.appendChild(option);
                    });
                    
                    // Hide free text field
                    if (externalCompanyContainer) {
                      externalCompanyContainer.classList.add('hidden');
                    }
                  } else {
                    // For other groups (EMS): Show all departments
                    const allDepartments = [
                      'Municipal Engineer\'s Office',
                      'Municipal Agriculturist\'s Office',
                      'Municipal General Services Office',
                      'Municipal Social Welfare and Development Office',
                      'Municipal Disaster and Risk Reduction Management Office',
                      'Municipal Planning and Development Office',
                      'Municipal Treasurer\'s Office',
                      'Municipal Budget Office',
                      'Municipal Health Office',
                      'Municipal Civil Registry Office',
                      'Municipal Environment And Natural Resources Office',
                      'External Partner Company'
                    ];
                    
                    allDepartments.forEach(dept => {
                      const option = document.createElement('option');
                      option.value = dept;
                      option.textContent = dept;
                      option.className = 'bg-neutral-800 text-white';
                      departmentSelect.appendChild(option);
                    });
                    
                    // Hide free text field
                    if (externalCompanyContainer) {
                      externalCompanyContainer.classList.add('hidden');
                    }
                  }
                }

                if (selectedGroup && roleOptions[selectedGroup]) {
                  console.log('Role options for', selectedGroup, ':', roleOptions[selectedGroup]);
                  // Show special message for EMS
                  if (selectedGroup === 'EMS') {
                    roleSelect.innerHTML = '<option value="">Soon to be implemented</option>';
                    roleSelect.disabled = true;
                  } else {
                    roleSelect.disabled = false;
                    roleOptions[selectedGroup].forEach(role => {
                      const option = document.createElement('option');
                      option.value = role;
                      option.textContent = role;
                      roleSelect.appendChild(option);
                    });
                    console.log('Role options populated');
                  }
                }
              });

              roleSelect.addEventListener('change', function() {
                const selectedRole = this.value;
                const selectedGroup = groupSelect.value;
                
                subRoleSelect.innerHTML = '<option value="">Select Subrole</option>';
                if (officeDepartmentContainer) officeDepartmentContainer.classList.add('hidden');

                // Show sub-role container for all groups except EMS
                if (selectedGroup === 'EMS') {
                  if (subRoleContainer) subRoleContainer.classList.add('hidden');
                } else {
                  if (subRoleContainer) subRoleContainer.classList.remove('hidden');
                }

                if (selectedRole && subRoleOptions[selectedRole]) {
                  subRoleOptions[selectedRole].forEach(subRole => {
                    const option = document.createElement('option');
                    option.value = subRole;
                    option.textContent = subRole;
                    subRoleSelect.appendChild(option);
                  });
                }


                // Show office/department for LGU-IU with specific roles
                if (selectedGroup === 'LGU-IU' && (selectedRole === 'IO Officer' || selectedRole === 'MDC' || selectedRole === 'Municipal Officer')) {
                  if (officeDepartmentContainer) officeDepartmentContainer.classList.remove('hidden');
                }
              });

              // Set up Create User button with clean event listener
              const createUserBtn = document.getElementById('createUserBtn');
              if (createUserBtn) {
                console.log('Create User button found, setting up event listener...');
                
                // Remove any existing event listeners
                const newBtn = createUserBtn.cloneNode(true);
                createUserBtn.parentNode.replaceChild(newBtn, createUserBtn);
                
                // Add the correct event listener
                newBtn.addEventListener('click', async function() {
                  console.log('Create User (Direct) button clicked!');
                  await createUserDirect();
                });
              } else {
                console.error('Create User button not found!');
              }

              // Run immediately
              setTimeout(forceLoadAllProfilePictures, 500);
              
              // Run again after 2 seconds
              setTimeout(forceLoadAllProfilePictures, 2000);
              
              // Run again after 5 seconds
              setTimeout(forceLoadAllProfilePictures, 5000);
              
              // Run every 10 seconds for 1 minute
              let retryAttempts = 0;
              const maxRetryAttempts = 6;
              const interval = setInterval(() => {
                retryAttempts++;
                console.log(`🔄 Attempt ${retryAttempts}/${maxRetryAttempts} - Force loading profile pictures...`);
                forceLoadAllProfilePictures();
                
                if (retryAttempts >= maxRetryAttempts) {
                  clearInterval(interval);
                  console.log('🛑 Stopped periodic profile picture loading');
                }
              }, 10000);
              
              // Add event listeners to clear errors when users start typing
              const fieldsToClearErrors = [
                'firstNameField', 'middleNameField', 'lastNameField', 'usernameField',
                'contactNumberField', 'passwordField', 'birthdateField', 'groupSelect',
                'roleSelect', 'subRoleSelect', 'departmentOfficeSelect', 
                'externalCompanyName', 'userIdField', 'profilePhotoInput'
              ];
              
              fieldsToClearErrors.forEach(fieldId => {
                const field = document.getElementById(fieldId);
                if (field) {
                  const eventType = field.type === 'file' ? 'change' : 'input';
                  field.addEventListener(eventType, () => {
                    clearFieldError(fieldId);
                    // Also clear the old addUserError div when user starts fixing issues
                    const addUserError = document.getElementById('addUserError');
                    if (addUserError) {
                      addUserError.classList.add('hidden');
                      addUserError.textContent = '';
                    }
                  });
                }
              });
              
              // Clear all errors when modal opens
              const addUserBtn = document.getElementById('addUserBtn');
              if (addUserBtn) {
                addUserBtn.addEventListener('click', () => {
                  // Clear all field errors
                  fieldsToClearErrors.forEach(clearFieldError);
                  // Clear the old addUserError div
                  const addUserError = document.getElementById('addUserError');
                  if (addUserError) {
                    addUserError.classList.add('hidden');
                    addUserError.textContent = '';
                  }
                });
              }
            });
          </script>
        </div>
      </div>
      <!-- Enhanced Edit User Modal - System Admin Theme -->
      <div id="editUserModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/80 backdrop-blur-lg hidden" style="backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px);">
        <div class="modal-content bg-gradient-to-br from-neutral-900 via-neutral-800 to-neutral-900 backdrop-blur-xl border border-white/20 rounded-3xl shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden relative transform transition-all duration-500 ease-out scale-95 opacity-0 mx-auto" id="editUserModalContent">
          <!-- Enhanced Header -->
          <div class="sticky top-0 bg-gradient-to-r from-neutral-800/50 via-neutral-700/70 to-neutral-800/50 backdrop-blur-md border-b border-white/15 px-6 py-4 rounded-t-3xl shadow-lg">
            <div class="flex items-center justify-between">
              <div class="flex items-center gap-3">
                <div class="w-10 h-10 rounded-xl bg-gradient-to-br from-neutral-600 to-neutral-700 flex items-center justify-center shadow-xl">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                  </svg>
                </div>
                <div>
                  <h2 class="text-xl font-bold text-white">Edit User</h2>
                  <p class="text-sm text-gray-300">Update user information and settings</p>
                </div>
              </div>
              <button type="button" id="closeEditUserModal" class="w-8 h-8 rounded-lg bg-neutral-700/50 hover:bg-neutral-600/50 flex items-center justify-center text-gray-300 hover:text-white transition-all duration-200">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
              </button>
            </div>
          </div>

          <!-- Scrollable Content -->
          <div class="overflow-y-auto max-h-[calc(90vh-140px)] p-6">
            <form id="editUserForm" class="space-y-6">
            <input type="hidden" name="id" />
              
              <!-- Name Fields -->
            <div class="flex gap-2">
              <div class="w-1/3">
                  <label class="block text-sm font-medium text-white mb-2">First Name</label>
                  <input type="text" name="firstName" placeholder="First Name" maxlength="20" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
                  <div class="flex items-center justify-between mt-1">
                    <div id="editFirstNameError" class="text-red-400 text-xs hidden">Numbers and special characters are not allowed.</div>
                    <div id="editFirstNameCount" class="text-xs text-gray-400">0/20</div>
                  </div>
              </div>
              <div class="w-1/3">
                  <label class="block text-sm font-medium text-white mb-2">Middle Name</label>
                  <input type="text" name="middleName" placeholder="Middle Name (e.g., J.)" maxlength="20" class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
                  <div class="flex items-center justify-between mt-1">
                    <div id="editMiddleNameError" class="text-red-400 text-xs hidden">Numbers and special characters are not allowed (except dot after letters).</div>
                    <div id="editMiddleNameCount" class="text-xs text-gray-400">0/20</div>
                  </div>
              </div>
              <div class="w-1/3">
                  <label class="block text-sm font-medium text-white mb-2">Last Name</label>
                  <input type="text" name="lastName" placeholder="Last Name" maxlength="20" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
                  <div class="flex items-center justify-between mt-1">
                    <div id="editLastNameError" class="text-red-400 text-xs hidden">Numbers and special characters are not allowed.</div>
                    <div id="editLastNameCount" class="text-xs text-gray-400">0/20</div>
              </div>
            </div>
              </div>
              
              <!-- Full Name (Auto-generated) -->
              <div>
                <label class="block text-sm font-medium text-white mb-2">Full Name (auto)</label>
                <input type="text" name="fullName" placeholder="Full Name (auto)" readonly class="bg-neutral-700/60 border border-white/20 rounded-lg px-4 py-2 w-full text-gray-300 cursor-not-allowed backdrop-blur-sm" />
                <div class="text-xs text-gray-400 mt-1">Automatically generated from first, middle, and last names</div>
              </div>
              
              <!-- Email (Username) -->
              <div>
                <label class="block text-sm font-medium text-white mb-2">Email (Username)</label>
            <div class="relative">
                  <input type="text" name="username" placeholder="Email (Username)" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 pr-10 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
                  <div class="absolute right-3 top-1/2 -translate-y-1/2 cursor-help group">
                    <svg class="w-5 h-5 text-gray-400 hover:text-white transition-colors" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-8-3a1 1 0 00-.867.5 1 1 0 11-1.731-1A3 3 0 0113 8a3.001 3.001 0 01-2 2.83V11a1 1 0 11-2 0v-1a1 1 0 011-1 1 1 0 100-2zm0 8a1 1 0 100-2 1 1 0 000 2z" clip-rule="evenodd"></path>
                  </svg>
                    <div class="absolute bottom-full right-0 mb-2 w-64 p-2 bg-neutral-800/90 text-white text-xs rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10 backdrop-blur-sm border border-white/20">
                    Enter a valid email. This will serve as your login username and for account verification.
                      <div class="absolute top-full right-4 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-neutral-800/90"></div>
                  </div>
                </div>
              </div>
                <button type="button" id="editVerifyEmailBtn" class="mt-2 px-3 py-1 bg-gradient-to-r from-blue-600 to-blue-700 text-white text-xs rounded-lg hover:from-blue-700 hover:to-blue-800 transition-all duration-200">
                Verify Email
              </button>
                <div class="text-xs text-gray-400 mt-1">Enter a valid email address that will be used as the username</div>
            </div>
            
              <!-- Contact Number -->
              <div>
                <label class="block text-sm font-medium text-white mb-2">Contact Number</label>
                <input type="tel" name="contactNumber" id="editContactNumberField" placeholder="09XXXXXXXXX" maxlength="11" pattern="09[0-9]{9}" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
                <div class="flex items-center justify-between mt-1">
                  <div id="editContactNumberError" class="text-red-400 text-xs hidden">Must start with "09" and be exactly 11 digits.</div>
                  <div id="editContactNumberCount" class="text-xs text-gray-400">0/11</div>
                </div>
              </div>
              
              <!-- Birthdate -->
            <div>
                <label class="block text-sm font-medium text-white mb-2">Birthdate *</label>
                <div class="relative">
                  <input type="date" name="birthdate" id="editBirthdateField" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 pr-10 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all cursor-pointer backdrop-blur-sm" style="appearance: none; -webkit-appearance: none; -moz-appearance: none; color-scheme: dark;" />
                  <div class="absolute right-3 top-1/2 -translate-y-1/2 flex items-center justify-center h-5">
                    <svg class="w-5 h-5 text-gray-400 hover:text-white transition-colors cursor-pointer" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                  </div>
                </div>
                <div id="editBirthdateError" class="text-red-400 text-xs mt-1 hidden">User must be at least 18 years old.</div>
                <div class="text-xs text-gray-400 mt-1">Select a date (user must be at least 18 years old)</div>
            </div>
            
              <!-- Group and Role Selection -->
            <div class="flex gap-2">
                <div class="w-1/2">
                  <label class="block text-sm font-medium text-white mb-2">Select Group</label>
                  <select name="group" id="editGroupSelect" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm">
                    <option value="" class="bg-neutral-800 text-white">Select Group</option>
                    <option value="LGU-PMT" class="bg-neutral-800 text-white">LGU-PMT</option>
                    <option value="LGU-IU" class="bg-neutral-800 text-white">LGU-IU</option>
                    <option value="EIU" class="bg-neutral-800 text-white">EIU</option>
                    <option value="EMS" class="bg-neutral-800 text-white">EMS</option>
              </select>
                </div>
                <div class="w-1/2">
                  <label class="block text-sm font-medium text-white mb-2">Select Role</label>
                  <select name="role" id="editRoleSelect" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm">
                    <option value="" class="bg-neutral-800 text-white">Select Role</option>
              </select>
            </div>
              </div>
              
              <!-- Subrole and Project Code -->
            <div class="flex gap-2">
              <div id="editSubRoleContainer" class="w-1/2">
                  <label class="block text-sm font-medium text-white mb-2">Select Subrole</label>
                  <select name="subRole" id="editSubRoleSelect" class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm">
                    <option value="" class="bg-neutral-800 text-white">Select Subrole</option>
                </select>
              </div>
            </div>
            
              <!-- Department/Office Field -->
              <div>
                <label class="block text-sm font-medium text-white mb-2">Department/Office</label>
                <select name="departmentOffice" id="editDepartmentOfficeSelect" class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm">
                  <option value="" class="bg-neutral-800 text-white">Select Department/Office</option>
                  <option value="Municipal Engineer's Office" class="bg-neutral-800 text-white">Municipal Engineer's Office</option>
                  <option value="Municipal Agriculturist's Office" class="bg-neutral-800 text-white">Municipal Agriculturist's Office</option>
                  <option value="Municipal General Services Office" class="bg-neutral-800 text-white">Municipal General Services Office</option>
                  <option value="Municipal Social Welfare and Development Office" class="bg-neutral-800 text-white">Municipal Social Welfare and Development Office</option>
                  <option value="Municipal Disaster and Risk Reduction Management Office" class="bg-neutral-800 text-white">Municipal Disaster and Risk Reduction Management Office</option>
                  <option value="Municipal Planning and Development Office" class="bg-neutral-800 text-white">Municipal Planning and Development Office</option>
                  <option value="Municipal Treasurer's Office" class="bg-neutral-800 text-white">Municipal Treasurer's Office</option>
                  <option value="Municipal Budget Office" class="bg-neutral-800 text-white">Municipal Budget Office</option>
                  <option value="Municipal Health Office" class="bg-neutral-800 text-white">Municipal Health Office</option>
                  <option value="Municipal Civil Registry Office" class="bg-neutral-800 text-white">Municipal Civil Registry Office</option>
                  <option value="Municipal Environment And Natural Resources Office" class="bg-neutral-800 text-white">Municipal Environment And Natural Resources Office</option>
                  <option value="External Partner Company" class="bg-neutral-800 text-white">External Partner Company</option>
              </select>
              <!-- Free text field for EIU External Partner Company -->
              <div id="editExternalCompanyContainer" class="mt-2 hidden">
                <input type="text" name="editExternalCompanyName" id="editExternalCompanyName" placeholder="Enter Company Name" class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white placeholder-gray-400 focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm" />
              </div>
            </div>
              
              <!-- Profile Photo Section -->
              <div>
                <label class="block text-sm font-medium text-white mb-2">Profile Photo</label>
                <div class="border-2 border-dashed border-white/20 rounded-lg p-6 text-center hover:border-white/40 transition-colors duration-200">
                  <div class="flex flex-col items-center space-y-4">
                    <div id="editProfilePhotoPreview" class="w-20 h-20 rounded-full bg-neutral-700/50 flex items-center justify-center border-2 border-white/20">
                      <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                      </svg>
                    </div>
                    <div>
                      <button type="button" id="editUploadPhotoBtn" class="px-4 py-2 bg-gradient-to-r from-neutral-700 to-neutral-600 border border-white/20 text-white rounded-lg font-medium hover:from-neutral-600 hover:to-neutral-500 hover:border-white/40 transition-all duration-200">
                        <svg class="w-4 h-4 mr-2 inline" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                        </svg>
                        Upload Photo
                      </button>
                      <p class="text-xs text-gray-400 mt-2">JPG, PNG or GIF (Max 5MB)</p>
                    </div>
                  </div>
                  <input type="file" id="editProfilePhotoInput" name="profilePhoto" accept="image/*" class="hidden" />
                </div>
              </div>
              
              <!-- Unique User ID -->
              <div>
                <label class="block text-sm font-medium text-white mb-2">Unique User ID</label>
                <input type="text" name="userId" placeholder="Unique User ID" required class="bg-neutral-700/60 border border-white/20 rounded-lg px-4 py-2 w-full text-gray-300 cursor-not-allowed backdrop-blur-sm" readonly />
                <div class="text-xs text-gray-400 mt-1">This field is auto-generated and cannot be modified</div>
              </div>
              
              <!-- Status -->
              <div>
                <label class="block text-sm font-medium text-white mb-2">Status</label>
                <select name="status" required class="bg-neutral-800/80 border border-white/20 rounded-lg px-4 py-2 w-full text-white focus:ring-2 focus:ring-white/30 focus:border-white/40 transition-all duration-200 backdrop-blur-sm">
                  <option value="active" class="bg-neutral-800 text-white">Active</option>
                  <option value="blocked" class="bg-neutral-800 text-white">Blocked</option>
                  <option value="deactivated" class="bg-neutral-800 text-white">Deactivated</option>
            </select>
              </div>
              
              <div id="editUserError" class="text-red-400 text-sm mt-2 hidden"></div>
          </form>
          </div>

          <!-- Enhanced Action Buttons -->
          <div class="sticky bottom-0 bg-gradient-to-r from-neutral-800/80 via-neutral-700/90 to-neutral-800/80 backdrop-blur-md border-t border-white/15 px-6 py-4 rounded-b-3xl shadow-lg">
            <div class="flex flex-col sm:flex-row gap-3">
              <button 
                type="submit" 
                form="editUserForm"
                id="editUserBtn" 
                class="btn-primary flex items-center space-x-3 px-8 py-3 bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-xl font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 backdrop-blur-sm"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
                <span>Update User</span>
              </button>
              <button 
                type="button" 
                id="editCancelBtn"
                class="btn-secondary flex items-center space-x-3 px-8 py-3 bg-gradient-to-r from-neutral-600 to-neutral-700 text-white rounded-xl font-semibold hover:from-neutral-700 hover:to-neutral-800 transition-all duration-300 shadow-lg hover:shadow-xl transform hover:-translate-y-0.5 backdrop-blur-sm"
              >
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                <span>Cancel</span>
              </button>
            </div>
          </div>
        </div>
      </div>
      <!-- Delete User Modal -->
      <div id="deleteUserModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black/40 hidden">
        <div class="bg-white rounded-xl shadow-lg w-full max-w-sm p-8 relative">
          <button type="button" id="closeDeleteUserModal" class="absolute top-4 right-4 text-gray-400 hover:text-gray-700 text-2xl">&times;</button>
          <h2 class="text-xl font-bold mb-4 text-[#3D50D7]">Delete User</h2>
          <p class="mb-6">Are you sure you want to delete this user?</p>
          <form id="deleteUserForm">
            <input type="hidden" name="id" />
            <div class="flex gap-4 justify-end">
              <button type="button" id="cancelDeleteUser" class="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg font-semibold hover:bg-gray-300 transition">Cancel</button>
              <button type="submit" class="px-4 py-2 bg-red-600 text-white rounded-lg font-semibold hover:bg-red-700 transition">Delete</button>
            </div>
            <div id="deleteUserError" class="text-red-500 text-sm mt-2 hidden"></div>
          </form>
        </div>
      </div>
      
      <!-- Set backend data as global variables -->
      <script define:vars={{ deletedUsersHistory }}>
        // Set deleted users history data globally
        window.deletedUsersHistory = deletedUsersHistory;
        console.log('📊 Set global deletedUsersHistory:', window.deletedUsersHistory);
        console.log('🔍 deletedUsersHistory type:', typeof deletedUsersHistory);
        console.log('🔍 deletedUsersHistory length:', deletedUsersHistory?.length);
        console.log('🔍 deletedUsersHistory is array:', Array.isArray(deletedUsersHistory));
        
        // Immediately try to initialize history if data is available
        if (deletedUsersHistory && Array.isArray(deletedUsersHistory) && deletedUsersHistory.length > 0) {
          console.log('🚀 IMMEDIATE: Data available, setting up immediate initialization...');
          window.immediateHistoryInit = true;
        }
      </script>
      
      <script>
        console.log('🚀 User Management script starting...');
        
        // Global UUID reveal functionality - MUST be defined first for inline handlers
        window.revealedUUIDs = new Set();
        
        window.revealUUID = function(userId, actualUUID) {
          console.log('🔍 revealUUID called with:', { userId, actualUUID });
          
          // Check if UUID is already revealed in this session
          if (window.revealedUUIDs.has(userId)) {
            console.log('UUID already revealed for user:', userId);
            return;
          }
          
          if (!actualUUID || actualUUID === '-' || actualUUID === '') {
            console.log('UUID not available for user:', userId, 'actualUUID:', actualUUID);
            alert('UUID not available for this user.');
            return;
          }
          
          // Check if user is authenticated
          const token = localStorage.getItem('token');
          if (!token) {
            console.log('No authentication token found');
            alert('Authentication required. Please log in again.');
            return;
          }
          
          console.log('Showing password modal for user:', userId);
          window.showPasswordModal(userId, actualUUID);
        };
        
        // Global password modal function
        window.showPasswordModal = function(userId, actualUUID) {
          console.log('🔐 Showing password modal for UUID reveal');
          
          // Get user name for display
          const userRow = document.querySelector(`[data-user-id="${userId}"]`);
          const userName = userRow ? userRow.closest('tr').querySelector('td:nth-child(2)').textContent.trim() : 'this user';
          
          // Create modal HTML
          const modalHTML = `
            <div id="uuidPasswordModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
              <div class="bg-white rounded-2xl p-8 max-w-md w-full mx-4">
                <div class="flex items-center justify-between mb-6">
                  <h3 class="text-xl font-bold text-gray-900">Verify User Password</h3>
                  <button id="closeUuidModal" class="text-gray-400 hover:text-gray-600 transition-colors">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                  </button>
                </div>
                
                <p class="text-gray-600 mb-6">Enter <strong>${userName}'s</strong> password to reveal their UUID for security purposes.</p>
                
                <div class="space-y-4">
                  <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">User's Password</label>
                    <input type="password" id="uuidPasswordInput" 
                           class="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                           placeholder="Enter the user's password">
                  </div>
                  
                  <div id="uuidPasswordError" class="hidden text-red-600 text-sm"></div>
                  
                  <div class="flex gap-3 pt-4">
                    <button id="cancelUuidReveal" class="flex-1 px-6 py-3 border border-gray-300 text-gray-700 rounded-xl hover:bg-gray-50 transition-colors">
                      Cancel
                    </button>
                    <button id="confirmUuidReveal" class="flex-1 px-6 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors">
                      Reveal UUID
                    </button>
                  </div>
                </div>
              </div>
            </div>
          `;
          
          // Add modal to page
          document.body.insertAdjacentHTML('beforeend', modalHTML);
          const modal = document.getElementById('uuidPasswordModal');
          const passwordInput = document.getElementById('uuidPasswordInput');
          const errorDiv = document.getElementById('uuidPasswordError');
          
          // Focus on password input
          setTimeout(() => passwordInput.focus(), 100);
          
          // Close modal function
          const closeModal = () => {
            modal.remove();
          };
          
          // Event listeners
          document.getElementById('closeUuidModal').addEventListener('click', closeModal);
          document.getElementById('cancelUuidReveal').addEventListener('click', closeModal);
          
          // Confirm password and reveal UUID
          document.getElementById('confirmUuidReveal').addEventListener('click', async () => {
            const password = passwordInput.value.trim();
            
            if (!password) {
              errorDiv.textContent = 'Please enter the user\'s password.';
              errorDiv.classList.remove('hidden');
              return;
            }
            
            try {
              const token = localStorage.getItem('token');
              console.log('🔐 Attempting password verification for UUID reveal');
              
              const response = await fetch('http://localhost:3000/api/auth/verify-password', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ password, targetUserId: userId })
              });
              
              console.log('Password verification response status:', response.status);
              
              if (response.ok) {
                console.log('✅ Password verification successful');
                // Password is correct, reveal UUID
                const uuidElement = document.getElementById(`uuid-${userId}`);
                if (uuidElement) {
                  uuidElement.textContent = actualUUID;
                  uuidElement.parentElement.classList.add('text-green-600', 'font-semibold');
                  uuidElement.parentElement.classList.remove('cursor-pointer', 'hover:text-blue-600');
                  
                  // Mark as revealed for this session
                  window.revealedUUIDs.add(userId);
                  
                  // Show success message
                  alert('UUID revealed successfully!');
                }
                closeModal();
              } else {
                console.log('❌ Password verification failed with status:', response.status);
                const errorData = await response.json();
                console.log('Error data:', errorData);
                
                if (response.status === 401) {
                  errorDiv.textContent = 'Session expired. Please refresh the page and try again.';
                } else {
                  errorDiv.textContent = errorData.error || 'Invalid password. Cannot reveal UUID.';
                }
                errorDiv.classList.remove('hidden');
              }
              
            } catch (error) {
              console.error('❌ Error during password verification:', error);
              errorDiv.textContent = 'Network error. Please try again.';
              errorDiv.classList.remove('hidden');
            }
          });
          
          // Enter key support
          passwordInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
              document.getElementById('confirmUuidReveal').click();
            }
          });
          
          // Close on background click
          modal.addEventListener('click', (e) => {
            if (e.target === modal) {
              closeModal();
            }
          });
        };
        
        console.log('✅ Global UUID functions defined successfully');
        
        // Script execution
        console.log('🔧 Script execution started...');
          
          // Wait for DOM to be ready
          function waitForDOM() {
            return new Promise((resolve) => {
              if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', resolve);
              } else {
                resolve();
              }
            });
          }
        
        // Main initialization function
        async function initializeUserManagement() {
          console.log('🔍 User Management page loaded, initializing profile picture loading...');
          
          const addUserBtn = document.getElementById('addUserBtn');
          const addUserModal = document.getElementById('addUserModal');
          const closeAddUserModal = document.getElementById('closeAddUserModal');
          const addUserForm = document.getElementById('addUserForm');
          const addUserError = document.getElementById('addUserError');
          const firstNameError = document.getElementById('firstNameError');
          const middleNameError = document.getElementById('middleNameError');
          const lastNameError = document.getElementById('lastNameError');
          
          // Function to load profile picture with better error handling - DISABLED
          async function loadProfilePicture(img, userId) {
            console.log('🔧 OLD loadProfilePicture DISABLED - Using main function instead');
            // This function is disabled to prevent conflicts
            return false;
          }
          
          // Function to preload and handle profile pictures
          async function preloadProfilePictures() {
            console.log('🔄 preloadProfilePictures() called');
            // Wait for DOM to be fully rendered
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // Try multiple selectors to find profile picture containers
            const profileContainers = document.querySelectorAll('.profile-picture-container');
            console.log(`Found ${profileContainers.length} profile picture containers`);
            
            if (profileContainers.length === 0) {
              console.log('⚠️ No profile picture containers found, retrying in 1 second...');
              setTimeout(() => preloadProfilePictures(), 1000);
              return;
            }
            
            for (const container of profileContainers) {
              const img = container.querySelector('img');
              if (img) {
                // Extract user ID from the img id attribute - handle regular, deleted, and history users
                const regularMatch = img.id.match(/profile-img-(.+)/);
                const deletedMatch = img.id.match(/deleted-profile-img-(.+)/);
                const historyMatch = img.id.match(/history-profile-img-(.+)/);
                
                if (regularMatch) {
                  const userId = regularMatch[1];
                  console.log(`Loading profile picture for active user: ${userId}`);
                  
                  const success = await loadProfilePicture(img, userId);
                  
                  // If successful, add a visual indicator
                  if (success) {
                    img.style.border = '2px solid #10b981';
                    console.log(`🎉 Visual indicator added for ${userId}`);
                  }
                } else if (deletedMatch) {
                  const userId = deletedMatch[1];
                  console.log(`Loading profile picture for deleted user: ${userId}`);
                  
                  const success = await loadDeletedUserProfilePicture(img, userId);
                  
                  // If successful, add a visual indicator
                  if (success) {
                    img.style.border = '2px solid #ef4444';
                    console.log(`🎉 Visual indicator added for deleted user ${userId}`);
                  }
                } else if (historyMatch) {
                  const userId = historyMatch[1];
                  console.log(`Loading profile picture for history user: ${userId}`);
                  
                  const success = await loadHistoryUserProfilePicture(img, userId);
                  
                  // If successful, add a visual indicator
                  if (success) {
                    img.style.border = '2px solid #6b7280';
                    console.log(`🎉 Visual indicator added for history user ${userId}`);
                  }
                }
              }
            }
          }
          
          // Debug function to log user data and DOM elements
          function debugUserData() {
            console.log('=== USER DATA DEBUG ===');
            const userRows = document.querySelectorAll('tr[class*="border-b"]');
            console.log(`Found ${userRows.length} user rows`);
            
            userRows.forEach((row, index) => {
              const nameElement = row.querySelector('.font-semibold');
              const userIdElement = row.querySelector('.font-mono');
              const profileContainer = row.querySelector('.profile-picture-container');
              const profileImg = row.querySelector('img');
              
              console.log(`User ${index + 1}:`, {
                name: nameElement ? nameElement.textContent : 'Not found',
                userId: userIdElement ? userIdElement.textContent : 'Not found',
                hasProfileContainer: !!profileContainer,
                hasProfileImg: !!profileImg,
                imgSrc: profileImg ? profileImg.src : 'No img'
              });
            });
            
            // Also check for any images in the document
            const allImages = document.querySelectorAll('img');
            console.log(`Total images in document: ${allImages.length}`);
            allImages.forEach((img, index) => {
              if (img.src.includes('/api/profile/picture/')) {
                console.log(`Profile image ${index + 1}:`, img.src);
              }
            });
            
            console.log('=== END USER DATA DEBUG ===');
          }
          
          // Function to force refresh profile pictures
          async function forceRefreshProfilePictures() {
            console.log('🔄 Force refreshing profile pictures...');
            await new Promise(resolve => setTimeout(resolve, 1000));
            await preloadProfilePictures();
          }
          
          // Function to load profile picture for deleted users
          async function loadDeletedUserProfilePicture(img, userId) {
            console.log(`🔍 Loading deleted user profile picture for: ${userId}`);
            
            try {
              // First, try to get the deleted user data with preserved profile picture
              const deletedUsersResponse = await fetch('http://localhost:3000/api/users/deleted', {
                method: 'GET',
                credentials: 'include',
                headers: { 'Accept': 'application/json' }
              });
              
              if (deletedUsersResponse.ok) {
                const deletedData = await deletedUsersResponse.json();
                if (deletedData.success && deletedData.users) {
                  // Find the specific deleted user
                  const deletedUser = deletedData.users.find(user => 
                    user.userId === userId || 
                    user.id === userId || 
                    user.email === userId
                  );
                  
                  if (deletedUser) {
                    console.log(`Found deleted user data:`, deletedUser);
                    
                    // Try to use preserved profile picture first
                    let profilePictureUrl = null;
                    
                    if (deletedUser.preservedSnapshot && deletedUser.preservedSnapshot.profilePictureUrl) {
                      profilePictureUrl = deletedUser.preservedSnapshot.profilePictureUrl;
                      console.log(`Using preserved profile picture: ${profilePictureUrl}`);
                    } else if (deletedUser.profilePictureUrl) {
                      profilePictureUrl = deletedUser.profilePictureUrl;
                      console.log(`Using current profile picture: ${profilePictureUrl}`);
                    }
                    
                    if (profilePictureUrl && !profilePictureUrl.includes('default-profile.svg')) {
                      // Try to load the image
                      const imageResponse = await fetch(profilePictureUrl, {
                        method: 'GET',
                        credentials: 'include'
                      });
                      
                      if (imageResponse.ok) {
                        const blob = await imageResponse.blob();
                        if (blob.size > 0) {
                          const dataURL = await new Promise((resolve) => {
                            const reader = new FileReader();
                            reader.onload = () => resolve(reader.result);
                            reader.readAsDataURL(blob);
                          });
                          
                          updateProfilePictureDisplay(img, dataURL);
                          console.log(`✅ Deleted user profile picture loaded successfully for: ${userId}`);
                          return true;
                        }
                      }
                    }
                  }
                }
              }
              
              // If no preserved image found, fall back to API endpoint
              console.log(`No preserved image found, trying API endpoint for deleted user: ${userId}`);
              return await loadProfilePicture(img, userId);
              
            } catch (error) {
              console.error(`❌ Error loading deleted user profile picture for ${userId}:`, error);
              return false;
            }
          }

          // Function to load profile picture for permanently deleted users (history)
          async function loadHistoryUserProfilePicture(img, userId) {
            console.log(`🔍 Loading history user profile picture for: ${userId}`);
            
            try {
              // Get the permanently deleted users history
              const token = localStorage.getItem('token') || '';
              const historyResponse = await fetch('http://localhost:3000/api/users/deleted-history', {
                method: 'GET',
                credentials: 'include',
                headers: { 
                  'Accept': 'application/json',
                  'Authorization': `Bearer ${token}`
                }
              });
              
              if (historyResponse.ok) {
                const historyData = await historyResponse.json();
                if (historyData.success && historyData.users) {
                  // Find the specific history user
                  const historyUser = historyData.users.find(user => 
                    user.userId === userId || 
                    user.id === userId || 
                    user.email === userId
                  );
                  
                  if (historyUser && historyUser.profilePictureUrl) {
                    console.log(`Found history user data with profile picture:`, historyUser.profilePictureUrl);
                    
                    if (!historyUser.profilePictureUrl.includes('default-profile.svg')) {
                      // Try to load the image
                      const imageResponse = await fetch(historyUser.profilePictureUrl, {
                        method: 'GET',
                        credentials: 'include'
                      });
                      
                      if (imageResponse.ok) {
                        const blob = await imageResponse.blob();
                        if (blob.size > 0) {
                          const dataURL = await new Promise((resolve) => {
                            const reader = new FileReader();
                            reader.onload = () => resolve(reader.result);
                            reader.readAsDataURL(blob);
                          });
                          
                          updateProfilePictureDisplay(img, dataURL);
                          console.log(`✅ History user profile picture loaded successfully for: ${userId}`);
                          return true;
                        }
                      }
                    }
                  }
                }
              }
              
              // If no image found in history, fall back to API endpoint
              console.log(`No image found in history, trying API endpoint for user: ${userId}`);
              return await loadProfilePicture(img, userId);
              
            } catch (error) {
              console.error(`❌ Error loading history user profile picture for ${userId}:`, error);
              return false;
            }
          }

          // Function to manually update profile picture display
          function updateProfilePictureDisplay(img, dataURL) {
            console.log('🖼️ Updating profile picture display...');
            console.log('🖼️ Image element:', img);
            console.log('🖼️ DataURL type:', typeof dataURL);
            console.log('🖼️ DataURL starts with:', dataURL.substring(0, 50));
            
            // Ensure dataURL is actually an image data URL, not JSON
            if (dataURL.startsWith('data:application/json')) {
              console.error('❌ ERROR: DataURL is JSON, not image! This will cause the glitch.');
              return;
            }
            
            img.src = dataURL;
            img.style.display = 'block';
            img.style.visibility = 'visible';
            img.style.opacity = '1';
            
            const fallback = img.nextElementSibling;
            if (fallback) {
              fallback.style.display = 'none';
              console.log('✅ Fallback hidden');
            }
            
            // Force a reflow
            img.offsetHeight;
            
            console.log('✅ Profile picture display updated');
          }
          
          // Function to manually create profile pictures for users
          async function createProfilePicturesForUsers() {
            console.log('🔧 createProfilePicturesForUsers() called');
            const userRows = document.querySelectorAll('tr[class*="border-b"]');
            console.log(`Found ${userRows.length} user rows`);
            
            for (const row of userRows) {
              const nameElement = row.querySelector('.font-semibold');
              const userIdElement = row.querySelector('.font-mono');
              
              if (nameElement && userIdElement) {
                const userName = nameElement.textContent;
                const userId = userIdElement.textContent;
                
                console.log(`Creating profile picture for: ${userName} (${userId})`);
                
                // Try to load profile picture for this user
                const possibleIds = [userId];
                if (userId.includes('EXEC') || userId.includes('Executive')) {
                  possibleIds.push('EXEC-0001', 'Executive Viewer', 'executive_viewer');
                } else if (userId.includes('EIU')) {
                  possibleIds.push(userId.replace(/^EIU-/, 'EIU-0001'));
                }
                
                for (const id of possibleIds) {
                  try {
                    const url = `http://localhost:3000/api/profile/picture/${encodeURIComponent(id)}?t=${Date.now()}`;
                    const response = await fetch(url, {
                      method: 'GET',
                      credentials: 'include',
                      headers: { 'Accept': 'application/json' }
                    });
                    
                    if (response.ok) {
                      const data = await response.json();
                      if (data.success && data.profilePictureUrl) {
                        // Check if the URL is a default profile picture
                        if (data.profilePictureUrl.includes('default-profile.svg')) {
                          console.log(`ℹ️ Using default profile picture for ${id}`);
                          continue;
                        }
                        
                        // Load the actual profile picture
                        const imageResponse = await fetch(data.profilePictureUrl, {
                          method: 'GET',
                          credentials: 'include'
                        });
                        
                        if (imageResponse.ok) {
                          const blob = await imageResponse.blob();
                          console.log(`CreateProfilePictures - Blob size for ${id}:`, blob.size);
                          console.log(`CreateProfilePictures - Blob type for ${id}:`, blob.type);
                          
                          if (blob.size > 0) {
                            const dataURL = await new Promise((resolve) => {
                              const reader = new FileReader();
                              reader.onload = () => resolve(reader.result);
                              reader.readAsDataURL(blob);
                            });
                            
                            console.log(`CreateProfilePictures - DataURL for ${id} starts with:`, dataURL.substring(0, 50));
                            
                            // Find the profile picture container in this row
                            const container = row.querySelector('.profile-picture-container');
                            if (container) {
                              const img = container.querySelector('img');
                              if (img) {
                                updateProfilePictureDisplay(img, dataURL);
                                console.log(`✅ Profile picture created for ${userName}`);
                                break;
                              }
                            }
                          }
                        }
                      }
                    }
                  } catch (error) {
                    console.log(`❌ Failed to create profile picture for ${id}:`, error);
                  }
                }
              }
            }
          }
          
          // Initialize profile picture loading with multiple attempts
          debugUserData();
          
          // Try loading immediately
          preloadProfilePictures();
          
          // Try creating profile pictures manually after 1 second
          setTimeout(() => {
            console.log('🔄 Second attempt - creating profile pictures manually...');
            createProfilePicturesForUsers();
          }, 1000);
          
          // Try again after 3 seconds
          setTimeout(() => {
            console.log('🔄 Third attempt to load profile pictures...');
            preloadProfilePictures();
          }, 3000);
          
          // Final attempt after 5 seconds
          setTimeout(() => {
            console.log('🔄 Final attempt - creating profile pictures manually...');
            createProfilePicturesForUsers();
          }, 5000);
          
          // Ultra-aggressive approach - try every 2 seconds for 20 seconds
          let attempts = 0;
          const maxAttempts = 10;
          const aggressiveInterval = setInterval(() => {
            attempts++;
            console.log(`🔄 Aggressive attempt ${attempts}/${maxAttempts} - loading profile pictures...`);
            
            // Try both methods
            preloadProfilePictures();
            createProfilePicturesForUsers();
            
            if (attempts >= maxAttempts) {
              clearInterval(aggressiveInterval);
              console.log('🛑 Stopped aggressive profile picture loading attempts');
            }
          }, 2000);
          
          // Watch for DOM changes and load profile pictures when new content is added
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {
                console.log('🔄 DOM changed, checking for new profile pictures...');
                setTimeout(() => preloadProfilePictures(), 100);
              }
            });
          });
          
          // Start observing the table for changes
          const tableContainer = document.querySelector('table');
          if (tableContainer) {
            observer.observe(tableContainer, { childList: true, subtree: true });
            console.log('👀 Started observing table for changes');
          }

          addUserBtn.addEventListener('click', () => {
            if (window.showAddUserModal) {
              window.showAddUserModal();
            } else {
              addUserModal.classList.remove('hidden');
            }
          });
          
          // Close modal when clicking on backdrop
          addUserModal.addEventListener('click', (e) => {
            if (e.target === addUserModal) {
              if (window.hideAddUserModal) {
                window.hideAddUserModal();
              } else {
                addUserModal.classList.add('hidden');
              }
              addUserForm.reset();
              addUserError.classList.add('hidden');
            }
          });
          
          closeAddUserModal.addEventListener('click', () => {
            if (window.hideAddUserModal) {
              window.hideAddUserModal();
            } else {
              addUserModal.classList.add('hidden');
            }
            addUserForm.reset();
            addUserError.classList.add('hidden');
            
            // Clear validation errors and reset field styling
            const firstNameError = document.getElementById('firstNameError');
            const middleNameError = document.getElementById('middleNameError');
            const lastNameError = document.getElementById('lastNameError');
            const birthdateError = document.getElementById('birthdateError');
            const contactNumberError = document.getElementById('contactNumberError');
            const first = document.querySelector('input[name="firstName"]');
            const middle = document.querySelector('input[name="middleName"]');
            const last = document.querySelector('input[name="lastName"]');
            const passwordField = document.getElementById('passwordField');
            const birthdateField = document.getElementById('birthdateField');
            const contactNumberField = document.getElementById('contactNumberField');
            
            // Hide error messages
            firstNameError.classList.add('hidden');
            middleNameError.classList.add('hidden');
            lastNameError.classList.add('hidden');
            birthdateError.classList.add('hidden');
            contactNumberError.classList.add('hidden');
            
            // Reset field styling
            [first, middle, last, passwordField, birthdateField, contactNumberField].forEach(field => {
              field.classList.remove('border-red-500');
              field.classList.add('border-gray-300');
            });
            
            // Reset password strength indicator
            const strengthText = document.getElementById('strengthText');
            const strengthBar = document.getElementById('strengthBar');
            const lengthCheck = document.getElementById('lengthCheck');
            const caseCheck = document.getElementById('caseCheck');
            const underscoreCheck = document.getElementById('underscoreCheck');
            const strengthCheck = document.getElementById('strengthCheck');
            
            strengthText.textContent = 'Weak';
            strengthText.className = 'font-medium text-red-600';
            strengthBar.style.width = '0%';
            strengthBar.style.backgroundColor = '#ef4444';
            
            [lengthCheck, caseCheck, underscoreCheck, strengthCheck].forEach(check => {
              check.style.backgroundColor = '#d1d5db';
            });
            
            // Clear verification messages
            const verificationMessage = document.querySelector('.verification-message');
            if (verificationMessage) {
              verificationMessage.remove();
            }
            
            // Reset verify email button
            const verifyEmailBtn = document.getElementById('verifyEmailBtn');
            if (verifyEmailBtn) {
              verifyEmailBtn.disabled = false;
              verifyEmailBtn.innerHTML = 'Verify Email';
            }
          });
          
          // Helper functions for validation
          function clearAllErrors() {
            const errorElements = document.querySelectorAll('[id$="Error"]');
            errorElements.forEach(element => {
              element.classList.add('hidden');
            });
            
            const fields = document.querySelectorAll('input, select');
            fields.forEach(field => {
              field.classList.remove('field-error');
            });
          }
          
          function showFieldError(field, errorElementId, message) {
            const errorElement = document.getElementById(errorElementId);
            if (errorElement) {
              errorElement.textContent = message;
              errorElement.classList.remove('hidden');
              errorElement.classList.add('error-message');
            }
            field.classList.add('field-error');
          }
          
          function hideFieldError(field, errorElementId) {
            const errorElement = document.getElementById(errorElementId);
            if (errorElement) {
              errorElement.classList.add('hidden');
              errorElement.classList.remove('error-message');
            }
            field.classList.remove('field-error');
          }
          
          // Add real-time validation
          function addRealTimeValidation() {
            // First name validation
            const firstName = document.getElementById('firstNameField');
            if (firstName) {
              firstName.addEventListener('blur', function() {
                if (this.value.trim()) {
                  const hasNumbers = /\d/.test(this.value);
                  const hasSpecialChars = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(this.value);
                  if (hasNumbers || hasSpecialChars) {
                    showFieldError(this, 'firstNameError', 'Numbers and special characters are not allowed.');
                  } else {
                    hideFieldError(this, 'firstNameError');
                  }
                }
              });
            }
            
            // Last name validation
            const lastName = document.getElementById('lastNameField');
            if (lastName) {
              lastName.addEventListener('blur', function() {
                if (this.value.trim()) {
                  const hasNumbers = /\d/.test(this.value);
                  const hasSpecialChars = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(this.value);
                  if (hasNumbers || hasSpecialChars) {
                    showFieldError(this, 'lastNameError', 'Numbers and special characters are not allowed.');
                  } else {
                    hideFieldError(this, 'lastNameError');
                  }
                }
              });
            }
            
            // Email validation
            const username = document.getElementById('usernameField');
            if (username) {
              username.addEventListener('blur', function() {
                if (this.value.trim()) {
                  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                  if (!emailRegex.test(this.value.trim())) {
                    showFieldError(this, 'usernameError', 'Please enter a valid email address.');
                  } else {
                    hideFieldError(this, 'usernameError');
                  }
                }
              });
            }
            
            // Contact number validation
            const contactNumber = document.getElementById('contactNumberField');
            if (contactNumber) {
              contactNumber.addEventListener('blur', function() {
                if (this.value.trim()) {
                  const contactNumberRegex = /^09[0-9]{9}$/;
                  if (!contactNumberRegex.test(this.value.trim())) {
                    showFieldError(this, 'contactNumberError', 'Contact number must start with "09" and be exactly 11 digits.');
                  } else {
                    hideFieldError(this, 'contactNumberError');
                  }
                }
              });
            }
            
            // Password confirmation validation
            const password = document.getElementById('passwordField');
            const confirmPassword = document.getElementById('confirmPasswordField');
            if (password && confirmPassword) {
              confirmPassword.addEventListener('blur', function() {
                if (this.value.trim() && password.value.trim()) {
                  if (this.value !== password.value) {
                    showFieldError(this, 'confirmPasswordError', 'Passwords do not match.');
                  } else {
                    hideFieldError(this, 'confirmPasswordError');
                  }
                }
              });
            }
            
            // Group selection validation
            const groupSelect = document.getElementById('groupSelect');
            if (groupSelect) {
              groupSelect.addEventListener('change', function() {
                if (this.value === 'EMS') {
                  showFieldError(this, 'groupError', 'EMS group is not yet implemented.');
                } else {
                  hideFieldError(this, 'groupError');
                }
              });
            }
          }
          
          // Initialize real-time validation
          addRealTimeValidation();
          
          // OLD VALIDATION SYSTEM DISABLED - Using new comprehensive validation system instead
          /*
          addUserForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            console.log('Form submission started');
            addUserError.classList.add('hidden');
            
            // Clear all previous errors
            clearAllErrors();
            
            // Get all form fields
            const firstName = document.getElementById('firstNameField');
            const middleName = document.getElementById('middleNameField');
            const lastName = document.getElementById('lastNameField');
            const username = document.getElementById('usernameField');
            const contactNumber = document.getElementById('contactNumberField');
            const password = document.getElementById('passwordField');
            const confirmPassword = document.getElementById('confirmPasswordField');
            const birthdate = document.getElementById('birthdateField');
            const group = document.getElementById('groupSelect');
            const role = document.getElementById('roleSelect');
            const subRole = document.getElementById('subRoleSelect');
            const department = document.getElementById('departmentOfficeSelect');
            
            let hasErrors = false;
            
            // Validate required fields are not blank
            if (!firstName.value.trim()) {
              showFieldError(firstName, 'firstNameError', 'First name is required.');
              hasErrors = true;
            }
            
            if (!lastName.value.trim()) {
              showFieldError(lastName, 'lastNameError', 'Last name is required.');
              hasErrors = true;
            }
            
            if (!username.value.trim()) {
              showFieldError(username, 'usernameError', 'Email is required.');
              hasErrors = true;
            }
            
            if (!contactNumber.value.trim()) {
              showFieldError(contactNumber, 'contactNumberError', 'Contact number is required.');
              hasErrors = true;
            }
            
            if (!password.value.trim()) {
              showFieldError(password, 'passwordError', 'Password is required.');
              hasErrors = true;
            }
            
            if (!confirmPassword.value.trim()) {
              showFieldError(confirmPassword, 'confirmPasswordError', 'Please confirm your password.');
              hasErrors = true;
            }
            
            if (!birthdate.value.trim()) {
              showFieldError(birthdate, 'birthdateError', 'Birthdate is required.');
              hasErrors = true;
            }
            
            if (!group.value) {
              showFieldError(group, 'groupError', 'Please select a group.');
              hasErrors = true;
            }
            
            if (!role.value) {
              showFieldError(role, 'roleError', 'Please select a role.');
              hasErrors = true;
            }
            
            if (!subRole.value) {
              showFieldError(subRole, 'subRoleError', 'Please select a subrole.');
              hasErrors = true;
            }
            
            if (!department.value) {
              showFieldError(department, 'departmentError', 'Please select a department/office.');
              hasErrors = true;
            }
            
            // If any required fields are blank, stop here
            if (hasErrors) {
              addUserError.textContent = 'Please fill in all required fields.';
              addUserError.classList.remove('hidden');
              return;
            }
            
            // Validate email format
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(username.value.trim())) {
              showFieldError(username, 'usernameError', 'Please enter a valid email address.');
              hasErrors = true;
            }
            
            // Validate contact number format
            const contactNumberRegex = /^09[0-9]{9}$/;
            if (!contactNumberRegex.test(contactNumber.value.trim())) {
              showFieldError(contactNumber, 'contactNumberError', 'Contact number must start with "09" and be exactly 11 digits.');
              hasErrors = true;
            }
            
            // Validate password match
            if (password.value !== confirmPassword.value) {
              showFieldError(confirmPassword, 'confirmPasswordError', 'Passwords do not match.');
              hasErrors = true;
            }
            
            // Validate password strength
            const passwordValidation = validatePassword(password.value);
            if (!passwordValidation.isValid) {
              showFieldError(password, 'passwordError', 'Password must meet all requirements: at least 8 characters, include uppercase & lowercase letters, contain an underscore (_), and have Medium strength or higher.');
              hasErrors = true;
            }
            
            // Validate age
            const ageValidation = validateAge(birthdate.value);
            if (!ageValidation.isValid) {
              showFieldError(birthdate, 'birthdateError', 'User must be at least 18 years old.');
              hasErrors = true;
            }
            
            // Check for EMS group selection
            if (group.value === 'EMS') {
              addUserError.textContent = 'EMS group is not yet implemented. Please select a different group.';
              addUserError.classList.remove('hidden');
              showFieldError(group, 'groupError', 'EMS group is not yet implemented.');
              hasErrors = true;
            }
            
            // If any validation errors, stop here
            if (hasErrors) {
              return;
            }
            
            // Check for email uniqueness
            try {
              const emailCheckResponse = await fetch(`${API_URL}/check-email`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ email: username.value.trim() })
              });
              
              const emailCheckData = await emailCheckResponse.json();
              if (!emailCheckData.success && emailCheckData.exists) {
                showFieldError(username, 'usernameError', 'This email is already in use.');
                addUserError.textContent = 'This email is already in use. Please choose a different email.';
                addUserError.classList.remove('hidden');
                return;
              }
            } catch (error) {
              console.error('Error checking email:', error);
            }
            
            // Check for contact number uniqueness
            try {
              const contactCheckResponse = await fetch(`${API_URL}/check-contact`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ contactNumber: contactNumber.value.trim() })
              });
              
              const contactCheckData = await contactCheckResponse.json();
              if (!contactCheckData.success && contactCheckData.exists) {
                showFieldError(contactNumber, 'contactNumberError', 'This contact number is already in use.');
                addUserError.textContent = 'This contact number is already in use. Please choose a different contact number.';
              addUserError.classList.remove('hidden');
              return;
              }
            } catch (error) {
              console.error('Error checking contact number:', error);
            }
            
            // Validate name fields for special characters (only if not blank)
            const hasFirstNameNumbers = /\d/.test(firstName.value);
            const hasMiddleNameNumbers = /\d/.test(middleName.value);
            const hasLastNameNumbers = /\d/.test(lastName.value);
            
            const hasFirstNameSpecialChars = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(firstName.value);
            const hasMiddleNameSpecialChars = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(middleName.value);
            const hasLastNameSpecialChars = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(lastName.value);
            
            if (hasFirstNameNumbers || hasFirstNameSpecialChars) {
              showFieldError(firstName, 'firstNameError', 'Numbers and special characters are not allowed.');
              hasErrors = true;
            }
            
            if (hasMiddleNameNumbers || hasMiddleNameSpecialChars) {
              showFieldError(middleName, 'middleNameError', 'Numbers and special characters are not allowed.');
              hasErrors = true;
            }
            
            if (hasLastNameNumbers || hasLastNameSpecialChars) {
              showFieldError(lastName, 'lastNameError', 'Numbers and special characters are not allowed.');
              hasErrors = true;
            }
            
            if (hasErrors) {
              addUserError.textContent = 'Please remove numbers and special characters from name fields.';
              addUserError.classList.remove('hidden');
              return;
            }
            
            // Validate Unique User ID before submission
            const enteredUserId = document.getElementById('userIdField').value.trim();
            console.log('User ID validation:', { enteredUserId, generatedUserId });
            
            if (!enteredUserId) {
              addUserError.textContent = 'Please verify your email and generate a Unique User ID first.';
              addUserError.classList.remove('hidden');
              console.log('Form submission blocked: No User ID entered');
              return;
            }
            
            // Check if User ID has been verified (matches the generated one)
            if (generatedUserId && enteredUserId !== generatedUserId) {
              addUserError.textContent = 'The entered Unique User ID does not match the one sent to your email. Please check your Gmail and enter the correct ID.';
              addUserError.classList.remove('hidden');
              document.getElementById('userIdField').classList.add('border-red-500', 'shake-animation');
              document.getElementById('userIdField').classList.remove('border-green-500');
              
              // Remove shake animation class after animation completes
              setTimeout(() => {
                document.getElementById('userIdField').classList.remove('shake-animation');
              }, 500);
              console.log('Form submission blocked: User ID mismatch');
              return;
            }
            
            // If no generatedUserId exists, allow submission (for cases where email verification was skipped)
            if (!generatedUserId) {
              console.log('No generated User ID found, allowing submission with entered ID:', enteredUserId);
            }
            
            console.log('All validations passed, proceeding with form submission');
            
            const formData = new FormData(addUserForm);
            
            // Add profile photo if selected
            const profilePhoto = document.getElementById('profilePhotoInput').files[0];
            if (profilePhoto) {
              formData.append('profilePhoto', profilePhoto);
            }
            
            const payload = Object.fromEntries(formData.entries());
            
            console.log('Form payload:', payload);
            
            // Map roles correctly for backend
            const payloadGroup = payload.group;
            const payloadRole = payload.role;
            
            // Set the main role to the group, and the specific role as subRole
            payload.role = payloadGroup;
            payload.subRole = payloadRole;
            
            // Handle conditional fields
            if (payloadRole === 'Member') {
              payload.subRole = 'Member';
            } else if (['NGO Personnel', 'CSO Personnel', 'PPMC'].includes(payloadRole)) {
              payload.subRole = payloadRole;
            }
            
            // Ensure name field is set to fullName for backend compatibility
            if (payload.fullName && !payload.name) {
              payload.name = payload.fullName;
            }
            
            // Fix field names to match backend expectations
            const correctedPayload = {
              firstName: payload.firstName,
              lastName: payload.lastName,
              username: payload.username,
              email: payload.email,
              password: payload.password,
              role: payload.role,
              subRole: payload.subRole,
              middleName: payload.middleName,
              fullName: payload.fullName,
              birthdate: payload.birthdate,
              contactNumber: payload.contactNumber,
              userId: payload.userId
            };
          
          try {
            const token = localStorage.getItem('token') || '';
            console.log('Sending request to backend with token:', token ? 'Present' : 'Missing');
            
            const res = await fetch('http://localhost:3000/api/users', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`
              },
              body: formData
            });
            
            console.log('Backend response status:', res.status);
            const data = await res.json();
            console.log('Backend response data:', data);
            
            if (res.ok) {
              console.log('User created successfully, reloading page');
              // Show success message before reload
              addUserError.textContent = data.message || 'User created successfully!';
              addUserError.classList.remove('hidden');
              addUserError.classList.remove('text-red-500');
              addUserError.classList.add('text-green-500');
              
              // Close modal and reload after a short delay
              setTimeout(() => {
                document.getElementById('addUserModal').classList.add('hidden');
                // Reload profile pictures before full page reload
                preloadProfilePictures();
                window.location.reload();
              }, 1500);
            } else {
              addUserError.textContent = data.error || 'Failed to create user.';
              addUserError.classList.remove('hidden');
              addUserError.classList.remove('text-green-500');
              addUserError.classList.add('text-red-500');
              console.log('Backend error:', data.error);
            }
          } catch (err) {
            console.error('Network error:', err);
            addUserError.textContent = 'Failed to create user.';
            addUserError.classList.remove('hidden');
          }
        });
        */
        


        // Edit User Modal Functionality
        const editUserModal = document.getElementById('editUserModal');
        const closeEditUserModal = document.getElementById('closeEditUserModal');
        const editUserForm = document.getElementById('editUserForm');
        const editUserError = document.getElementById('editUserError');
        
        // Store original form values for comparison
        let originalFormValues = {};
        let isConfirmationDialogOpen = false;
        
        // Function to check if form has been modified
        function hasFormBeenModified() {
          // If no original values stored yet, consider it not modified
          if (Object.keys(originalFormValues).length === 0) {
            console.log('No original values stored, considering not modified');
            return false;
          }
          
          // Get current values with fallbacks
          const firstName = editUserForm.querySelector('input[name="firstName"]')?.value || '';
          const middleName = editUserForm.querySelector('input[name="middleName"]')?.value || '';
          const lastName = editUserForm.querySelector('input[name="lastName"]')?.value || '';
          const fullName = editUserForm.querySelector('input[name="fullName"]')?.value || '';
          const username = editUserForm.querySelector('input[name="username"]')?.value || '';
          const contactNumber = editUserForm.querySelector('input[name="contactNumber"]')?.value || '';
          const birthdate = editUserForm.querySelector('input[name="birthdate"]')?.value || '';
          const userId = editUserForm.querySelector('input[name="userId"]')?.value || '';
          const status = editUserForm.querySelector('select[name="status"]')?.value || '';
          const group = editUserForm.querySelector('select[name="group"]')?.value || '';
          const role = editUserForm.querySelector('select[name="role"]')?.value || '';
          const subRole = editUserForm.querySelector('select[name="subRole"]')?.value || '';
          const departmentOffice = document.getElementById('editDepartmentOfficeSelect')?.value || '';
          
          const currentValues = {
            firstName, middleName, lastName, fullName, username, 
            contactNumber, birthdate, userId, status, group, 
            role, subRole, departmentOffice
          };
          
          console.log('Current values:', currentValues);
          console.log('Original values:', originalFormValues);
          
          // Compare each field individually for better debugging
          let isModified = false;
          for (const key in originalFormValues) {
            if (currentValues[key] !== originalFormValues[key]) {
              console.log(`Field ${key} changed: "${originalFormValues[key]}" -> "${currentValues[key]}"`);
              isModified = true;
            }
          }
          
          console.log('Form modified:', isModified);
          return isModified;
        }
        
        // Function to close edit modal
        function closeEditModal() {
          console.log('Closing edit modal');
          editUserModal.classList.add('hidden');
          editUserModal.classList.remove('show');
          editUserForm.reset();
          editUserError.classList.add('hidden');
          
          // Reset modal styles
          editUserModal.style.display = 'none';
          editUserModal.style.visibility = 'hidden';
          editUserModal.style.opacity = '0';
          
          // Clear original values and reset confirmation dialog flag
          originalFormValues = {};
          isConfirmationDialogOpen = false;
        }

        // Edit modal role/subrole logic
        const editGroupSelect = document.getElementById('editGroupSelect');
        const editRoleSelect = document.getElementById('editRoleSelect');
        const editSubRoleSelect = document.getElementById('editSubRoleSelect');
        const editSubRoleContainer = document.getElementById('editSubRoleContainer');
        const editProjectCodeContainer = document.getElementById('editProjectCodeContainer');

        const roleOptions = {
          'LGU-PMT': ['MPMEC Secretariat', 'MPMEC'],
          'LGU-IU': ['IO Officer', 'MDC', 'Municipal Officer'],
          'EIU': ['Contractor', 'Program Partner Agency'],
          'EMS': ['Soon to be implemented']
        };

        const subRoleOptions = {
          'MPMEC Secretariat': ['Focal Person (Admin)'],
          'MPMEC': ['Chairperson', 'Vice Chairperson', 'Member'],
          'IO Officer': ['Department Encoder (Admin)'],
          'MDC': ['Member'],
          'Municipal Officer': ['Member'],
          'Contractor': ['Head'],
          'Program Partner Agency': ['Head'],
          'Soon to be implemented': []
        };

        if (editGroupSelect) {
        editGroupSelect.addEventListener('change', function() {
          const selectedGroup = this.value;
            if (editRoleSelect) editRoleSelect.innerHTML = '<option value="">Select Role</option>';
            if (editSubRoleSelect) editSubRoleSelect.innerHTML = '<option value="">Select Subrole</option>';
            if (editProjectCodeContainer) editProjectCodeContainer.classList.add('hidden');
          
          // Reset sub-role visibility
            if (editSubRoleContainer) editSubRoleContainer.classList.remove('hidden');

          // Handle Department/Office dropdown based on selected group
          const editDepartmentSelect = document.getElementById('editDepartmentOfficeSelect');
          const editExternalCompanyContainer = document.getElementById('editExternalCompanyContainer');
          
          if (editDepartmentSelect) {
            // Clear existing options except the first one
            editDepartmentSelect.innerHTML = '<option value="" class="bg-neutral-800 text-white">Select Department/Office</option>';
            
            if (selectedGroup === 'EIU') {
              // For EIU: Show only External Partner Company
              const option = document.createElement('option');
              option.value = 'External Partner Company';
              option.textContent = 'External Partner Company';
              option.className = 'bg-neutral-800 text-white';
              editDepartmentSelect.appendChild(option);
              
              // Show free text field for company name
              if (editExternalCompanyContainer) {
                editExternalCompanyContainer.classList.remove('hidden');
              }
            } else if (selectedGroup === 'LGU-PMT' || selectedGroup === 'LGU-IU') {
              // For LGU-PMT and LGU-IU: Show all departments except External Partner Company
              const departments = [
                'Municipal Engineer\'s Office',
                'Municipal Agriculturist\'s Office',
                'Municipal General Services Office',
                'Municipal Social Welfare and Development Office',
                'Municipal Disaster and Risk Reduction Management Office',
                'Municipal Planning and Development Office',
                'Municipal Treasurer\'s Office',
                'Municipal Budget Office',
                'Municipal Health Office',
                'Municipal Civil Registry Office',
                'Municipal Environment And Natural Resources Office'
              ];
              
              departments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                option.className = 'bg-neutral-800 text-white';
                editDepartmentSelect.appendChild(option);
              });
              
              // Hide free text field
              if (editExternalCompanyContainer) {
                editExternalCompanyContainer.classList.add('hidden');
              }
            } else {
              // For other groups (EMS): Show all departments
              const allDepartments = [
                'Municipal Engineer\'s Office',
                'Municipal Agriculturist\'s Office',
                'Municipal General Services Office',
                'Municipal Social Welfare and Development Office',
                'Municipal Disaster and Risk Reduction Management Office',
                'Municipal Planning and Development Office',
                'Municipal Treasurer\'s Office',
                'Municipal Budget Office',
                'Municipal Health Office',
                'Municipal Civil Registry Office',
                'Municipal Environment And Natural Resources Office',
                'External Partner Company'
              ];
              
              allDepartments.forEach(dept => {
                const option = document.createElement('option');
                option.value = dept;
                option.textContent = dept;
                option.className = 'bg-neutral-800 text-white';
                editDepartmentSelect.appendChild(option);
              });
              
              // Hide free text field
              if (editExternalCompanyContainer) {
                editExternalCompanyContainer.classList.add('hidden');
              }
            }
          }

          if (selectedGroup && roleOptions[selectedGroup]) {
            roleOptions[selectedGroup].forEach(role => {
              const option = document.createElement('option');
              option.value = role;
              option.textContent = role;
                if (editRoleSelect) editRoleSelect.appendChild(option);
            });

            // Show special message for EMS
            if (selectedGroup === 'EMS') {
              if (editRoleSelect) {
                editRoleSelect.innerHTML = '<option value="">Soon to be implemented</option>';
                editRoleSelect.disabled = true;
              }
            } else {
              if (editRoleSelect) editRoleSelect.disabled = false;
            }
          }
        });
        }

        if (editRoleSelect) {
        editRoleSelect.addEventListener('change', function() {
          const selectedRole = this.value;
            const selectedGroup = editGroupSelect ? editGroupSelect.value : '';
            if (editSubRoleSelect) editSubRoleSelect.innerHTML = '<option value="">Select Subrole</option>';
            if (editProjectCodeContainer) editProjectCodeContainer.classList.add('hidden');
          
          // Show sub-role container for all groups except EMS
          if (selectedGroup === 'EMS') {
            if (editSubRoleContainer) editSubRoleContainer.classList.add('hidden');
          } else {
            if (editSubRoleContainer) editSubRoleContainer.classList.remove('hidden');
          }

          // Populate sub-role options based on selected role
          if (selectedRole && subRoleOptions[selectedRole]) {
            subRoleOptions[selectedRole].forEach(subRole => {
              const option = document.createElement('option');
              option.value = subRole;
              option.textContent = subRole;
              if (editSubRoleSelect) editSubRoleSelect.appendChild(option);
            });
          }

          // Show project code for EIU only
          if (selectedGroup === 'EIU') {
            if (editProjectCodeContainer) editProjectCodeContainer.classList.remove('hidden');
          }
        });
        }

        // Edit user button click handler
        document.querySelectorAll('.editUserBtn').forEach(btn => {
          btn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('Edit user button clicked');
            alert('Edit user button clicked - testing if event listener works');
            const user = JSON.parse(btn.getAttribute('data-user'));
            // alert('User data: ' + JSON.stringify(user, null, 2));
            console.log('User data received:', user);
            console.log('User birthdate:', user.birthdate);
            console.log('User role:', user.role);
            console.log('User group:', user.group);
            console.log('User profilePhoto:', user.profilePhoto);
            console.log('User profilePictureUrl:', user.profilePictureUrl);
            console.log('All user data keys:', Object.keys(user));
            
            // Populate form fields
            console.log('Edit user form element:', editUserForm);
            alert('Form element found: ' + (editUserForm ? 'YES' : 'NO'));
            editUserForm.id.value = user.id;
            
            // Split full name into components
            const nameParts = (user.fullName || user.name || '').split(' ');
            editUserForm.querySelector('input[name="firstName"]').value = nameParts[0] || '';
            editUserForm.querySelector('input[name="middleName"]').value = nameParts[1] || '';
            editUserForm.querySelector('input[name="lastName"]').value = nameParts[2] || '';
            editUserForm.querySelector('input[name="fullName"]').value = user.fullName || user.name || '';
            
            editUserForm.querySelector('input[name="username"]').value = user.username || user.email || '';
            editUserForm.querySelector('input[name="contactNumber"]').value = user.contactNumber || '';
            const birthdateField = editUserForm.querySelector('input[name="birthdate"]');
            const userIdField = editUserForm.querySelector('input[name="userId"]');
            const statusField = editUserForm.querySelector('select[name="status"]');
            
            console.log('Birthdate field found:', birthdateField);
            console.log('UserId field found:', userIdField);
            console.log('Status field found:', statusField);
            alert('Birthdate field found: ' + (birthdateField ? 'YES' : 'NO'));
            
            if (birthdateField) {
              const birthdateValue = user.birthdate ? user.birthdate.split('T')[0] : '';
              birthdateField.value = birthdateValue;
              console.log('Birthdate value set to:', birthdateValue);
              console.log('Birthdate field value after setting:', birthdateField.value);
              
              // Force the field to show the value
              birthdateField.setAttribute('value', birthdateValue);
              birthdateField.dispatchEvent(new Event('input', { bubbles: true }));
              birthdateField.dispatchEvent(new Event('change', { bubbles: true }));
              
              // Set birthdate again after a delay to ensure it sticks
              setTimeout(() => {
                birthdateField.value = birthdateValue;
                birthdateField.setAttribute('value', birthdateValue);
                console.log('Birthdate field value after delay:', birthdateField.value);
              }, 200);
            } else {
              console.log('Birthdate field not found!');
            }
            
            if (userIdField) {
              userIdField.value = user.userId || '';
            }
            
            if (statusField) {
              statusField.value = user.status || 'active';
            }
            
            console.log('Role value will be set to:', user.role || '');
            
            
            // Set department/office
            const departmentOfficeSelect = document.getElementById('editDepartmentOfficeSelect');
            if (departmentOfficeSelect) {
              departmentOfficeSelect.value = user.departmentOffice || user.department || '';
            }
            
            // Set group and role - role should be group, subrole should be the actual role
            const groupSelect = editUserForm.querySelector('select[name="group"]');
            const roleSelect = editUserForm.querySelector('select[name="role"]');
            const subRoleSelect = editUserForm.querySelector('select[name="subRole"]');
            
            console.log('Group select found:', groupSelect);
            console.log('Role select found:', roleSelect);
            console.log('SubRole select found:', subRoleSelect);
            
            if (groupSelect) {
              groupSelect.value = user.group || '';
              console.log('Group value set to:', groupSelect.value);
            } else {
              console.log('Group select not found!');
            }
            
            if (editGroupSelect) editGroupSelect.dispatchEvent(new Event('change'));
            
            // Set role and subrole after group is populated
            setTimeout(() => {
              console.log('Setting role and subrole after group population...');
              console.log('User group:', user.group);
              console.log('User role:', user.role);
              console.log('User subRole:', user.subRole);
              
              // Role should be the group value
              if (roleSelect) {
                const roleValue = user.group || '';
                roleSelect.value = roleValue;
                console.log('Role (group) value set to:', roleValue);
              } else {
                console.log('Role select not found in setTimeout!');
              }
              
              // SubRole should be the actual role value
              if (subRoleSelect) {
                const subRoleValue = user.role || '';
                subRoleSelect.value = subRoleValue;
                console.log('SubRole value set to:', subRoleValue);
              } else {
                console.log('SubRole select not found in setTimeout!');
              }
              
              if (editRoleSelect) editRoleSelect.dispatchEvent(new Event('change'));
              
              // Set subrole, project code, and office department
              setTimeout(() => {
                if (editUserForm.subRole) editUserForm.subRole.value = user.subRole || '';
                // Set department/office field
                const departmentOfficeField = document.getElementById('editDepartmentOfficeSelect');
                if (departmentOfficeField) {
                  departmentOfficeField.value = user.departmentOffice || user.department || '';
                }
                
                // Store original form values AFTER all fields are populated
                originalFormValues = {
                  firstName: editUserForm.querySelector('input[name="firstName"]')?.value || '',
                  middleName: editUserForm.querySelector('input[name="middleName"]')?.value || '',
                  lastName: editUserForm.querySelector('input[name="lastName"]')?.value || '',
                  fullName: editUserForm.querySelector('input[name="fullName"]')?.value || '',
                  username: editUserForm.querySelector('input[name="username"]')?.value || '',
                  contactNumber: editUserForm.querySelector('input[name="contactNumber"]')?.value || '',
                  birthdate: editUserForm.querySelector('input[name="birthdate"]')?.value || '',
                  userId: editUserForm.querySelector('input[name="userId"]')?.value || '',
                  status: editUserForm.querySelector('select[name="status"]')?.value || '',
                  group: editUserForm.querySelector('select[name="group"]')?.value || '',
                  role: editUserForm.querySelector('select[name="role"]')?.value || '',
                  subRole: editUserForm.querySelector('select[name="subRole"]')?.value || '',
                  departmentOffice: document.getElementById('editDepartmentOfficeSelect')?.value || ''
                };
                
                console.log('Stored original values AFTER population:', originalFormValues);
                
                // Test form modification detection after storing original values
                setTimeout(() => {
                  console.log('Testing form modification detection after population...');
                  const isModified = hasFormBeenModified();
                  console.log('Form modified after population:', isModified);
                }, 50);
              }, 100);
            }, 100);
            
            // Load existing profile photo if available
            const editProfilePhotoPreview = document.getElementById('editProfilePhotoPreview');
            console.log('Profile photo preview element:', editProfilePhotoPreview);
            console.log('User profile photo:', user.profilePhoto);
            console.log('User profilePictureUrl:', user.profilePictureUrl);
            const profilePhotoUrl = user.profilePictureUrl || user.profilePhoto;
            
            if (profilePhotoUrl && editProfilePhotoPreview) {
              // Clear any existing content first
              editProfilePhotoPreview.innerHTML = '';
              
              // Create and load the image
              const img = new Image();
              img.onload = function() {
                editProfilePhotoPreview.innerHTML = `<img src="${profilePhotoUrl}" alt="Profile Preview" class="w-20 h-20 rounded-full object-cover border-2 border-white/20">`;
                console.log('Profile photo loaded successfully:', profilePhotoUrl);
              };
              img.onerror = function() {
                console.log('Failed to load profile photo:', profilePhotoUrl);
                // Show default placeholder
                editProfilePhotoPreview.innerHTML = `
                  <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                `;
              };
              img.src = profilePhotoUrl;
            } else {
              console.log('No profile photo available for user');
              // Show default placeholder
              editProfilePhotoPreview.innerHTML = `
                <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              `;
            }
            
            console.log('Showing edit user modal');
            
            // Add a small delay to ensure all fields are populated before showing modal
            setTimeout(() => {
            editUserModal.classList.remove('hidden');
              editUserModal.classList.add('show');
            editUserError.classList.add('hidden');
              
              // Verify field values after modal is shown
              console.log('Birthdate field value after modal show:', editUserForm.querySelector('input[name="birthdate"]')?.value);
              console.log('Role field value after modal show:', editUserForm.querySelector('select[name="role"]')?.value);
              console.log('Group field value after modal show:', editUserForm.querySelector('select[name="group"]')?.value);
            }, 100);
            
            // Force the modal to be visible immediately with all necessary properties
            editUserModal.style.display = 'flex';
            editUserModal.style.alignItems = 'center';
            editUserModal.style.justifyContent = 'center';
            editUserModal.style.visibility = 'visible';
            editUserModal.style.opacity = '1';
            editUserModal.style.position = 'fixed';
            editUserModal.style.top = '0';
            editUserModal.style.left = '0';
            editUserModal.style.right = '0';
            editUserModal.style.bottom = '0';
            editUserModal.style.width = '100vw';
            editUserModal.style.height = '100vh';
            editUserModal.style.zIndex = '9999';
            
            // Also make the modal content visible
            const editUserModalContent = document.getElementById('editUserModalContent');
            if (editUserModalContent) {
              editUserModalContent.style.opacity = '1';
              editUserModalContent.style.transform = 'scale(1)';
            }
            
            console.log('Edit user modal should be visible now');
            console.log('Modal classes:', editUserModal.className);
            console.log('Modal display style:', editUserModal.style.display);
            console.log('Modal visibility:', editUserModal.style.visibility);
            console.log('Modal opacity:', editUserModal.style.opacity);
            
            // Check if modal is actually visible after a short delay
            setTimeout(() => {
              const isVisible = editUserModal.offsetParent !== null;
              console.log('Modal visible after delay:', isVisible);
              if (!isVisible) {
                console.log('Modal not visible, forcing display again');
                editUserModal.style.display = 'flex';
                editUserModal.style.visibility = 'visible';
                editUserModal.style.opacity = '1';
                editUserModal.style.position = 'fixed';
                editUserModal.style.top = '0';
                editUserModal.style.left = '0';
                editUserModal.style.right = '0';
                editUserModal.style.bottom = '0';
                editUserModal.style.width = '100vw';
                editUserModal.style.height = '100vh';
                editUserModal.style.zIndex = '9999';
                
                // Also make the modal content visible
                const editUserModalContent = document.getElementById('editUserModalContent');
                if (editUserModalContent) {
                  editUserModalContent.style.opacity = '1';
                  editUserModalContent.style.transform = 'scale(1)';
                }
              }
            }, 200);
          });
        });

        closeEditUserModal.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          console.log('Close button clicked');
          
          // Prevent multiple confirmation dialogs
          if (isConfirmationDialogOpen) {
            return;
          }
          
          // Check if form has been modified BEFORE closing
          const isModified = hasFormBeenModified();
          console.log('Close button - Form modified:', isModified);
          
          if (isModified) {
            isConfirmationDialogOpen = true;
            if (confirm('You have unsaved changes. Are you sure you want to close without saving?')) {
              closeEditModal();
            }
            isConfirmationDialogOpen = false;
          } else {
            console.log('No changes detected, closing modal directly');
            // Close modal without resetting form first
          editUserModal.classList.add('hidden');
            editUserModal.classList.remove('show');
            editUserError.classList.add('hidden');
            
            // Reset modal styles
            editUserModal.style.display = 'none';
            editUserModal.style.visibility = 'hidden';
            editUserModal.style.opacity = '0';
            
            // Clear original values and reset confirmation dialog flag
            originalFormValues = {};
            isConfirmationDialogOpen = false;
            
            // Reset form after closing
            setTimeout(() => {
          editUserForm.reset();
            }, 100);
          }
        });
        
        // Edit Cancel Button
        const editCancelBtn = document.getElementById('editCancelBtn');
        if (editCancelBtn) {
          editCancelBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('Cancel button clicked');
            
            // Prevent multiple confirmation dialogs
            if (isConfirmationDialogOpen) {
              return;
            }
            
            // Check if form has been modified BEFORE closing
            const isModified = hasFormBeenModified();
            console.log('Cancel button - Form modified:', isModified);
            
            if (isModified) {
              isConfirmationDialogOpen = true;
              if (confirm('You have unsaved changes. Are you sure you want to cancel without saving?')) {
                closeEditModal();
              }
              isConfirmationDialogOpen = false;
            } else {
              console.log('No changes detected, closing modal directly');
              // Close modal without resetting form first
              editUserModal.classList.add('hidden');
              editUserModal.classList.remove('show');
          editUserError.classList.add('hidden');
          
              // Reset modal styles
              editUserModal.style.display = 'none';
              editUserModal.style.visibility = 'hidden';
              editUserModal.style.opacity = '0';
              
              // Clear original values and reset confirmation dialog flag
              originalFormValues = {};
              isConfirmationDialogOpen = false;
              
              // Reset form after closing
              setTimeout(() => {
                editUserForm.reset();
              }, 100);
            }
          });
        }
        
        // Click outside to close Edit User Modal
        editUserModal.addEventListener('click', function(e) {
          // Only close if clicking on the backdrop (not the modal content)
          if (e.target === editUserModal) {
            console.log('Edit modal backdrop clicked, closing modal');
            
            // Prevent multiple confirmation dialogs
            if (isConfirmationDialogOpen) {
              return;
            }
            
            // Check if form has been modified BEFORE closing
            const isModified = hasFormBeenModified();
            console.log('Click outside - Form modified:', isModified);
            
            if (isModified) {
              isConfirmationDialogOpen = true;
              if (confirm('You have unsaved changes. Are you sure you want to close without saving?')) {
                closeEditModal();
              }
              isConfirmationDialogOpen = false;
            } else {
              console.log('No changes detected, closing modal directly');
              // Close modal without resetting form first
              editUserModal.classList.add('hidden');
              editUserModal.classList.remove('show');
              editUserError.classList.add('hidden');
              
              // Reset modal styles
              editUserModal.style.display = 'none';
              editUserModal.style.visibility = 'hidden';
              editUserModal.style.opacity = '0';
              
              // Clear original values and reset confirmation dialog flag
              originalFormValues = {};
              isConfirmationDialogOpen = false;
              
              // Reset form after closing
              setTimeout(() => {
                editUserForm.reset();
              }, 100);
            }
          }
        });
        
        // Prevent modal content clicks from closing the modal
        const editUserModalContent = document.getElementById('editUserModalContent');
        if (editUserModalContent) {
          editUserModalContent.addEventListener('click', function(e) {
            e.stopPropagation();
          });
        }

        // Edit form validation and submission
        editUserForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          editUserError.classList.add('hidden');
          
          // Validate name fields
          const first = editUserForm.querySelector('input[name="firstName"]');
          const middle = editUserForm.querySelector('input[name="middleName"]');
          const last = editUserForm.querySelector('input[name="lastName"]');
          
          const hasFirstNameNumbers = /\d/.test(first.value);
          const hasMiddleNameNumbers = /\d/.test(middle.value);
          const hasLastNameNumbers = /\d/.test(last.value);
          
          const hasFirstNameSpecialChars = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(first.value);
          const hasMiddleNameSpecialChars = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(middle.value);
          const hasLastNameSpecialChars = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(last.value);
          
          if (hasFirstNameNumbers || hasFirstNameSpecialChars || hasMiddleNameNumbers || hasMiddleNameSpecialChars || hasLastNameNumbers || hasLastNameSpecialChars) {
            editUserError.textContent = 'Please remove numbers and special characters from name fields.';
            editUserError.classList.remove('hidden');
            return;
          }
          
          // Validate age
          const birthdate = editUserForm.querySelector('input[name="birthdate"]').value;
          const ageValidation = validateAge(birthdate);
          
          if (!ageValidation.isValid) {
            editUserError.textContent = 'User must be at least 18 years old.';
            editUserError.classList.remove('hidden');
            return;
          }

          // Validate contact number
          const contactNumber = editUserForm.querySelector('input[name="contactNumber"]').value;
          const contactNumberRegex = /^[0-9]*$/;
          if (!contactNumberRegex.test(contactNumber)) {
            editUserError.textContent = 'Contact number must only contain numbers.';
            editUserError.classList.remove('hidden');
            return;
          }
          
          const formData = new FormData(editUserForm);
          
          // Add profile photo if selected
          const editProfilePhoto = document.getElementById('editProfilePhotoInput').files[0];
          if (editProfilePhoto) {
            formData.append('profilePhoto', editProfilePhoto);
          }
          
          const payload = Object.fromEntries(formData.entries());
          
          // Map roles correctly for backend
          const group = payload.group;
          const role = payload.role;
          
          payload.role = group;
          payload.subRole = role;
          
          if (role === 'Member') {
            payload.subRole = 'Member';
          } else if (['NGO Personnel', 'CSO Personnel', 'PPMC'].includes(role)) {
            payload.subRole = role;
          }
          
          if (payload.fullName && !payload.name) {
            payload.name = payload.fullName;
          }
          
          try {
            const token = localStorage.getItem('token') || '';
            const res = await fetch(`http://localhost:3000/api/users/${payload.id}`, {
              method: 'PUT',
              headers: {
                'Authorization': `Bearer ${token}`
              },
              body: formData
            });
            const data = await res.json();
            if (res.ok && data.success) {
              window.location.reload();
            } else {
              editUserError.textContent = data.error || 'Failed to update user.';
              editUserError.classList.remove('hidden');
            }
          } catch (err) {
            editUserError.textContent = 'Failed to update user.';
            editUserError.classList.remove('hidden');
          }
        });

        // Delete User Modal (Soft Delete)
        const deleteUserModal = document.getElementById('deleteUserModal');
        const closeDeleteUserModal = document.getElementById('closeDeleteUserModal');
        const deleteUserForm = document.getElementById('deleteUserForm');
        const deleteUserError = document.getElementById('deleteUserError');
        const cancelDeleteUser = document.getElementById('cancelDeleteUser');
        
        document.querySelectorAll('.deleteUserBtn').forEach(btn => {
          btn.addEventListener('click', () => {
            deleteUserForm.id.value = btn.getAttribute('data-userid');
            deleteUserModal.classList.remove('hidden');
            deleteUserError.classList.add('hidden');
          });
        });
        
        closeDeleteUserModal.addEventListener('click', () => {
          deleteUserModal.classList.add('hidden');
          deleteUserForm.reset();
          deleteUserError.classList.add('hidden');
        });
        
        cancelDeleteUser.addEventListener('click', () => {
          deleteUserModal.classList.add('hidden');
          deleteUserForm.reset();
          deleteUserError.classList.add('hidden');
        });
        
        deleteUserForm.addEventListener('submit', async function(e) {
          e.preventDefault();
          deleteUserError.classList.add('hidden');
          const id = deleteUserForm.id.value;
          try {
            const token = localStorage.getItem('token') || '';
            const res = await fetch(`http://localhost:3000/api/users/${id}/soft-delete`, {
              method: 'PUT',
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            const data = await res.json();
            if (res.ok && data.success) {
              window.location.reload();
            } else {
              deleteUserError.textContent = data.error || 'Failed to delete user.';
              deleteUserError.classList.remove('hidden');
            }
          } catch (err) {
            deleteUserError.textContent = 'Failed to delete user.';
            deleteUserError.classList.remove('hidden');
          }
        });

        // Recently Deleted Users Functionality
        const toggleDeletedUsers = document.getElementById('toggleDeletedUsers');
        const deletedUsersContent = document.getElementById('deletedUsersContent');
        let deletedUsersExpanded = true;

        if (toggleDeletedUsers && deletedUsersContent) {
          toggleDeletedUsers.addEventListener('click', function() {
            deletedUsersExpanded = !deletedUsersExpanded;
            deletedUsersContent.style.display = deletedUsersExpanded ? 'block' : 'none';
            toggleDeletedUsers.innerHTML = deletedUsersExpanded ? 
              '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>' :
              '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>';
          });
        }

        // Countdown Timer for Deleted Users
        function updateCountdownTimers() {
          const countdownElements = document.querySelectorAll('.countdown-timer');
          
          countdownElements.forEach(element => {
            const deletedAt = new Date(element.getAttribute('data-deleted-at'));
            const now = new Date();
            const timeDiff = deletedAt.getTime() + (30 * 24 * 60 * 60 * 1000) - now.getTime(); // 30 days
            
            if (timeDiff <= 0) {
              element.textContent = 'Permanently deleted';
              element.classList.add('text-red-600', 'font-bold');
            } else {
              const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
              const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
              const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
              
              element.textContent = `${days}d ${hours}h ${minutes}m remaining`;
              
              if (days <= 1) {
                element.classList.add('text-red-600', 'font-bold');
              } else if (days <= 7) {
                element.classList.add('text-orange-600', 'font-medium');
              } else {
                element.classList.add('text-gray-600');
              }
            }
          });
        }

        // Update countdown every minute
        updateCountdownTimers();
        setInterval(updateCountdownTimers, 60000);

        // History of Deleted Users Functionality
        const toggleDeletedHistory = document.getElementById('toggleDeletedHistory');
        const deletedHistoryContent = document.getElementById('deletedHistoryContent');
        let deletedHistoryExpanded = true;

        if (toggleDeletedHistory && deletedHistoryContent) {
          toggleDeletedHistory.addEventListener('click', function() {
            deletedHistoryExpanded = !deletedHistoryExpanded;
            deletedHistoryContent.style.display = deletedHistoryExpanded ? 'block' : 'none';
            toggleDeletedHistory.innerHTML = deletedHistoryExpanded ? 
              '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>' :
              '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>';
          });
        }

        // Enhanced History of Deleted Users Functionality
        let historyUsers = [];
        let filteredHistoryUsers = [];
        let currentHistoryPage = 1;
        let historyItemsPerPage = 4;
        let currentDisplayMode = 'scroll'; // 'scroll' or 'pagination'
        
        // Initialize history functionality
        function initializeHistoryFunctionality() {
          console.log('🔧 Initializing enhanced history functionality...');
          
          // Get backend deleted users data from global variable
          const backendDeletedUsers = window.deletedUsersHistory || [];
          console.log('🗄️ Backend deleted users from window:', backendDeletedUsers);
          console.log('🔍 Type of backendDeletedUsers:', typeof backendDeletedUsers);
          console.log('🔍 Is array:', Array.isArray(backendDeletedUsers));
          console.log('🔍 Length:', backendDeletedUsers.length);
          
          if (backendDeletedUsers && backendDeletedUsers.length > 0) {
            // Use real backend data
            historyUsers = backendDeletedUsers.map(user => {
              const element = createUserElementFromData(user);
              return {
                id: user.id,
                name: user.fullName || user.name,
                email: user.email,
                userId: user.userId,
                group: user.group || user.role,
                department: user.department,
                status: 'permanently-deleted',
                deletedAt: user.permanentDeletedAt || user.deletedAt,
                element: element
              };
            });
            
            console.log(`📊 Loaded ${historyUsers.length} real history users from backend`);
            filteredHistoryUsers = [...historyUsers];
          } else if (backendDeletedUsers.length === 0) {
            // Try to fetch data directly from API as fallback
            console.log('🔄 No data in global variable, trying direct API fetch...');
            fetchDeletedUsersDirectly();
          } else {
            // Fallback: try to get from template
            const historyTemplate = document.getElementById('historyUserTemplate');
            if (historyTemplate) {
              const userCards = historyTemplate.querySelectorAll('.deleted-history-card');
              console.log(`🔍 Found ${userCards.length} user cards in template`);
              
              historyUsers = Array.from(userCards).map(card => {
                const userData = {
                  id: card.dataset.userId,
                  name: card.dataset.userName,
                  email: card.dataset.userEmail,
                  userId: card.dataset.userUserid,
                  group: card.dataset.userGroup,
                  department: card.dataset.userDepartment,
                  status: card.dataset.userStatus || 'permanently-deleted',
                  deletedAt: card.dataset.deletedAt,
                  element: card.cloneNode(true)
                };
                console.log('📄 User data:', userData);
                return userData;
              });
              
              console.log(`📊 Loaded ${historyUsers.length} history users from template`);
              filteredHistoryUsers = [...historyUsers];
            } else {
              console.log('⚠️ No backend data and history template not found');
              historyUsers = [];
              filteredHistoryUsers = [];
              
              // Only create test data if there are truly no deleted users
              console.log('🧪 No history users found, creating test data for pagination testing...');
              createTestHistoryData();
            }
          }
          
          // Set up event listeners first
          setupHistoryEventListeners();
          
          // Then render users
          renderHistoryUsers();
          
          // Load profile pictures for real users
          if (historyUsers.length > 0) {
            loadHistoryProfilePictures();
          }
        }
        
        function setupHistoryEventListeners() {
          // Display mode toggle
          const scrollModeBtn = document.getElementById('scrollModeBtn');
          const paginationModeBtn = document.getElementById('paginationModeBtn');
          
          if (scrollModeBtn && paginationModeBtn) {
            scrollModeBtn.addEventListener('click', () => toggleDisplayMode('scroll'));
            paginationModeBtn.addEventListener('click', () => toggleDisplayMode('pagination'));
          }
          
          // Filter listeners
          const statusFilter = document.getElementById('historyStatusFilter');
          const departmentFilter = document.getElementById('historyDepartmentFilter');
          const groupFilter = document.getElementById('historyGroupFilter');
          const searchInput = document.getElementById('historySearchInput');
          const sortFilter = document.getElementById('historySortFilter');
          const resetBtn = document.getElementById('resetHistoryFilters');
          
          if (statusFilter) statusFilter.addEventListener('change', applyHistoryFilters);
          if (departmentFilter) departmentFilter.addEventListener('change', applyHistoryFilters);
          if (groupFilter) groupFilter.addEventListener('change', applyHistoryFilters);
          if (searchInput) {
            searchInput.addEventListener('input', debounce(applyHistoryFilters, 300));
            searchInput.addEventListener('keypress', (e) => {
              if (e.key === 'Enter') applyHistoryFilters();
            });
          }
          if (sortFilter) sortFilter.addEventListener('change', applyHistoryFilters);
          if (resetBtn) resetBtn.addEventListener('click', resetHistoryFilters);
          
          // Pagination listeners
          const prevBtn = document.getElementById('historyPrevBtn');
          const nextBtn = document.getElementById('historyNextBtn');
          
          if (prevBtn) prevBtn.addEventListener('click', () => changeHistoryPage(-1));
          if (nextBtn) nextBtn.addEventListener('click', () => changeHistoryPage(1));
        }
        
        function toggleDisplayMode(mode) {
          currentDisplayMode = mode;
          const scrollModeBtn = document.getElementById('scrollModeBtn');
          const paginationModeBtn = document.getElementById('paginationModeBtn');
          const scrollContainer = document.getElementById('historyScrollContainer');
          const paginationContainer = document.getElementById('historyPaginationContainer');
          
          if (mode === 'scroll') {
            scrollModeBtn.className = 'px-3 py-1 text-xs font-medium rounded-md transition-all duration-200 bg-gray-700 text-white';
            paginationModeBtn.className = 'px-3 py-1 text-xs font-medium rounded-md transition-all duration-200 text-gray-600 hover:bg-gray-100';
            scrollContainer.classList.remove('hidden');
            paginationContainer.classList.add('hidden');
          } else {
            scrollModeBtn.className = 'px-3 py-1 text-xs font-medium rounded-md transition-all duration-200 text-gray-600 hover:bg-gray-100';
            paginationModeBtn.className = 'px-3 py-1 text-xs font-medium rounded-md transition-all duration-200 bg-gray-700 text-white';
            scrollContainer.classList.add('hidden');
            paginationContainer.classList.remove('hidden');
            currentHistoryPage = 1;
          }
          
          renderHistoryUsers();
        }
        
        function applyHistoryFilters() {
          const statusFilter = document.getElementById('historyStatusFilter')?.value || '';
          const departmentFilter = document.getElementById('historyDepartmentFilter')?.value || '';
          const groupFilter = document.getElementById('historyGroupFilter')?.value || '';
          const searchTerm = document.getElementById('historySearchInput')?.value.toLowerCase() || '';
          const sortBy = document.getElementById('historySortFilter')?.value || 'date-newest';
          
          console.log('🔍 Applying history filters:', { statusFilter, departmentFilter, groupFilter, searchTerm, sortBy });
          
          // Filter users
          filteredHistoryUsers = historyUsers.filter(user => {
            // Status filter
            if (statusFilter && statusFilter !== user.status) return false;
            
            // Department filter
            if (departmentFilter && user.department !== departmentFilter) return false;
            
            // Group filter
            if (groupFilter && user.group !== groupFilter) return false;
            
            // Search filter
            if (searchTerm) {
              const searchFields = [
                user.name,
                user.email,
                user.userId
              ].filter(Boolean).map(field => field.toLowerCase());
              
              if (!searchFields.some(field => field.includes(searchTerm))) return false;
            }
            
            return true;
          });
          
          // Sort users
          sortHistoryUsers(sortBy);
          
          // Reset pagination
          currentHistoryPage = 1;
          
          // Render
          renderHistoryUsers();
        }
        
        function sortHistoryUsers(sortBy) {
          filteredHistoryUsers.sort((a, b) => {
            switch (sortBy) {
              case 'name-az':
                return (a.name || '').localeCompare(b.name || '');
              case 'name-za':
                return (b.name || '').localeCompare(a.name || '');
              case 'date-oldest':
                return new Date(a.deletedAt) - new Date(b.deletedAt);
              case 'date-newest':
                return new Date(b.deletedAt) - new Date(a.deletedAt);
              case 'group-alpha':
                return (a.group || '').localeCompare(b.group || '');
              case 'department-alpha':
                return (a.department || '').localeCompare(b.department || '');
              default:
                return new Date(b.deletedAt) - new Date(a.deletedAt);
            }
          });
        }
        
        function resetHistoryFilters() {
          document.getElementById('historyStatusFilter').value = '';
          document.getElementById('historyDepartmentFilter').value = '';
          document.getElementById('historyGroupFilter').value = '';
          document.getElementById('historySearchInput').value = '';
          document.getElementById('historySortFilter').value = 'date-newest';
          
          filteredHistoryUsers = [...historyUsers];
          currentHistoryPage = 1;
          renderHistoryUsers();
          
          console.log('🔄 History filters reset');
        }
        
        function renderHistoryUsers() {
          console.log(`🎨 RENDER: Starting renderHistoryUsers...`);
          console.log(`🎨 RENDER: ${filteredHistoryUsers.length} users in ${currentDisplayMode} mode`);
          
          const scrollContainer = document.getElementById('historyScrollContainer');
          const paginationContent = document.getElementById('historyPaginationContent');
          const emptyState = document.getElementById('historyEmptyState');
          
          console.log('🔍 RENDER: Container elements:', {
            scrollContainer: !!scrollContainer,
            paginationContent: !!paginationContent,
            emptyState: !!emptyState
          });
          
          // Clear containers
          if (scrollContainer) {
            scrollContainer.innerHTML = '';
            console.log('🧹 Cleared scroll container');
          }
          if (paginationContent) {
            paginationContent.innerHTML = '';
            console.log('🧹 Cleared pagination content');
          }
          
          // Show empty state if no users
          if (filteredHistoryUsers.length === 0) {
            console.log('📭 Showing empty state');
            if (emptyState) emptyState.classList.remove('hidden');
            
            // Hide pagination controls when empty
            const paginationControls = document.getElementById('historyPaginationControls');
            if (paginationControls) paginationControls.classList.add('hidden');
            return;
          } else {
            console.log('📋 Hiding empty state');
            if (emptyState) emptyState.classList.add('hidden');
          }
          
          if (currentDisplayMode === 'scroll') {
            console.log('📜 Rendering in scroll mode');
            // Render all users in scroll mode
            filteredHistoryUsers.forEach((user, index) => {
              if (user.element && scrollContainer) {
                const userElement = user.element.cloneNode(true);
                scrollContainer.appendChild(userElement);
                console.log(`✅ Added user ${index + 1} to scroll container`);
              }
            });
            
            // Hide pagination controls in scroll mode
            const paginationControls = document.getElementById('historyPaginationControls');
            if (paginationControls) paginationControls.classList.add('hidden');
          } else {
            console.log('📄 Rendering in pagination mode');
            // Render paginated users
            const startIndex = (currentHistoryPage - 1) * historyItemsPerPage;
            const endIndex = startIndex + historyItemsPerPage;
            const pageUsers = filteredHistoryUsers.slice(startIndex, endIndex);
            
            console.log(`📊 Page ${currentHistoryPage}: showing users ${startIndex + 1}-${Math.min(endIndex, filteredHistoryUsers.length)} of ${filteredHistoryUsers.length}`);
            
            pageUsers.forEach((user, index) => {
              if (user.element && paginationContent) {
                const userElement = user.element.cloneNode(true);
                paginationContent.appendChild(userElement);
                console.log(`✅ Added user ${startIndex + index + 1} to pagination content`);
              }
            });
            
            // Show and update pagination controls
            const paginationControls = document.getElementById('historyPaginationControls');
            if (paginationControls) paginationControls.classList.remove('hidden');
            updatePaginationControls();
          }
          
          // Re-attach event listeners for download buttons
          attachDownloadListeners();
          console.log('🔗 Reattached download listeners');
          
          // Load profile pictures after rendering
          setTimeout(() => {
            loadHistoryProfilePictures();
          }, 100);
        }
        
        function updatePaginationControls() {
          const totalPages = Math.max(1, Math.ceil(filteredHistoryUsers.length / historyItemsPerPage));
          const startItem = filteredHistoryUsers.length === 0 ? 0 : (currentHistoryPage - 1) * historyItemsPerPage + 1;
          const endItem = Math.min(currentHistoryPage * historyItemsPerPage, filteredHistoryUsers.length);
          
          console.log(`🔢 Updating pagination: page ${currentHistoryPage} of ${totalPages}, showing ${startItem}-${endItem} of ${filteredHistoryUsers.length}`);
          
          // Update showing text
          const showingStart = document.getElementById('historyShowingStart');
          const showingEnd = document.getElementById('historyShowingEnd');
          const totalCount = document.getElementById('historyTotalCount');
          
          if (showingStart) showingStart.textContent = startItem;
          if (showingEnd) showingEnd.textContent = endItem;
          if (totalCount) totalCount.textContent = filteredHistoryUsers.length;
          
          // Update buttons
          const prevBtn = document.getElementById('historyPrevBtn');
          const nextBtn = document.getElementById('historyNextBtn');
          
          if (prevBtn) {
            prevBtn.disabled = currentHistoryPage === 1;
            prevBtn.className = currentHistoryPage === 1 
              ? 'px-3 py-1 text-sm font-medium text-gray-400 bg-gray-100 border border-gray-200 rounded-lg cursor-not-allowed'
              : 'px-3 py-1 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-all duration-200';
          }
          
          if (nextBtn) {
            nextBtn.disabled = currentHistoryPage >= totalPages;
            nextBtn.className = currentHistoryPage >= totalPages 
              ? 'px-3 py-1 text-sm font-medium text-gray-400 bg-gray-100 border border-gray-200 rounded-lg cursor-not-allowed'
              : 'px-3 py-1 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-all duration-200';
          }
          
          // Update page numbers
          const pageNumbers = document.getElementById('historyPageNumbers');
          if (pageNumbers) {
            pageNumbers.innerHTML = '';
            
            // Only show page numbers if there are users
            if (filteredHistoryUsers.length > 0) {
              const maxVisiblePages = 5;
              let startPage = Math.max(1, currentHistoryPage - Math.floor(maxVisiblePages / 2));
              let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
              
              // Adjust start page if we're near the end
              if (endPage - startPage + 1 < maxVisiblePages) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
              }
              
              // Add first page and ellipsis if needed
              if (startPage > 1) {
                const firstPageBtn = createPageButton(1);
                pageNumbers.appendChild(firstPageBtn);
                
                if (startPage > 2) {
                  const ellipsis = document.createElement('span');
                  ellipsis.textContent = '...';
                  ellipsis.className = 'px-2 py-1 text-sm text-gray-500';
                  pageNumbers.appendChild(ellipsis);
                }
              }
              
              // Add visible page numbers
              for (let i = startPage; i <= endPage; i++) {
                const pageBtn = createPageButton(i);
                pageNumbers.appendChild(pageBtn);
              }
              
              // Add ellipsis and last page if needed
              if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                  const ellipsis = document.createElement('span');
                  ellipsis.textContent = '...';
                  ellipsis.className = 'px-2 py-1 text-sm text-gray-500';
                  pageNumbers.appendChild(ellipsis);
                }
                
                const lastPageBtn = createPageButton(totalPages);
                pageNumbers.appendChild(lastPageBtn);
              }
            }
          }
        }
        
        function createPageButton(pageNumber) {
          const pageBtn = document.createElement('button');
          pageBtn.textContent = pageNumber;
          pageBtn.className = pageNumber === currentHistoryPage 
            ? 'px-3 py-1 text-sm font-medium text-white bg-gray-700 border border-gray-700 rounded-lg'
            : 'px-3 py-1 text-sm font-medium text-gray-600 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-all duration-200';
          
          pageBtn.addEventListener('click', () => {
            if (pageNumber !== currentHistoryPage) {
              currentHistoryPage = pageNumber;
              renderHistoryUsers();
            }
          });
          
          return pageBtn;
        }
        
        function changeHistoryPage(direction) {
          const totalPages = Math.ceil(filteredHistoryUsers.length / historyItemsPerPage);
          const newPage = currentHistoryPage + direction;
          
          if (newPage >= 1 && newPage <= totalPages) {
            currentHistoryPage = newPage;
            renderHistoryUsers();
          }
        }
        
        function attachDownloadListeners() {
          const downloadBtns = document.querySelectorAll('.downloadReceiptBtn');
          console.log(`🔗 Attaching download listeners to ${downloadBtns.length} buttons`);
          
          downloadBtns.forEach((btn, index) => {
            // Remove existing listeners to prevent duplicates
            btn.replaceWith(btn.cloneNode(true));
            const newBtn = document.querySelectorAll('.downloadReceiptBtn')[index];
            
            newBtn.addEventListener('click', (e) => {
              e.preventDefault();
              const userId = newBtn.getAttribute('data-user-id');
              console.log(`📥 Download receipt clicked for user ID: ${userId}`);
              if (userId) {
                downloadReceipt(userId);
              }
            });
          });
        }

        
        // Create test data for pagination testing
        function createTestHistoryData() {
          const testUsers = [
            { name: 'John Smith', email: 'john.smith@example.com', userId: 'JS001', group: 'LGU-PMT', department: 'Municipal Planning and Development Office' },
            { name: 'Maria Garcia', email: 'maria.garcia@example.com', userId: 'MG002', group: 'LGU-IU', department: 'Municipal Engineer\'s Office' },
            { name: 'Robert Johnson', email: 'robert.johnson@example.com', userId: 'RJ003', group: 'EIU', department: 'Municipal Social Welfare and Development Office' },
            { name: 'Lisa Chen', email: 'lisa.chen@example.com', userId: 'LC004', group: 'LGU-PMT', department: 'Municipal Disaster and Risk Reduction Management Office' },
            { name: 'David Wilson', email: 'david.wilson@example.com', userId: 'DW005', group: 'LGU-IU', department: 'Municipal Agriculturist\'s Office' },
            { name: 'Sarah Brown', email: 'sarah.brown@example.com', userId: 'SB006', group: 'EIU', department: 'Municipal General Services Office' },
            { name: 'Michael Davis', email: 'michael.davis@example.com', userId: 'MD007', group: 'LGU-PMT', department: 'Municipal Planning and Development Office' },
            { name: 'Jennifer Miller', email: 'jennifer.miller@example.com', userId: 'JM008', group: 'LGU-IU', department: 'Municipal Engineer\'s Office' },
            { name: 'Christopher Lee', email: 'christopher.lee@example.com', userId: 'CL009', group: 'EIU', department: 'Municipal Social Welfare and Development Office' },
            { name: 'Amanda Taylor', email: 'amanda.taylor@example.com', userId: 'AT010', group: 'LGU-PMT', department: 'Municipal Disaster and Risk Reduction Management Office' }
          ];
          
          historyUsers = testUsers.map((user, index) => {
            const element = createTestUserElement(user, index);
            return {
              id: `test-${index + 1}`,
              name: user.name,
              email: user.email,
              userId: user.userId,
              group: user.group,
              department: user.department,
              status: 'permanently-deleted',
              deletedAt: new Date(Date.now() - (index * 24 * 60 * 60 * 1000)).toISOString(),
              element: element
            };
          });
          
          filteredHistoryUsers = [...historyUsers];
          console.log(`🧪 Created ${historyUsers.length} test users for pagination testing`);
        }
        
        function createTestUserElement(user, index) {
          const div = document.createElement('div');
          div.className = 'deleted-history-card border border-gray-200 rounded-xl p-6 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100/50 transition-all duration-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1';
          div.innerHTML = `
            <div class="flex items-start gap-4">
              <div class="w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold hover:scale-110 transition-transform duration-200 overflow-hidden profile-picture-container" style="background: linear-gradient(135deg, #4b5563, #1f2937); border: 2px solid rgba(255, 255, 255, 0.1);">
                <div class="w-full h-full flex items-center justify-center profile-picture-fallback" style="display: flex; background: linear-gradient(135deg, #4b5563, #1f2937);">
                  ${user.name.split(' ').map(n => n[0]).join('').toUpperCase()}
                </div>
              </div>
              <div class="flex-1">
                <div class="flex items-center justify-between mb-2">
                  <h4 class="text-lg font-semibold text-gray-700">${user.name}</h4>
                  <div class="flex items-center gap-3">
                    <span class="text-xs text-gray-500 bg-gray-100 px-3 py-1 rounded-full">Permanently Deleted: ${new Date(Date.now() - (index * 24 * 60 * 60 * 1000)).toLocaleDateString()}</span>
                    <span class="text-xs text-gray-600 font-medium bg-gray-100 px-3 py-1 rounded-full">${new Date(Date.now() - (index * 24 * 60 * 60 * 1000)).toLocaleTimeString()}</span>
                  </div>
                </div>
                <div class="space-y-2 mb-4">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
                    </svg>
                    <span class="text-sm text-gray-600">${user.email}</span>
                  </div>
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                    </svg>
                    <span class="text-sm text-gray-600 font-mono">${user.userId}</span>
                  </div>
                </div>
                <div class="flex items-center gap-4 text-xs text-gray-500 mb-4">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    <span>Group: <span class="text-gray-600 font-medium">${user.group}</span></span>
                  </div>
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                    </svg>
                    <span>Dept: <span class="text-gray-600 font-medium">${user.department}</span></span>
                  </div>
                </div>
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-2 text-xs text-gray-500">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>Deleted by: <span class="font-medium">System Administrator</span></span>
                  </div>
                  <button class="btn-action px-4 py-2 bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white hover:shadow-gray-500/25 downloadReceiptBtn" data-user-id="test-${index + 1}">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Download Receipt
                  </button>
                </div>
              </div>
            </div>
          `;
          return div;
        }
        
        // Create user element from backend data
        function createUserElementFromData(user) {
          const div = document.createElement('div');
          div.className = 'deleted-history-card border border-gray-200 rounded-xl p-6 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100/50 transition-all duration-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1';
          div.setAttribute('data-user-id', user.id);
          div.setAttribute('data-deleted-at', user.permanentDeletedAt || user.deletedAt);
          div.setAttribute('data-user-name', user.fullName || user.name);
          div.setAttribute('data-user-email', user.email);
          div.setAttribute('data-user-userid', user.userId);
          div.setAttribute('data-user-group', user.group || user.role);
          div.setAttribute('data-user-department', user.department);
          div.setAttribute('data-user-status', 'permanently-deleted');
          
          const displayName = user.fullName || user.name || 'Unknown User';
          const initials = displayName.split(' ').map(n => n[0]).join('').toUpperCase() || 'U';
          const deletedDate = new Date(user.permanentDeletedAt || user.deletedAt);
          const deletedBy = user.deletedByUser || 'System Administrator';
          
          div.innerHTML = `
            <div class="flex items-start gap-4">
              <div class="w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold hover:scale-110 transition-transform duration-200 overflow-hidden profile-picture-container" style="background: linear-gradient(135deg, #4b5563, #1f2937); border: 2px solid rgba(255, 255, 255, 0.1);">
                <img 
                  id="history-profile-img-${user.userId || user.id}"
                  src=""
                  alt="${displayName}"
                  class="w-full h-full object-cover rounded-full"
                  style="display: none;"
                  onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                  onload="this.style.display='block'; this.nextElementSibling.style.display='none';"
                  crossorigin="anonymous"
                />
                <div class="w-full h-full flex items-center justify-center profile-picture-fallback" style="display: flex; background: linear-gradient(135deg, #4b5563, #1f2937);">
                  ${initials}
                </div>
              </div>
              <div class="flex-1">
                <div class="flex items-center justify-between mb-2">
                  <h4 class="text-lg font-semibold text-gray-700">${displayName}</h4>
                  <div class="flex items-center gap-3">
                    <span class="text-xs text-gray-500 bg-gray-100 px-3 py-1 rounded-full">Permanently Deleted: ${deletedDate.toLocaleDateString()}</span>
                    <span class="text-xs text-gray-600 font-medium bg-gray-100 px-3 py-1 rounded-full">${deletedDate.toLocaleTimeString()}</span>
                  </div>
                </div>
                <div class="space-y-2 mb-4">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
                    </svg>
                    <span class="text-sm text-gray-600">${user.email}</span>
                  </div>
                  ${user.userId ? `
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                    </svg>
                    <span class="text-sm text-gray-600 font-mono">${user.userId}</span>
                  </div>
                  ` : ''}
                </div>
                <div class="flex items-center gap-4 text-xs text-gray-500 mb-4">
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                    </svg>
                    <span>Group: <span class="text-gray-600 font-medium">${user.group || user.role || 'N/A'}</span></span>
                  </div>
                  ${user.department ? `
                  <div class="flex items-center gap-2">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                    </svg>
                    <span>Dept: <span class="text-gray-600 font-medium">${user.department}</span></span>
                  </div>
                  ` : ''}
                </div>
                <div class="flex items-center justify-between">
                  <div class="flex items-center gap-2 text-xs text-gray-500">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>Deleted by: <span class="font-medium">${deletedBy}</span></span>
                  </div>
                  <button class="btn-action px-4 py-2 bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white hover:shadow-gray-500/25 downloadReceiptBtn" data-user-id="${user.id}">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Download Receipt
                  </button>
                </div>
              </div>
            </div>
          `;
          
          return div;
        }
        
        // Fetch deleted users directly from API
        async function fetchDeletedUsersDirectly() {
          try {
            console.log('🌐 Fetching deleted users history from API...');
            const response = await fetch('/api/users/deleted-history', {
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${document.cookie.split('token=')[1]?.split(';')[0] || ''}`
              }
            });
            
            const data = await response.json();
            console.log('📡 Direct API response:', data);
            
            if (data.success && data.users && data.users.length > 0) {
              console.log(`✅ Found ${data.users.length} deleted users via direct API`);
              
                             // Process the users
               historyUsers = data.users.map(user => {
                 const element = createUserElementFromData(user);
                 return {
                   id: user.id,
                   name: user.fullName || user.name,
                   email: user.email,
                   userId: user.userId,
                   group: user.group || user.role,
                   department: user.department,
                   status: 'permanently-deleted',
                   deletedAt: user.permanentDeletedAt || user.deletedAt,
                   element: element
                 };
               });
              
              filteredHistoryUsers = [...historyUsers];
              renderHistoryUsers();
              
              // Load profile pictures
              if (historyUsers.length > 0) {
                loadHistoryProfilePictures();
              }
            } else {
              console.log('❌ No deleted users found via direct API');
            }
          } catch (error) {
            console.error('❌ Error fetching deleted users directly:', error);
          }
        }
        
        // Load profile pictures for history users (using EIU approach)
        function loadHistoryProfilePictures() {
          console.log('🖼️ Loading profile pictures for user history table...');
          
          // Find all profile images in the history table
          const historyProfileImages = document.querySelectorAll('img[id^="history-profile-img-"]');
          console.log(`📸 Found ${historyProfileImages.length} history profile images to load`);
          
          historyProfileImages.forEach(async (img, index) => {
            const userId = img.id.replace('history-profile-img-', '');
            console.log(`🔄 Loading history profile picture ${index + 1}/${historyProfileImages.length} for user: ${userId}`);
            
            // Check cache first
            if (profilePictureCache.has(userId)) {
              const cachedDataUrl = profilePictureCache.get(userId);
              if (cachedDataUrl) {
                console.log(`✅ Using cached profile picture for history user: ${userId}`);
                img.src = cachedDataUrl;
                img.style.display = 'block';
                const fallback = img.nextElementSibling;
                if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                  fallback.style.display = 'none';
                }
                return;
              }
            }
            
            try {
              // Get the profile picture URL from API first
              const response = await fetch(`/api/profile/picture/${userId}`, {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${document.cookie.split('token=')[1]?.split(';')[0] || ''}`
                }
              });
              
              if (response.ok) {
                const data = await response.json();
                if (data.success && data.profilePictureUrl) {
                  console.log(`✅ Got history profile picture URL for ${userId}:`, data.profilePictureUrl);
                  
                  // If it's already a base64 data URL, use it directly
                  if (data.profilePictureUrl.startsWith('data:')) {
                    console.log(`✅ Using base64 data URL for history user: ${userId}`);
                    profilePictureCache.set(userId, data.profilePictureUrl);
                    img.src = data.profilePictureUrl;
                    img.onload = function() {
                      console.log(`✅ History profile picture displayed successfully for user: ${userId}`);
                      this.style.display = 'block';
                      const fallback = this.nextElementSibling;
                      if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                        fallback.style.display = 'none';
                      }
                    };
                    img.onerror = function() {
                      console.log(`❌ Failed to display history profile picture for user: ${userId}`);
                      this.style.display = 'none';
                      const fallback = this.nextElementSibling;
                      if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                        fallback.style.display = 'flex';
                      }
                      profilePictureCache.set(userId, null);
                    };
                    return;
                  }
                  
                  // For regular URLs, use the EIU approach with blob and createObjectURL
                  let normalizedUrl = data.profilePictureUrl;
                  
                  // Handle relative URLs by making them absolute
                  if (data.profilePictureUrl.startsWith('/') && !data.profilePictureUrl.startsWith('//')) {
                    normalizedUrl = window.location.origin + data.profilePictureUrl;
                    console.log('🔗 Converted relative URL to absolute:', normalizedUrl);
                  }
                  
                  // Handle URLs that might need the backend server origin
                  if (data.profilePictureUrl.startsWith('/uploads/') || data.profilePictureUrl.startsWith('uploads/')) {
                    const backendOrigin = 'http://localhost:3000'; // Backend server URL
                    normalizedUrl = data.profilePictureUrl.startsWith('/') ? 
                      backendOrigin + data.profilePictureUrl : 
                      backendOrigin + '/' + data.profilePictureUrl;
                    console.log('🔗 Using backend server URL:', normalizedUrl);
                  }
                  
                  console.log('✅ Attempting to load history profile picture:', {
                    original: data.profilePictureUrl,
                    normalized: normalizedUrl
                  });
                  
                  // Enhanced loading strategy with authentication headers (EIU approach)
                  const loadHistoryProfilePicture = async () => {
                    // First, try direct image loading (works for public URLs)
                    const testImg = new Image();
                    
                    // Set up success handler
                    testImg.onload = function() {
                      console.log('✅ History profile picture loaded successfully via direct loading for user:', userId);
                      const objectUrl = normalizedUrl;
                      profilePictureCache.set(userId, objectUrl);
                      img.src = objectUrl;
                      img.style.display = 'block';
                      const fallback = img.nextElementSibling;
                      if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                        fallback.style.display = 'none';
                      }
                    };
                    
                    // Set up error handler for direct loading
                    testImg.onerror = async function() {
                      console.log('❌ Direct loading failed, trying authenticated fetch for history user:', userId);
                      
                      try {
                        // Try fetching with authentication headers
                        const token = localStorage.getItem('token') || document.cookie.replace(/(?:(?:^|.*;\s*)token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
                        
                        const fetchResponse = await fetch(normalizedUrl, {
                          headers: {
                            'Authorization': `Bearer ${token}`,
                            'Cache-Control': 'no-cache'
                          }
                        });
                        
                        if (fetchResponse.ok) {
                          const blob = await fetchResponse.blob();
                          const objectUrl = URL.createObjectURL(blob);
                          
                          console.log('✅ History profile picture loaded via authenticated fetch for user:', userId);
                          profilePictureCache.set(userId, objectUrl);
                          img.src = objectUrl;
                          img.style.display = 'block';
                          const fallback = img.nextElementSibling;
                          if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                            fallback.style.display = 'none';
                          }
                          
                          // Clean up object URL after image loads
                          img.onload = () => {
                            URL.revokeObjectURL(objectUrl);
                          };
                        } else {
                          throw new Error(`HTTP ${fetchResponse.status}: ${fetchResponse.statusText}`);
                        }
                      } catch (fetchError) {
                        console.log('❌ Authenticated fetch also failed for history user:', userId, fetchError.message);
                        console.log('📷 Showing placeholder due to loading failures');
                        profilePictureCache.set(userId, null);
                        img.style.display = 'none';
                        const fallback = img.nextElementSibling;
                        if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                          fallback.style.display = 'flex';
                        }
                      }
                    };
                    
                    // Start the loading process
                    testImg.src = normalizedUrl;
                  };
                  
                  // Execute the loading function
                  loadHistoryProfilePicture();
                  
                } else {
                  console.log(`⚠️ No history profile picture found for user: ${userId}`);
                  // Cache the failure
                  profilePictureCache.set(userId, null);
                  // Show fallback
                  img.style.display = 'none';
                  const fallback = img.nextElementSibling;
                  if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                    fallback.style.display = 'flex';
                  }
                }
              } else {
                console.log(`❌ Failed to fetch history profile picture for user: ${userId}`, response.status);
                // Cache the failure
                profilePictureCache.set(userId, null);
                // Show fallback
                img.style.display = 'none';
                const fallback = img.nextElementSibling;
                if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                  fallback.style.display = 'flex';
                }
              }
            } catch (error) {
              console.error(`❌ Error loading history profile picture for user ${userId}:`, error);
              // Cache the failure
              profilePictureCache.set(userId, null);
              // Show fallback
              img.style.display = 'none';
              const fallback = img.nextElementSibling;
              if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                fallback.style.display = 'flex';
              }
            }
          });
        }
        
        // Attempt emergency render
        window.attemptEmergencyRender = async function attemptEmergencyRender() {
          console.log('🚨 EMERGENCY RENDER: Starting attempt...');
          console.log('🚨 window.deletedUsersHistory:', window.deletedUsersHistory);
          console.log('🚨 window.deletedUsersHistory type:', typeof window.deletedUsersHistory);
          console.log('🚨 window.deletedUsersHistory is array:', Array.isArray(window.deletedUsersHistory));
          
          if (!window.deletedUsersHistory) {
            console.log('🚨 EMERGENCY RENDER: No deletedUsersHistory');
            return;
          }
          
          if (!Array.isArray(window.deletedUsersHistory)) {
            console.log('🚨 EMERGENCY RENDER: deletedUsersHistory is not an array');
            return;
          }
          
          if (window.deletedUsersHistory.length === 0) {
            console.log('🚨 EMERGENCY RENDER: deletedUsersHistory is empty');
            return;
          }
          
          console.log('🚨 EMERGENCY RENDER: Found data, processing...', window.deletedUsersHistory.length, 'users');
          
          try {
            // Force set the global variables
            window.historyUsers = window.deletedUsersHistory.map((user, index) => {
              console.log(`🚨 Processing user ${index + 1}:`, user.name || user.fullName);
              return {
                id: user.id,
                name: user.fullName || user.name,
                email: user.email,
                userId: user.userId,
                group: user.group || user.role,
                department: user.department,
                status: 'permanently-deleted',
                deletedAt: user.permanentDeletedAt || user.deletedAt,
                element: null // Will be created when needed
              };
            });
            
            window.filteredHistoryUsers = [...window.historyUsers];
            console.log('🚨 EMERGENCY RENDER: Set historyUsers and filteredHistoryUsers:', window.historyUsers.length);
            
            // Force render
            console.log('🚨 EMERGENCY RENDER: Calling forceRenderHistoryUsers...');
            forceRenderHistoryUsers();
            console.log('🚨 EMERGENCY RENDER: forceRenderHistoryUsers completed');
            
            // Load profile pictures after rendering
            console.log('🚨 EMERGENCY RENDER: Loading profile pictures...');
            if (window.loadHistoryProfilePictures) {
              await window.loadHistoryProfilePictures();
            } else {
              console.log('🚨 EMERGENCY RENDER: loadHistoryProfilePictures not found, calling manually');
              await loadHistoryProfilePicturesManually();
            }
          } catch (error) {
            console.error('🚨 EMERGENCY RENDER: Error during processing:', error);
          }
        }
        
        // Force render history users (emergency fallback)
        window.forceRenderHistoryUsers = function forceRenderHistoryUsers() {
          console.log('🆘 FORCE RENDER: Starting emergency render...');
          
          const scrollContainer = document.getElementById('historyScrollContainer');
          const emptyState = document.getElementById('historyEmptyState');
          
          if (!scrollContainer) {
            console.error('🆘 FORCE RENDER: No scroll container found!');
            return;
          }
          
          if (!window.filteredHistoryUsers || window.filteredHistoryUsers.length === 0) {
            console.log('🆘 FORCE RENDER: No users to render');
            if (emptyState) emptyState.classList.remove('hidden');
            return;
          }
          
          console.log(`🆘 FORCE RENDER: Rendering ${window.filteredHistoryUsers.length} users`);
          
          // Clear container
          scrollContainer.innerHTML = '';
          
          // Hide empty state
          if (emptyState) emptyState.classList.add('hidden');
          
          // Create and append user elements
          window.filteredHistoryUsers.forEach((user, index) => {
            console.log(`🆘 FORCE RENDER: Creating element for user ${index + 1}:`, user.name);
            
            const userElement = document.createElement('div');
            userElement.className = 'deleted-history-card border border-gray-200 rounded-xl p-6 hover:bg-gradient-to-r hover:from-gray-50 hover:to-gray-100/50 transition-all duration-200 hover:shadow-lg hover:border-gray-300 hover:-translate-y-1';
            
            const displayName = user.name || 'Unknown User';
            const initials = displayName.split(' ').map(n => n[0]).join('').toUpperCase() || 'U';
            const deletedDate = new Date(user.deletedAt);
            
            userElement.innerHTML = `
              <div class="flex items-start gap-4">
                <div class="w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold hover:scale-110 transition-transform duration-200 overflow-hidden profile-picture-container" data-user-id="${user.id}" style="background: linear-gradient(135deg, #4b5563, #1f2937); border: 2px solid rgba(255, 255, 255, 0.1);">
                  <img class="w-full h-full object-cover rounded-full profile-picture-img" style="display: none;">
                  <div class="w-full h-full flex items-center justify-center profile-picture-fallback" style="display: flex; background: linear-gradient(135deg, #4b5563, #1f2937);">
                    ${initials}
                  </div>
                </div>
                <div class="flex-1">
                  <div class="flex items-center justify-between mb-2">
                    <h4 class="text-lg font-semibold text-gray-700">${displayName}</h4>
                    <div class="flex items-center gap-3">
                      <span class="text-xs text-gray-500 bg-gray-100 px-3 py-1 rounded-full">Permanently Deleted: ${deletedDate.toLocaleDateString()}</span>
                      <span class="text-xs text-gray-600 font-medium bg-gray-100 px-3 py-1 rounded-full">${deletedDate.toLocaleTimeString()}</span>
                    </div>
                  </div>
                  <div class="space-y-2 mb-4">
                    <div class="flex items-center gap-2">
                      <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207"></path>
                      </svg>
                      <span class="text-sm text-gray-600">${user.email}</span>
                    </div>
                    <div class="flex items-center gap-2">
                      <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V5a2 2 0 114 0v1m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                      </svg>
                      <span class="text-sm text-gray-600 font-mono">${user.userId}</span>
                    </div>
                  </div>
                  <div class="flex items-center gap-4 text-xs text-gray-500 mb-4">
                    <div class="flex items-center gap-2">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                      </svg>
                      <span>Group: <span class="text-gray-600 font-medium">${user.group || 'N/A'}</span></span>
                    </div>
                    ${user.department ? `
                    <div class="flex items-center gap-2">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                      </svg>
                      <span>Dept: <span class="text-gray-600 font-medium">${user.department}</span></span>
                    </div>
                    ` : ''}
                  </div>
                  <div class="flex items-center justify-between">
                    <div class="flex items-center gap-2 text-xs text-gray-500">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                      </svg>
                      <span>Deleted by: <span class="font-medium">System Administrator</span></span>
                    </div>
                    <button class="btn-action px-4 py-2 bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white hover:shadow-gray-500/25 downloadReceiptBtn" data-user-id="${user.id}">
                      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                      </svg>
                      Download Receipt
                    </button>
                  </div>
                </div>
              </div>
            `;
            
            scrollContainer.appendChild(userElement);
          });
          
          console.log('🆘 FORCE RENDER: Completed rendering all users');
        }
        
        // Load history profile pictures using the established system
        async function loadHistoryProfilePicturesManually() {
          console.log('🖼️ HISTORY PROFILE: Starting history profile picture loading...');
          
          if (!window.deletedUsersHistory || !Array.isArray(window.deletedUsersHistory)) {
            console.log('🖼️ HISTORY PROFILE: No deletedUsersHistory data');
            return;
          }
          
          // Find all profile picture containers in the history section
          const historyContainers = document.querySelectorAll('#historyScrollContainer .profile-picture-container');
          console.log(`🖼️ HISTORY PROFILE: Found ${historyContainers.length} profile picture containers`);
          
          for (let i = 0; i < historyContainers.length && i < window.deletedUsersHistory.length; i++) {
            const container = historyContainers[i];
            const user = window.deletedUsersHistory[i];
            const img = container.querySelector('.profile-picture-img');
            
            if (img && user) {
              console.log(`🖼️ HISTORY PROFILE: Processing ${user.fullName || user.name} (${user.userId})`);
              
              // Set a proper id for the image to work with the existing system
              img.id = `history-profile-img-${user.userId || user.id}`;
              
              try {
                // Use the existing loadHistoryUserProfilePicture function
                const success = await loadHistoryUserProfilePicture(img, user.userId || user.email);
                
                if (success) {
                  console.log(`✅ HISTORY PROFILE: Successfully loaded profile picture for ${user.fullName || user.name}`);
                } else {
                  console.log(`❌ HISTORY PROFILE: Failed to load profile picture for ${user.fullName || user.name}`);
                }
              } catch (error) {
                console.error(`❌ HISTORY PROFILE: Error loading profile picture for ${user.fullName || user.name}:`, error);
              }
            }
          }
          
          console.log('🖼️ HISTORY PROFILE: Completed loading all history profile pictures');
        }
        
        // Debounce function for search input
        function debounce(func, wait) {
          let timeout;
          return function executedFunction(...args) {
            const later = () => {
              clearTimeout(timeout);
              func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
          };
        }

        // Download Receipt Functionality
        function generateReceipt(user) {
          const receipt = `
            <!DOCTYPE html>
            <html>
            <head>
              <title>User Deletion Receipt - ${user.fullName || user.name}</title>
              <style>
                body { font-family: Arial, sans-serif; margin: 20px; }
                .header { text-align: center; border-bottom: 2px solid #333; padding-bottom: 20px; margin-bottom: 30px; }
                .receipt-title { font-size: 24px; font-weight: bold; color: #333; }
                .receipt-subtitle { font-size: 16px; color: #666; margin-top: 5px; }
                .user-info { margin-bottom: 30px; }
                .info-section { margin-bottom: 20px; }
                .info-label { font-weight: bold; color: #333; }
                .info-value { color: #666; margin-left: 10px; }
                .deletion-info { background-color: #f5f5f5; padding: 15px; border-radius: 5px; margin-bottom: 20px; }
                .footer { text-align: center; margin-top: 40px; font-size: 12px; color: #999; }
                .timestamp { font-size: 14px; color: #666; }
              </style>
            </head>
            <body>
              <div class="header">
                <div class="receipt-title">User Deletion Receipt</div>
                <div class="receipt-subtitle">Build Watch - System Administration</div>
              </div>
              
              <div class="user-info">
                <div class="info-section">
                  <span class="info-label">User Name:</span>
                  <span class="info-value">${user.fullName || user.name}</span>
                </div>
                <div class="info-section">
                  <span class="info-label">Email:</span>
                  <span class="info-value">${user.email}</span>
                </div>
                ${user.contactNumber ? `
                <div class="info-section">
                  <span class="info-label">Contact Number:</span>
                  <span class="info-value">${user.contactNumber}</span>
                </div>
                ` : ''}
                ${user.birthdate ? `
                <div class="info-section">
                  <span class="info-label">Birthdate:</span>
                  <span class="info-value">${new Date(user.birthdate).toLocaleDateString()}</span>
                </div>
                ` : ''}
                ${user.userId ? `
                <div class="info-section">
                  <span class="info-label">User ID:</span>
                  <span class="info-value">${user.userId}</span>
                </div>
                ` : ''}
                <div class="info-section">
                  <span class="info-label">Group:</span>
                  <span class="info-value">${user.group || user.role}</span>
                </div>
                <div class="info-section">
                  <span class="info-label">Role:</span>
                  <span class="info-value">${user.role}</span>
                </div>
                ${user.subRole ? `
                <div class="info-section">
                  <span class="info-label">Subrole:</span>
                  <span class="info-value">${user.subRole}</span>
                </div>
                ` : ''}
                ${user.department ? `
                <div class="info-section">
                  <span class="info-label">Department:</span>
                  <span class="info-value">${user.department}</span>
                </div>
                ` : ''}
              </div>
              
              <div class="deletion-info">
                <div class="info-section">
                  <span class="info-label">Deletion Status:</span>
                  <span class="info-value" style="color: #dc2626; font-weight: bold;">PERMANENTLY DELETED</span>
                </div>
                <div class="info-section">
                  <span class="info-label">Deleted On:</span>
                  <span class="info-value">${new Date(user.deletedAt).toLocaleDateString()} at ${new Date(user.deletedAt).toLocaleTimeString()}</span>
                </div>
                <div class="info-section">
                  <span class="info-label">Deleted By:</span>
                  <span class="info-value">${user.deletedBy || 'System Administrator'}</span>
                </div>
              </div>
              
              <div class="footer">
                <div class="timestamp">Receipt Generated: ${new Date().toLocaleString()}</div>
                <div>This receipt serves as proof of permanent user deletion for audit purposes.</div>
              </div>
            </body>
            </html>
          `;
          return receipt;
        }

        // Helper function to load jsPDF library
        async function loadJsPDFLibrary() {
          if (window.jsPDF) {
            console.log('jsPDF already loaded');
            return true;
          }
          
          console.log('Loading jsPDF library...');
          
          // Try multiple CDNs in sequence
          const cdnUrls = [
            'https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js',
            'https://unpkg.com/jspdf@2.5.1/dist/jspdf.umd.min.js',
            'https://cdn.jsdelivr.net/npm/jspdf@2.5.1/dist/jspdf.umd.min.js'
          ];
          
          for (const url of cdnUrls) {
            try {
              console.log(`Trying to load jsPDF from: ${url}`);
              const script = document.createElement('script');
              script.src = url;
              document.head.appendChild(script);
              
              await new Promise((resolve, reject) => {
                script.onload = () => {
                  console.log('jsPDF script loaded successfully');
                  resolve();
                };
                script.onerror = (error) => {
                  console.error(`Failed to load from ${url}:`, error);
                  document.head.removeChild(script);
                  reject(error);
                };
                setTimeout(() => reject(new Error('Timeout')), 5000);
              });
              
              // Wait for library to initialize
              await new Promise(resolve => setTimeout(resolve, 500));
              
              if (window.jsPDF) {
                console.log('jsPDF is now available');
                return true;
              }
            } catch (error) {
              console.error(`CDN ${url} failed:`, error);
              continue;
            }
          }
          
          console.error('Failed to load jsPDF from all CDNs');
          return false;
        }

        // Show format selection dialog
        function showFormatSelectionDialog() {
          return new Promise((resolve) => {
            const modal = document.createElement('div');
            modal.innerHTML = `
              <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); backdrop-filter: blur(4px); z-index: 10000; display: flex; align-items: center; justify-content: center; animation: fadeIn 0.2s ease-out;">
                <div style="background: white; border-radius: 16px; box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25); max-width: 480px; width: 90%; max-height: 90vh; overflow: hidden; animation: slideIn 0.3s ease-out;">
                  <!-- Header -->
                  <div style="background: linear-gradient(135deg, #1f2937 0%, #374151 100%); padding: 24px 32px; position: relative;">
                    <button id="closeModal" style="position: absolute; top: 16px; right: 20px; background: rgba(255, 255, 255, 0.1); border: none; color: rgba(255, 255, 255, 0.7); cursor: pointer; font-size: 20px; line-height: 1; padding: 8px; border-radius: 8px; transition: all 0.3s ease; width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;">
                      ×
                    </button>
                    <div style="display: flex; align-items: center; gap: 12px; margin-bottom: 8px;">
                      <div style="background: rgba(59, 130, 246, 0.2); padding: 8px; border-radius: 8px; display: flex; align-items: center; justify-content: center;">
                        <svg style="width: 20px; height: 20px; color: #60a5fa;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                      </div>
                      <h3 style="margin: 0; font-size: 20px; font-weight: 600; color: white;">Select Download Format</h3>
                    </div>
                    <p style="margin: 0; color: rgba(255, 255, 255, 0.8); font-size: 14px;">Choose the format for your audit report</p>
                  </div>
                  
                  <!-- Content -->
                  <div style="padding: 32px;">
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 16px; margin-bottom: 24px;">
                                             <button id="selectHTML" style="display: flex; flex-direction: column; align-items: center; gap: 12px; padding: 24px 16px; background: linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%); color: white; border: none; border-radius: 12px; cursor: pointer; font-weight: 500; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);">
                         <svg style="width: 32px; height: 32px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        <div>
                          <div style="font-size: 16px; font-weight: 600; margin-bottom: 4px;">HTML Report</div>
                          <div style="font-size: 12px; opacity: 0.9;">Web-based format</div>
                        </div>
                      </button>
                      
                                             <button id="selectPDF" style="display: flex; flex-direction: column; align-items: center; gap: 12px; padding: 24px 16px; background: linear-gradient(135deg, #dc2626 0%, #991b1b 100%); color: white; border: none; border-radius: 12px; cursor: pointer; font-weight: 500; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); box-shadow: 0 4px 12px rgba(220, 38, 38, 0.3);">
                        <svg style="width: 32px; height: 32px;" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21h10a2 2 0 002-2V9.414a1 1 0 00-.293-.707l-5.414-5.414A1 1 0 0012.586 3H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                        </svg>
                        <div>
                          <div style="font-size: 16px; font-weight: 600; margin-bottom: 4px;">PDF Report</div>
                          <div style="font-size: 12px; opacity: 0.9;">Portable format</div>
                        </div>
                      </button>
                    </div>
                    
                                         <button id="cancelFormat" style="width: 100%; padding: 12px 24px; background: #f3f4f6; color: #374151; border: 1px solid #d1d5db; border-radius: 8px; cursor: pointer; font-weight: 500; transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1); font-size: 14px;">
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
              
              <style>
                @keyframes fadeIn {
                  from { opacity: 0; }
                  to { opacity: 1; }
                }
                
                @keyframes slideIn {
                  from { transform: scale(0.95) translateY(-10px); opacity: 0; }
                  to { transform: scale(1) translateY(0); opacity: 1; }
                }
                
                @keyframes fadeOut {
                  from { opacity: 1; }
                  to { opacity: 0; }
                }
                
                #selectHTML:hover {
                  transform: translateY(-4px) scale(1.02);
                  box-shadow: 0 20px 40px rgba(59, 130, 246, 0.4), 0 0 20px rgba(59, 130, 246, 0.2);
                  background: linear-gradient(135deg, #4f46e5 0%, #2563eb 100%);
                }
                
                #selectPDF:hover {
                  transform: translateY(-4px) scale(1.02);
                  box-shadow: 0 20px 40px rgba(220, 38, 38, 0.4), 0 0 20px rgba(220, 38, 38, 0.2);
                  background: linear-gradient(135deg, #e11d48 0%, #be123c 100%);
                }
                
                #cancelFormat:hover {
                  background: #e5e7eb;
                  border-color: #9ca3af;
                  transform: translateY(-1px);
                  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
                }
                
                #closeModal:hover {
                  background: rgba(255, 255, 255, 0.2);
                  color: white;
                  transform: scale(1.1);
                  box-shadow: 0 4px 12px rgba(255, 255, 255, 0.1);
                }
                
                #selectHTML:active {
                  transform: translateY(-2px) scale(1.01);
                  transition: all 0.1s cubic-bezier(0.4, 0, 0.2, 1);
                }
                
                #selectPDF:active {
                  transform: translateY(-2px) scale(1.01);
                  transition: all 0.1s cubic-bezier(0.4, 0, 0.2, 1);
                }
                
                #cancelFormat:active {
                  transform: translateY(0px);
                  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
                  transition: all 0.1s cubic-bezier(0.4, 0, 0.2, 1);
                }
                
                #closeModal:active {
                  transform: scale(1.05);
                  transition: all 0.1s cubic-bezier(0.4, 0, 0.2, 1);
                }
              </style>
            `;
            
            document.body.appendChild(modal);
            
            let isClosing = false;
            
            const closeModal = () => {
              if (isClosing) return;
              isClosing = true;
              
              modal.style.animation = 'fadeOut 0.2s ease-out';
              setTimeout(() => {
                if (document.body.contains(modal)) {
                  document.body.removeChild(modal);
                }
              }, 200);
            };

            // Use addEventListener instead of onclick to avoid conflicts
            modal.querySelector('#selectHTML').addEventListener('click', (e) => {
              e.preventDefault();
              e.stopPropagation();
              e.stopImmediatePropagation();
              closeModal();
              resolve('html');
            }, { once: true });
            
            modal.querySelector('#selectPDF').addEventListener('click', (e) => {
              e.preventDefault();
              e.stopPropagation();
              e.stopImmediatePropagation();
              closeModal();
              resolve('pdf');
            }, { once: true });
            
            modal.querySelector('#cancelFormat').addEventListener('click', (e) => {
              e.preventDefault();
              e.stopPropagation();
              e.stopImmediatePropagation();
              closeModal();
              resolve(null);
            }, { once: true });

            modal.querySelector('#closeModal').addEventListener('click', (e) => {
              e.preventDefault();
              e.stopPropagation();
              e.stopImmediatePropagation();
              closeModal();
              resolve(null);
            }, { once: true });
            
            // Also close modal when clicking outside
            modal.addEventListener('click', (e) => {
              if (e.target === modal) {
                e.preventDefault();
                e.stopPropagation();
                closeModal();
                resolve(null);
              }
            }, { once: true });

            // Add fadeOut animation to styles
            const style = modal.querySelector('style');
            style.textContent += `
              @keyframes fadeOut {
                from { opacity: 1; }
                to { opacity: 0; }
              }
            `;
          });
        }

        // Download comprehensive audit report (HTML)
        function downloadComprehensiveAuditReport(users) {
          const currentDate = new Date();
          const reportDate = currentDate.toLocaleDateString();
          const reportTime = currentDate.toLocaleTimeString();
          
          const htmlContent = `
            <!DOCTYPE html>
            <html lang="en">
            <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Comprehensive User Deletion Audit Report</title>
              <style>
                body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin: 0; padding: 40px; background-color: #f8f9fa; color: #333; }
                .container { max-width: 1200px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); }
                .header { text-align: center; margin-bottom: 40px; border-bottom: 3px solid #dc2626; padding-bottom: 20px; }
                .report-title { font-size: 28px; font-weight: 700; color: #dc2626; margin-bottom: 10px; }
                .report-subtitle { font-size: 18px; color: #666; margin-bottom: 5px; }
                .report-meta { font-size: 14px; color: #888; }
                .summary { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 30px; }
                .summary-title { font-size: 20px; font-weight: 600; color: #333; margin-bottom: 15px; }
                .summary-stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; }
                .stat-item { background: white; padding: 15px; border-radius: 6px; border-left: 4px solid #dc2626; }
                .stat-label { font-size: 14px; color: #666; margin-bottom: 5px; }
                .stat-value { font-size: 24px; font-weight: 700; color: #dc2626; }
                .users-table { width: 100%; border-collapse: collapse; margin-top: 20px; }
                .users-table th, .users-table td { padding: 12px; text-align: left; border-bottom: 1px solid #e5e7eb; }
                .users-table th { background-color: #f3f4f6; font-weight: 600; color: #374151; }
                .users-table tbody tr:hover { background-color: #f9fafb; }
                .deletion-status { color: #dc2626; font-weight: 600; }
                .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
                @media print { body { background: white; } .container { box-shadow: none; } }
              </style>
            </head>
            <body>
              <div class="container">
                <div class="header">
                  <div class="report-title">Comprehensive User Deletion Audit Report</div>
                  <div class="report-subtitle">Build Watch - System Administration</div>
                  <div class="report-meta">Generated on ${reportDate} at ${reportTime}</div>
                </div>
                
                <div class="summary">
                  <div class="summary-title">Audit Summary</div>
                  <div class="summary-stats">
                    <div class="stat-item">
                      <div class="stat-label">Total Permanently Deleted Users</div>
                      <div class="stat-value">${users.length}</div>
                    </div>
                    <div class="stat-item">
                      <div class="stat-label">Report Generation Date</div>
                      <div class="stat-value" style="font-size: 16px;">${reportDate}</div>
                    </div>
                    <div class="stat-item">
                      <div class="stat-label">Report Generation Time</div>
                      <div class="stat-value" style="font-size: 16px;">${reportTime}</div>
                    </div>
                  </div>
                </div>
                
                <table class="users-table">
                  <thead>
                    <tr>
                      <th>User Name</th>
                      <th>Email</th>
                      <th>User ID</th>
                      <th>Role</th>
                      <th>Department</th>
                      <th>Deletion Date</th>
                      <th>Deleted By</th>
                      <th>Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    ${users.map(user => `
                      <tr>
                        <td>${user.fullName || user.name || 'N/A'}</td>
                        <td>${user.email || 'N/A'}</td>
                        <td>${user.userId || 'N/A'}</td>
                        <td>${user.role || 'N/A'}${user.subRole ? ' - ' + user.subRole : ''}</td>
                        <td>${user.department || 'N/A'}</td>
                        <td>${new Date(user.deletedAt || user.permanentDeletedAt).toLocaleDateString()} ${new Date(user.deletedAt || user.permanentDeletedAt).toLocaleTimeString()}</td>
                        <td>${user.deletedByUser || 'System Administrator'}</td>
                        <td><span class="deletion-status">PERMANENTLY DELETED</span></td>
                      </tr>
                    `).join('')}
                  </tbody>
                </table>
                
                <div class="footer">
                  <p>This report serves as an official audit trail of permanently deleted user accounts for compliance and record-keeping purposes.</p>
                  <p>Generated by Build Watch System Administration Module</p>
                </div>
              </div>
            </body>
            </html>
          `;
          
          const blob = new Blob([htmlContent], { type: 'text/html' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `comprehensive-user-deletion-audit-${currentDate.toISOString().split('T')[0]}.html`;
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          URL.revokeObjectURL(url);
        }

        // Download comprehensive audit report (PDF)
        async function downloadComprehensiveAuditReportPDF(users) {
          // Load jsPDF library
          const loaded = await loadJsPDFLibrary();
          if (!loaded) {
            alert('Failed to load PDF library from all sources. Please check your internet connection and try again, or use HTML format.');
            return;
          }
          
          // Access jsPDF from window with better detection
          let jsPDF;
          if (window.jsPDF) {
            // Try different ways jsPDF might be exposed
            jsPDF = window.jsPDF.jsPDF || window.jsPDF;
          }
          
          if (!jsPDF || typeof jsPDF !== 'function') {
            console.error('jsPDF is not available or not a function:', typeof jsPDF);
            alert('PDF library failed to initialize properly. Please try again or use HTML format.');
            return;
          }
          
          console.log('Creating jsPDF document for comprehensive report...');
          const doc = new jsPDF();
          
          const currentDate = new Date();
          const reportDate = currentDate.toLocaleDateString();
          const reportTime = currentDate.toLocaleTimeString();
          
          // Header
          doc.setFontSize(20);
          doc.setFont(undefined, 'bold');
          doc.text('Comprehensive User Deletion Audit Report', 20, 20);
          
          doc.setFontSize(14);
          doc.setFont(undefined, 'normal');
          doc.text('Build Watch - System Administration', 20, 30);
          
          doc.setFontSize(12);
          doc.text(`Generated on ${reportDate} at ${reportTime}`, 20, 40);
          
          // Summary
          doc.setFontSize(16);
          doc.setFont(undefined, 'bold');
          doc.text('Audit Summary', 20, 60);
          
          doc.setFontSize(12);
          doc.setFont(undefined, 'normal');
          doc.text(`Total Permanently Deleted Users: ${users.length}`, 20, 75);
          doc.text(`Report Generation Date: ${reportDate}`, 20, 85);
          doc.text(`Report Generation Time: ${reportTime}`, 20, 95);
          
          // Table header
          let yPosition = 115;
          doc.setFontSize(14);
          doc.setFont(undefined, 'bold');
          doc.text('Deleted Users Details', 20, yPosition);
          
          yPosition += 15;
          doc.setFontSize(10);
          doc.text('Name', 20, yPosition);
          doc.text('Email', 70, yPosition);
          doc.text('Role', 130, yPosition);
          doc.text('Deleted Date', 160, yPosition);
          
          // Table content
          doc.setFont(undefined, 'normal');
          users.forEach((user, index) => {
            yPosition += 10;
            
            if (yPosition > 270) {
              doc.addPage();
              yPosition = 20;
            }
            
            const name = (user.fullName || user.name || 'N/A').substring(0, 20);
            const email = (user.email || 'N/A').substring(0, 25);
            const role = (user.role || 'N/A').substring(0, 15);
            const deletedDate = new Date(user.deletedAt || user.permanentDeletedAt).toLocaleDateString();
            
            doc.text(name, 20, yPosition);
            doc.text(email, 70, yPosition);
            doc.text(role, 130, yPosition);
            doc.text(deletedDate, 160, yPosition);
          });
          
          // Footer
          const pageCount = doc.internal.getNumberOfPages();
          for (let i = 1; i <= pageCount; i++) {
            doc.setPage(i);
            doc.setFontSize(8);
            doc.text(`Page ${i} of ${pageCount}`, 180, 290);
            doc.text('Generated by Build Watch System Administration', 20, 290);
          }
          
          doc.save(`comprehensive-user-deletion-audit-${currentDate.toISOString().split('T')[0]}.pdf`);
        }

        // Download individual receipt function with format selection
        async function downloadReceipt(user) {
          const format = await showFormatSelectionDialog();
          if (!format) return;
          
          if (format === 'html') {
            const receipt = generateReceipt(user);
            const blob = new Blob([receipt], { type: 'text/html' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `user-deletion-receipt-${user.userId || user.id}-${new Date().toISOString().split('T')[0]}.html`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
          } else if (format === 'pdf') {
            await downloadIndividualReceiptPDF(user);
          }
        }

        // Download individual receipt as PDF
        async function downloadIndividualReceiptPDF(user) {
          // Load jsPDF library
          const loaded = await loadJsPDFLibrary();
          if (!loaded) {
            alert('Failed to load PDF library from all sources. Please check your internet connection and try again, or use HTML format.');
            return;
          }
          
          // Access jsPDF from window with better detection
          let jsPDF;
          if (window.jsPDF) {
            // Try different ways jsPDF might be exposed
            jsPDF = window.jsPDF.jsPDF || window.jsPDF;
          }
          
          if (!jsPDF || typeof jsPDF !== 'function') {
            console.error('jsPDF is not available or not a function:', typeof jsPDF);
            alert('PDF library failed to initialize properly. Please try again or use HTML format.');
            return;
          }
          
          console.log('Creating jsPDF document for individual receipt...');
          const doc = new jsPDF();
          
          const currentDate = new Date();
          
          // Header
          doc.setFontSize(20);
          doc.setFont(undefined, 'bold');
          doc.text('User Deletion Receipt', 20, 20);
          
          doc.setFontSize(14);
          doc.setFont(undefined, 'normal');
          doc.text('Build Watch - System Administration', 20, 30);
          
          // User Information
          doc.setFontSize(16);
          doc.setFont(undefined, 'bold');
          doc.text('User Information', 20, 50);
          
          doc.setFontSize(12);
          doc.setFont(undefined, 'normal');
          let yPos = 65;
          
          const userInfo = [
            ['User Name:', user.fullName || user.name || 'N/A'],
            ['Email:', user.email || 'N/A'],
            ['Contact Number:', user.contactNumber || 'N/A'],
            ['Birthdate:', user.birthdate ? new Date(user.birthdate).toLocaleDateString() : 'N/A'],
            ['User ID:', user.userId || 'N/A'],
            ['Group:', user.group || user.role || 'N/A'],
            ['Role:', user.role || 'N/A'],
            ['Subrole:', user.subRole || 'N/A'],
            ['Department:', user.department || 'N/A']
          ];
          
          userInfo.forEach(([label, value]) => {
            doc.setFont(undefined, 'bold');
            doc.text(label, 20, yPos);
            doc.setFont(undefined, 'normal');
            doc.text(value, 80, yPos);
            yPos += 10;
          });
          
          // Deletion Information
          yPos += 10;
          doc.setFontSize(16);
          doc.setFont(undefined, 'bold');
          doc.text('Deletion Information', 20, yPos);
          
          yPos += 15;
          doc.setFontSize(12);
          doc.setFont(undefined, 'bold');
          doc.text('Deletion Status:', 20, yPos);
          doc.setTextColor(220, 38, 38);
          doc.text('PERMANENTLY DELETED', 80, yPos);
          
          yPos += 10;
          doc.setTextColor(0, 0, 0);
          doc.setFont(undefined, 'bold');
          doc.text('Deleted On:', 20, yPos);
          doc.setFont(undefined, 'normal');
          const deletedDate = new Date(user.deletedAt).toLocaleDateString();
          const deletedTime = new Date(user.deletedAt).toLocaleTimeString();
          doc.text(`${deletedDate} at ${deletedTime}`, 80, yPos);
          
          yPos += 10;
          doc.setFont(undefined, 'bold');
          doc.text('Deleted By:', 20, yPos);
          doc.setFont(undefined, 'normal');
          doc.text(user.deletedByUser || 'System Administrator', 80, yPos);
          
          // Footer
          doc.setFontSize(10);
          doc.text('Receipt Generated: ' + currentDate.toLocaleDateString() + ', ' + currentDate.toLocaleTimeString(), 20, 280);
          doc.text('This record serves as proof of permanent user deletion for audit purposes.', 20, 290);
          
          doc.save(`user-deletion-receipt-${user.userId || user.id}-${currentDate.toISOString().split('T')[0]}.pdf`);
        }

        // Individual Download Receipt Buttons
        document.querySelectorAll('.downloadReceiptBtn').forEach(btn => {
          btn.addEventListener('click', function() {
            const userId = this.getAttribute('data-user-id');
            // Find user data from the deleted users history
            const userCard = this.closest('.deleted-history-card');
            const user = {
              id: userId,
              fullName: userCard.querySelector('h4').textContent,
              email: userCard.querySelector('.space-y-2 .flex:first-child span:last-child').textContent,
              contactNumber: userCard.querySelector('.space-y-2 .flex:nth-child(2) span:last-child')?.textContent || null,
              birthdate: userCard.querySelector('.space-y-2 .flex:nth-child(3) span:last-child')?.textContent || null,
              userId: userCard.querySelector('.space-y-2 .flex:nth-child(4) span:last-child')?.textContent || null,
              group: userCard.querySelector('.flex:nth-child(1) span:last-child').textContent,
              role: userCard.querySelector('.flex:nth-child(2) span:last-child').textContent,
              subRole: userCard.querySelector('.flex:nth-child(3) span:last-child')?.textContent || null,
              department: userCard.querySelector('.flex:nth-child(4) span:last-child')?.textContent || null,
              deletedAt: userCard.getAttribute('data-deleted-at'),
              deletedBy: userCard.querySelector('.text-xs .font-medium').textContent
            };
            downloadReceipt(user);
          });
        });

        // Download All Receipts Button
        document.getElementById('downloadAllReceipts')?.addEventListener('click', async function() {
          const deletedHistoryCards = document.querySelectorAll('.deleted-history-card');
          if (deletedHistoryCards.length === 0) {
            alert('No deleted users to generate receipts for.');
            return;
          }
          
          // Show format selection dialog
          const format = await showFormatSelectionDialog();
          if (!format) return;
          
                      try {
              // Fetch complete deleted users history data from API
              const token = localStorage.getItem('token') || '';
              const response = await fetch('http://localhost:3000/api/users/deleted-history', {
                method: 'GET',
                credentials: 'include',
                headers: { 
                  'Accept': 'application/json',
                  'Authorization': `Bearer ${token}`
                }
              });
            
            if (!response.ok) {
              const errorText = await response.text();
              console.error('API Error:', response.status, errorText);
              throw new Error(`Failed to fetch deleted users data: ${response.status} ${response.statusText}`);
            }
            
            const data = await response.json();
            if (!data.success) {
              throw new Error(data.error || 'API returned error');
            }
            
            if (!data.users || data.users.length === 0) {
              alert('No deleted users found to generate report for.');
              return;
            }
            
            // Generate comprehensive audit report
            if (format === 'html') {
              downloadComprehensiveAuditReport(data.users);
            } else if (format === 'pdf') {
              downloadComprehensiveAuditReportPDF(data.users);
            }
            
          } catch (error) {
            console.error('Error generating comprehensive audit report:', error);
            alert('Failed to generate audit report: ' + error.message);
          }
        });

        // Restore User Functionality
        document.querySelectorAll('.restoreUserBtn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const userId = this.getAttribute('data-user-id');
            if (confirm('Are you sure you want to restore this user?')) {
              try {
                const token = localStorage.getItem('token') || '';
                const res = await fetch(`http://localhost:3000/api/users/${userId}/restore`, {
                  method: 'PUT',
                  headers: {
                    'Authorization': `Bearer ${token}`
                  }
                });
                const data = await res.json();
                if (res.ok && data.success) {
                  window.location.reload();
                } else {
                  alert('Failed to restore user: ' + (data.error || 'Unknown error'));
                }
              } catch (err) {
                alert('Failed to restore user: ' + err.message);
              }
            }
          });
        });

        // Permanent Delete Functionality
        document.querySelectorAll('.permanentDeleteBtn').forEach(btn => {
          btn.addEventListener('click', async function() {
            const userId = this.getAttribute('data-user-id');
            console.log('🔍 Frontend: Attempting to delete user with ID:', userId);
            console.log('🔍 Frontend: User ID type:', typeof userId);
            
            if (confirm('Are you sure you want to permanently delete this user? This action cannot be undone.')) {
              try {
                const token = localStorage.getItem('token') || '';
                console.log('🔍 Frontend: Making request to:', `http://localhost:3000/api/users/${userId}/permanent-delete`);
                
                const res = await fetch(`http://localhost:3000/api/users/${userId}/permanent-delete`, {
                  method: 'DELETE',
                  headers: {
                    'Authorization': `Bearer ${token}`
                  }
                });
                
                console.log('🔍 Frontend: Response status:', res.status);
                const data = await res.json();
                console.log('🔍 Frontend: Response data:', data);
                
                if (res.ok && data.success) {
                  console.log('✅ Frontend: User deleted successfully, reloading page');
                  window.location.reload();
                } else {
                  console.error('❌ Frontend: Delete failed:', data.error);
                  alert(data.error || 'Failed to permanently delete user');
                }
              } catch (err) {
                console.error('❌ Frontend: Delete error:', err);
                alert('Failed to permanently delete user: ' + err.message);
              }
            }
          });
        });

        // Edit modal validation functions
        function validateNameField(input, errorElement) {
          // Remove any non-letter and non-space characters immediately
          let originalValue = input.value;
          let lettersAndSpacesOnly = originalValue.replace(/[^a-zA-Z\s]/g, '');
          
          // Remove leading spaces
          lettersAndSpacesOnly = lettersAndSpacesOnly.replace(/^\s+/, '');
          
          // Remove multiple consecutive spaces and replace with single space
          lettersAndSpacesOnly = lettersAndSpacesOnly.replace(/\s+/g, ' ');
          
          if (originalValue !== lettersAndSpacesOnly) {
            input.value = lettersAndSpacesOnly;
          }
          
          const value = lettersAndSpacesOnly.trim();
          if (value.length < 2) {
            errorElement.textContent = 'Name must be at least 2 characters long';
            errorElement.classList.remove('hidden');
            input.classList.add('border-red-500', 'shake-animation');
            input.classList.remove('border-gray-300');
            
            setTimeout(() => {
              input.classList.remove('shake-animation');
            }, 500);
            return false;
          } else {
            errorElement.classList.add('hidden');
            input.classList.remove('border-red-500', 'shake-animation');
            input.classList.add('border-gray-300');
            return true;
          }
        }

        // ✅ ENHANCED: Special validation function for Edit Modal Middle Name - allows dot after letters
        function validateMiddleNameFieldEdit(input, errorElement) {
          let originalValue = input.value;
          let processedValue = originalValue;
          
          // Remove any characters that are not letters, spaces, or dots
          processedValue = processedValue.replace(/[^a-zA-Z\s.]/g, '');
          
          // Remove leading spaces and dots
          processedValue = processedValue.replace(/^[\s.]+/, '');
          
          // Replace multiple consecutive spaces with single space
          processedValue = processedValue.replace(/\s+/g, ' ');
          
          // Handle dots - remove leading dots, dots after spaces, and multiple dots
          processedValue = processedValue.replace(/^\./, '');
          processedValue = processedValue.replace(/\s\./g, ' ');
          processedValue = processedValue.replace(/\.{2,}/g, '.');
          processedValue = processedValue.replace(/\.([a-zA-Z])/g, '$1');
          
          // Validate the pattern: only allow dots after letters
          const invalidPattern = /^[^a-zA-Z]*\./;
          if (invalidPattern.test(processedValue)) {
            processedValue = processedValue.replace(/\./g, '');
          }
          
          // Allow only one dot in the entire string
          const dotMatches = processedValue.match(/\./g);
          if (dotMatches && dotMatches.length > 1) {
            const firstDotIndex = processedValue.indexOf('.');
            processedValue = processedValue.substring(0, firstDotIndex + 1) + 
                             processedValue.substring(firstDotIndex + 1).replace(/\./g, '');
          }
          
          if (originalValue !== processedValue) {
            input.value = processedValue;
          }
          
          const value = processedValue.trim();
          
          // For middle name, allow shorter lengths (like "J.")
          if (value.length < 1) {
            errorElement.textContent = 'Middle name is required';
            errorElement.classList.remove('hidden');
            input.classList.add('border-red-500', 'shake-animation');
            input.classList.remove('border-gray-300');
            
            setTimeout(() => {
              input.classList.remove('shake-animation');
            }, 500);
            return false;
          } else if (value.length === 1 && !/[a-zA-Z]/.test(value)) {
            errorElement.textContent = 'Middle name must contain at least one letter';
            errorElement.classList.remove('hidden');
            input.classList.add('border-red-500', 'shake-animation');
            input.classList.remove('border-gray-300');
            
            setTimeout(() => {
              input.classList.remove('shake-animation');
            }, 500);
            return false;
          } else {
            errorElement.classList.add('hidden');
            input.classList.remove('border-red-500', 'shake-animation');
            input.classList.add('border-gray-300');
            return true;
          }
        }

        function capitalizeWords(str) {
          return str.replace(/\b\w/g, function(char) {
            return char.toUpperCase();
          });
        }

        function validateAge(birthdate) {
          if (!birthdate) return { isValid: false, age: 0 };
          
          const today = new Date();
          const birthDate = new Date(birthdate);
          let age = today.getFullYear() - birthDate.getFullYear();
          const monthDiff = today.getMonth() - birthDate.getMonth();
          
          if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
            age--;
          }
          
          return {
            isValid: age >= 18,
            age: age
          };
        }

        // Add validation event listeners for edit modal
        const editFirst = editUserForm.querySelector('input[name="firstName"]');
        const editMiddle = editUserForm.querySelector('input[name="middleName"]');
        const editLast = editUserForm.querySelector('input[name="lastName"]');
        const editFull = editUserForm.querySelector('input[name="fullName"]');
        const editBirthdateField = document.getElementById('editBirthdateField');
        const editContactNumberField = document.getElementById('editContactNumberField');
        const editFirstNameError = document.getElementById('editFirstNameError');
        const editMiddleNameError = document.getElementById('editMiddleNameError');
        const editLastNameError = document.getElementById('editLastNameError');
        
        // Character counting for edit modal name fields
        const editNameFields = ['firstName', 'middleName', 'lastName'];
        editNameFields.forEach(fieldName => {
          const input = document.getElementById(`edit${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}Field`) || editUserForm.querySelector(`input[name="${fieldName}"]`);
          const countSpan = document.getElementById(`edit${fieldName.charAt(0).toUpperCase() + fieldName.slice(1)}Count`);
          
          if (input && countSpan) {
            input.addEventListener('input', function() {
              const currentLength = this.value.length;
              const maxLength = 20;
              countSpan.textContent = `${currentLength}/${maxLength}`;
              
              if (currentLength > maxLength) {
                countSpan.classList.add('text-red-400');
                countSpan.classList.remove('text-gray-400');
              } else {
                countSpan.classList.remove('text-red-400');
                countSpan.classList.add('text-gray-400');
              }
            });
          }
        });
        
        // Character counting for edit modal contact number
        const editContactNumberCount = document.getElementById('editContactNumberCount');
        if (editContactNumberField && editContactNumberCount) {
          editContactNumberField.addEventListener('input', function() {
            const currentLength = this.value.length;
            const maxLength = 11;
            editContactNumberCount.textContent = `${currentLength}/${maxLength}`;
            
            if (currentLength > maxLength) {
              editContactNumberCount.classList.add('text-red-400');
              editContactNumberCount.classList.remove('text-gray-400');
            } else {
              editContactNumberCount.classList.remove('text-red-400');
              editContactNumberCount.classList.add('text-gray-400');
            }
          });
        }
        const editBirthdateError = document.getElementById('editBirthdateError');
        const editContactNumberError = document.getElementById('editContactNumberError');

        if (editFirst) editFirst.addEventListener('input', () => validateNameField(editFirst, editFirstNameError));
        if (editMiddle) editMiddle.addEventListener('input', () => validateMiddleNameFieldEdit(editMiddle, editMiddleNameError)); // ✅ Use special middle name validation for edit modal
        if (editLast) editLast.addEventListener('input', () => validateNameField(editLast, editLastNameError));
        
        // ✅ ENHANCED: Add input validation for edit modal - special handling for middle name
        [editFirst, editLast].forEach(field => {
          if (field) {
            field.addEventListener('keypress', function(e) {
              // Allow backspace, delete, tab, escape, enter
              if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||
                  // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                  (e.keyCode === 65 && e.ctrlKey === true) ||
                  (e.keyCode === 67 && e.ctrlKey === true) ||
                  (e.keyCode === 86 && e.ctrlKey === true) ||
                  (e.keyCode === 88 && e.ctrlKey === true)) {
                return;
              }
              // Block non-letter and non-space characters
              if (!/[a-zA-Z\s]/.test(e.key)) {
                e.preventDefault();
                return;
              }
              
              // Block space if it's the first character or if there's already a space at the end
              if (e.key === ' ') {
                const currentValue = field.value;
                if (currentValue.length === 0 || currentValue.endsWith(' ')) {
                  e.preventDefault();
                  return;
                }
              }
            });
            
            // Also block paste of non-letter and non-space characters
            field.addEventListener('paste', function(e) {
              e.preventDefault();
              const paste = (e.clipboardData || window.clipboardData).getData('text');
              let lettersAndSpacesOnly = paste.replace(/[^a-zA-Z\s]/g, '');
              
              // Remove leading spaces from pasted content
              lettersAndSpacesOnly = lettersAndSpacesOnly.replace(/^\s+/, '');
              
              // Remove multiple consecutive spaces
              lettersAndSpacesOnly = lettersAndSpacesOnly.replace(/\s+/g, ' ');
              
              // Only add if it doesn't start with space and current field doesn't end with space
              const currentValue = field.value;
              if (lettersAndSpacesOnly && !lettersAndSpacesOnly.startsWith(' ') && 
                  (!currentValue.endsWith(' ') || currentValue.length === 0)) {
                field.value = field.value + lettersAndSpacesOnly;
              } else if (lettersAndSpacesOnly && !lettersAndSpacesOnly.startsWith(' ')) {
                field.value = field.value + lettersAndSpacesOnly;
              }
              
              // ✅ ENHANCED: Use correct validation function for each field type
              if (field.id === 'editFirstNameField') {
                validateNameField(field, editFirstNameError);
              } else if (field.id === 'editMiddleNameField') {
                validateMiddleNameFieldEdit(field, editMiddleNameError);
              } else {
                validateNameField(field, editLastNameError);
              }
            });
          }
        });

        // ✅ ENHANCED: Special keypress handler for edit modal middle name to allow dots
        if (editMiddle) {
          editMiddle.addEventListener('keypress', function(e) {
            // Allow backspace, delete, tab, escape, enter
            if ([8, 9, 27, 13, 46].indexOf(e.keyCode) !== -1 ||
                // Allow Ctrl+A, Ctrl+C, Ctrl+V, Ctrl+X
                (e.keyCode === 65 && e.ctrlKey === true) ||
                (e.keyCode === 67 && e.ctrlKey === true) ||
                (e.keyCode === 86 && e.ctrlKey === true) ||
                (e.keyCode === 88 && e.ctrlKey === true)) {
              return;
            }
            
            // For edit modal middle name, allow letters, spaces, and dots
            if (!/[a-zA-Z\s.]/.test(e.key)) {
              e.preventDefault();
              return;
            }
            
            // Block space if it's the first character or if there's already a space at the end
            if (e.key === ' ') {
              const currentValue = this.value;
              if (currentValue.length === 0 || currentValue.endsWith(' ')) {
                e.preventDefault();
                return;
              }
            }
            
            // Block dot if it's the first character or if there's already a dot, or after space
            if (e.key === '.') {
              const currentValue = this.value;
              // Don't allow dot as first character
              if (currentValue.length === 0) {
                e.preventDefault();
                return;
              }
              // Don't allow multiple dots
              if (currentValue.includes('.')) {
                e.preventDefault();
                return;
              }
              // Don't allow dot after space
              if (currentValue.endsWith(' ')) {
                e.preventDefault();
                return;
              }
            }
          });
          
          // ✅ ENHANCED: Special paste handler for edit modal middle name to allow dots
          editMiddle.addEventListener('paste', function(e) {
            e.preventDefault();
            const paste = (e.clipboardData || window.clipboardData).getData('text');
            let processedPaste = paste.replace(/[^a-zA-Z\s.]/g, ''); // Allow dots
            
            // Remove leading spaces and dots
            processedPaste = processedPaste.replace(/^[\s.]+/, '');
            
            // Remove multiple consecutive spaces
            processedPaste = processedPaste.replace(/\s+/g, ' ');
            
            // Remove multiple dots and dots after spaces
            processedPaste = processedPaste.replace(/\.{2,}/g, '.');
            processedPaste = processedPaste.replace(/\s\./g, ' ');
            
            // Only add if valid
            const currentValue = this.value;
            if (processedPaste && !processedPaste.startsWith(' ') && !processedPaste.startsWith('.')) {
              // Check if adding this would create multiple dots
              const combined = currentValue + processedPaste;
              const dotCount = (combined.match(/\./g) || []).length;
              if (dotCount <= 1) {
                this.value = combined;
                validateMiddleNameFieldEdit(this, editMiddleNameError);
              }
            }
          });
        }

        function updateEditFullName() {
          const firstName = capitalizeWords(editFirst.value.trim());
          const middleName = capitalizeWords(editMiddle.value.trim());
          const lastName = capitalizeWords(editLast.value.trim());
          editFull.value = [firstName, middleName, lastName].filter(Boolean).join(' ');
        }
        
        [editFirst, editMiddle, editLast].forEach(f => {
          if (f) f.addEventListener('input', updateEditFullName);
        });

        if (editBirthdateField) {
          editBirthdateField.addEventListener('input', function() {
            const validation = validateAge(this.value);
            
            if (this.value && !validation.isValid) {
              editBirthdateError.classList.remove('hidden');
              this.classList.add('border-red-500', 'shake-animation');
              this.classList.remove('border-gray-300');
              
              setTimeout(() => {
                this.classList.remove('shake-animation');
              }, 500);
            } else {
              editBirthdateError.classList.add('hidden');
              this.classList.remove('border-red-500', 'shake-animation');
              this.classList.add('border-gray-300');
            }
          });
        }

        if (editContactNumberField) {
          editContactNumberField.addEventListener('input', function() {
            const value = this.value;
            const hasNonNumbers = /[^0-9]/.test(value);
            
            if (hasNonNumbers) {
              editContactNumberError.classList.remove('hidden');
              this.classList.add('border-red-500', 'shake-animation');
              this.classList.remove('border-gray-300');
              
              setTimeout(() => {
                this.classList.remove('shake-animation');
              }, 500);
            } else {
              editContactNumberError.classList.add('hidden');
              this.classList.remove('border-red-500', 'shake-animation');
              this.classList.add('border-gray-300');
            }
          });
        }

        // Edit verify email functionality
        const editVerifyEmailBtn = document.getElementById('editVerifyEmailBtn');
        const editUsernameField = editUserForm.querySelector('input[name="username"]');
        
        if (editVerifyEmailBtn && editUsernameField) {
          editVerifyEmailBtn.addEventListener('click', function() {
            const email = editUsernameField.value.trim();
            
            if (!email) {
              showEditVerificationMessage('Please enter an email address first.', 'error');
              return;
            }
            
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!emailRegex.test(email)) {
              showEditVerificationMessage('Please enter a valid email address.', 'error');
              return;
            }
            
            editVerifyEmailBtn.disabled = true;
            editVerifyEmailBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white inline" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg> Verifying...';
            
            setTimeout(() => {
              showEditVerificationMessage('Email format is valid.', 'success');
              
              editVerifyEmailBtn.disabled = false;
              editVerifyEmailBtn.innerHTML = 'Verify Email';
            }, 1500);
          });
        }
        
        function showEditVerificationMessage(message, type) {
          const existingMessage = document.querySelector('.edit-verification-message');
          if (existingMessage) {
            existingMessage.remove();
          }
          
          const messageDiv = document.createElement('div');
          messageDiv.className = `edit-verification-message mt-2 px-3 py-2 text-xs rounded-lg ${
            type === 'success' ? 'bg-green-100 text-green-700 border border-green-200' : 
            type === 'error' ? 'bg-red-100 text-red-700 border border-red-200' : 
            'bg-blue-100 text-blue-700 border border-blue-200'
          }`;
          messageDiv.textContent = message;
          
          editVerifyEmailBtn.parentNode.insertBefore(messageDiv, editVerifyEmailBtn.nextSibling);
          
          setTimeout(() => {
            if (messageDiv.parentNode) {
              messageDiv.remove();
            }
          }, 5000);
        }
        
        // End of initializeUserManagement function
        }

        // ✅ ENHANCED: Notification Highlighting Function
        function initializeNotificationHighlighting() {
          console.log('🎯 Initializing notification highlighting...');
          
          // Get highlight parameter from URL
          const urlParams = new URLSearchParams(window.location.search);
          const highlightUserId = urlParams.get('highlight');
          
          if (!highlightUserId) {
            console.log('🔍 No highlight parameter found');
            return;
          }
          
          console.log('🎯 Looking for user with ID:', highlightUserId);
          
          // Find the user row with matching User ID
          setTimeout(() => {
            // Look in the main user table
            const userRows = document.querySelectorAll('[data-user-id]');
            let targetRow = null;
            
            userRows.forEach(row => {
              const userId = row.getAttribute('data-user-id');
              if (userId === highlightUserId) {
                targetRow = row;
                console.log('✅ Found target row in main table:', userId);
              }
            });
            
            // If not found in main table, check recently deleted users
            if (!targetRow) {
              const deletedCards = document.querySelectorAll('.deleted-user-card');
              deletedCards.forEach(card => {
                const userIdSpan = card.querySelector('[id$="UserId"]');
                if (userIdSpan && userIdSpan.textContent.trim() === highlightUserId) {
                  targetRow = card;
                  console.log('✅ Found target row in recently deleted:', highlightUserId);
                }
              });
            }
            
            // If not found in recently deleted, check history of deleted users  
            if (!targetRow) {
              const historyCards = document.querySelectorAll('.deleted-history-card');
              historyCards.forEach(card => {
                const userIdElement = card.querySelector('.text-gray-600.font-mono');
                if (userIdElement && userIdElement.textContent.trim() === highlightUserId) {
                  targetRow = card;
                  console.log('✅ Found target row in history:', highlightUserId);
                }
              });
            }
            
            if (targetRow) {
              highlightUserRow(targetRow, highlightUserId);
              
              // Remove highlight parameter from URL without reloading
              const newUrl = new URL(window.location);
              newUrl.searchParams.delete('highlight');
              window.history.replaceState({}, '', newUrl.toString());
            } else {
              console.log('❌ User row not found for highlighting:', highlightUserId);
              // Try again after a short delay in case the table is still loading
              setTimeout(() => {
                initializeNotificationHighlighting();
              }, 1000);
            }
          }, 500);
        }

        // ✅ ENHANCED: Highlight User Row Function
        function highlightUserRow(row, userId) {
          console.log('🌟 Highlighting user row for:', userId);
          
          // Add highlight class with animation
          row.style.transition = 'all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
          row.style.backgroundColor = '#fef3c7'; // Yellow highlight
          row.style.boxShadow = '0 0 20px rgba(245, 158, 11, 0.3)';
          row.style.transform = 'scale(1.02)';
          row.style.zIndex = '10';
          
          // Scroll to the row smoothly
          row.scrollIntoView({ 
            behavior: 'smooth', 
            block: 'center',
            inline: 'nearest'
          });
          
          // Add pulse animation
          row.style.animation = 'highlight-pulse 1s ease-in-out 2';
          
          // Fade out highlight after 4 seconds
          setTimeout(() => {
            row.style.backgroundColor = '';
            row.style.boxShadow = '';
            row.style.transform = '';
            row.style.zIndex = '';
            
            setTimeout(() => {
              row.style.transition = '';
              row.style.animation = '';
            }, 600);
          }, 4000);
          
          console.log('✅ User row highlighted successfully');
        }
        
        // Initialize everything
        waitForDOM().then(() => {
          console.log('✅ DOM is ready, initializing user management...');
          initializeUserManagement();
          initializeNotificationHighlighting(); // ✅ ENHANCED: Add notification highlighting
          
          // Load profile pictures for main user table
          loadMainTableProfilePictures();
        });
        
        // Also try immediate initialization if DOM is already ready
        if (document.readyState !== 'loading') {
          console.log('✅ DOM already ready, initializing immediately...');
          initializeUserManagement();
          
          // Load profile pictures for main user table
          setTimeout(() => {
            loadMainTableProfilePictures();
          }, 500);
        }
        
        // Cache for profile picture data URLs
        const profilePictureCache = new Map();
        
        // Cache for user activity status
        const userActivityCache = new Map();
        
        // Function to send heartbeat to update current user's activity
        async function sendHeartbeat() {
          try {
            const token = localStorage.getItem('token') || document.cookie.replace(/(?:(?:^|.*;\s*)token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
            if (!token) return;
            
            await fetch('/api/users/activity/heartbeat', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              }
            });
          } catch (error) {
            console.log('❌ Failed to send heartbeat:', error);
          }
        }
        
        // Function to load user activity status
        async function loadUserActivityStatus() {
          try {
            console.log('🔄 Loading user activity status...');
            
            // Get all user IDs from the page
            const statusIndicators = document.querySelectorAll('.activity-status-indicator');
            const userIds = Array.from(statusIndicators).map(indicator => 
              indicator.getAttribute('data-user-id')
            ).filter(Boolean);
            
            if (userIds.length === 0) {
              console.log('⚠️ No user IDs found for activity status');
              return;
            }
            
            console.log(`📊 Checking activity status for ${userIds.length} users:`, userIds);
            
            const token = localStorage.getItem('token') || document.cookie.replace(/(?:(?:^|.*;\s*)token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
            if (!token) {
              console.log('❌ No authentication token found');
              return;
            }
            
            const response = await fetch('/api/users/activity/status', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ userIds })
            });
            
            if (response.ok) {
              const data = await response.json();
              console.log('✅ Activity status response:', data);
              
              if (data.success && data.statusMap) {
                // Update status indicators
                statusIndicators.forEach(indicator => {
                  const userId = indicator.getAttribute('data-user-id');
                  const status = data.statusMap[userId];
                  
                  if (status) {
                    updateStatusIndicator(indicator, status);
                    userActivityCache.set(userId, status);
                  } else {
                    // Set as inactive if no status found
                    updateStatusIndicator(indicator, { isActive: false });
                  }
                });
              }
            } else {
              console.log('❌ Failed to fetch activity status:', response.status);
            }
          } catch (error) {
            console.error('❌ Error loading user activity status:', error);
          }
        }
        
        // Function to update a single status indicator
        function updateStatusIndicator(indicator, status) {
          const dot = indicator.querySelector('.status-dot');
          if (!dot) return;
          
          // Remove all status classes
          dot.classList.remove('status-active', 'status-inactive', 'status-checking');
          
          // Add appropriate status class and update tooltip
          if (status.isActive) {
            dot.classList.add('status-active');
            indicator.setAttribute('title', 'Active Now');
          } else {
            dot.classList.add('status-inactive');
            indicator.setAttribute('title', 'Inactive');
          }
          
          console.log(`🔄 Updated status for user: ${indicator.getAttribute('data-user-id')} - ${status.isActive ? 'Active' : 'Inactive'}`);
        }
        
        // Function to start periodic status updates
        function startActivityStatusUpdates() {
          // Send heartbeat every 15 seconds to keep current user active (faster for real-time)
          setInterval(sendHeartbeat, 15000);
          
          // Update user activity status every 10 seconds (much faster for real-time updates)
          setInterval(loadUserActivityStatus, 10000);
          
          // Initial load
          setTimeout(loadUserActivityStatus, 2000); // Wait for page to load
        }
        
        // Load profile pictures for main user table (using EIU approach) - MAIN FUNCTION
        function loadMainTableProfilePictures() {
          console.log('🖼️ [MAIN] Loading profile pictures for main user table...');
          
          // Find all profile images in the main table
          const profileImages = document.querySelectorAll('img[id^="profile-img-"]');
          console.log(`📸 [MAIN] Found ${profileImages.length} profile images to load`);
          
          profileImages.forEach(async (img, index) => {
            const userId = img.id.replace('profile-img-', '');
            console.log(`🔄 [MAIN] Loading profile picture ${index + 1}/${profileImages.length} for user: ${userId}`);
            
            // Show placeholder initially
            img.style.display = 'none';
            const fallback = img.nextElementSibling;
            if (fallback && fallback.classList.contains('profile-picture-fallback')) {
              fallback.style.display = 'flex';
            }
            
            // Check cache first
            if (profilePictureCache.has(userId)) {
              const cachedDataUrl = profilePictureCache.get(userId);
              if (cachedDataUrl) {
                console.log(`✅ [MAIN] Using cached profile picture for user: ${userId}`);
                img.src = cachedDataUrl;
                img.style.display = 'block';
                if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                  fallback.style.display = 'none';
                }
                return;
              }
            }
            
            try {
              // Get the profile picture URL from API first
              console.log(`🌐 [MAIN] Fetching profile picture for: ${userId}`);
              const response = await fetch(`/api/profile/picture/${encodeURIComponent(userId)}`, {
                method: 'GET',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': `Bearer ${document.cookie.split('token=')[1]?.split(';')[0] || ''}`
                }
              });
              
              if (response.ok) {
                const data = await response.json();
                console.log(`📦 [MAIN] API Response for ${userId}:`, {
                  success: data.success,
                  hasUrl: !!data.profilePictureUrl,
                  isBase64: data.profilePictureUrl?.startsWith('data:'),
                  urlStart: data.profilePictureUrl?.substring(0, 50)
                });
                
                if (data.success && data.profilePictureUrl) {
                  // If it's already a base64 data URL, use it directly
                  if (data.profilePictureUrl.startsWith('data:')) {
                    console.log(`✅ [MAIN] Using base64 data URL for user: ${userId}`);
                    profilePictureCache.set(userId, data.profilePictureUrl);
                    
                    // Set up load handlers before setting src
                    img.onload = function() {
                      console.log(`✅ [MAIN] Profile picture displayed successfully for user: ${userId}`);
                      this.style.display = 'block';
                      const fallback = this.nextElementSibling;
                      if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                        fallback.style.display = 'none';
                      }
                    };
                    
                    img.onerror = function() {
                      console.log(`❌ [MAIN] Failed to display profile picture for user: ${userId}`);
                      this.style.display = 'none';
                      const fallback = this.nextElementSibling;
                      if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                        fallback.style.display = 'flex';
                      }
                      profilePictureCache.set(userId, null);
                    };
                    
                    // Set the source to trigger loading
                    img.src = data.profilePictureUrl;
                    return;
                  }
                  
                  // For regular URLs, use the EIU approach with blob and createObjectURL
                  let normalizedUrl = data.profilePictureUrl;
                  
                  // Handle relative URLs by making them absolute
                  if (data.profilePictureUrl.startsWith('/') && !data.profilePictureUrl.startsWith('//')) {
                    normalizedUrl = window.location.origin + data.profilePictureUrl;
                    console.log('🔗 [MAIN] Converted relative URL to absolute:', normalizedUrl);
                  }
                  
                  // Handle URLs that might need the backend server origin
                  if (data.profilePictureUrl.startsWith('/uploads/') || data.profilePictureUrl.startsWith('uploads/')) {
                    const backendOrigin = 'http://localhost:3000'; // Backend server URL
                    normalizedUrl = data.profilePictureUrl.startsWith('/') ? 
                      backendOrigin + data.profilePictureUrl : 
                      backendOrigin + '/' + data.profilePictureUrl;
                    console.log('🔗 [MAIN] Using backend server URL:', normalizedUrl);
                  }
                  
                  console.log('✅ [MAIN] Attempting to load profile picture:', {
                    original: data.profilePictureUrl,
                    normalized: normalizedUrl
                  });
                  
                  // Enhanced loading strategy with authentication headers (EIU approach)
                  const loadProfilePicture = async () => {
                    // First, try direct image loading (works for public URLs)
                    const testImg = new Image();
                    
                    // Set up success handler
                    testImg.onload = function() {
                      console.log('✅ [MAIN] Profile picture loaded successfully via direct loading for user:', userId);
                      const objectUrl = normalizedUrl;
                      profilePictureCache.set(userId, objectUrl);
                      img.src = objectUrl;
                      img.style.display = 'block';
                      const fallback = img.nextElementSibling;
                      if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                        fallback.style.display = 'none';
                      }
                    };
                    
                    // Set up error handler for direct loading
                    testImg.onerror = async function() {
                      console.log('❌ [MAIN] Direct loading failed, trying authenticated fetch for user:', userId);
                      
                      try {
                        // Try fetching with authentication headers
                        const token = localStorage.getItem('token') || document.cookie.replace(/(?:(?:^|.*;\s*)token\s*\=\s*([^;]*).*$)|^.*$/, "$1");
                        
                        const fetchResponse = await fetch(normalizedUrl, {
                          headers: {
                            'Authorization': `Bearer ${token}`,
                            'Cache-Control': 'no-cache'
                          }
                        });
                        
                        if (fetchResponse.ok) {
                          const blob = await fetchResponse.blob();
                          const objectUrl = URL.createObjectURL(blob);
                          
                          console.log('✅ [MAIN] Profile picture loaded via authenticated fetch for user:', userId);
                          profilePictureCache.set(userId, objectUrl);
                          img.src = objectUrl;
                          img.style.display = 'block';
                          const fallback = img.nextElementSibling;
                          if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                            fallback.style.display = 'none';
                          }
                          
                          // Clean up object URL after image loads
                          img.onload = () => {
                            URL.revokeObjectURL(objectUrl);
                          };
                        } else {
                          throw new Error(`HTTP ${fetchResponse.status}: ${fetchResponse.statusText}`);
                        }
                      } catch (fetchError) {
                        console.log('❌ [MAIN] Authenticated fetch also failed for user:', userId, fetchError.message);
                        console.log('📷 [MAIN] Showing placeholder due to loading failures');
                        profilePictureCache.set(userId, null);
                        img.style.display = 'none';
                        const fallback = img.nextElementSibling;
                        if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                          fallback.style.display = 'flex';
                        }
                      }
                    };
                    
                    // Start the loading process
                    testImg.src = normalizedUrl;
                  };
                  
                  // Execute the loading function
                  loadProfilePicture();
                  
                } else {
                  console.log(`⚠️ [MAIN] No profile picture found for user: ${userId}`);
                  // Cache the failure
                  profilePictureCache.set(userId, null);
                  // Show fallback
                  img.style.display = 'none';
                  const fallback = img.nextElementSibling;
                  if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                    fallback.style.display = 'flex';
                  }
                }
              } else {
                console.log(`❌ [MAIN] Failed to fetch profile picture for user: ${userId}`, response.status);
                // Cache the failure
                profilePictureCache.set(userId, null);
                // Show fallback
                img.style.display = 'none';
                const fallback = img.nextElementSibling;
                if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                  fallback.style.display = 'flex';
                }
              }
            } catch (error) {
              console.error(`❌ [MAIN] Error loading profile picture for user ${userId}:`, error);
              // Cache the failure
              profilePictureCache.set(userId, null);
              // Show fallback
              img.style.display = 'none';
              const fallback = img.nextElementSibling;
              if (fallback && fallback.classList.contains('profile-picture-fallback')) {
                fallback.style.display = 'flex';
              }
            }
          });
        }
        
        // Add missing functions that are referenced in debug functions
        function preloadProfilePictures() {
          console.log('🔄 Preloading profile pictures...');
          loadMainTableProfilePictures();
        }
        
        function createProfilePicturesForUsers() {
          console.log('🔄 Creating profile pictures for users...');
          loadMainTableProfilePictures();
        }
        
        // Global functions for debugging
        window.debugUserManagement = function() {
          console.log('🔍 Manual debug triggered...');
          debugUserData();
          preloadProfilePictures();
          createProfilePicturesForUsers();
        };
        
        window.forceLoadProfilePictures = function() {
          console.log('🔧 Force loading profile pictures...');
          createProfilePicturesForUsers();
        };
        
        window.ultraForceLoad = function() {
          console.log('🚀 ULTRA FORCE loading profile pictures...');
          forceLoadAllProfilePictures();
        };
        
        console.log('🌐 Global debug functions available: window.debugUserManagement(), window.forceLoadProfilePictures()');
        
        // ULTRA-DIRECT APPROACH - Force image loading - DISABLED
        function forceLoadAllProfilePictures() {
          console.log('🚀 ULTRA-DIRECT: DISABLED - Using main function instead');
          loadMainTableProfilePictures();
        }

        // Notification card toggle functionality
        document.addEventListener('DOMContentLoaded', function() {
          const toggleBtn = document.getElementById('toggleNotifications');
          const content = document.getElementById('notificationsContent');
          let isExpanded = true;

          if (toggleBtn && content) {
            toggleBtn.addEventListener('click', function() {
              isExpanded = !isExpanded;
              content.style.display = isExpanded ? 'block' : 'none';
              toggleBtn.innerHTML = isExpanded ? 
                '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>' :
                '<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>';
            });
          }
          
          // Initialize activity status updates
          console.log('🚀 Initializing activity status updates...');
          startActivityStatusUpdates();
          
          // Initialize enhanced history functionality with retry mechanism
          let retryCount = 0;
          const maxRetries = 10;
          
          function tryInitializeHistory() {
            console.log(`🔄 Attempt ${retryCount + 1}/${maxRetries} to initialize history...`);
            console.log('🔍 window.deletedUsersHistory:', window.deletedUsersHistory);
            console.log('🔍 window.immediateHistoryInit:', window.immediateHistoryInit);
            
            if ((window.deletedUsersHistory && Array.isArray(window.deletedUsersHistory) && window.deletedUsersHistory.length > 0) || window.immediateHistoryInit) {
              console.log('✅ Data available, initializing history functionality');
              console.log('📋 About to call initializeHistoryFunctionality...');
              try {
                initializeHistoryFunctionality();
                console.log('✅ initializeHistoryFunctionality completed successfully');
              } catch (error) {
                console.error('❌ Error in initializeHistoryFunctionality:', error);
              }
            } else if (retryCount < maxRetries) {
              retryCount++;
              console.log(`⏳ Data not ready, retrying in ${500 * retryCount}ms...`);
              setTimeout(tryInitializeHistory, 500 * retryCount);
            } else {
              console.log('❌ Max retries reached, trying direct API fetch...');
              try {
                initializeHistoryFunctionality(); // This will trigger the direct API fetch
              } catch (error) {
                console.error('❌ Error in fallback initializeHistoryFunctionality:', error);
              }
            }
          }
          
          setTimeout(tryInitializeHistory, 100);
          
          // Multiple fallback attempts
          setTimeout(() => {
            console.log('🆘 EMERGENCY 1: First emergency attempt...');
            attemptEmergencyRender();
          }, 1000);
          
          setTimeout(() => {
            console.log('🆘 EMERGENCY 2: Second emergency attempt...');
            attemptEmergencyRender();
          }, 3000);
          
          setTimeout(() => {
            console.log('🆘 EMERGENCY 3: Final emergency attempt...');
            attemptEmergencyRender();
          }, 5000);
          
          // Add event listener for force load button
                  // Attach force load button listener
        const forceLoadBtn = document.getElementById('forceLoadHistoryBtn');
        console.log('🔘 Force load button element:', forceLoadBtn);
        if (forceLoadBtn) {
          console.log('✅ Attaching force load button event listener');
          forceLoadBtn.addEventListener('click', (e) => {
            e.preventDefault();
            e.stopPropagation();
            console.log('👆 MANUAL: Force load button clicked - calling attemptEmergencyRender');
            console.log('👆 MANUAL: window.attemptEmergencyRender exists:', typeof window.attemptEmergencyRender);
            if (window.attemptEmergencyRender) {
              window.attemptEmergencyRender();
            } else {
              console.error('❌ window.attemptEmergencyRender not found!');
            }
          });
        } else {
          console.error('❌ Force load button not found!');
        }
        });

        // Debug functionality
        const debugBtn = document.getElementById('debugBtn');
        const debugInfo = document.getElementById('debugInfo');
        
        debugBtn.addEventListener('click', async function() {
          debugInfo.classList.remove('hidden');
          debugInfo.innerHTML = '<div class="text-blue-600">Testing API connection...</div>';
          
          try {
            // Check token
            const token = localStorage.getItem('token') || '';
            debugInfo.innerHTML += `<div class="mt-2">Token: ${token ? 'Present' : 'Missing'}</div>`;
            
            if (!token) {
              debugInfo.innerHTML += '<div class="text-red-600 mt-2">❌ No authentication token found!</div>';
              return;
            }
            
            // Test API connection
            const res = await fetch('http://localhost:3000/api/users', {
              method: 'GET',
              headers: {
                'Authorization': `Bearer ${token}`
              }
            });
            
            debugInfo.innerHTML += `<div class="mt-2">API Status: ${res.status}</div>`;
            
            if (res.ok) {
              const data = await res.json();
              debugInfo.innerHTML += `<div class="text-green-600 mt-2">✅ API connection successful! Found ${data.users?.length || 0} users</div>`;
            } else {
              const errorData = await res.json();
              debugInfo.innerHTML += `<div class="text-red-600 mt-2">❌ API Error: ${errorData.error || 'Unknown error'}</div>`;
            }
            
          } catch (error) {
            debugInfo.innerHTML += `<div class="text-red-600 mt-2">❌ Network Error: ${error.message}</div>`;
          }
        });

        // Removed duplicate UUID functionality - now defined globally at the top
        // First showSuccessModal removed to avoid duplicate declaration
        
        function showSuccessModal(message) {
          const modal = document.createElement('div');
          modal.className = 'fixed inset-0 bg-black/30 backdrop-blur-sm flex items-center justify-center z-50';
          modal.style.animation = 'fadeIn 0.2s ease-out';
          
          modal.innerHTML = `
            <div class="bg-white rounded-xl shadow-2xl max-w-sm w-full mx-4 transform transition-all duration-200 scale-100" style="animation: slideIn 0.2s ease-out;">
              <div class="p-6 text-center">
                <div class="w-12 h-12 mx-auto mb-4 bg-green-100 rounded-full flex items-center justify-center">
                  <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Success</h3>
                <p class="text-gray-600 mb-4">${message}</p>
                <button id="closeSuccessModal" class="w-full bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg font-medium transition-all duration-200">
                  OK
                </button>
              </div>
            </div>
          `;
          
          document.body.appendChild(modal);
          
          const closeModal = () => {
            modal.style.animation = 'fadeOut 0.2s ease-out';
            setTimeout(() => {
              if (document.body.contains(modal)) {
                document.body.removeChild(modal);
              }
            }, 200);
          };
          
          // Event listeners
          modal.querySelector('#closeSuccessModal').addEventListener('click', closeModal);
          
          // Close on background click
          modal.addEventListener('click', (e) => {
            if (e.target === modal) {
              closeModal();
            }
          });
          
          // Auto close after 3 seconds
          setTimeout(closeModal, 3000);
        }

      </script>
    </section>
  </SysAdminLayout>
</Layout>
