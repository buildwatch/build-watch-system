---
// My Profile Module for System Administrator
import Layout from '../../../../layouts/Layout.astro';
import SysAdminLayout from '../../../../components/SysAdminLayout.astro';

const userProfile = {
  fullName: "System Administrator",
  email: "sysadmin@buildwatch.gov.ph",
  role: "System Administrator",
  department: "Information Technology",
  employeeId: "SA-001",
  phone: "+63 912 345 6789",
  location: "Manila, Philippines",
  timezone: "Asia/Manila",
  lastLogin: "2025-08-28 14:39:00",
  status: "Active",
  avatar: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=400&h=400&fit=crop&crop=face&auto=format&q=80",
  permissions: [
    "Full System Access",
    "User Management",
    "Security Administration",
    "System Configuration",
    "Backup & Maintenance",
    "Audit Trail Access",
    "Database Administration",
    "API Management",
    "System Monitoring",
    "Emergency Protocols"
  ],
  recentActivity: [
    {
      action: "System Backup Completed",
      timestamp: "2025-08-28 10:15:00",
      ip: "192.168.1.100",
      location: "Manila, PH",
      status: "success",
      icon: "backup"
    },
    {
      action: "New User Account Created",
      timestamp: "2025-08-27 16:30:00",
      ip: "192.168.1.100",
      location: "Manila, PH",
      status: "success",
      icon: "user-add"
    },
    {
      action: "Security Policy Updated",
      timestamp: "2025-08-26 14:20:00",
      ip: "192.168.1.100",
      location: "Manila, PH",
      status: "success",
      icon: "security"
    },
    {
      action: "System Health Check",
      timestamp: "2025-08-25 09:45:00",
      ip: "192.168.1.100",
      location: "Manila, PH",
      status: "success",
      icon: "health"
    }
  ],
  systemStats: {
    totalUsers: 19,
    activeSessions: 8,
    systemUptime: "99.9%",
    lastBackup: "2 hours ago",
    securityScore: 95,
    performanceScore: 98
  }
};
---

<Layout title="My Profile - System Administrator">
  <SysAdminLayout>
    <style>
      .profile-card {
        @apply bg-white border border-gray-200 rounded-2xl shadow-lg transition-all duration-500 ease-out hover:shadow-2xl hover:border-black/20 hover:-translate-y-2;
        position: relative;
        overflow: hidden;
      }
      
      .profile-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.08), transparent);
        transition: left 0.6s ease-out;
        z-index: 1;
      }
      
      .profile-card > * {
        position: relative;
        z-index: 2;
      }
      
      .profile-card:hover::before {
        left: 100%;
      }
      
      .profile-card:hover {
        @apply transform scale-[1.02];
      }
      
      .quick-action-btn-enhanced {
        @apply w-full bg-gradient-to-r from-gray-700 to-gray-800 hover:from-gray-800 hover:to-gray-900 text-white font-semibold px-4 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-gray-500/25 border border-gray-700/20 text-sm;
        position: relative;
        overflow: hidden;
      }
      
      .quick-action-btn-enhanced::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .quick-action-btn-enhanced:hover::before {
        left: 100%;
      }
      
      .quick-action-btn-enhanced:hover {
        @apply transform scale-105 -translate-y-1;
      }
      
      .quick-action-btn-enhanced > * {
        position: relative;
        z-index: 2;
      }
      
      .status-item-enhanced {
        @apply flex items-center justify-between py-2 px-3 bg-gradient-to-br from-gray-50 to-gray-100 border border-gray-200 rounded-xl transition-all duration-300 hover:shadow-lg hover:border-gray-400 hover:-translate-y-1;
        position: relative;
        overflow: hidden;
      }
      
      .status-item-enhanced::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(107, 114, 128, 0.1), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .status-item-enhanced:hover::before {
        left: 100%;
      }
      
      .status-item-enhanced:hover {
        @apply transform scale-105;
      }
      
      .status-item-enhanced > * {
        position: relative;
        z-index: 2;
      }
      
      /* Enhanced Avatar */
      .avatar-container {
        position: relative;
        transition: all 0.3s ease;
      }
      
      .avatar-container:hover {
        transform: scale(1.05);
      }
      
      .avatar-container::after {
        content: '';
        position: absolute;
        inset: -4px;
        background: linear-gradient(45deg, #374151, #1f2937, #111827, #374151);
        border-radius: 1rem;
        z-index: -1;
        opacity: 0;
        transition: opacity 0.3s ease;
      }
      
      .avatar-container:hover::after {
        opacity: 1;
      }
      
      /* Profile Picture Border */
      .profile-picture-border {
        border: 4px solid #374151 !important;
      }
      
      .btn-primary {
        @apply bg-gradient-to-r from-black to-gray-800 hover:from-gray-900 hover:to-black text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl hover:shadow-black/25 border border-black/20;
        position: relative;
        overflow: hidden;
      }
      
      .btn-primary::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .btn-primary > * {
        position: relative;
        z-index: 2;
      }
      
      .btn-primary:hover::before {
        left: 100%;
      }
      
      .btn-secondary {
        @apply bg-gradient-to-r from-gray-700 to-gray-800 hover:from-black hover:to-gray-900 text-white font-semibold px-6 py-3 rounded-xl transition-all duration-300 transform hover:scale-105 hover:shadow-xl border border-gray-600 hover:border-black;
        position: relative;
        overflow: hidden;
      }
      
      .btn-secondary::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .btn-secondary > * {
        position: relative;
        z-index: 2;
      }
      
      .btn-secondary:hover::before {
        left: 100%;
      }
      
      .status-active {
        @apply bg-gradient-to-r from-green-600 to-emerald-700 text-white px-4 py-2 rounded-full text-xs font-semibold shadow-lg;
        position: relative;
        overflow: hidden;
      }
      
      .status-active::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.6s ease-out;
        z-index: 1;
      }
      
      .status-active > * {
        position: relative;
        z-index: 2;
      }
      
      .status-active:hover::before {
        left: 100%;
      }
      
      .status-success {
        @apply bg-gradient-to-r from-green-600 to-emerald-700 text-white px-3 py-1 rounded-lg text-xs font-semibold shadow-lg;
        position: relative;
        overflow: hidden;
      }
      
      .status-success::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.6s ease-out;
        z-index: 1;
      }
      
      .status-success > * {
        position: relative;
        z-index: 2;
      }
      
      .status-success:hover::before {
        left: 100%;
      }
      
      .stat-card {
        @apply bg-gradient-to-br from-gray-50 to-white border border-gray-200 rounded-xl p-4 transition-all duration-300 hover:shadow-lg hover:border-black/20 hover:-translate-y-1;
        position: relative;
        overflow: hidden;
      }
      
      .stat-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.06), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .stat-card:hover::before {
        left: 100%;
      }
      
      .stat-card:hover {
        @apply transform scale-105;
      }
      
      .stat-card > * {
        position: relative;
        z-index: 2;
      }
      
      .permission-item {
        @apply flex items-center p-4 bg-gradient-to-r from-gray-50 to-white rounded-xl border border-gray-200 hover:border-black/30 hover:shadow-lg transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .permission-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.05), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .permission-item > * {
        position: relative;
        z-index: 2;
      }
      
      .permission-item:hover::before {
        left: 100%;
      }
      
      .permission-item:hover {
        @apply transform translate-x-2;
      }
      
      .activity-item {
        @apply flex items-center justify-between p-4 bg-gradient-to-r from-gray-50 to-white rounded-xl border border-gray-200 hover:border-black/30 hover:shadow-lg transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .activity-item::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.05), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .activity-item > * {
        position: relative;
        z-index: 2;
      }
      
      .activity-item:hover::before {
        left: 100%;
      }
      
      .activity-item:hover {
        @apply transform translate-x-2;
      }
      
      .security-toggle {
        @apply w-14 h-7 bg-gradient-to-r from-gray-300 to-gray-400 rounded-full relative cursor-pointer transition-all duration-300 hover:shadow-lg;
      }
      
      .security-toggle.active {
        @apply from-green-500 to-emerald-600;
      }
      
      .security-toggle .toggle-slider {
        @apply w-5 h-5 bg-white rounded-full absolute top-1 left-1 transition-all duration-300 shadow-md;
      }
      
      .security-toggle.active .toggle-slider {
        @apply left-8;
      }
      
      .icon-container {
        @apply w-14 h-14 rounded-2xl flex items-center justify-center transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .icon-container::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .icon-container > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container:hover::before {
        left: 100%;
      }
      
      .icon-container:hover {
        @apply transform scale-110 rotate-3;
      }
      
      .icon-container-small {
        @apply w-10 h-10 rounded-xl flex items-center justify-center transition-all duration-300;
        position: relative;
        overflow: hidden;
      }
      
      .icon-container-small::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .icon-container-small > * {
        position: relative;
        z-index: 2;
      }
      
      .icon-container-small:hover::before {
        left: 100%;
      }
      
      .icon-container-small:hover {
        @apply transform scale-110 rotate-3;
      }
      
      .security-card {
        position: relative;
        overflow: hidden;
      }
      
      .security-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 0, 0, 0.05), transparent);
        transition: left 0.5s ease-out;
        z-index: 1;
      }
      
      .security-card:hover::before {
        left: 100%;
      }
      
      .security-card > * {
        position: relative;
        z-index: 2;
      }
    </style>

    <!-- Page Header -->
    <div class="bg-white border-b border-gray-200 px-8 py-6">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-4">
          <div class="flex items-center space-x-3">
            <div class="icon-container bg-gradient-to-br from-black to-gray-800 shadow-xl">
              <svg class="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
            </div>
            <div>
              <h1 class="text-3xl font-bold text-black">My Profile</h1>
              <p class="text-sm text-gray-600">System Administrator Account Management</p>
            </div>
          </div>
        </div>
        <div class="flex items-center space-x-4">
          <div class="text-right">
            <p class="text-sm text-gray-600">Last Updated</p>
            <p class="text-xs text-black font-semibold">Monday, September 1, 2025 at 01:01 AM Philippine Standard Time</p>
          </div>
          <div class="w-4 h-4 bg-green-500 rounded-full animate-pulse shadow-lg"></div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <main class="px-8 py-8">
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
        
        <!-- Left Column: Profile Overview -->
        <div class="lg:col-span-1 space-y-6">
          
          <!-- Profile Card -->
          <div class="profile-card p-6">
            <div class="text-center mb-6">
              <div class="relative inline-block">
                <div class="avatar-container profile-picture-border w-32 h-32 rounded-2xl overflow-hidden shadow-xl mb-4 cursor-pointer group" id="profilePictureContainer">
                  <img 
                    src={userProfile.avatar}
                    alt="System Administrator"
                    class="w-full h-full object-cover transition-all duration-300 group-hover:scale-110"
                    onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                    id="mainProfilePicture"
                    crossorigin="anonymous"
                  />
                  <div class="w-full h-full bg-gradient-to-br from-black to-gray-800 flex items-center justify-center" style="display: none;">
                    <span class="text-white font-bold text-3xl">SA</span>
                  </div>
                  
                  <!-- Edit Overlay -->
                  <div class="absolute inset-0 bg-black/50 opacity-0 group-hover:opacity-100 transition-all duration-300 flex items-center justify-center">
                    <div class="text-center text-white">
                      <svg class="w-8 h-8 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                      </svg>
                      <p class="text-sm font-medium">Click to Edit</p>
                    </div>
                  </div>
                </div>
                <div class="absolute -bottom-2 -right-2 w-10 h-10 bg-green-500 rounded-full border-4 border-white flex items-center justify-center shadow-lg">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                </div>
              </div>
              <h2 class="text-2xl font-bold text-black mb-2">{userProfile.fullName}</h2>
              <div class="status-active inline-block mb-3">{userProfile.status}</div>
              <p class="text-sm text-gray-700 font-medium">System Administrator</p>
              <p class="text-xs text-gray-600">Information Technology</p>
            </div>
            
            <div class="space-y-4">
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-black/30 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V8a2 2 0 00-2-2h-5m-4 0V4a2 2 0 114 0v2m-4 0a2 2 0 104 0m-5 8a2 2 0 100-4 2 2 0 000 4zm0 0c1.306 0 2.417.835 2.83 2M9 14a3.001 3.001 0 00-2.83 2M15 11h3m-3 4h2"></path>
                  </svg>
                  User ID
                </span>
                <span class="text-sm font-bold text-black">{userProfile.employeeId}</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-black/30 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                  </svg>
                  Email
                </span>
                <span class="text-sm font-bold text-black hover:text-blue-600 transition-colors cursor-pointer">{userProfile.email}</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-black/30 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                  </svg>
                  Department
                </span>
                <span class="text-sm font-bold text-black">Information Technology</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-black/30 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                  </svg>
                  Contact
                </span>
                <span class="text-sm font-bold text-black">{userProfile.phone}</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-black/30 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                  </svg>
                  Location
                </span>
                <span class="text-sm font-bold text-black">{userProfile.location}</span>
              </div>
              <div class="flex items-center justify-between py-3 border-b border-gray-200 hover:border-black/30 transition-colors duration-300">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                  </svg>
                  Birthday
                </span>
                <span class="text-sm font-bold text-black">1/15/1990</span>
              </div>
              <div class="flex items-center justify-between py-3">
                <span class="text-sm text-gray-600 flex items-center gap-2">
                  <svg class="w-4 h-4 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Timezone
                </span>
                <span class="text-sm font-bold text-black">{userProfile.timezone}</span>
              </div>
            </div>
          </div>
        
          <!-- Quick Actions -->
          <div class="profile-card p-6">
            <h3 class="text-lg font-bold text-black mb-4 flex items-center">
              <div class="icon-container-small bg-gradient-to-br from-black to-gray-800 mr-3">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                </svg>
              </div>
              Quick Actions
            </h3>
            <div class="space-y-3">
              <button id="editProfileBtn" class="quick-action-btn-enhanced group">
                <svg class="w-4 h-4 inline mr-2 group-hover:rotate-12 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
                Edit Profile
                <span class="ml-auto text-xs opacity-0 group-hover:opacity-100 transition-opacity duration-200">→</span>
              </button>
              <button id="changePasswordBtn" class="quick-action-btn-enhanced group">
                <svg class="w-4 h-4 inline mr-2 group-hover:scale-110 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7 7m7-7a6 6 0 00-7-7m-7 7a6 6 0 007 7m7-7H3m3 3h.01M9 6h.01M9 12h.01M9 18h.01"></path>
                </svg>
                Change Password
                <span class="ml-auto text-xs opacity-0 group-hover:opacity-100 transition-opacity duration-200">→</span>
              </button>
              <button id="securitySettingsBtn" class="quick-action-btn-enhanced group">
                <svg class="w-4 h-4 inline mr-2 group-hover:rotate-12 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
                Security Settings
                <span class="ml-auto text-xs opacity-0 group-hover:opacity-100 transition-opacity duration-200">→</span>
              </button>
            </div>
          </div>
          
          <!-- System Status -->
          <div class="profile-card p-6">
            <h3 class="text-lg font-bold text-black mb-4 flex items-center">
              <div class="icon-container-small bg-gradient-to-br from-green-600 to-emerald-700 mr-3">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              System Status
            </h3>
            <div class="space-y-3">
              <div class="status-item-enhanced">
                <span class="text-sm text-gray-600">Last Login</span>
                <span class="text-xs text-black font-semibold">{userProfile.lastLogin}</span>
              </div>
              <div class="status-item-enhanced">
                <span class="text-sm text-gray-600">Session Status</span>
                <div class="flex items-center">
                  <div class="w-2 h-2 bg-green-500 rounded-full mr-2 animate-pulse"></div>
                  <span class="text-xs text-green-600 font-semibold">Active</span>
                </div>
              </div>
              <div class="status-item-enhanced">
                <span class="text-sm text-gray-600">Access Level</span>
                <span class="text-xs text-black font-bold">Full System</span>
              </div>
            </div>
          </div>
        </div>
        
        <!-- Right Column: Detailed Information -->
        <div class="lg:col-span-2 space-y-6">
          
          <!-- System Statistics -->
          <div class="profile-card p-6">
            <h3 class="text-lg font-bold text-black mb-4 flex items-center">
              <div class="icon-container bg-gradient-to-br from-black to-gray-800 mr-3">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              System Statistics
            </h3>
            <div class="grid grid-cols-2 md:grid-cols-3 gap-4">
              <div class="stat-card">
                <div class="text-center">
                  <div class="text-2xl font-bold text-black">{userProfile.systemStats.totalUsers}</div>
                  <div class="text-xs text-gray-600">Total Users</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="text-center">
                  <div class="text-2xl font-bold text-black">{userProfile.systemStats.activeSessions}</div>
                  <div class="text-xs text-gray-600">Active Sessions</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="text-center">
                  <div class="text-2xl font-bold text-black">{userProfile.systemStats.systemUptime}</div>
                  <div class="text-xs text-gray-600">System Uptime</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="text-center">
                  <div class="text-2xl font-bold text-black">{userProfile.systemStats.securityScore}%</div>
                  <div class="text-xs text-gray-600">Security Score</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="text-center">
                  <div class="text-2xl font-bold text-black">{userProfile.systemStats.performanceScore}%</div>
                  <div class="text-xs text-gray-600">Performance</div>
                </div>
              </div>
              <div class="stat-card">
                <div class="text-center">
                  <div class="text-lg font-bold text-black">{userProfile.systemStats.lastBackup}</div>
                  <div class="text-xs text-gray-600">Last Backup</div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Permissions & Access -->
          <div class="profile-card p-6">
            <h3 class="text-lg font-bold text-black mb-4 flex items-center">
              <div class="icon-container bg-gradient-to-br from-black to-gray-800 mr-3">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              Permissions & Access Control
            </h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              {userProfile.permissions.map((permission) => (
                <div class="permission-item">
                                  <div class="icon-container bg-gradient-to-br from-gray-100 to-gray-200 mr-3">
                  <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                  <span class="text-sm text-black font-semibold">{permission}</span>
                </div>
              ))}
            </div>
          </div>
          
          <!-- Recent Activity -->
          <div class="profile-card p-6">
            <div class="flex items-center justify-between mb-4">
              <h3 class="text-lg font-bold text-black flex items-center">
                <div class="icon-container bg-gradient-to-br from-black to-gray-800 mr-3">
                  <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                </div>
                Recent Activity
              </h3>
              <button class="text-sm text-black hover:text-blue-600 transition-colors font-semibold">View All</button>
            </div>
            <div class="space-y-3">
              {userProfile.recentActivity.map((activity) => (
                <div class="activity-item">
                  <div class="flex items-center">
                    <div class="icon-container bg-gradient-to-br from-gray-100 to-gray-200 mr-3">
                                              {activity.icon === 'backup' && (
                          <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
                          </svg>
                        )}
                        {activity.icon === 'user-add' && (
                          <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"></path>
                          </svg>
                        )}
                        {activity.icon === 'security' && (
                          <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                          </svg>
                        )}
                        {activity.icon === 'health' && (
                          <svg class="w-5 h-5 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
                          </svg>
                        )}
                    </div>
                    <div>
                      <p class="text-sm text-black font-semibold">{activity.action}</p>
                      <p class="text-xs text-gray-600">{activity.ip} • {activity.location}</p>
                    </div>
                  </div>
                  <div class="text-right">
                    <div class="status-success mb-1">{activity.status}</div>
                    <p class="text-xs text-black font-medium">{activity.timestamp}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          <!-- Security & Privacy -->
          <div class="profile-card p-6">
            <h3 class="text-lg font-bold text-black mb-4 flex items-center">
              <div class="icon-container bg-gradient-to-br from-black to-gray-800 mr-3">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
              </div>
              Security & Privacy Settings
            </h3>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div class="p-4 bg-gradient-to-br from-gray-50 to-white rounded-xl border border-gray-200 hover:border-black/30 transition-all duration-300 security-card">
                <div class="flex items-center justify-between mb-3">
                  <span class="text-sm font-semibold text-black">Two-Factor Authentication</span>
                  <div class="security-toggle active">
                    <div class="toggle-slider"></div>
                  </div>
                </div>
                <p class="text-xs text-gray-600">Enhanced security with 2FA enabled</p>
              </div>
              
              <div class="p-4 bg-gradient-to-br from-gray-50 to-white rounded-xl border border-gray-200 hover:border-black/30 transition-all duration-300 security-card">
                <div class="flex items-center justify-between mb-3">
                  <span class="text-sm font-semibold text-black">Session Timeout</span>
                  <span class="text-xs text-black font-bold">30 minutes</span>
                </div>
                <p class="text-xs text-gray-600">Automatic logout for security</p>
              </div>
              
              <div class="p-4 bg-gradient-to-br from-gray-50 to-white rounded-xl border border-gray-200 hover:border-black/30 transition-all duration-300 security-card">
                <div class="flex items-center justify-between mb-3">
                  <span class="text-sm font-semibold text-black">Login Notifications</span>
                  <div class="security-toggle active">
                    <div class="toggle-slider"></div>
                  </div>
                </div>
                <p class="text-xs text-gray-600">Email alerts for new logins</p>
              </div>
              
              <div class="p-4 bg-gradient-to-br from-gray-50 to-white rounded-xl border border-gray-200 hover:border-black/30 transition-all duration-300 security-card">
                <div class="flex items-center justify-between mb-3">
                  <span class="text-sm font-semibold text-black">Password Policy</span>
                  <span class="text-xs text-black font-bold">Strong</span>
                </div>
                <p class="text-xs text-gray-600">Complex password requirements</p>
              </div>
            </div>
          </div>
          
          <!-- Account Actions -->
          <div class="profile-card p-6">
            <h3 class="text-lg font-bold text-black mb-4 flex items-center">
              <div class="icon-container bg-gradient-to-br from-black to-gray-800 mr-3">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                </svg>
              </div>
              Account Actions
            </h3>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
              <button class="btn-secondary text-sm">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path>
                </svg>
                Export Data
              </button>
              <button class="btn-secondary text-sm">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                Activity Log
              </button>
              <button class="btn-secondary text-sm">
                <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
                Delete Account
              </button>
            </div>
          </div>
        </div>
      </div>
    </main>

    <!-- Profile Picture Edit Modal -->
    <div id="profilePictureModal" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden">
      <div class="flex items-center justify-center min-h-screen p-4">
        <div class="bg-white rounded-3xl shadow-2xl max-w-lg w-full mx-4 transform transition-all duration-300 scale-95 opacity-0 border border-gray-100" id="modalContent">
          <!-- Modal Header -->
          <div class="flex items-center justify-between p-6 border-b border-gray-200 bg-gradient-to-r from-gray-50 to-white rounded-t-3xl">
            <div class="flex items-center gap-3">
              <div class="w-12 h-12 bg-gradient-to-br from-gray-600 to-gray-800 rounded-2xl flex items-center justify-center shadow-lg">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
              </div>
              <div>
                <h3 class="text-2xl font-bold text-gray-800">Edit Profile Picture</h3>
                <p class="text-sm text-gray-600">Update your profile picture</p>
              </div>
            </div>
            <button id="closeProfileModal" class="w-10 h-10 bg-gray-100 hover:bg-gray-200 rounded-full flex items-center justify-center text-gray-500 hover:text-gray-700 transition-all duration-200">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>

          <!-- Modal Body -->
          <div class="p-6">
            <!-- Current Profile Picture -->
            <div class="text-center mb-6">
              <div class="flex items-center justify-center mb-2">
                <p class="text-sm text-gray-600">Current Profile Picture</p>
                <button id="refreshCurrentPic" class="ml-2 p-1 text-gray-500 hover:text-gray-700 transition-colors" title="Refresh current profile picture">
                  <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.001 0 01-15.357-2m15.357 2H15"></path>
                  </svg>
                </button>
              </div>
              <div class="w-24 h-24 rounded-2xl overflow-hidden profile-picture-border shadow-lg mx-auto mb-4">
                <img 
                  id="currentProfilePic"
                  src={userProfile.avatar}
                  alt="Current Profile"
                  class="w-full h-full object-cover"
                  crossorigin="anonymous"
                />
              </div>
            </div>

            <!-- Upload Section -->
            <div class="space-y-4">
              <!-- Drag & Drop Zone -->
              <div id="dropZone" class="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-black/50 transition-colors duration-300 cursor-pointer bg-gray-50 hover:bg-gray-100">
                <div class="space-y-3">
                  <svg class="w-12 h-12 text-gray-400 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                  </svg>
                  <div>
                    <p class="text-lg font-medium text-black">Drop your image here</p>
                    <p class="text-sm text-gray-500">or click to browse</p>
                  </div>
                  <p class="text-xs text-gray-400">PNG, JPG, GIF up to 5MB</p>
                </div>
              </div>

              <!-- File Input -->
              <input type="file" id="profilePictureInput" accept="image/*" class="hidden" />

              <!-- Preview Section -->
              <div id="imagePreview" class="hidden">
                <div class="text-center space-y-3">
                  <div class="w-32 h-32 rounded-2xl overflow-hidden profile-picture-border shadow-lg mx-auto">
                    <img id="previewImage" src="" alt="Preview" class="w-full h-full object-cover" crossorigin="anonymous" />
                  </div>
                  <p class="text-sm text-gray-600">Preview</p>
                </div>
              </div>

              <!-- Action Buttons -->
              <div class="flex space-x-3 pt-4">
                <button id="saveProfilePicture" class="flex-1 btn-primary">
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Save Changes
                </button>
                <button id="cancelProfilePicture" class="flex-1 btn-secondary">
                  Cancel
                </button>
              </div>
              
              <!-- Reset Option -->
              <div class="text-center pt-2">
                <button id="resetProfilePicture" class="text-sm text-gray-500 hover:text-gray-700 transition-colors duration-200 underline">
                  Reset to Default Picture
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Enhanced interactions
      document.addEventListener('DOMContentLoaded', function() {
        document.querySelectorAll('.profile-card').forEach(card => {
          card.addEventListener('mouseenter', function() {
            this.style.transform = 'translateY(-8px) scale(1.02)';
          });
          
          card.addEventListener('mouseleave', function() {
            this.style.transform = 'translateY(0) scale(1)';
          });
        });
        
        // Enhanced buttons
        document.querySelectorAll('button').forEach(button => {
          button.addEventListener('mouseenter', function() {
            this.style.transform = 'scale(1.05)';
          });
          
          button.addEventListener('mouseleave', function() {
            this.style.transform = 'scale(1)';
          });
        });
        
        // Security toggle functionality
        document.querySelectorAll('.security-toggle').forEach(toggle => {
          toggle.addEventListener('click', function() {
            this.classList.toggle('active');
          });
        });
        
        console.log('My Profile module enhanced with advanced interactions and black accent theme!');
        
        // Profile Picture Editing Functionality
        const profilePictureContainer = document.getElementById('profilePictureContainer');
        const profilePictureModal = document.getElementById('profilePictureModal');
        const modalContent = document.getElementById('modalContent');
        const closeProfileModal = document.getElementById('closeProfileModal');
        const dropZone = document.getElementById('dropZone');
        const profilePictureInput = document.getElementById('profilePictureInput');
        const imagePreview = document.getElementById('imagePreview');
        const previewImage = document.getElementById('previewImage');
        const currentProfilePic = document.getElementById('currentProfilePic');
        const saveProfilePicture = document.getElementById('saveProfilePicture');
        const cancelProfilePicture = document.getElementById('cancelProfilePicture');
        
        let selectedFile = null;
        
        // Function to sync modal's current profile picture with main display
        function syncModalCurrentProfilePicture() {
          const currentProfilePic = document.getElementById('currentProfilePic');
          const mainProfilePic = document.getElementById('mainProfilePicture');
          
          if (currentProfilePic && mainProfilePic) {
            // Get the current profile picture from the main display
            let currentSrc = mainProfilePic.src;
            
            // If main profile picture has a fallback div, get the actual image source
            if (mainProfilePic.style.display === 'none') {
              const fallbackDiv = mainProfilePic.nextElementSibling;
              if (fallbackDiv && fallbackDiv.querySelector('img')) {
                currentSrc = fallbackDiv.querySelector('img').src;
              }
            }
            
            // Update the modal's current profile picture
            currentProfilePic.src = currentSrc;
            console.log('🔄 Modal current profile picture synced:', currentSrc);
          }
        }
        
        // Open modal when profile picture is clicked
        profilePictureContainer.addEventListener('click', () => {
          // Always sync the modal with the current main profile picture BEFORE opening
          syncModalCurrentProfilePicture();
          
          // Now open the modal
          profilePictureModal.classList.remove('hidden');
          setTimeout(() => {
            modalContent.classList.remove('scale-95', 'opacity-0');
            modalContent.classList.add('scale-100', 'opacity-100');
          }, 10);
        });
        
        // Close modal
        const closeModal = () => {
          modalContent.classList.add('scale-95', 'opacity-0');
          modalContent.classList.remove('scale-100', 'opacity-100');
          setTimeout(() => {
            profilePictureModal.classList.add('hidden');
            // Reset preview
            imagePreview.classList.add('hidden');
            selectedFile = null;
          }, 300);
        };
        
        closeProfileModal.addEventListener('click', closeModal);
        cancelProfilePicture.addEventListener('click', closeModal);
        
        // Close modal when clicking outside
        profilePictureModal.addEventListener('click', (e) => {
          if (e.target === profilePictureModal) {
            closeModal();
          }
        });
        
        // File input change
        profilePictureInput.addEventListener('change', (e) => {
          const file = e.target.files[0];
          if (file) {
            handleFile(file);
          }
        });
        
        // Drag and drop functionality
        dropZone.addEventListener('click', () => {
          profilePictureInput.click();
        });
        
        dropZone.addEventListener('dragover', (e) => {
          e.preventDefault();
          dropZone.classList.add('border-black/50', 'bg-gray-100');
        });
        
        dropZone.addEventListener('dragleave', (e) => {
          e.preventDefault();
          dropZone.classList.remove('border-black/50', 'bg-gray-100');
        });
        
        dropZone.addEventListener('drop', (e) => {
          e.preventDefault();
          dropZone.classList.remove('border-black/50', 'bg-gray-100');
          
          const files = e.dataTransfer.files;
          if (files.length > 0) {
            const file = files[0];
            if (file.type.startsWith('image/')) {
              handleFile(file);
            } else {
              alert('Please select an image file.');
            }
          }
        });
        
        // Handle selected file
        function handleFile(file) {
          // Validate file size (5MB limit)
          if (file.size > 5 * 1024 * 1024) {
            alert('File size must be less than 5MB.');
            return;
          }
          
          selectedFile = file;
          
          // Create preview
          const reader = new FileReader();
          reader.onload = (e) => {
            previewImage.src = e.target.result;
            imagePreview.classList.remove('hidden');
            
            // Don't update the current profile pic in modal - keep it showing the actual current picture
            // currentProfilePic.src = e.target.result; // REMOVED - this was causing the inconsistency
          };
          reader.readAsDataURL(file);
        }
        
        // Save profile picture
        saveProfilePicture.addEventListener('click', async () => {
          if (!selectedFile) {
            alert('Please select an image first.');
            return;
          }
          
          try {
            // Show loading state
            saveProfilePicture.disabled = true;
            saveProfilePicture.innerHTML = `
              <svg class="w-4 h-4 inline mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
              </svg>
              Uploading...
            `;
            
            // Create FormData for file upload
            const formData = new FormData();
            formData.append('profilePicture', selectedFile);
            formData.append('userId', 'SA-001'); // You can make this dynamic
            
            // Upload to server
            console.log('Uploading profile picture to backend...');
            const response = await fetch('http://localhost:3000/api/profile/upload-picture', {
              method: 'POST',
              body: formData
            });
            
            console.log('Response status:', response.status);
            console.log('Response ok:', response.ok);
            
            if (!response.ok) {
              if (response.status === 404) {
                throw new Error('Profile picture upload service not available. Please contact your administrator.');
              }
              if (response.status === 0) {
                throw new Error('Cannot connect to server. Please make sure the backend server is running on port 3000.');
              }
              throw new Error(`Upload failed: ${response.status} ${response.statusText}`);
            }
            
            const result = await response.json();
            console.log('Upload result:', result);
            
            if (result.success) {
              console.log('Upload successful, updating UI with server URL:', result.profilePictureUrl);
              
              // Update the main profile picture with the SERVER URL (not data URL)
              const mainProfilePic = profilePictureContainer.querySelector('img');
              if (mainProfilePic) {
                mainProfilePic.src = result.profilePictureUrl;
                console.log('✅ Main profile picture updated with server URL');
              }
              
              // Update the fallback div if it exists
              const fallbackDiv = profilePictureContainer.querySelector('div[style*="display: none"]');
              if (fallbackDiv) {
                fallbackDiv.style.display = 'none';
                mainProfilePic.style.display = 'block';
              }
              
              // Update the current profile pic in modal
              if (currentProfilePic) {
                currentProfilePic.src = result.profilePictureUrl;
              }
              
              // Store the SERVER URL in localStorage for persistence
              localStorage.setItem('profilePictureUrl', result.profilePictureUrl);
              console.log('💾 Server URL stored in localStorage:', result.profilePictureUrl);
              
              // Dispatch custom event to notify other components
              const event = new CustomEvent('profilePictureUpdated', {
                detail: { profilePictureUrl: result.profilePictureUrl }
              });
              window.dispatchEvent(event);
              
              console.log('📡 Profile picture update event dispatched!', {
                event: event,
                detail: event.detail,
                timestamp: new Date().toISOString()
              });
              
              // Force immediate update of all components
              console.log('🔄 Forcing immediate update of all components...');
              
              // Function to update all profile pictures
              const updateAllProfilePictures = (url) => {
                console.log('🔄 Updating all profile pictures with URL:', url);
                
                // Function to convert server URL to data URL to avoid CORS
                const convertToDataURL = async (serverUrl) => {
                  try {
                    console.log(`🔄 Converting server URL to data URL: ${serverUrl}`);
                    const response = await fetch(serverUrl, { mode: 'cors' });
                    if (response.ok) {
                      const blob = await response.blob();
                      const dataUrl = await new Promise((resolve) => {
                        const reader = new FileReader();
                        reader.onloadend = () => resolve(reader.result);
                        reader.readAsDataURL(blob);
                      });
                      console.log(`✅ Successfully converted to data URL`);
                      return dataUrl;
                    }
                  } catch (error) {
                    console.log(`⚠️ Failed to convert server URL to data URL:`, error);
                  }
                  return serverUrl; // Fallback to original URL
                };
                
                // Function to force update a profile picture element
                const forceUpdateProfilePic = async (element, elementName) => {
                  if (element) {
                    console.log(`🎯 Force updating ${elementName}:`, url);
                    
                    // Remove any existing error handlers that might interfere
                    element.onerror = null;
                    
                    // Try to convert server URL to data URL first
                    let finalUrl = url;
                    if (url.startsWith('http://localhost:3000')) {
                      finalUrl = await convertToDataURL(url);
                    }
                    
                    // Set the new source
                    element.src = finalUrl;
                    element.style.display = 'block';
                    
                    // Hide fallback div if it exists
                    const fallbackDiv = element.nextElementSibling;
                    if (fallbackDiv && fallbackDiv.tagName === 'DIV') {
                      fallbackDiv.style.display = 'none';
                    }
                    
                    // Visual feedback
                    element.style.transform = 'scale(1.1)';
                    setTimeout(() => {
                      element.style.transform = 'scale(1)';
                    }, 200);
                    
                    // Add error handler to fallback to localStorage if server fails
                    element.onerror = function() {
                      console.log(`⚠️ ${elementName} failed to load, trying localStorage fallback`);
                      const fallbackUrl = localStorage.getItem('profilePictureUrl');
                      if (fallbackUrl && fallbackUrl !== finalUrl) {
                        this.src = fallbackUrl;
                      }
                    };
                  }
                };
                
                // Update sidebar profile picture
                const sidebarProfilePic = document.querySelector('#sidebar-profile-picture');
                forceUpdateProfilePic(sidebarProfilePic, 'sidebar profile picture');
                
                // Update topbar profile pictures
                const topbarProfilePic = document.querySelector('#topbar-profile-picture');
                forceUpdateProfilePic(topbarProfilePic, 'topbar profile picture');
                
                const dropdownProfilePic = document.querySelector('#dropdown-profile-picture');
                forceUpdateProfilePic(dropdownProfilePic, 'dropdown profile picture');
                
                // Also try to find and update any other profile pictures by common selectors
                const allProfilePics = document.querySelectorAll('img[src*="unsplash"], img[src*="default"], img[alt*="System Administrator"], img[src*="profile-pictures"]');
                allProfilePics.forEach(async (img, index) => {
                  if (img.id !== 'mainProfilePicture' && img.id !== 'currentProfilePic') {
                    console.log(`🎯 Updating additional profile picture ${index + 1}:`, img.id || 'unknown');
                    await forceUpdateProfilePic(img, `additional profile picture ${index + 1}`);
                  }
                });
              };
              
              // Update all profile pictures immediately
              updateAllProfilePictures(result.profilePictureUrl);
              
              // Also try to update any other profile pictures that might exist
              const allProfilePics = document.querySelectorAll('img[src*="unsplash"], img[src*="default"], img[alt*="System Administrator"]');
              allProfilePics.forEach(img => {
                if (img.id !== 'mainProfilePicture' && img.id !== 'currentProfilePic') {
                  console.log('🎯 Updating additional profile picture:', img.id || 'unknown');
                  img.src = result.profilePictureUrl;
                }
              });
              
              // Debug: Check if profile pictures were actually updated
              setTimeout(() => {
                console.log('🔍 Debug: Checking profile picture updates...');
                const sidebarPic = document.querySelector('#sidebar-profile-picture');
                const topbarPic = document.querySelector('#topbar-profile-picture');
                const dropdownPic = document.querySelector('#dropdown-profile-picture');
                
                console.log('Sidebar profile pic src:', sidebarPic?.src);
                console.log('Topbar profile pic src:', topbarPic?.src);
                console.log('Dropdown profile pic src:', dropdownPic?.src);
                console.log('Expected URL:', result.profilePictureUrl);
                
                // Force another update if needed
                if (sidebarPic && sidebarPic.src !== result.profilePictureUrl) {
                  console.log('🔄 Forcing sidebar update again...');
                  sidebarPic.src = result.profilePictureUrl;
                }
                if (topbarPic && topbarPic.src !== result.profilePictureUrl) {
                  console.log('🔄 Forcing topbar update again...');
                  topbarPic.src = result.profilePictureUrl;
                }
                if (dropdownPic && dropdownPic.src !== result.profilePictureUrl) {
                  console.log('🔄 Forcing dropdown update again...');
                  dropdownPic.src = result.profilePictureUrl;
                }
              }, 500);
              
              // Additional sync attempts with increasing delays
              [1000, 2000, 3000].forEach(delay => {
                setTimeout(() => {
                  console.log(`🔄 Additional sync attempt after ${delay}ms...`);
                  updateAllProfilePictures(result.profilePictureUrl);
                }, delay);
              });
              
              // Show success message
              const successMessage = document.createElement('div');
              successMessage.className = 'fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
              successMessage.innerHTML = `
                <div class="flex items-center">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                  </svg>
                  Profile picture updated successfully!
                </div>
              `;
              document.body.appendChild(successMessage);
              
              setTimeout(() => {
                successMessage.remove();
              }, 3000);
              
              closeModal();
              
              // Use the global profile picture manager for cross-module synchronization
              if (window.profilePictureManager) {
                console.log('🌍 Using global profile picture manager for synchronization');
                window.profilePictureManager.setProfilePicture(result.profilePictureUrl);
              } else {
                console.log('⚠️ Global manager not available, using fallback methods');
                // Fallback: Force a page reload after a short delay to ensure all components are updated
                setTimeout(() => {
                  console.log('🔄 Reloading page to ensure consistency...');
                  window.location.reload();
                }, 1500);
              }
              
            } else {
              throw new Error(result.message || 'Upload failed');
            }
            
          } catch (error) {
            console.error('Upload error:', error);
            
            // Fallback: Use the preview image and store in localStorage
            if (selectedFile) {
              const reader = new FileReader();
              reader.onload = (e) => {
                const imageUrl = e.target.result;
                
                // Update the main profile picture
                const mainProfilePic = profilePictureContainer.querySelector('img');
                mainProfilePic.src = imageUrl;
                
                // Update the fallback div if it exists
                const fallbackDiv = profilePictureContainer.querySelector('div[style*="display: none"]');
                if (fallbackDiv) {
                  fallbackDiv.style.display = 'none';
                  mainProfilePic.style.display = 'block';
                }
                
                // Store in localStorage
                localStorage.setItem('profilePictureUrl', imageUrl);
                
                // Dispatch custom event to notify other components
                window.dispatchEvent(new CustomEvent('profilePictureUpdated', {
                  detail: { profilePictureUrl: imageUrl }
                }));
                
                // Show fallback success message
                const fallbackMessage = document.createElement('div');
                fallbackMessage.className = 'fixed top-4 right-4 bg-yellow-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
                fallbackMessage.innerHTML = `
                  <div class="flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                    </svg>
                    Profile picture updated (stored locally). Server upload failed.
                  </div>
                `;
                document.body.appendChild(fallbackMessage);
                
                setTimeout(() => {
                  fallbackMessage.remove();
                }, 5000);
                
                closeModal();
              };
              reader.readAsDataURL(selectedFile);
            } else {
              // Show error message if no file selected
              const errorMessage = document.createElement('div');
              errorMessage.className = 'fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50';
              errorMessage.innerHTML = `
                <div class="flex items-center">
                  <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                  </svg>
                  Failed to update profile picture. Please try again.
                </div>
              `;
              document.body.appendChild(errorMessage);
              
              setTimeout(() => {
                errorMessage.remove();
              }, 3000);
            }
            
          } finally {
            // Reset button state
            saveProfilePicture.disabled = false;
            saveProfilePicture.innerHTML = `
              <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              Save Changes
            `;
          }
        });
        
        console.log('Profile picture editing functionality loaded!');
        
        // Add event listener for sync button
        const refreshProfileSyncBtn = document.getElementById('refreshProfileSync');
        const testProfileSyncBtn = document.getElementById('testProfileSync');
        
        if (refreshProfileSyncBtn) {
          refreshProfileSyncBtn.addEventListener('click', function() {
            console.log('🔄 Manual profile sync requested');
            const currentProfileUrl = localStorage.getItem('profilePictureUrl');
            if (currentProfileUrl) {
              console.log('📡 Dispatching profile picture sync event:', currentProfileUrl);
              
              // Force immediate update of all components
              const updateAllProfilePictures = async (url) => {
                console.log('🔄 Force updating all profile pictures with URL:', url);
                
                // Function to convert server URL to data URL to avoid CORS
                const convertToDataURL = async (serverUrl) => {
                  try {
                    console.log(`🔄 Converting server URL to data URL for force sync: ${serverUrl}`);
                    const response = await fetch(serverUrl, { mode: 'cors' });
                    if (response.ok) {
                      const blob = await response.blob();
                      const dataUrl = await new Promise((resolve) => {
                        const reader = new FileReader();
                        reader.onloadend = () => resolve(reader.result);
                        reader.readAsDataURL(blob);
                      });
                      console.log(`✅ Successfully converted to data URL for force sync`);
                      return dataUrl;
                    }
                  } catch (error) {
                    console.log(`⚠️ Failed to convert server URL to data URL for force sync:`, error);
                  }
                  return serverUrl; // Fallback to original URL
                };
                
                // Try to convert server URL to data URL first
                let finalUrl = url;
                if (url.startsWith('http://localhost:3000')) {
                  finalUrl = await convertToDataURL(url);
                }
                
                // Update sidebar profile picture
                const sidebarProfilePic = document.querySelector('#sidebar-profile-picture');
                if (sidebarProfilePic) {
                  console.log('🎯 Force updating sidebar profile picture:', finalUrl);
                  sidebarProfilePic.src = finalUrl;
                  sidebarProfilePic.style.display = 'block';
                  
                  // Hide fallback div if it exists
                  const fallbackDiv = sidebarProfilePic.nextElementSibling;
                  if (fallbackDiv) {
                    fallbackDiv.style.display = 'none';
                  }
                  
                  // Visual feedback
                  sidebarProfilePic.style.transform = 'scale(1.1)';
                  setTimeout(() => {
                    sidebarProfilePic.style.transform = 'scale(1)';
                  }, 200);
                }
                
                // Update topbar profile pictures
                const topbarProfilePic = document.querySelector('#topbar-profile-picture');
                if (topbarProfilePic) {
                  console.log('🎯 Force updating topbar profile picture:', finalUrl);
                  topbarProfilePic.src = finalUrl;
                  topbarProfilePic.style.display = 'block';
                  
                  // Hide fallback div if it exists
                  const fallbackDiv = topbarProfilePic.nextElementSibling;
                  if (fallbackDiv) {
                    fallbackDiv.style.display = 'none';
                  }
                  
                  // Visual feedback
                  topbarProfilePic.style.transform = 'scale(1.1)';
                  setTimeout(() => {
                    topbarProfilePic.style.transform = 'scale(1)';
                  }, 200);
                }
                
                const dropdownProfilePic = document.querySelector('#dropdown-profile-picture');
                if (dropdownProfilePic) {
                  console.log('🎯 Force updating dropdown profile picture:', finalUrl);
                  dropdownProfilePic.src = finalUrl;
                  dropdownProfilePic.style.display = 'block';
                  
                  // Hide fallback div if it exists
                  const fallbackDiv = dropdownProfilePic.nextElementSibling;
                  if (fallbackDiv) {
                    fallbackDiv.style.display = 'none';
                  }
                  
                  // Visual feedback
                  dropdownProfilePic.style.transform = 'scale(1.1)';
                  setTimeout(() => {
                    dropdownProfilePic.style.transform = 'scale(1)';
                  }, 200);
                }
              };
              
              // Update all profile pictures immediately
              updateAllProfilePictures(currentProfileUrl);
              
              // Also dispatch the event
              window.dispatchEvent(new CustomEvent('profilePictureUpdated', {
                detail: { profilePictureUrl: currentProfileUrl }
              }));
              
              // Show feedback
              this.innerHTML = `
                <svg class="w-4 h-4 inline mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Syncing...
              `;
              this.disabled = true;
              
              setTimeout(() => {
                this.innerHTML = `
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                  </svg>
                  Force Sync
                `;
                this.disabled = false;
              }, 2000);
            } else {
              console.log('⚠️ No profile picture URL found in localStorage');
            }
          });
        }
        
        // Add event listener for test sync button
        if (testProfileSyncBtn) {
          testProfileSyncBtn.addEventListener('click', function() {
            console.log('🧪 Testing profile picture synchronization...');
            
            // Get current profile picture URL
            const currentProfileUrl = localStorage.getItem('profilePictureUrl');
            if (currentProfileUrl) {
              console.log('🧪 Current profile URL in localStorage:', currentProfileUrl);
              
              // Test updating all profile pictures
              const testUpdateAllProfilePictures = async (url) => {
                console.log('🧪 Test updating all profile pictures with URL:', url);
                
                // Function to convert server URL to data URL to avoid CORS
                const convertToDataURL = async (serverUrl) => {
                  try {
                    console.log(`🧪 Converting server URL to data URL for test: ${serverUrl}`);
                    const response = await fetch(serverUrl, { mode: 'cors' });
                    if (response.ok) {
                      const blob = await response.blob();
                      const dataUrl = await new Promise((resolve) => {
                        const reader = new FileReader();
                        reader.onloadend = () => resolve(reader.result);
                        reader.readAsDataURL(blob);
                      });
                      console.log(`✅ Successfully converted to data URL for test`);
                      return dataUrl;
                    }
                  } catch (error) {
                    console.log(`⚠️ Failed to convert server URL to data URL for test:`, error);
                  }
                  return serverUrl; // Fallback to original URL
                };
                
                const sidebarProfilePic = document.querySelector('#sidebar-profile-picture');
                const topbarProfilePic = document.querySelector('#topbar-profile-picture');
                const dropdownProfilePic = document.querySelector('#dropdown-profile-picture');
                
                // Try to convert server URL to data URL first
                let finalUrl = url;
                if (url.startsWith('http://localhost:3000')) {
                  finalUrl = await convertToDataURL(url);
                }
                
                [sidebarProfilePic, topbarProfilePic, dropdownProfilePic].forEach((pic, index) => {
                  if (pic) {
                    const names = ['sidebar', 'topbar', 'dropdown'];
                    console.log(`🧪 Test updating ${names[index]} profile picture:`, finalUrl);
                    pic.src = finalUrl;
                    pic.style.display = 'block';
                    
                    // Hide fallback div if it exists
                    const fallbackDiv = pic.nextElementSibling;
                    if (fallbackDiv && fallbackDiv.tagName === 'DIV') {
                      fallbackDiv.style.display = 'none';
                    }
                    
                    // Visual feedback
                    pic.style.transform = 'scale(1.1)';
                    setTimeout(() => {
                      pic.style.transform = 'scale(1)';
                    }, 200);
                  }
                });
              };
              
              testUpdateAllProfilePictures(currentProfileUrl);
              
              // Show feedback
              this.innerHTML = `
                <svg class="w-4 h-4 inline mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                Testing...
              `;
              this.disabled = true;
              
              setTimeout(() => {
                this.innerHTML = `
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                  </svg>
                  Test Sync
                `;
                this.disabled = false;
              }, 2000);
              
            } else {
              console.log('⚠️ No profile picture URL found in localStorage for testing');
            }
          });
        }
        
        // Load profile picture from server or localStorage
        async function loadProfilePicture() {
          try {
            // First try to get from server
            console.log('Fetching profile picture from server...');
            const response = await fetch('http://localhost:3000/api/profile/picture/SA-001');
            
            if (response.ok) {
              const result = await response.json();
              if (result.success && result.profilePictureUrl) {
                console.log('Profile picture loaded from server:', result.profilePictureUrl);
                
                // Update the main profile picture
                const mainProfilePic = profilePictureContainer.querySelector('img');
                if (mainProfilePic) {
                  mainProfilePic.src = result.profilePictureUrl;
                  // Hide fallback div if it exists
                  const fallbackDiv = mainProfilePic.nextElementSibling;
                  if (fallbackDiv) {
                    fallbackDiv.style.display = 'none';
                    mainProfilePic.style.display = 'block';
                  }
                }
                
                // Store in localStorage for future use
                localStorage.setItem('profilePictureUrl', result.profilePictureUrl);
                
                // Dispatch event to update other components
                window.dispatchEvent(new CustomEvent('profilePictureUpdated', {
                  detail: { profilePictureUrl: result.profilePictureUrl }
                }));
                
                return;
              }
            }
          } catch (error) {
            console.log('Server fetch failed, trying localStorage:', error);
          }
          
          // Fallback to localStorage if server fails
          const storedUrl = localStorage.getItem('profilePictureUrl');
          console.log('Loading profile picture from localStorage:', storedUrl);
          if (storedUrl) {
            const mainProfilePic = profilePictureContainer.querySelector('img');
            if (mainProfilePic) {
              console.log('Setting profile picture src to:', storedUrl);
              mainProfilePic.src = storedUrl;
              // Hide fallback div if it exists
              const fallbackDiv = mainProfilePic.nextElementSibling;
              if (fallbackDiv) {
                fallbackDiv.style.display = 'none';
                mainProfilePic.style.display = 'block';
              }
            }
          }
        }
        
        // Load profile picture on page load
        loadProfilePicture();
        
        // Also dispatch the current profile picture to other components on page load
        setTimeout(() => {
          const currentProfileUrl = localStorage.getItem('profilePictureUrl');
          if (currentProfileUrl) {
            console.log('🔄 Dispatching current profile picture to other components on page load:', currentProfileUrl);
            
            // Dispatch the event
            window.dispatchEvent(new CustomEvent('profilePictureUpdated', {
              detail: { profilePictureUrl: currentProfileUrl }
            }));
            
            // Also force update all profile pictures directly
            const forceUpdateAllProfilePictures = async (url) => {
              console.log('🔄 Force updating all profile pictures on page load with URL:', url);
              
              // Function to convert server URL to data URL to avoid CORS
              const convertToDataURL = async (serverUrl) => {
                try {
                  console.log(`🔄 Converting server URL to data URL on page load: ${serverUrl}`);
                  const response = await fetch(serverUrl, { mode: 'cors' });
                  if (response.ok) {
                    const blob = await response.blob();
                    const dataUrl = await new Promise((resolve) => {
                      const reader = new FileReader();
                      reader.onloadend = () => resolve(reader.result);
                      reader.readAsDataURL(blob);
                    });
                    console.log(`✅ Successfully converted to data URL on page load`);
                    return dataUrl;
                  }
                } catch (error) {
                  console.log(`⚠️ Failed to convert server URL to data URL on page load:`, error);
                }
                return serverUrl; // Fallback to original URL
              };
              
              const sidebarProfilePic = document.querySelector('#sidebar-profile-picture');
              const topbarProfilePic = document.querySelector('#topbar-profile-picture');
              const dropdownProfilePic = document.querySelector('#dropdown-profile-picture');
              
              // Try to convert server URL to data URL first
              let finalUrl = url;
              if (url.startsWith('http://localhost:3000')) {
                finalUrl = await convertToDataURL(url);
              }
              
              [sidebarProfilePic, topbarProfilePic, dropdownProfilePic].forEach((pic, index) => {
                if (pic) {
                  const names = ['sidebar', 'topbar', 'dropdown'];
                  console.log(`🎯 Force updating ${names[index]} profile picture on page load:`, finalUrl);
                  pic.src = finalUrl;
                  pic.style.display = 'block';
                  
                  // Hide fallback div if it exists
                  const fallbackDiv = pic.nextElementSibling;
                  if (fallbackDiv && fallbackDiv.tagName === 'DIV') {
                    fallbackDiv.style.display = 'none';
                  }
                }
              });
            };
            
            forceUpdateAllProfilePictures(currentProfileUrl);
          }
        }, 500);
        
        // Handle profile picture loading errors
        const mainProfilePicture = document.getElementById('mainProfilePicture');
        if (mainProfilePicture) {
          mainProfilePicture.addEventListener('error', function() {
            console.log('Profile picture failed to load, trying localStorage fallback...');
            // Try to load from localStorage if the main image fails
            const storedUrl = localStorage.getItem('profilePictureUrl');
            if (storedUrl) {
              console.log('Loading from localStorage:', storedUrl);
              this.src = storedUrl;
            } else {
              console.log('No localStorage fallback, showing default');
              // Show fallback div
              this.style.display = 'none';
              const fallbackDiv = this.nextElementSibling;
              if (fallbackDiv) {
                fallbackDiv.style.display = 'flex';
              }
            }
          });
          
          // Also add load event to log successful loads
          mainProfilePicture.addEventListener('load', function() {
            console.log('Profile picture loaded successfully from:', this.src);
          });
        }
        
        // Add event listener for Global Sync button
        const globalSyncBtn = document.getElementById('globalSync');
        if (globalSyncBtn) {
          globalSyncBtn.addEventListener('click', function() {
            console.log('🌍 Global Sync button clicked');
            
            if (window.profilePictureManager) {
              console.log('✅ Global Profile Picture Manager found, forcing refresh...');
              window.profilePictureManager.forceRefresh();
              
              // Show feedback
              this.innerHTML = `
                <svg class="w-4 h-4 inline mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.001 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                Syncing...
              `;
              this.disabled = true;
              
              setTimeout(() => {
                this.innerHTML = `
                  <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9"></path>
                  </svg>
                  Global Sync
                `;
                this.disabled = true;
              }, 2000);
              
            } else {
              console.log('❌ Global Profile Picture Manager not found');
              alert('Global Profile Picture Manager not available. Please refresh the page.');
            }
          });
        }
        
        // Add event listener for refresh current picture button in modal
        const refreshCurrentPicBtn = document.getElementById('refreshCurrentPic');
        if (refreshCurrentPicBtn) {
          refreshCurrentPicBtn.addEventListener('click', function() {
            console.log('🔄 Refresh current picture button clicked');
            syncModalCurrentProfilePicture();
            
            // Show visual feedback
            this.style.transform = 'rotate(180deg)';
            setTimeout(() => {
              this.style.transform = 'rotate(0deg)';
            }, 300);
          });
        }
        
        // Watch for profile picture changes and auto-sync modal if it's open
        const mainProfilePic = document.getElementById('mainProfilePicture');
        if (mainProfilePic) {
          const observer = new MutationObserver((mutations) => {
            mutations.forEach((mutation) => {
              if (mutation.type === 'attributes' && mutation.attributeName === 'src') {
                // Profile picture changed, sync modal if it's open
                if (!profilePictureModal.classList.contains('hidden')) {
                  console.log('🔄 Profile picture changed, syncing modal...');
                  syncModalCurrentProfilePicture();
                }
              }
            });
          });
          
          observer.observe(mainProfilePic, {
            attributes: true,
            attributeFilter: ['src']
          });
        }
      });
    </script>

    <!-- Edit Profile Modal -->
    <div id="editProfileModal" class="fixed inset-0 bg-black/60 backdrop-blur-md z-50 hidden flex items-center justify-center p-4">
      <div class="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 w-full max-w-3xl max-h-[95vh] overflow-hidden transform scale-95 opacity-0 transition-all duration-500 ease-out">
        <!-- Header with System Admin theme -->
        <div class="relative bg-gradient-to-r from-gray-900 via-black to-gray-800 px-8 py-6">
          <div class="absolute inset-0 bg-gradient-to-r from-gray-800/20 to-black/20"></div>
          <div class="relative flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <div class="w-12 h-12 bg-gradient-to-br from-black to-gray-800 rounded-2xl flex items-center justify-center shadow-lg">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                </svg>
              </div>
              <div>
                <h2 class="text-2xl font-bold text-white">Edit Profile</h2>
                <p class="text-gray-300 text-sm">Update your personal information and preferences</p>
              </div>
            </div>
            <button id="closeEditProfileModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
              <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Form Content -->
        <div class="p-8 bg-gradient-to-br from-gray-50 to-white">
          <form id="editProfileForm" class="space-y-8">
            <!-- Personal Information Section -->
            <div class="space-y-6">
              <div class="flex items-center space-x-3 mb-6">
                <div class="w-1 h-8 bg-gradient-to-b from-black to-gray-600 rounded-full"></div>
                <h3 class="text-lg font-bold text-gray-900">Personal Information</h3>
              </div>
              
              <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <!-- Full Name -->
                <div class="group">
                  <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-black transition-colors duration-200 flex items-center">
                    <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                    </svg>
                    Full Name
                  </label>
                  <div class="relative">
                    <input type="text" id="editFullName" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-black/20 focus:border-black transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" value="System Administrator" required>
                    <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-black/5 to-gray-500/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                  </div>
                </div>
                
                <!-- Email -->
                <div class="group">
                  <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-black transition-colors duration-200 flex items-center">
                    <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                    </svg>
                    Email Address
                  </label>
                  <div class="relative">
                    <input type="email" id="editEmail" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-black/20 focus:border-black transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" value="sysadmin@buildwatch.gov.ph" required>
                    <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-black/5 to-gray-500/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                  </div>
                </div>
                
                <!-- Phone -->
                <div class="group">
                  <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-black transition-colors duration-200 flex items-center">
                    <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                    </svg>
                    Phone Number
                  </label>
                  <div class="relative">
                    <input type="tel" id="editPhone" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-black/20 focus:border-black transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" value="+63 912 345 6789">
                    <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-black/5 to-gray-500/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                  </div>
                </div>
                
                
                <!-- Location -->
                <div class="group">
                  <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-black transition-colors duration-200 flex items-center">
                    <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    Location
                  </label>
                  <div class="relative">
                    <input type="text" id="editLocation" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-black/20 focus:border-black transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" value="Manila, Philippines">
                    <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-black/5 to-gray-500/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                  </div>
                </div>
                
                <!-- Birthday -->
                <div class="group">
                  <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-black transition-colors duration-200 flex items-center">
                    <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                    </svg>
                    Birthday
                  </label>
                  <div class="relative">
                    <input type="date" id="editBirthday" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-black/20 focus:border-black transition-all duration-300 text-gray-900 shadow-sm hover:shadow-md text-lg" value="1990-01-15">
                    <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-black/5 to-gray-500/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                  </div>
                </div>
                
                <!-- Timezone -->
                <div class="group">
                  <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-black transition-colors duration-200 flex items-center">
                    <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    Timezone
                  </label>
                  <div class="relative">
                    <select id="editTimezone" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-black/20 focus:border-black transition-all duration-300 text-gray-900 shadow-sm hover:shadow-md appearance-none cursor-pointer text-lg">
                      <option value="Asia/Manila" selected>Asia/Manila (UTC+8)</option>
                      <option value="UTC">UTC (UTC+0)</option>
                      <option value="America/New_York">America/New_York (UTC-5)</option>
                      <option value="Europe/London">Europe/London (UTC+0)</option>
                    </select>
                    <div class="absolute right-5 top-1/2 transform -translate-y-1/2 pointer-events-none">
                      <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                      </svg>
                    </div>
                    <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-black/5 to-gray-500/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Enhanced Action Buttons -->
            <div class="flex justify-end space-x-6 pt-8 border-t border-gray-200/60">
              <button type="button" id="cancelEditProfile" class="btn-secondary flex items-center space-x-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                <span>Cancel</span>
              </button>
              <button type="submit" class="btn-primary flex items-center space-x-3">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Save Changes</span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Change Password Modal -->
    <div id="changePasswordModal" class="fixed inset-0 bg-black/60 backdrop-blur-md z-50 hidden flex items-center justify-center p-4">
      <div class="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 w-full max-w-2xl max-h-[95vh] overflow-hidden transform scale-95 opacity-0 transition-all duration-500 ease-out">
        <!-- Header with System Admin theme -->
        <div class="relative bg-gradient-to-r from-gray-900 via-black to-gray-800 px-8 py-6">
          <div class="absolute inset-0 bg-gradient-to-r from-gray-800/20 to-black/20"></div>
          <div class="relative flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <div class="w-12 h-12 bg-gradient-to-br from-black to-gray-800 rounded-2xl flex items-center justify-center shadow-lg">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7 7m7-7a6 6 0 00-7-7m-7 7a6 6 0 007 7m7-7H3m3 3h.01M9 6h.01M9 12h.01M9 18h.01"></path>
                </svg>
              </div>
              <div>
                <h2 class="text-2xl font-bold text-white">Change Password</h2>
                <p class="text-gray-300 text-sm">Secure your account with a new password</p>
              </div>
            </div>
            <button id="closeChangePasswordModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
              <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Form Content -->
        <div class="p-10 bg-gradient-to-br from-gray-50 to-white">
          <form id="changePasswordForm" class="space-y-8">
            <!-- Current Password -->
            <div class="group">
              <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-black transition-colors duration-200 flex items-center">
                <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                </svg>
                Current Password
              </label>
              <div class="relative">
                <input type="password" id="currentPassword" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-black/20 focus:border-black transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your current password" required>
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-black/5 to-gray-500/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
            </div>
            
            <!-- New Password -->
            <div class="group">
              <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-black transition-colors duration-200 flex items-center">
                <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
                New Password
              </label>
              <div class="relative">
                <input type="password" id="newPassword" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-black/20 focus:border-black transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Enter your new password" required>
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-black/5 to-gray-500/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
              
              <!-- Enhanced Password Strength Indicator -->
              <div class="mt-6 p-5 bg-gradient-to-br from-gray-50 to-white rounded-2xl border border-gray-200 shadow-sm">
                <div class="flex items-center justify-between mb-4">
                  <span class="text-sm font-bold text-gray-800">Password Strength</span>
                  <span id="strengthText" class="text-sm font-bold text-red-500 px-3 py-1 bg-red-50 rounded-full border border-red-200">Weak</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-3 mb-5">
                  <div id="strengthBar" class="h-3 rounded-full transition-all duration-500 ease-out bg-red-500 w-0"></div>
                </div>
                <div class="grid grid-cols-2 gap-4 text-sm">
                  <div class="flex items-center space-x-3">
                    <div id="lengthCheck" class="w-3 h-3 bg-gray-300 rounded-full flex-shrink-0 transition-all duration-300"></div>
                    <span class="text-gray-600 font-medium">8+ characters</span>
                  </div>
                  <div class="flex items-center space-x-3">
                    <div id="uppercaseCheck" class="w-3 h-3 bg-gray-300 rounded-full flex-shrink-0 transition-all duration-300"></div>
                    <span class="text-gray-600 font-medium">Uppercase letter</span>
                  </div>
                  <div class="flex items-center space-x-3">
                    <div id="lowercaseCheck" class="w-3 h-3 bg-gray-300 rounded-full flex-shrink-0 transition-all duration-300"></div>
                    <span class="text-gray-600 font-medium">Lowercase letter</span>
                  </div>
                  <div class="flex items-center space-x-3">
                    <div id="numberCheck" class="w-3 h-3 bg-gray-300 rounded-full flex-shrink-0 transition-all duration-300"></div>
                    <span class="text-gray-600 font-medium">Number</span>
                  </div>
                </div>
              </div>
            </div>
            
            <!-- Confirm Password -->
            <div class="group">
              <label class="block text-sm font-bold text-gray-800 mb-4 group-focus-within:text-black transition-colors duration-200 flex items-center">
                <svg class="w-4 h-4 mr-2 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
                Confirm New Password
              </label>
              <div class="relative">
                <input type="password" id="confirmPassword" class="w-full px-5 py-5 bg-white border-2 border-gray-200 rounded-2xl focus:ring-4 focus:ring-black/20 focus:border-black transition-all duration-300 text-gray-900 placeholder-gray-400 shadow-sm hover:shadow-md text-lg" placeholder="Confirm your new password" required>
                <div class="absolute inset-0 rounded-2xl bg-gradient-to-r from-black/5 to-gray-500/5 opacity-0 group-focus-within:opacity-100 transition-opacity duration-300 pointer-events-none"></div>
              </div>
            </div>
            
            <!-- Enhanced Action Buttons -->
            <div class="flex justify-end space-x-6 pt-8 border-t border-gray-200/60">
              <button type="button" id="cancelChangePassword" class="btn-secondary">
                Cancel
              </button>
              <button type="submit" class="btn-primary flex items-center space-x-3">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Update Password</span>
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Security Settings Modal -->
    <div id="securitySettingsModal" class="fixed inset-0 bg-black/60 backdrop-blur-md z-50 hidden flex items-center justify-center p-4">
      <div class="bg-white/95 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 w-full max-w-4xl max-h-[95vh] overflow-hidden transform scale-95 opacity-0 transition-all duration-500 ease-out">
        <!-- Header with System Admin theme -->
        <div class="relative bg-gradient-to-r from-gray-900 via-black to-gray-800 px-8 py-6">
          <div class="absolute inset-0 bg-gradient-to-r from-gray-800/20 to-black/20"></div>
          <div class="relative flex items-center justify-between">
            <div class="flex items-center space-x-4">
              <div class="w-12 h-12 bg-gradient-to-br from-black to-gray-800 rounded-2xl flex items-center justify-center shadow-lg">
                <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                </svg>
              </div>
              <div>
                <h2 class="text-2xl font-bold text-white">Security Settings</h2>
                <p class="text-gray-300 text-sm">Manage your account security and privacy preferences</p>
              </div>
            </div>
            <button id="closeSecuritySettingsModal" class="w-10 h-10 bg-white/10 hover:bg-white/20 backdrop-blur-sm rounded-xl flex items-center justify-center text-white/80 hover:text-white transition-all duration-300 group">
              <svg class="w-5 h-5 group-hover:rotate-90 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Content with scrollable area -->
        <div class="overflow-y-auto max-h-[calc(95vh-120px)]">
          <div class="p-8 space-y-8">
            <!-- Two-Factor Authentication -->
            <div class="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200/50 shadow-sm hover:shadow-md transition-all duration-300">
              <div class="flex items-center justify-between mb-6">
                <div class="flex items-center space-x-4">
                  <div class="w-12 h-12 bg-gradient-to-br from-black to-gray-800 rounded-xl flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-xl font-bold text-gray-900">Two-Factor Authentication</h3>
                    <p class="text-sm text-gray-600">Add an extra layer of security to your account</p>
                  </div>
                </div>
                <label class="relative inline-flex items-center cursor-pointer group">
                  <input type="checkbox" id="twoFactorToggle" class="sr-only peer">
                  <div class="w-14 h-7 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-black/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-black peer-checked:to-gray-800 group-hover:shadow-lg transition-all duration-300"></div>
                </label>
              </div>
              <div id="twoFactorSetup" class="hidden space-y-6">
                <div class="bg-white rounded-xl p-6 border border-gray-200 shadow-sm">
                  <h4 class="font-bold text-gray-900 mb-4 flex items-center space-x-2">
                    <svg class="w-5 h-5 text-black" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span>Setup Instructions</span>
                  </h4>
                  <ol class="list-decimal list-inside space-y-3 text-sm text-gray-600">
                    <li>Download an authenticator app (Google Authenticator, Authy, etc.)</li>
                    <li>Scan the QR code below with your authenticator app</li>
                    <li>Enter the 6-digit code to verify setup</li>
                  </ol>
                  <div class="mt-6 text-center">
                    <div class="w-40 h-40 bg-gradient-to-br from-gray-100 to-gray-200 rounded-2xl mx-auto flex items-center justify-center shadow-inner">
                      <div class="text-center">
                        <svg class="w-12 h-12 text-gray-400 mx-auto mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z"></path>
                        </svg>
                        <span class="text-gray-500 text-sm">QR Code</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Login Notifications -->
            <div class="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200/50 shadow-sm hover:shadow-md transition-all duration-300">
              <div class="flex items-center justify-between">
                <div class="flex items-center space-x-4">
                  <div class="w-12 h-12 bg-gradient-to-br from-gray-700 to-black rounded-xl flex items-center justify-center">
                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5zM4.828 7l2.586 2.586a2 2 0 002.828 0L12 7H4.828zM4.828 17l2.586-2.586a2 2 0 012.828 0L12 17H4.828z"></path>
                    </svg>
                  </div>
                  <div>
                    <h3 class="text-xl font-bold text-gray-900">Login Notifications</h3>
                    <p class="text-sm text-gray-600">Get notified when someone logs into your account</p>
                  </div>
                </div>
                <label class="relative inline-flex items-center cursor-pointer group">
                  <input type="checkbox" id="loginNotificationsToggle" class="sr-only peer" checked>
                  <div class="w-14 h-7 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-black/20 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-6 after:w-6 after:transition-all peer-checked:bg-gradient-to-r peer-checked:from-black peer-checked:to-gray-800 group-hover:shadow-lg transition-all duration-300"></div>
                </label>
              </div>
            </div>

            <!-- Session Management -->
            <div class="bg-gradient-to-br from-gray-50 to-white rounded-2xl p-8 border border-gray-200/50 shadow-sm hover:shadow-md transition-all duration-300">
              <div class="flex items-center space-x-4 mb-6">
                <div class="w-12 h-12 bg-gradient-to-br from-gray-600 to-black rounded-xl flex items-center justify-center">
                  <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
                  </svg>
                </div>
                <div>
                  <h3 class="text-xl font-bold text-gray-900">Active Sessions</h3>
                  <p class="text-sm text-gray-600">Manage your active login sessions</p>
                </div>
              </div>
              <div class="space-y-4">
                <div class="flex items-center justify-between p-4 bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                  <div class="flex items-center space-x-4">
                    <div class="w-10 h-10 bg-gradient-to-br from-green-100 to-emerald-100 rounded-xl flex items-center justify-center">
                      <div class="w-4 h-4 bg-green-500 rounded-full animate-pulse"></div>
                    </div>
                    <div>
                      <p class="font-semibold text-gray-900">Current Session</p>
                      <p class="text-sm text-gray-600">Chrome on Windows • Manila, PH</p>
                    </div>

                  </div>
                  <span class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">Active</span>
                </div>
                <div class="flex items-center justify-between p-4 bg-white rounded-xl border border-gray-200 shadow-sm hover:shadow-md transition-all duration-200">
                  <div class="flex items-center space-x-4">
                    <div class="w-10 h-10 bg-gradient-to-br from-gray-100 to-gray-200 rounded-xl flex items-center justify-center">
                      <div class="w-4 h-4 bg-gray-400 rounded-full"></div>
                    </div>
                    <div>
                      <p class="font-semibold text-gray-900">Mobile App</p>
                      <p class="text-sm text-gray-600">iPhone • 2 hours ago</p>
                    </div>
                  </div>
                  <button class="px-4 py-2 text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg font-medium transition-all duration-200">End Session</button>
                </div>
              </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-end space-x-4 pt-8 border-t border-gray-200/60">
              <button id="cancelSecuritySettings" class="btn-secondary">
                Cancel
              </button>
              <button id="saveSecuritySettings" class="btn-primary flex items-center space-x-3">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Save Settings</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script>
      // Modal functionality
      function openModal(modalId) {
        console.log('🎯 Opening modal:', modalId);
        const modal = document.getElementById(modalId);
        console.log('Modal element found:', modal);
        if (modal) {
          modal.classList.remove('hidden');
          console.log('Modal hidden class removed');
          setTimeout(() => {
            // Look for the modal content div specifically - it's the first child div
            const modalContent = modal.querySelector('div:first-child');
            console.log('Modal content element:', modalContent);
            if (modalContent) {
              modalContent.classList.remove('scale-95', 'opacity-0');
              modalContent.classList.add('scale-100', 'opacity-100');
              console.log('Modal content classes updated');
            } else {
              console.error('Modal content not found');
            }
          }, 10);
        } else {
          console.error('Modal not found:', modalId);
        }
      }

      function closeModal(modalId) {
        const modal = document.getElementById(modalId);
        if (modal) {
          const modalContent = modal.querySelector('div:first-child');
          if (modalContent) {
            modalContent.classList.remove('scale-100', 'opacity-100');
            modalContent.classList.add('scale-95', 'opacity-0');
            setTimeout(() => {
              modal.classList.add('hidden');
            }, 300);
          }
        }
      }



      // Enhanced password strength checker
      function checkPasswordStrength(password) {
        const checks = {
          length: password.length >= 8,
          uppercase: /[A-Z]/.test(password),
          lowercase: /[a-z]/.test(password),
          number: /\d/.test(password)
        };
        
        // Update individual check indicators
        Object.keys(checks).forEach(check => {
          const element = document.getElementById(check + 'Check');
          if (element) {
            element.classList.toggle('bg-green-500', checks[check]);
            element.classList.toggle('bg-gray-300', !checks[check]);
          }
        });
        
        // Calculate strength score
        const score = Object.values(checks).filter(check => check).length;
        const strengthBar = document.getElementById('strengthBar');
        const strengthText = document.getElementById('strengthText');
        
        if (strengthBar && strengthText) {
          const percentage = (score / 4) * 100;
          strengthBar.style.width = `${percentage}%`;
          
          if (score === 0) {
            strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-gray-400';
            strengthText.textContent = 'Weak';
            strengthText.className = 'font-medium text-gray-400';
          } else if (score === 1) {
            strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-red-500';
            strengthText.textContent = 'Weak';
            strengthText.className = 'font-medium text-red-500';
          } else if (score === 2) {
            strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-orange-500';
            strengthText.textContent = 'Fair';
            strengthText.className = 'font-medium text-orange-500';
          } else if (score === 3) {
            strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-yellow-500';
            strengthText.textContent = 'Good';
            strengthText.className = 'font-medium text-yellow-600';
          } else if (score === 4) {
            strengthBar.className = 'h-2 rounded-full transition-all duration-300 bg-green-500';
            strengthText.textContent = 'Strong';
            strengthText.className = 'font-medium text-green-600';
          }
        }
        
        return Object.values(checks).every(check => check);
      }

      // Helper function to update full name across all components
      function updateFullNameAcrossComponents(newFullName) {
        console.log('🔄 Updating full name across all components:', newFullName);
        
        // Update topbar name (System Admin topbar structure)
        const topbarUserName = document.querySelector('#sysadmin-profile-container .text-left p.text-sm.font-semibold');
        if (topbarUserName) {
          topbarUserName.textContent = newFullName;
          console.log('✅ Updated topbar name:', topbarUserName.textContent);
        } else {
          console.log('⚠️ Topbar user name element not found');
        }
        
        // Update dropdown name (System Admin dropdown structure)
        const dropdownUserName = document.querySelector('#sysadmin-profile-dropdown .flex-1 p.text-sm.font-semibold');
        if (dropdownUserName) {
          dropdownUserName.textContent = newFullName;
          console.log('✅ Updated dropdown name:', dropdownUserName.textContent);
        } else {
          console.log('⚠️ Dropdown user name element not found');
        }
        
        // Update logout modal name
        const logoutUserName = document.getElementById('logoutUserName');
        if (logoutUserName) {
          logoutUserName.textContent = newFullName;
          console.log('✅ Updated logout modal name:', logoutUserName.textContent);
        } else {
          console.log('⚠️ Logout modal user name element not found');
        }
        
        // Update main profile name (the h2 element in the profile card)
        const mainProfileName = document.querySelector('.profile-card h2');
        if (mainProfileName) {
          mainProfileName.textContent = newFullName;
          console.log('✅ Updated main profile name');
        }
        
        // Update profile details card name (try multiple selectors)
        const profileDetailsSelectors = [
          '.profile-details .text-sm.font-bold.text-black',
          '[data-profile-name]',
          '.profile-name-display',
          '.profile-details .font-bold'
        ];
        
        let profileDetailsUpdated = false;
        for (const selector of profileDetailsSelectors) {
          const profileDetailsName = document.querySelector(selector);
          if (profileDetailsName) {
            profileDetailsName.textContent = newFullName;
            console.log('✅ Updated profile details name with selector:', selector);
            profileDetailsUpdated = true;
            break;
          }
        }
        
        if (!profileDetailsUpdated) {
          console.log('⚠️ Could not find profile details name element');
        }
        
        // Set flag to prevent global loading from overriding
        localStorage.setItem('isUpdatingProfile', 'true');
        
        // Store in localStorage for persistence with user-specific keys
        localStorage.setItem('sysadmin_userFullName', newFullName);
        localStorage.setItem('userFullName', newFullName); // Keep global key for backward compatibility
        console.log('💾 Stored full name in localStorage:', newFullName);
        
        // Also store the full profile data with user-specific keys
        localStorage.setItem('sysadmin_userProfileData', JSON.stringify(formData));
        localStorage.setItem('userProfileData', JSON.stringify(formData)); // Keep global key for backward compatibility
        console.log('💾 Stored full profile data in localStorage:', formData);
      }
      
      // Helper function to update profile card information
      function updateProfileCardInformation(formData) {
        console.log('🔄 Updating profile card information:', formData);
        
        // Update email in profile information card
        // Look for the span that contains the email value
        const emailSpans = document.querySelectorAll('.profile-card .flex.items-center.justify-between span.text-sm.font-bold.text-black');
        emailSpans.forEach(span => {
          // Check if this span is in the email row by looking at the parent structure
          const parentDiv = span.closest('.flex.items-center.justify-between');
          if (parentDiv && parentDiv.textContent.includes('Email')) {
            span.textContent = formData.email;
            console.log('✅ Updated email in profile card');
          }
        });
        
        // Update phone in profile information card
        const phoneSpans = document.querySelectorAll('.profile-card .flex.items-center.justify-between span.text-sm.font-bold.text-black');
        phoneSpans.forEach(span => {
          const parentDiv = span.closest('.flex.items-center.justify-between');
          if (parentDiv && parentDiv.textContent.includes('Contact')) {
            span.textContent = formData.phone;
            console.log('✅ Updated phone in profile card');
          }
        });
        
        // Update location in profile information card
        const locationSpans = document.querySelectorAll('.profile-card .flex.items-center.justify-between span.text-sm.font-bold.text-black');
        locationSpans.forEach(span => {
          const parentDiv = span.closest('.flex.items-center.justify-between');
          if (parentDiv && parentDiv.textContent.includes('Location')) {
            span.textContent = formData.location;
            console.log('✅ Updated location in profile card');
          }
        });
        
        // Update birthday in profile information card
        const birthdaySpans = document.querySelectorAll('.profile-card .flex.items-center.justify-between span.text-sm.font-bold.text-black');
        birthdaySpans.forEach(span => {
          const parentDiv = span.closest('.flex.items-center.justify-between');
          if (parentDiv && parentDiv.textContent.includes('Birthday')) {
            // Format birthday from YYYY-MM-DD to M/D/YYYY
            const date = new Date(formData.birthday);
            const formattedDate = `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;
            span.textContent = formattedDate;
            console.log('✅ Updated birthday in profile card');
          }
        });
        
        // Update timezone in profile information card
        const timezoneSpans = document.querySelectorAll('.profile-card .flex.items-center.justify-between span.text-sm.font-bold.text-black');
        timezoneSpans.forEach(span => {
          const parentDiv = span.closest('.flex.items-center.justify-between');
          if (parentDiv && parentDiv.textContent.includes('Timezone')) {
            span.textContent = formData.timezone;
            console.log('✅ Updated timezone in profile card');
          }
        });
        
        // Store all data in localStorage for persistence
        localStorage.setItem('userProfileData', JSON.stringify(formData));
        console.log('💾 Stored profile data in localStorage');
      }

      // Function to load saved profile data from localStorage
      function loadSavedProfileData() {
        console.log('📥 Loading saved profile data from localStorage');
        
        const savedData = localStorage.getItem('userProfileData');
        if (savedData) {
          try {
            const profileData = JSON.parse(savedData);
            console.log('📥 Loaded profile data:', profileData);
            
            // Update form fields with saved data
            const fullNameField = document.getElementById('editFullName');
            const emailField = document.getElementById('editEmail');
            const phoneField = document.getElementById('editPhone');
            const locationField = document.getElementById('editLocation');
            const birthdayField = document.getElementById('editBirthday');
            const timezoneField = document.getElementById('editTimezone');
            
            if (fullNameField && profileData.fullName) fullNameField.value = profileData.fullName;
            if (emailField && profileData.email) emailField.value = profileData.email;
            if (phoneField && profileData.phone) phoneField.value = profileData.phone;
            if (locationField && profileData.location) locationField.value = profileData.location;
            if (birthdayField && profileData.birthday) birthdayField.value = profileData.birthday;
            if (timezoneField && profileData.timezone) timezoneField.value = profileData.timezone;
            
            console.log('✅ Form fields updated with saved data');
          } catch (error) {
            console.error('❌ Error parsing saved profile data:', error);
          }
        }
        
        // Also load saved full name
        const savedFullName = localStorage.getItem('userFullName');
        if (savedFullName) {
          updateFullNameAcrossComponents(savedFullName);
          console.log('✅ Full name updated from localStorage');
        }
      }

      // Event listeners for modals
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 Modal event listeners initializing...');
    
    // Force refresh profile data when profile page loads
    setTimeout(() => {
      if (window.forceReloadProfileData) {
        console.log('🔄 Force refreshing profile data on profile page...');
        window.forceReloadProfileData();
      }
    }, 300);
        
        // Edit Profile Modal
        const editProfileBtn = document.getElementById('editProfileBtn');
        console.log('Edit Profile Button found:', editProfileBtn);
        if (editProfileBtn) {
          editProfileBtn.addEventListener('click', () => {
            console.log('Edit Profile button clicked!');
            
            // Load current saved data into the modal form (check both user-specific and global keys)
            const savedFullName = localStorage.getItem('sysadmin_userFullName') || localStorage.getItem('userFullName');
            const savedProfileData = localStorage.getItem('sysadmin_userProfileData') || localStorage.getItem('userProfileData');
            
            if (savedFullName) {
              const editFullNameField = document.getElementById('editFullName');
              if (editFullNameField) {
                editFullNameField.value = savedFullName;
                console.log('✅ Loaded saved full name into Edit Profile modal:', savedFullName);
              }
            }
            
            if (savedProfileData) {
              try {
                const profileData = JSON.parse(savedProfileData);
                // Update other form fields with saved data
                const editEmailField = document.getElementById('editEmail');
                const editPhoneField = document.getElementById('editPhone');
                const editLocationField = document.getElementById('editLocation');
                const editBirthdayField = document.getElementById('editBirthday');
                const editTimezoneField = document.getElementById('editTimezone');
                
                if (editEmailField) editEmailField.value = profileData.email || '';
                if (editPhoneField) editPhoneField.value = profileData.phone || '';
                if (editLocationField) editLocationField.value = profileData.location || '';
                if (editBirthdayField) editBirthdayField.value = profileData.birthday || '';
                if (editTimezoneField) editTimezoneField.value = profileData.timezone || '';
                
                console.log('✅ Loaded saved profile data into Edit Profile modal');
              } catch (error) {
                console.error('❌ Error parsing saved profile data:', error);
              }
            }
            
            openModal('editProfileModal');
          });
        }
        
        const closeEditProfileModal = document.getElementById('closeEditProfileModal');
        if (closeEditProfileModal) {
          closeEditProfileModal.addEventListener('click', () => closeModal('editProfileModal'));
        }
        
        const cancelEditProfile = document.getElementById('cancelEditProfile');
        if (cancelEditProfile) {
          cancelEditProfile.addEventListener('click', () => closeModal('editProfileModal'));
        }
        
        // Edit Profile Form Submission
        const editProfileForm = document.getElementById('editProfileForm');
        if (editProfileForm) {
          editProfileForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            console.log('📝 Edit Profile form submitted');
            
            // Get form data
            const formData = {
              fullName: document.getElementById('editFullName').value,
              email: document.getElementById('editEmail').value,
              phone: document.getElementById('editPhone').value,
              location: document.getElementById('editLocation').value,
              birthday: document.getElementById('editBirthday').value,
              timezone: document.getElementById('editTimezone').value
            };
            
            console.log('📝 Form data:', formData);
            
            try {
              // Show loading state
              const submitBtn = editProfileForm.querySelector('button[type="submit"]');
              const originalText = submitBtn.innerHTML;
              submitBtn.innerHTML = `
                <svg class="w-5 h-5 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                </svg>
                <span>Saving...</span>
              `;
              submitBtn.disabled = true;
              
              // Simulate API call (replace with actual API endpoint)
              await new Promise(resolve => setTimeout(resolve, 1000));
              
        // Update all components with new full name using global function
        if (window.updateSystemAdminFullName) {
          window.updateSystemAdminFullName(formData.fullName);
        } else {
          updateFullNameAcrossComponents(formData.fullName);
        }
        
        // Also update the Edit Profile modal form field
        const editFullNameField = document.getElementById('editFullName');
        if (editFullNameField) {
          editFullNameField.value = formData.fullName;
          console.log('✅ Updated Edit Profile modal full name field:', formData.fullName);
        }
        
        // Update profile card information using global function
        if (window.updateSystemAdminProfileInfo) {
          window.updateSystemAdminProfileInfo(formData);
        } else {
          updateProfileCardInformation(formData);
        }
        
        // Immediately update all components with the new data
        console.log('🔄 Immediately updating all components with new data...');
        if (window.updateSystemAdminFullName) {
          window.updateSystemAdminFullName(formData.fullName);
        }
        if (window.updateSystemAdminProfileInfo) {
          window.updateSystemAdminProfileInfo(formData);
        }
        
        // Force reload profile data to ensure consistency across all components
        setTimeout(() => {
          // Double-check that localStorage has the correct data (check both user-specific and global keys)
          const savedName = localStorage.getItem('sysadmin_userFullName') || localStorage.getItem('userFullName');
          const savedData = localStorage.getItem('sysadmin_userProfileData') || localStorage.getItem('userProfileData');
          console.log('🔍 Checking localStorage after save:', { savedName, savedData });
          
          if (savedName === formData.fullName) {
            console.log('✅ localStorage has correct data, proceeding with force reload');
            if (window.forceReloadProfileData) {
              console.log('🔄 Force reloading after profile update...');
              window.forceReloadProfileData();
            }
          } else {
            console.log('❌ localStorage data mismatch, re-saving...');
            localStorage.setItem('sysadmin_userFullName', formData.fullName);
            localStorage.setItem('userFullName', formData.fullName); // Keep global key for backward compatibility
            localStorage.setItem('sysadmin_userProfileData', JSON.stringify(formData));
            localStorage.setItem('userProfileData', JSON.stringify(formData)); // Keep global key for backward compatibility
            if (window.forceReloadProfileData) {
              window.forceReloadProfileData();
            }
          }
          
          // Clear the update flag after everything is done
          localStorage.removeItem('isUpdatingProfile');
          console.log('✅ Profile update completed, flag cleared');
        }, 1000);
              
              // Show success message
              alert('Profile updated successfully!');
              
              // Close modal
              closeModal('editProfileModal');
              
            } catch (error) {
              console.error('❌ Error updating profile:', error);
              alert('Error updating profile. Please try again.');
            } finally {
              // Reset button state
              submitBtn.innerHTML = originalText;
              submitBtn.disabled = false;
            }
          });
        }
        
        // Change Password Modal
        const changePasswordBtn = document.getElementById('changePasswordBtn');
        console.log('Change Password Button found:', changePasswordBtn);
        if (changePasswordBtn) {
          changePasswordBtn.addEventListener('click', () => {
            console.log('Change Password button clicked!');
            openModal('changePasswordModal');
          });
        }
        
        const closeChangePasswordModal = document.getElementById('closeChangePasswordModal');
        if (closeChangePasswordModal) {
          closeChangePasswordModal.addEventListener('click', () => closeModal('changePasswordModal'));
        }
        
        const cancelChangePassword = document.getElementById('cancelChangePassword');
        if (cancelChangePassword) {
          cancelChangePassword.addEventListener('click', () => closeModal('changePasswordModal'));
        }
        
        
        
        // Security Settings Modal
        const securitySettingsBtn = document.getElementById('securitySettingsBtn');
        console.log('Security Settings Button found:', securitySettingsBtn);
        if (securitySettingsBtn) {
          securitySettingsBtn.addEventListener('click', () => {
            console.log('Security Settings button clicked!');
            openModal('securitySettingsModal');
          });
        }
        
        const closeSecuritySettingsModal = document.getElementById('closeSecuritySettingsModal');
        if (closeSecuritySettingsModal) {
          closeSecuritySettingsModal.addEventListener('click', () => closeModal('securitySettingsModal'));
        }
        
        const cancelSecuritySettings = document.getElementById('cancelSecuritySettings');
        if (cancelSecuritySettings) {
          cancelSecuritySettings.addEventListener('click', () => closeModal('securitySettingsModal'));
        }

        // Password strength checking
        const newPasswordInput = document.getElementById('newPassword');
        if (newPasswordInput) {
          newPasswordInput.addEventListener('input', function() {
            checkPasswordStrength(this.value);
          });
        }

        // Two-factor authentication toggle
        const twoFactorToggle = document.getElementById('twoFactorToggle');
        if (twoFactorToggle) {
          twoFactorToggle.addEventListener('change', function() {
            const setup = document.getElementById('twoFactorSetup');
            if (this.checked) {
              setup.classList.remove('hidden');
            } else {
              setup.classList.add('hidden');
            }
          });
        }


        const changePasswordForm = document.getElementById('changePasswordForm');
        if (changePasswordForm) {
          changePasswordForm.addEventListener('submit', function(e) {
            e.preventDefault();
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (newPassword !== confirmPassword) {
              alert('Passwords do not match!');
              return;
            }
            
            if (!checkPasswordStrength(newPassword)) {
              alert('Password does not meet security requirements!');
              return;
            }
            
            // Add password change logic here
            alert('Password updated successfully!');
            closeModal('changePasswordModal');
          });
        }

        const saveSecuritySettings = document.getElementById('saveSecuritySettings');
        if (saveSecuritySettings) {
          saveSecuritySettings.addEventListener('click', function() {
            // Add security settings save logic here
            alert('Security settings updated successfully!');
            closeModal('securitySettingsModal');
          });
        }

        // Close modals on backdrop click
        document.querySelectorAll('[id$="Modal"]').forEach(modal => {
          modal.addEventListener('click', function(e) {
            if (e.target === this) {
              closeModal(this.id);
            }
          });
        });
      });
    </script>
  </SysAdminLayout>
</Layout>

