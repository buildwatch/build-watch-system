---
const currentTime = new Date().toLocaleString('en-US', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
---

<header class="bg-white shadow-sm border-b border-gray-200 px-6 py-4">
  <div class="flex items-center justify-between">
    <!-- Left Section -->
    <div class="flex items-center gap-4">
      <div class="flex items-center gap-3">
        <div class="w-8 h-8 bg-[#3D50D7] rounded-lg flex items-center justify-center">
          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
        </div>
        <div>
          <h1 class="text-lg font-semibold text-gray-800">Executive Viewer</h1>
          <p class="text-sm text-gray-500">LGU Project Oversight Dashboard</p>
        </div>
      </div>
    </div>

    <!-- Center Section - Current Time and Status -->
    <div class="flex items-center gap-6">
      <div class="text-center">
        <p class="text-sm text-gray-600">{currentTime}</p>
        <p class="text-xs text-gray-500">Philippine Standard Time</p>
      </div>
      <div class="flex items-center gap-2 px-3 py-1 bg-green-100 text-green-700 rounded-full">
        <div class="w-2 h-2 bg-green-500 rounded-full"></div>
        <span class="text-sm font-medium">System Operational</span>
      </div>
    </div>

    <!-- Right Section -->
    <div class="flex items-center gap-4">
      <!-- Notifications -->
      <div class="relative" id="executive-notification-container">
        <button class="relative p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-all" id="executive-notification-btn">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
          <span class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center hidden" id="executive-notification-badge">0</span>
        </button>
        
        <!-- Notification Dropdown -->
        <div class="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50 hidden" id="executive-notification-dropdown">
          <div class="p-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-gray-800">Notifications</h3>
              <div class="flex items-center gap-2">
              <button class="text-sm text-[#3D50D7] hover:text-[#2a3bb8]" id="executive-mark-all-read">Mark all read</button>
                <button class="text-sm text-red-600 hover:text-red-700" id="executive-delete-all">Delete all</button>
              </div>
            </div>
          </div>
          <div class="max-h-96 overflow-y-auto" id="executive-notification-list">
            <div class="p-4 text-center text-gray-500">Loading notifications...</div>
          </div>
        </div>
      </div>

      <!-- Export Quick Action -->
      <button class="flex items-center gap-2 px-4 py-2 bg-[#3D50D7] text-white rounded-lg hover:bg-[#2a3bb8] transition-all">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
        </svg>
        <span class="text-sm font-medium">Quick Export</span>
      </button>

      <!-- User Menu -->
      <div class="flex items-center gap-3">
        <div class="text-right">
          <p class="text-sm font-medium text-gray-800">Executive Viewer</p>
          <p class="text-xs text-gray-500">Read-Only Access</p>
        </div>
        <div class="w-8 h-8 bg-[#3D50D7] rounded-full flex items-center justify-center">
          <svg class="w-4 h-4 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
          </svg>
        </div>
      </div>
    </div>
  </div>

  <!-- Secondary Navigation -->
  <div class="flex items-center justify-between mt-4 pt-4 border-t border-gray-100">
    <div class="flex items-center gap-6">
      <span class="text-sm text-gray-600">Active Projects: <span class="font-semibold text-[#3D50D7]">23</span></span>
      <span class="text-sm text-gray-600">Total Budget: <span class="font-semibold text-[#3D50D7]">â‚±125,450,000</span></span>
      <span class="text-sm text-gray-600">Departments: <span class="font-semibold text-[#3D50D7]">8</span></span>
    </div>
    <div class="flex items-center gap-2">
      <span class="text-xs text-gray-500">Last Updated:</span>
      <span class="text-xs font-medium text-gray-700">2 minutes ago</span>
    </div>
  </div>
</header>

<script>
  import authService from '../services/auth.js';
  import notificationService from '../services/notifications.js';
  
  // Make services available globally
  window.authService = authService;
  window.notificationService = notificationService;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize notifications
    initializeNotifications();
  });

  // Notification functionality
  function initializeNotifications() {
    const notificationBtn = document.getElementById('executive-notification-btn');
    const notificationDropdown = document.getElementById('executive-notification-dropdown');
    const notificationBadge = document.getElementById('executive-notification-badge');
    const notificationList = document.getElementById('executive-notification-list');
    const markAllReadBtn = document.getElementById('executive-mark-all-read');
    const deleteAllBtn = document.getElementById('executive-delete-all');

    // Toggle dropdown
    notificationBtn.addEventListener('click', () => {
      notificationDropdown.classList.toggle('hidden');
      if (!notificationDropdown.classList.contains('hidden')) {
        loadNotifications();
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('#executive-notification-container')) {
        notificationDropdown.classList.add('hidden');
      }
    });

    // Mark all as read
    markAllReadBtn.addEventListener('click', async () => {
      await notificationService.markAllAsRead();
      updateNotificationBadge();
      loadNotifications();
    });

    // Delete all notifications
    deleteAllBtn.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete all notifications? This action cannot be undone.')) {
        const data = await notificationService.getNotifications();
        const notifications = data.notifications;
        
        let deletedCount = 0;
        for (const notification of notifications) {
          const success = await notificationService.deleteNotification(notification.id);
          if (success) deletedCount++;
        }
        
        if (deletedCount > 0) {
          updateNotificationBadge();
          loadNotifications();
        } else {
          alert('Failed to delete notifications. Please try again.');
        }
      }
    });

    // Load initial notification count
    updateNotificationBadge();

    // Subscribe to notification updates
    notificationService.onUpdate(({ count }) => {
      updateNotificationBadge(count);
    });
  }

  async function updateNotificationBadge(count) {
    const badge = document.getElementById('executive-notification-badge');
    const currentCount = count !== undefined ? count : await notificationService.getNotificationCount();
    
    if (currentCount > 0) {
      badge.textContent = currentCount > 99 ? '99+' : currentCount;
      badge.classList.remove('hidden');
    } else {
      badge.classList.add('hidden');
    }
  }

  async function loadNotifications() {
    const notificationList = document.getElementById('executive-notification-list');
    
    try {
      const data = await notificationService.getNotifications();
      const notifications = data.notifications;

      if (notifications.length === 0) {
        notificationList.innerHTML = `
          <div class="p-4 text-center text-gray-500">
            <svg class="w-12 h-12 mx-auto mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
            <p>No notifications</p>
          </div>
        `;
        return;
      }

      const notificationsHtml = notifications.map(notification => `
        <div class="p-4 border-b border-gray-100 hover:bg-gray-50 transition-colors ${notification.isRead ? 'opacity-75' : ''}" 
             data-notification-id="${notification.id}">
          <div class="flex items-start gap-3">
            <div class="flex-shrink-0">
              ${notificationService.getNotificationIcon(notification.type)}
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center justify-between">
                <p class="text-sm font-medium text-gray-900">${notification.title}</p>
                <span class="text-xs text-gray-500">${notificationService.formatTime(notification.createdAt)}</span>
              </div>
              <p class="text-sm text-gray-600 mt-1">${notification.message}</p>
              ${notification.actionUrl ? `
                <a href="${notification.actionUrl}" class="text-xs text-[#3D50D7] hover:text-[#2a3bb8] mt-2 inline-block">
                  ${notification.actionText || 'View Details'}
                </a>
              ` : ''}
            </div>
            <div class="flex items-center gap-1">
            ${!notification.isRead ? `
                <button class="text-gray-400 hover:text-gray-600 p-1 rounded" onclick="markExecutiveNotificationAsRead('${notification.id}')" title="Mark as read">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </button>
            ` : ''}
              <button class="text-gray-400 hover:text-red-600 p-1 rounded transition-colors" onclick="deleteExecutiveNotification('${notification.id}')" title="Delete notification">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      `).join('');

      notificationList.innerHTML = notificationsHtml;
    } catch (error) {
      console.error('Error loading notifications:', error);
      notificationList.innerHTML = `
        <div class="p-4 text-center text-red-500">
          <p>Failed to load notifications</p>
        </div>
      `;
    }
  }

  // Global function for marking notification as read
  window.markExecutiveNotificationAsRead = async function(notificationId) {
    await notificationService.markAsRead(notificationId);
    updateNotificationBadge();
    loadNotifications();
  };

  // Global function for deleting notification
  window.deleteExecutiveNotification = async function(notificationId) {
    if (confirm('Are you sure you want to delete this notification?')) {
      const success = await notificationService.deleteNotification(notificationId);
      if (success) {
        updateNotificationBadge();
        loadNotifications();
      } else {
        alert('Failed to delete notification. Please try again.');
      }
    }
  };
</script> 