---
// ExecutiveTopbar.astro
// Initial timestamp for SSR; client script keeps it live
const currentTime = new Date().toLocaleString('en-PH', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
---
<header class="relative z-50 flex items-center justify-between px-8 py-4 bg-gradient-to-r from-[#1E40AF] via-[#3B82F6] to-[#2563EB] text-white shadow-lg border-b border-white/10 backdrop-blur-sm">
  <!-- Subtle overlay for depth -->
  <div class="pointer-events-none absolute inset-0 bg-gradient-to-r from-white/5 via-transparent to-white/5 opacity-10"></div>
  <div class="pointer-events-none absolute -top-6 left-24 w-40 h-40 bg-white/10 rounded-full blur-3xl opacity-20"></div>
  <div class="pointer-events-none absolute -bottom-10 right-24 w-32 h-32 bg-white/10 rounded-full blur-2xl opacity-20"></div>
  <!-- Left Section: Sidebar Toggle, Logo and Search -->
  <div class="flex items-center space-x-6">
    <!-- Sidebar Toggle Button -->
    <button id="executive-sidebar-toggle" class="group p-2.5 rounded-xl bg-white/10 hover:bg-white/20 active:scale-95 transition-all duration-300 backdrop-blur-sm border border-white/20 shadow-lg hover:shadow-xl">
      <svg id="executive-sidebar-toggle-icon" class="w-6 h-6 text-white transition-all duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
      </svg>
    </button>

    <!-- Logo -->
    <div class="flex items-center space-x-3">
      <div class="w-10 h-10 rounded-xl flex items-center justify-center shadow-lg overflow-hidden ring-1 ring-white/10">
        <img src="/build-watch-logo.png" alt="Build Watch Logo" class="w-full h-full object-contain" />
      </div>
      <div>
        <h1 class="text-lg font-bold text-white">Build Watch</h1>
        <p class="text-xs text-blue-200/80">Executive Viewer</p>
      </div>
    </div>
    

  </div>

  <!-- Center Section: Search Bar, Date/Time and Status -->
  <div class="hidden md:flex items-center gap-6">
    <!-- Search Bar -->
    <div class="relative" id="executive-search-wrapper">
      <input 
        id="executive-global-search"
        type="text" 
        placeholder="Search projects, reports, notices..." 
        class="w-80 pl-10 pr-4 py-2.5 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-transparent backdrop-blur-sm transition-all duration-300" 
        autocomplete="off"
      />
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="h-6 w-6 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
        </svg>
      </div>
    </div>
    
    <div class="text-center">
      <p id="executive-clock" class="text-sm text-white">Loading...</p>
      <p class="text-xs text-blue-200/80">Philippine Standard Time</p>
    </div>
    <div class="flex items-center gap-2 px-3 py-1 rounded-full bg-green-500/10 text-green-300 ring-1 ring-green-400/20">
      <span class="w-2 h-2 rounded-full bg-green-400 animate-pulse"></span>
      <span class="text-sm font-medium">System Operational</span>
    </div>
  </div>

  <!-- Right Section: Actions and User -->
  <div class="flex items-center space-x-4">
    <!-- System Management Actions -->
    <div class="flex items-center space-x-2">
      <!-- System Announcement Button -->
      <a href="/dashboard/executive-viewer/modules/announcements" title="System Announcements" aria-label="System Announcements" class="group relative p-2.5 text-white hover:text-white/80 hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu">
        <svg class="w-5 h-5 transition-all duration-300 group-hover:scale-110 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"></path>
        </svg>
        <!-- Enhanced hover glow effect -->
        <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
      </a>
      
      <!-- System Health Button -->
      <a href="/dashboard/executive-viewer/modules/system-health" title="System Health" aria-label="System Health" class="group relative p-2.5 text-white hover:text-white/80 hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu">
        <svg class="w-5 h-5 transition-all duration-300 group-hover:scale-110 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
        </svg>
        <!-- Enhanced hover glow effect -->
        <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
      </a>
    </div>

    <!-- Notifications -->
    <div class="relative z-[1001]" id="executive-notification-container">
      <button class="group relative p-2.5 text-white hover:text-white/80 hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu" id="executive-notification-btn" title="Notifications" aria-label="Notifications">
        <svg class="w-5 h-5 transition-all duration-300 group-hover:scale-110 group-hover:rotate-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
        </svg>
        <!-- Enhanced hover glow effect -->
        <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
        <span class="absolute -top-1 -right-1 bg-gradient-to-r from-red-500 to-red-600 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-semibold shadow-lg hidden group-hover:scale-110 transition-transform duration-200" id="executive-notification-badge">0</span>
      </button>
    </div>

    <!-- User Profile -->
    <div class="relative" id="executive-profile-container">
      <button class="flex items-center space-x-3 p-2 rounded-xl hover:bg-white/10 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white/20" id="executive-profile-btn" title="Open profile menu" aria-haspopup="true" aria-expanded="false">
        <div class="w-10 h-10 rounded-xl overflow-hidden shadow-lg ring-1 ring-white/10">
          <img 
            id="executive-topbar-profile-picture"
            src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%233B82F6'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EEV%3C/text%3E%3C/svg%3E"
            alt="Executive Viewer"
            class="w-full h-full object-cover"
            onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
          />
          <div class="w-full h-full bg-gradient-to-br from-blue-600 to-blue-500 rounded-xl flex items-center justify-center shadow-lg" style="display: none;">
          <span class="text-white font-bold text-sm">EV</span>
          </div>
        </div>
        <div class="text-left hidden md:block">
          <p class="text-sm font-semibold text-white">Executive Viewer</p>
          <div class="flex items-center gap-1">
            <p class="text-xs text-blue-200/80">Read-Only Access</p>
            <div class="flex items-center gap-1">
              <div class="w-1.5 h-1.5 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-xs text-green-300 font-medium">Active</span>
            </div>
          </div>
        </div>
        <svg class="w-4 h-4 text-blue-200 hover:text-white transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>
      
      <!-- Enhanced Executive Viewer Dropdown Menu -->
      <div id="executive-profile-dropdown" class="absolute right-0 mt-3 w-64 bg-gradient-to-br from-[#1E40AF] via-[#3B82F6] to-[#2563EB] rounded-2xl shadow-2xl border border-white/10 opacity-0 invisible scale-95 transform transition-all duration-500 ease-out z-50 backdrop-blur-xl hidden">
        <!-- Header Section -->
        <div class="p-4 border-b border-white/10" style="background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);">
          <div class="flex items-center space-x-3">
                          <div class="w-12 h-12 rounded-xl overflow-hidden ring-2 ring-white/10 shadow-lg">
              <img 
                id="executive-dropdown-profile-picture"
                src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%233B82F6'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EEV%3C/text%3E%3C/svg%3E"
                alt="Executive Viewer"
                class="w-full h-full object-cover"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
              />
              <div class="w-full h-full bg-gradient-to-br from-[#1E40AF] to-[#3B82F6] flex items-center justify-center" style="display: none;">
                <span class="text-white font-bold text-lg">EV</span>
              </div>
            </div>
                          <div class="flex-1 min-w-0">
                <p class="text-sm font-semibold text-white truncate">Executive Viewer</p>
                <p class="text-xs text-white/80 truncate">Strategic Oversight Access</p>
                <div class="flex items-center gap-2 mt-1">
                  <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  <span class="text-xs text-green-300 font-medium">Active</span>
                </div>
              </div>
          </div>
        </div>

        <!-- Menu Items -->
        <div class="py-2">
          <!-- Profile Section -->
          <div class="px-3 py-2">
            <a href="/dashboard/executive-viewer/modules/profile" class="group flex items-center px-3 py-3 text-sm text-blue-100 hover:bg-blue-500/20 hover:text-blue-200 rounded-xl transition-all duration-200 hover:scale-[1.02]">
              <div class="w-8 h-8 rounded-lg bg-blue-500/30 flex items-center justify-center mr-3 group-hover:bg-blue-500/40 transition-colors">
                <svg class="w-4 h-4 text-blue-300 group-hover:text-blue-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
              <div>
                <span class="font-medium">My Profile</span>
                <p class="text-xs text-blue-300/70 group-hover:text-blue-200/80">View & edit profile</p>
              </div>
            </a>
          </div>

          <!-- Strategic Overview Section -->
          <div class="px-3 py-2">
            <a href="/dashboard/executive-viewer/overview" class="group flex items-center px-3 py-3 text-sm text-blue-100 hover:bg-indigo-500/20 hover:text-indigo-200 rounded-xl transition-all duration-200 hover:scale-[1.02]">
              <div class="w-8 h-8 rounded-lg bg-indigo-500/30 flex items-center justify-center mr-3 group-hover:bg-indigo-500/40 transition-colors">
                <svg class="w-4 h-4 text-indigo-300 group-hover:text-indigo-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <div>
                <span class="font-medium">Strategic Overview</span>
                <p class="text-xs text-blue-300/70 group-hover:text-indigo-200/80">High-level insights</p>
              </div>
            </a>
          </div>

          <!-- Performance Analytics Section -->
          <div class="px-3 py-2">
            <a href="/dashboard/executive-viewer/analytics" class="group flex items-center px-3 py-3 text-sm text-blue-100 hover:bg-emerald-500/20 hover:text-emerald-200 rounded-xl transition-all duration-200 hover:scale-[1.02]">
              <div class="w-8 h-8 rounded-lg bg-emerald-500/30 flex items-center justify-center mr-3 group-hover:bg-emerald-500/40 transition-colors">
                <svg class="w-4 h-4 text-emerald-300 group-hover:text-emerald-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
              <div>
                <span class="font-medium">Performance Analytics</span>
                <p class="text-xs text-blue-300/70 group-hover:text-emerald-200/80">KPI & metrics</p>
              </div>
            </a>
          </div>

          <!-- Executive Reports Section -->
          <div class="px-3 py-2">
            <a href="/dashboard/executive-viewer/reports" class="group flex items-center px-3 py-3 text-sm text-blue-100 hover:bg-amber-500/20 hover:text-amber-200 rounded-xl transition-all duration-200 hover:scale-[1.02]">
              <div class="w-8 h-8 rounded-lg bg-amber-500/30 flex items-center justify-center mr-3 group-hover:bg-amber-500/40 transition-colors">
                <svg class="w-4 h-4 text-amber-300 group-hover:text-amber-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                </svg>
              </div>
              <div>
                <span class="font-medium">Executive Reports</span>
                <p class="text-xs text-blue-300/70 group-hover:text-amber-200/80">Strategic summaries</p>
              </div>
            </a>
          </div>

          <!-- Divider -->
          <div class="mx-3 my-2 border-t border-white/10"></div>

          <!-- Logout Section -->
          <div class="px-3 py-2">
            <button id="executive-dropdown-logout-btn" class="group flex items-center w-full px-3 py-3 text-sm text-red-400 hover:bg-red-500/20 hover:text-red-300 rounded-xl transition-all duration-200 hover:scale-[1.02] text-left">
              <div class="w-8 h-8 rounded-lg bg-red-500/30 flex items-center justify-center mr-3 group-hover:bg-red-500/40 transition-colors">
                <svg class="w-4 h-4 text-red-400 group-hover:text-red-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                </svg>
              </div>
              <div>
                <span class="font-medium">Sign Out</span>
                <p class="text-xs text-blue-300/70 group-hover:text-red-200/80">Secure logout</p>
              </div>
            </button>
          </div>
        </div>

        <!-- Footer -->
        <div class="px-4 py-3 border-t border-white/10" style="background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);">
                      <div class="flex items-center justify-between text-xs text-white/70">
              <span>Session: Active</span>
              <span class="text-green-400">●</span>
            </div>
        </div>
      </div>
    </div>
  </div>
</header>

<!-- Enhanced Executive Viewer Notification Panel -->
<div class="fixed top-0 right-0 h-full w-[420px] bg-gradient-to-br from-blue-900 via-blue-800 to-blue-900 shadow-2xl border-l border-blue-400/30 z-[1100] backdrop-blur-xl transform translate-x-full transition-all duration-500 ease-out hidden" id="executive-notification-dropdown">
  <!-- Enhanced Header with Executive Viewer Theme -->
  <div class="p-5 border-b border-blue-400/15 bg-gradient-to-r from-blue-800/50 via-blue-700/70 to-blue-800/50 backdrop-blur-md shadow-lg">
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center gap-3">
        <div class="w-10 h-10 rounded-xl bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center shadow-xl">
          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
        </div>
        <div>
          <h3 class="text-xl font-bold text-white mb-1">Executive Notifications</h3>
          <p class="text-xs text-blue-200 font-medium">Monitor project updates & alerts</p>
        </div>
      </div>
      <button class="text-blue-200 hover:text-white transition-all duration-200 hover:scale-110 p-2.5 rounded-lg hover:bg-white/10 hover:shadow-lg" id="executive-close-notifications" title="Close notifications">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Enhanced Action Buttons with Better Hover Behavior -->
    <div class="flex items-center gap-3 mb-6">
      <button class="group flex items-center gap-3 text-sm font-semibold text-white bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 transition-all duration-300 ease-out px-4 py-3 rounded-xl border-2 border-blue-400/50 hover:border-blue-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" id="executive-mark-all-read">
        <svg class="w-5 h-5 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Mark all read
      </button>
      <button class="group flex items-center gap-3 text-sm font-semibold text-white bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 transition-all duration-300 ease-out px-4 py-3 rounded-xl border-2 border-red-400/50 hover:border-red-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" id="executive-delete-all-read">
        <svg class="w-5 h-5 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
        Delete read
      </button>
      <button class="group flex items-center gap-3 text-sm font-semibold text-white bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 transition-all duration-300 ease-out px-4 py-3 rounded-xl border-2 border-red-500/50 hover:border-red-500/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" id="executive-delete-all-notifications">
        <svg class="w-5 h-5 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
        Delete all
      </button>
    </div>
    
    <!-- Enhanced Minimalist Notification Stats Bar -->
    <div class="p-4 bg-gradient-to-r from-blue-500/15 to-blue-600/15 rounded-xl border border-blue-400/25 shadow-md">
      <div class="flex items-center justify-between text-xs">
        <div class="flex items-center gap-2">
          <span class="text-blue-200 font-medium">Total:</span>
          <span id="executive-notification-total" class="text-white font-bold text-base">0</span>
        </div>
        <div class="w-px h-5 bg-blue-400/30"></div>
        <div class="flex items-center gap-2">
          <span class="text-blue-200 font-medium">Unread:</span>
          <span id="executive-notification-unread" class="text-white font-bold text-base">0</span>
        </div>
        <div class="w-px h-5 bg-blue-400/30"></div>
        <div class="flex items-center gap-2">
          <span class="text-blue-200 font-medium">Read:</span>
          <span id="executive-notification-read" class="text-white font-bold text-base">0</span>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Enhanced Notification List with Categories -->
  <div class="flex-1 overflow-y-auto custom-scrollbar" id="executive-notification-list">
    <!-- Loading State -->
    <div class="p-6 text-center text-blue-200" id="executive-notification-loading">
      <div class="animate-pulse flex flex-col items-center justify-center">
        <div class="w-16 h-16 rounded-full bg-gradient-to-br from-blue-500/20 to-blue-600/20 flex items-center justify-center mb-4">
          <svg class="w-8 h-8 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
        </div>
        <span class="text-sm font-medium">Loading executive notifications...</span>
        <p class="text-xs text-blue-300 mt-1">Monitoring project updates & alerts</p>
      </div>
    </div>
  </div>
  
  <!-- Enhanced Footer with Executive Monitor Active - Maximized Space and Enhanced UI -->
  <div class="mt-auto p-4 border-t-2 border-blue-400/20 bg-gradient-to-r from-blue-800/80 via-blue-700/90 to-blue-800/80 backdrop-blur-md shadow-2xl">
    <div class="flex items-center justify-between text-sm text-white font-semibold">
      <div class="flex items-center gap-3">
        <div class="w-3 h-3 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full animate-pulse shadow-lg"></div>
        <span class="tracking-wide">Executive Monitor Active</span>
      </div>
      <div class="flex items-center gap-2">
        <span class="text-blue-300 text-lg">●</span>
        <span class="text-xs text-blue-200 opacity-75">Live</span>
      </div>
    </div>
  </div>
</div>

<!-- Overlay for notification sidebar -->
<div class="fixed inset-0 bg-black/50 z-[1050] hidden transition-opacity duration-300" id="executive-notification-overlay"></div>

<script>
  // Add event listener for logout buttons and initialize services
  document.addEventListener('DOMContentLoaded', async function() {
    // Dynamic imports for services
    let authService, notificationService, projectsService, executiveService;
    
    try {
      // Load services dynamically
      const [auth, notification, projects, executive] = await Promise.all([
        import('../services/auth.js'),
        import('../services/notifications.js'),
        import('../services/projects.js'),
        import('../services/executive.js')
      ]);
      
      authService = auth.default;
      notificationService = notification.default;
      projectsService = projects.default;
      executiveService = executive.default;
  
      // Make services available globally
      window.authService = authService;
      window.notificationService = notificationService;
      
      console.log('✅ Executive Services loaded successfully');
    } catch (error) {
      console.error('❌ Failed to load Executive services:', error);
      // Fallback notification system
      window.notificationService = createFallbackNotificationService();
    }
    
    // Handle dropdown logout button
    const dropdownLogoutBtn = document.getElementById('executive-dropdown-logout-btn');
    if (dropdownLogoutBtn) {
      dropdownLogoutBtn.addEventListener('click', function() {
        authService.logout();
      });
    }

    // Initialize notifications with loaded services
    initializeNotifications(notificationService);

    // Live clock
    startExecutiveClock();

    // Initialize global search with loaded services
    initializeExecutiveSearch(projectsService, executiveService);
    
    // Initialize profile dropdown functionality
    initializeExecutiveProfileDropdown();
    
    // Load profile pictures for topbar and dropdown
    loadExecutiveTopbarProfilePictures();
  });

  // Create fallback notification service
  function createFallbackNotificationService() {
    return {
      getNotificationCount: async () => 0,
      getNotifications: async () => ({ notifications: [] }),
      markAllAsRead: async () => true,
      deleteAllRead: async () => true,
      markAsRead: async () => true,
      onUpdate: (callback) => () => {},
      getNotificationIcon: () => '<svg class="w-5 h-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path></svg>',
      formatTime: (timestamp) => 'Unknown'
    };
  }

  // Notification functionality
  function initializeNotifications(notificationService) {
    const notificationBtn = document.getElementById('executive-notification-btn');
    const notificationDropdown = document.getElementById('executive-notification-dropdown');
    const notificationBadge = document.getElementById('executive-notification-badge');
    const notificationList = document.getElementById('executive-notification-list');
    const markAllReadBtn = document.getElementById('executive-mark-all-read');

    // Check if all elements exist
    if (!notificationBtn || !notificationDropdown) {
      console.error('❌ Executive Notification elements not found');
      return;
    }

    console.log('✅ Initializing Executive notification functionality');

    // Get overlay and close button
    const notificationOverlay = document.getElementById('executive-notification-overlay');
    const closeNotificationBtn = document.getElementById('executive-close-notifications');

    // Toggle sidebar with slide animation
    notificationBtn.addEventListener('click', (e) => {
      console.log('🔔 Executive Notification button clicked');
      e.preventDefault();
      e.stopPropagation();
      
      const isHidden = notificationDropdown.classList.contains('hidden');
      if (isHidden) {
        console.log('📂 Opening Executive notification sidebar');
        // Show overlay
        notificationOverlay.classList.remove('hidden');
        notificationOverlay.style.opacity = '0';
        
        // Show sidebar
        notificationDropdown.classList.remove('hidden');
        notificationDropdown.style.visibility = 'visible';
        notificationDropdown.style.opacity = '1';
        notificationDropdown.style.transform = 'translateX(100%)';
        
        requestAnimationFrame(() => {
          // Animate overlay
          notificationOverlay.style.opacity = '1';
          // Slide sidebar in
          notificationDropdown.style.transform = 'translateX(0)';
        });
        
        loadNotifications(notificationService);
      } else {
        console.log('📁 Closing Executive notification sidebar');
        closeSidebar();
      }
    });

    // Close sidebar function
    function closeSidebar() {
      // Slide sidebar out
      notificationDropdown.style.transform = 'translateX(100%)';
      // Fade overlay out
      notificationOverlay.style.opacity = '0';
      
      setTimeout(() => {
        notificationDropdown.classList.add('hidden');
        notificationOverlay.classList.add('hidden');
        // Ensure proper visibility state
        notificationDropdown.style.visibility = 'hidden';
        notificationDropdown.style.opacity = '0';
      }, 300);
    }

    // Close button event
    if (closeNotificationBtn) {
      closeNotificationBtn.addEventListener('click', closeSidebar);
    }

    // Overlay click to close
    if (notificationOverlay) {
      notificationOverlay.addEventListener('click', closeSidebar);
    }

    // ESC key to close sidebar
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !notificationDropdown.classList.contains('hidden')) {
        closeSidebar();
      }
    });

    // Mark all as read
    markAllReadBtn.addEventListener('click', async () => {
      await notificationService.markAllAsRead();
      updateNotificationBadge(notificationService);
      loadNotifications(notificationService);
    });

    // Delete all read notifications
    const deleteAllReadBtn = document.getElementById('executive-delete-all-read');
    if (deleteAllReadBtn) {
      deleteAllReadBtn.addEventListener('click', async () => {
        if (confirm('Are you sure you want to delete all read notifications?')) {
          await notificationService.deleteAllRead();
          updateNotificationBadge(notificationService);
          loadNotifications(notificationService);
        }
      });
    }

    // Delete all notifications (both read and unread)
    const deleteAllNotificationsBtn = document.getElementById('executive-delete-all-notifications');
    if (deleteAllNotificationsBtn) {
      deleteAllNotificationsBtn.addEventListener('click', async () => {
        if (confirm('Are you sure you want to delete ALL notifications? This action cannot be undone and will clear both read and unread notifications.')) {
          try {
            const data = await notificationService.getNotifications();
            const allNotifications = data.notifications || [];
            
            let deletedCount = 0;
            for (const notification of allNotifications) {
              const success = await notificationService.deleteNotification(notification.id);
              if (success) deletedCount++;
            }
            
            if (deletedCount > 0) {
              updateNotificationBadge(notificationService);
              loadNotifications(notificationService);
              console.log(`🗑️ Successfully deleted ${deletedCount} notifications`);
            }
          } catch (error) {
            console.error('Error deleting all notifications:', error);
            alert('Failed to delete all notifications. Please try again.');
          }
        }
      });
    }

    // Load initial notification count
    updateNotificationBadge(notificationService);

    // Subscribe to notification updates
    notificationService.onUpdate(({ count }) => {
      updateNotificationBadge(notificationService, count);
    });
  }

  function startExecutiveClock() {
    const clockEl = document.getElementById('executive-clock');
    if (!clockEl) return;
    const update = () => {
      const now = new Date();
      const options = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZone: 'Asia/Manila'
      };
      
      if (clockEl) {
        clockEl.textContent = now.toLocaleString('en-US', options);
      }
    };
    update();
    setInterval(update, 1000);
  }

  // Simple search functionality for Executive Viewer
  function initializeExecutiveSearch(projectsService, executiveService) {
    const input = document.getElementById('executive-global-search');
    if (!input) return;

    // Simple search input handling
    input.addEventListener('input', (e) => {
      // Basic search functionality can be added here if needed
      console.log('Search query:', e.target.value);
    });
    
    // Keyboard shortcut for focus (Ctrl+K)
    document.addEventListener('keydown', (e) => {
      if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'k') {
        e.preventDefault();
        input.focus();
      }
    });
  }

  async function updateNotificationBadge(notificationService, count) {
    const badge = document.getElementById('executive-notification-badge');
    const totalEl = document.getElementById('executive-notification-total');
    const unreadEl = document.getElementById('executive-notification-unread');
    const readEl = document.getElementById('executive-notification-read');
    
    if (!notificationService) return;
    
    try {
      const currentCount = count !== undefined ? count : await notificationService.getNotificationCount();
      const notifications = await notificationService.getNotifications();
      const allNotifications = notifications.notifications || [];
      const readCount = allNotifications.filter(n => n.isRead).length;
      const unreadCount = allNotifications.length - readCount;
      
      // Update badge
      if (currentCount > 0) {
        badge.textContent = currentCount > 99 ? '99+' : currentCount;
        badge.classList.remove('hidden');
      } else {
        badge.classList.add('hidden');
      }
      
      // Update stats
      if (totalEl) totalEl.textContent = allNotifications.length;
      if (unreadEl) unreadEl.textContent = unreadCount;
      if (readEl) readEl.textContent = readCount;
      
    } catch (error) {
      console.error('Error updating Executive notification badge:', error);
      badge.classList.add('hidden');
    }
  }

  async function loadNotifications(notificationService) {
    const notificationList = document.getElementById('executive-notification-list');
    const loadingEl = document.getElementById('executive-notification-loading');
    if (!notificationService) return;
    
    try {
      // Hide loading state
      if (loadingEl) loadingEl.style.display = 'none';
      
      const data = await notificationService.getNotifications();
      const notifications = data.notifications || [];

      if (notifications.length === 0) {
        notificationList.innerHTML = `
          <div class="p-8 text-center text-blue-200">
            <div class="w-20 h-20 rounded-full bg-gradient-to-br from-blue-500/10 to-blue-600/10 flex items-center justify-center mx-auto mb-4">
              <svg class="w-10 h-10 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <h4 class="text-lg font-semibold text-white mb-2">All Caught Up!</h4>
            <p class="text-sm text-blue-200">No executive notifications at the moment</p>
            <p class="text-xs text-blue-300 mt-1">All projects are running smoothly</p>
          </div>
        `;
        return;
      }

      const notificationsHtml = notifications.map(notification => {
        const priorityColors = {
          high: 'from-red-500/20 to-red-600/20 border-red-500/30',
          medium: 'from-yellow-500/20 to-orange-500/20 border-yellow-500/30',
          low: 'from-blue-500/20 to-blue-600/20 border-blue-500/30',
          info: 'from-blue-500/20 to-blue-600/20 border-blue-500/30'
        };
        
        const priorityColor = priorityColors[notification.priority] || priorityColors.info;
        const isUnread = !notification.isRead;
        
        return `
          <div class="p-4 hover:bg-white/5 transition-all duration-200 ${isUnread ? 'bg-gradient-to-r from-blue-500/5 to-blue-600/5' : ''}" 
               data-notification-id="${notification.id}">
            <div class="flex items-start gap-4">
              <!-- Priority Indicator -->
              <div class="flex-shrink-0">
                <div class="w-3 h-3 rounded-full ${isUnread ? 'bg-gradient-to-r from-green-400 to-green-500 animate-pulse' : 'bg-gray-500'}"></div>
              </div>
              
              <!-- Notification Icon -->
              <div class="flex-shrink-0">
                <div class="w-10 h-10 rounded-lg bg-gradient-to-br ${priorityColor} flex items-center justify-center">
                  ${notificationService.getNotificationIcon(notification.type, notification.category, notification.metadata)}
                </div>
              </div>
              
              <!-- Notification Content -->
              <div class="flex-1 min-w-0">
                <div class="flex items-start justify-between gap-2">
                  <div class="flex-1">
                    <h4 class="text-sm font-semibold text-white mb-1">${notification.title || 'Executive Notification'}</h4>
                    <p class="text-sm text-blue-200 leading-relaxed">${notification.message || 'No message content'}</p>
                    
                    <!-- Action Buttons -->
                    ${notification.actionUrl ? `
                      <div class="flex items-center gap-2 mt-3">
                        <a href="${notification.actionUrl}" class="inline-flex items-center gap-2 text-xs text-blue-300 hover:text-blue-200 transition-colors px-3 py-1.5 rounded-lg border border-blue-400/30 hover:bg-blue-400/10 hover:border-blue-400/50">
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                          </svg>
                          ${notification.actionText || 'View Details'}
                        </a>
                      </div>
                    ` : ''}
                  </div>
                  
                  <!-- Time and Actions -->
                  <div class="flex flex-col items-end gap-2">
                    <span class="text-xs text-blue-300 whitespace-nowrap">${notificationService.formatTime(notification.createdAt)}</span>
                    <div class="flex items-center gap-1">
                      ${!notification.isRead ? `
                        <button class="group flex items-center gap-2 text-sm font-semibold text-white bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 transition-all duration-300 ease-out px-3 py-2 rounded-xl border-2 border-green-400/50 hover:border-green-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" 
                                onclick="markExecutiveNotificationAsRead('${notification.id}')" 
                                title="Mark as read">
                          <svg class="w-4 h-4 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                        </button>
                      ` : ''}
                      <button class="group flex items-center gap-2 text-sm font-semibold text-white bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 transition-all duration-300 ease-out px-3 py-2 rounded-xl border-2 border-red-400/50 hover:border-red-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" 
                              onclick="deleteExecutiveNotification('${notification.id}')" 
                              title="Delete notification">
                        <svg class="w-4 h-4 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
      }).join('');

      notificationList.innerHTML = notificationsHtml;
      
      // Add dividers between notifications
      const notificationItems = notificationList.querySelectorAll('[data-notification-id]');
      notificationItems.forEach((item, index) => {
        if (index < notificationItems.length - 1) {
          const divider = document.createElement('div');
          divider.className = 'mx-4 border-t border-blue-400/10';
          item.after(divider);
        }
      });
      
    } catch (error) {
      console.error('Error loading Executive notifications:', error);
      notificationList.innerHTML = `
        <div class="p-6 text-center text-red-400">
          <div class="w-16 h-16 rounded-full bg-red-500/10 flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.500c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <h4 class="text-sm font-semibold text-red-300 mb-2">Connection Error</h4>
          <p class="text-sm text-red-200">Failed to load executive notifications</p>
          <p class="text-xs text-red-300 mt-1">Check your connection and try again</p>
        </div>
      `;
    }
  }

  // Global function for marking notification as read
  window.markExecutiveNotificationAsRead = async function(notificationId) {
    const notificationService = window.notificationService;
    if (!notificationService) return;
    
    try {
    await notificationService.markAsRead(notificationId);
      updateNotificationBadge(notificationService);
      loadNotifications(notificationService);
    } catch (error) {
      console.error('Error marking Executive notification as read:', error);
    }
  };

  // Executive Sidebar Toggle Functionality
  const executiveSidebarToggleBtn = document.getElementById('executive-sidebar-toggle');
  const executiveSidebar = document.querySelector('aside'); // Target the sidebar element
  const executiveToggleIcon = document.getElementById('executive-sidebar-toggle-icon');
  
  if (executiveSidebarToggleBtn && executiveSidebar && executiveToggleIcon) {
    console.log('🔧 Initializing Executive sidebar toggle functionality');
    
    // Icon paths
    const hamburgerIcon = "M4 6h16M4 12h16M4 18h16";
    const arrowRightIcon = "M9 5l7 7-7 7";
    
    function updateExecutiveIcon(isCollapsed) {
      // Add smooth rotation animation
      executiveToggleIcon.style.transform = 'rotate(180deg)';
      executiveToggleIcon.style.transition = 'all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
      
      setTimeout(() => {
        const iconPath = executiveToggleIcon.querySelector('path');
        if (iconPath) {
          iconPath.setAttribute('d', isCollapsed ? arrowRightIcon : hamburgerIcon);
        }
        executiveToggleIcon.style.transform = 'rotate(0deg)';
      }, 200);
    }
    
    // Check if sidebar is collapsed from localStorage
    const isCollapsed = localStorage.getItem('executive-sidebar-collapsed') === 'true';
    if (isCollapsed) {
      executiveSidebar.classList.add('collapsed');
      updateExecutiveIcon(true);
    }
    
    executiveSidebarToggleBtn.addEventListener('click', () => {
      console.log('🔄 Toggling Executive sidebar');
      
      const isCurrentlyCollapsed = executiveSidebar.classList.contains('collapsed');
      
      if (isCurrentlyCollapsed) {
        // Expand sidebar
        executiveSidebar.classList.remove('collapsed');
        localStorage.setItem('executive-sidebar-collapsed', 'false');
        updateExecutiveIcon(false);
        console.log('📖 Executive Sidebar expanded');
      } else {
        // Collapse sidebar
        executiveSidebar.classList.add('collapsed');
        localStorage.setItem('executive-sidebar-collapsed', 'true');
        updateExecutiveIcon(true);
        console.log('📕 Executive Sidebar collapsed');
      }
    });
  } else {
    console.warn('❌ Executive sidebar toggle elements not found');
  }

  // Profile Dropdown Functionality
  function initializeExecutiveProfileDropdown() {
    const profileBtn = document.getElementById('executive-profile-btn');
    const profileDropdown = document.getElementById('executive-profile-dropdown');
    const profileContainer = document.getElementById('executive-profile-container');
    
    if (!profileBtn || !profileDropdown) {
      console.error('❌ Executive profile dropdown elements not found');
      return;
    }

    console.log('✅ Initializing Executive profile dropdown');

    // Toggle dropdown on click
    profileBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      const isVisible = !profileDropdown.classList.contains('hidden');
      
      if (isVisible) {
        // Hide dropdown
        hideExecutiveProfileDropdown();
      } else {
        // Show dropdown
        showExecutiveProfileDropdown();
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!profileContainer.contains(e.target)) {
        hideExecutiveProfileDropdown();
      }
    });

    // Close dropdown on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        hideExecutiveProfileDropdown();
      }
    });

    // Show dropdown function with smooth fade-in
    function showExecutiveProfileDropdown() {
      // First remove hidden class to make element visible
      profileDropdown.classList.remove('hidden');
      
      // Force a reflow to ensure the element is rendered
      profileDropdown.offsetHeight;
      
      // Add showing class for smooth entrance animation
      profileDropdown.classList.add('showing');
      
      // Update button aria state
      profileBtn.setAttribute('aria-expanded', 'true');
      
      console.log('👤 Executive profile dropdown shown with smooth animation');
    }

    // Hide dropdown function with smooth fade-out
    function hideExecutiveProfileDropdown() {
      // Remove showing class and add hiding class for smooth exit animation
      profileDropdown.classList.remove('showing');
      profileDropdown.classList.add('hiding');
      
      // Use setTimeout to ensure smooth animation before hiding
      setTimeout(() => {
        profileDropdown.classList.add('hidden');
        profileDropdown.classList.remove('hiding');
      }, 300);
      
      // Update button aria state
      profileBtn.setAttribute('aria-expanded', 'false');
      
      console.log('🙈 Executive profile dropdown hidden with smooth animation');
    }
  }
  
  // Load profile picture from server or localStorage for topbar and dropdown (Executive-style)
  async function loadExecutiveTopbarProfilePictures() {
    try {
      // Get actual user ID from localStorage
      const userData = localStorage.getItem('user');
      let userId = 'EV-001'; // Default fallback
      if (userData) {
        try {
          const user = JSON.parse(userData);
          userId = user.employeeId || user.username || user.id || user.userId || 'EV-001';
        } catch (error) {
          console.warn('⚠️ Error parsing user data in Executive topbar, using default userId');
        }
      }
      
      // First try to get from server
      console.log('Executive Topbar: Fetching profile picture from server for userId:', userId);
      const response = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
      
      if (response.ok) {
        const result = await response.json();
        if (result.success && result.profilePictureUrl) {
          console.log('Executive Topbar: Profile picture loaded from server:', result.profilePictureUrl);
          
          // Preload the image to prevent blinking
          const img = new Image();
          img.onload = function() {
            // Update the topbar profile picture
            const topbarProfilePic = document.getElementById('executive-topbar-profile-picture');
            if (topbarProfilePic) {
              topbarProfilePic.src = result.profilePictureUrl;
              // Hide fallback div if it exists
              const fallbackDiv = topbarProfilePic.nextElementSibling;
              if (fallbackDiv) {
                fallbackDiv.style.display = 'none';
              }
            }
            
            // Update the dropdown profile picture
            const dropdownProfilePic = document.getElementById('executive-dropdown-profile-picture');
            if (dropdownProfilePic) {
              dropdownProfilePic.src = result.profilePictureUrl;
              // Hide fallback div if it exists
              const fallbackDiv = dropdownProfilePic.nextElementSibling;
              if (fallbackDiv) {
                fallbackDiv.style.display = 'none';
              }
            }
          };
          img.src = result.profilePictureUrl;
          
          // Store in localStorage for future use
          localStorage.setItem('executive_profile_picture', result.profilePictureUrl);
          return;
        }
      }
    } catch (error) {
      console.log('Executive Topbar: Server fetch failed, trying localStorage:', error);
    }
    
    // Fallback to localStorage if server fails
    const storedUrl = localStorage.getItem('executive_profile_picture');
    if (storedUrl) {
      // Preload the image to prevent blinking
      const img = new Image();
      img.onload = function() {
        const topbarProfilePic = document.getElementById('executive-topbar-profile-picture');
        if (topbarProfilePic) {
          topbarProfilePic.src = storedUrl;
          // Hide fallback div if it exists
          const fallbackDiv = topbarProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
          }
        }
        
        const dropdownProfilePic = document.getElementById('executive-dropdown-profile-picture');
        if (dropdownProfilePic) {
          dropdownProfilePic.src = storedUrl;
          // Hide fallback div if it exists
          const fallbackDiv = dropdownProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
          }
        }
      };
      img.src = storedUrl;
    }
  }
  
  // Listen for storage changes to update profile picture in real-time
  window.addEventListener('storage', function(e) {
    if (e.key === 'executive_profile_picture' && e.newValue) {
      // Preload the image to prevent blinking
      const img = new Image();
      img.onload = function() {
        const topbarProfilePic = document.getElementById('executive-topbar-profile-picture');
        if (topbarProfilePic) {
          topbarProfilePic.src = e.newValue;
          // Hide fallback div if it exists
          const fallbackDiv = topbarProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
          }
        }
        
        const dropdownProfilePic = document.getElementById('executive-dropdown-profile-picture');
        if (dropdownProfilePic) {
          dropdownProfilePic.src = e.newValue;
          // Hide fallback div if it exists
          const fallbackDiv = dropdownProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
          }
        }
      };
      img.src = e.newValue;
    }
  });

  // Listen for profile picture updates
  window.addEventListener('executiveProfilePictureUpdated', function(e) {
    if (e.detail.profilePictureUrl) {
      // Preload the image to prevent blinking
      const img = new Image();
      img.onload = function() {
        // Update main topbar profile picture
        const topbarProfilePic = document.getElementById('executive-topbar-profile-picture');
        if (topbarProfilePic) {
          topbarProfilePic.src = e.detail.profilePictureUrl;
          // Hide fallback div if it exists
          const fallbackDiv = topbarProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
          }
        }

        // Update dropdown profile picture
        const dropdownProfilePic = document.getElementById('executive-dropdown-profile-picture');
        if (dropdownProfilePic) {
          dropdownProfilePic.src = e.detail.profilePictureUrl;
          // Hide fallback div if it exists
          const fallbackDiv = dropdownProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
          }
        }
      };
      img.src = e.detail.profilePictureUrl;
      
      // Store in localStorage for future use
      localStorage.setItem('executive_profile_picture', e.detail.profilePictureUrl);
    }
  });
</script>

<style>
  /* Enhanced Custom Scrollbar for Executive Viewer Notifications */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(59, 130, 246, 0.5) transparent;
  }
  
  .custom-scrollbar::-webkit-scrollbar {
    width: 8px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: linear-gradient(to bottom, rgba(59, 130, 246, 0.1), rgba(59, 130, 246, 0.2));
    border-radius: 4px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: linear-gradient(to bottom, rgba(59, 130, 246, 0.6), rgba(59, 130, 246, 0.7));
    border-radius: 4px;
    border: 1px solid rgba(59, 130, 246, 0.3);
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(to bottom, rgba(59, 130, 246, 0.8), rgba(59, 130, 246, 0.9));
    box-shadow: 0 0 10px rgba(59, 130, 246, 0.4);
  }
  
  /* Enhanced Notification Panel Layout and Scrolling */
  #executive-notification-dropdown {
    display: flex;
    flex-direction: column;
    height: 100vh;
    visibility: hidden;
    opacity: 0;
  }

  #executive-notification-dropdown:not(.hidden) {
    visibility: visible;
    opacity: 1;
    animation: slideInRight 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  #executive-notification-list {
    flex: 1;
    overflow-y: auto;
    min-height: 0;
    padding-bottom: 1rem;
  }

  /* Enhanced Footer Styling */
  #executive-notification-dropdown > div:last-child {
    flex-shrink: 0;
    background: linear-gradient(135deg, rgba(30, 58, 138, 0.8) 0%, rgba(59, 130, 246, 0.7) 100%);
    border-top: 2px solid rgba(59, 130, 246, 0.2);
    box-shadow: 0 -4px 20px rgba(59, 130, 246, 0.2);
  }
  
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  /* Enhanced Action Button Hover Effects */
  #executive-mark-all-read,
  #executive-delete-all-read {
    position: relative;
    overflow: hidden;
  }

  #executive-mark-all-read::before,
  #executive-delete-all-read::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }

  #executive-mark-all-read:hover::before,
  #executive-delete-all-read:hover::before {
    left: 100%;
  }

  /* Enhanced Notification Item Hover Effects */
  #executive-notification-list [data-notification-id] {
    border-bottom: 2px solid rgba(59, 130, 246, 0.1);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  #executive-notification-list [data-notification-id]:hover {
    transform: translateX(6px);
    box-shadow: 0 6px 25px rgba(59, 130, 246, 0.1);
    background: rgba(59, 130, 246, 0.02);
    border-left: 4px solid #3b82f6;
  }

  #executive-notification-list [data-notification-id]:last-child {
    border-bottom: none;
  }

  /* Enhanced notification card styling */
  #executive-notification-list [data-notification-id] {
    margin: 0 8px;
    border-radius: 8px;
    padding: 16px;
  }

  #executive-notification-list [data-notification-id]:hover {
    margin-left: 4px;
    margin-right: 4px;
  }
  
  /* Priority Indicator Animations */
  .animate-pulse {
    animation: priorityPulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes priorityPulse {
    0%, 100% {
      opacity: 0.8;
      transform: scale(1);
    }
    50% {
      opacity: 1;
      transform: scale(1.1);
    }
  }

  /* Executive Sidebar Collapse Styles - ULTRA SMOOTH */
  :global(aside) {
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    width: 256px; /* w-64 default width */
    min-width: 256px;
    flex-shrink: 0;
  }

  :global(aside.collapsed) {
    width: 80px; /* w-20 collapsed width */
    min-width: 80px;
    overflow-y: hidden; /* Prevent scrollbar */
  }

  /* Override the scrollable area in collapsed state */
  :global(aside.collapsed .relative.flex-1.overflow-y-auto) {
    overflow-y: visible; /* Remove scroll in collapsed state */
  }

  /* Hide text in collapsed sidebar - SMOOTH FADE */
  :global(aside.collapsed .nav-text) {
    opacity: 0;
    pointer-events: none;
    width: 0;
    overflow: hidden;
    transition: opacity 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), width 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* USE PROFILE PICTURE IN COLLAPSED STATE - CENTERED */
  :global(aside.collapsed .w-14.h-14) {
    display: block !important; /* Show profile photo */
    margin: 0 auto !important; /* Center it perfectly */
  }

  :global(aside.collapsed .nav-text) {
    display: none !important;
  }

  :global(aside.collapsed .flex.items-center.gap-4) {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    padding: 0.75rem 0 !important; /* Standard padding */
    margin: 0 !important; /* No margin */
    position: relative !important;
    height: auto !important; /* Auto height for profile picture */
  }

  /* Navigation section - remove container padding */
  :global(aside.collapsed .relative.flex-1.overflow-y-auto.py-4) {
    padding: 0.5rem 0 !important; /* Only vertical padding */
  }

  /* Remove nav container padding in collapsed state */
  :global(aside.collapsed nav.space-y-2.px-3) {
    padding: 0 !important; /* Remove all nav padding */
    margin: 0 !important;
  }

  /* Navigation items - position to match expanded sidebar exactly */
  :global(aside.collapsed .nav-item) {
    padding: 0.75rem 0 0.75rem 1.75rem !important; /* Match expanded position */
    margin: 0.75rem 0 !important; /* Increased vertical spacing */
    justify-content: flex-start !important; /* Align to left to match expanded state */
    position: relative;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Logout section - make it visible and properly positioned */
  :global(aside.collapsed .relative.p-6:last-child) {
    padding: 0.5rem 0 1rem 0 !important; /* Vertical padding only */
    border-top: 1px solid rgba(255, 255, 255, 0.1) !important;
    margin-top: auto !important;
    display: block !important;
  }

  :global(aside.collapsed .relative.p-6:last-child button) {
    padding: 0.75rem 0 0.75rem 1.75rem !important; /* Match nav items positioning */
    margin: 0.75rem 0 !important;
    justify-content: flex-start !important; /* Align to left to match nav items */
    width: 100%;
    display: flex !important;
  }

  /* Hide logout text in collapsed state */
  :global(aside.collapsed .relative.p-6:last-child button span) {
    display: none !important;
  }

  :global(aside.collapsed .space-y-2) {
    gap: 0.75rem !important; /* Increased gap for better icon spacing */
  }

  /* Override space-y-2 utility in collapsed state with increased spacing */
  :global(aside.collapsed nav .space-y-2 > * + *) {
    margin-top: 0.75rem !important; /* Increased spacing for better visual separation */
  }

  /* Icons - position them to match expanded state */
  :global(aside.collapsed .nav-icon) {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    margin: 0; /* No margin - let padding handle positioning */
  }

  /* Ensure all nav text is hidden in collapsed state */
  :global(aside.collapsed .nav-text) {
    display: none !important;
    opacity: 0 !important;
    width: 0 !important;
    overflow: hidden !important;
  }

  /* Add smooth transitions to all navigation items */
  :global(.nav-item) {
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  :global(.nav-text) {
    transition: opacity 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), width 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  :global(.nav-icon) {
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Tooltip animations and styling */
  :global(aside.collapsed .nav-item:hover::after) {
    content: attr(data-tooltip);
    position: absolute;
    left: calc(100% + 12px);
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    white-space: nowrap;
    z-index: 1000;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    opacity: 0;
    animation: tooltipFadeIn 0.2s ease forwards;
  }

  @keyframes tooltipFadeIn {
    from {
      opacity: 0;
      transform: translateY(-50%) translateX(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(-50%) translateX(0);
    }
  }

  /* Tooltip arrow */
  :global(aside.collapsed .nav-item:hover::before) {
    content: '';
    position: absolute;
    left: calc(100% + 6px);
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
    border-right: 6px solid rgba(0, 0, 0, 0.9);
    z-index: 999;
    opacity: 0;
    animation: tooltipFadeIn 0.2s ease forwards;
  }

  /* Enhanced Executive Profile Dropdown Styles */
  #executive-profile-dropdown {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
  }

  #executive-profile-dropdown .group:hover {
    transform: translateX(4px);
  }

  /* Smooth transitions for dropdown items */
  #executive-profile-dropdown a,
  #executive-profile-dropdown button {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Enhanced hover effects */
  #executive-profile-dropdown .group:hover .w-8.h-8 {
    transform: scale(1.1);
    transition: transform 0.2s ease;
  }

  /* Enhanced Topbar Button Hover Effects */
  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }
  
  .group:hover .group-hover\:rotate-12 {
    transform: rotate(12deg);
  }
  
  .group:hover .group-hover\:rotate-6 {
    transform: rotate(6deg);
  }
  
  .group:hover .group-hover\:rotate-3 {
    transform: rotate(3deg);
  }
  
  /* Enhanced Profile Dropdown Animations */
  #executive-profile-dropdown {
    transform-origin: top right;
    will-change: opacity, transform, visibility;
  }

  /* Smooth entrance animation */
  #executive-profile-dropdown.showing {
    animation: dropdownFadeIn 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  /* Smooth exit animation */
  #executive-profile-dropdown.hiding {
    animation: dropdownFadeOut 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes dropdownFadeIn {
    from {
      opacity: 0;
      transform: scale(0.95) translateY(-10px);
      visibility: hidden;
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
      visibility: visible;
    }
  }

  @keyframes dropdownFadeOut {
    from {
      opacity: 1;
      transform: scale(1) translateY(0);
      visibility: visible;
    }
    to {
      opacity: 0;
      transform: scale(0.95) translateY(-10px);
      visibility: hidden;
    }
  }
</style> 