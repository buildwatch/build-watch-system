---
// Logout Confirmation Modal Component
---

<!-- Secretariat Profile Picture Manager Script -->
<script src="/src/scripts/secretariat-profile-picture-manager.js"></script>

<div id="logout-modal" class="fixed inset-0 z-50 hidden">
  <!-- Backdrop -->
  <div id="logout-modal-backdrop" class="absolute inset-0 bg-black/50 backdrop-blur-sm transition-opacity duration-300"></div>
  
  <!-- Modal -->
  <div class="absolute inset-0 flex items-center justify-center p-4">
    <div id="logout-modal-content" class="bg-white rounded-2xl shadow-2xl max-w-md w-full transform transition-all duration-300 scale-95 opacity-0">
      <!-- Header -->
      <div class="flex items-center justify-between p-6 border-b border-gray-100">
        <div class="flex items-center gap-3">
          <div class="w-10 h-10 bg-red-100 rounded-full flex items-center justify-center">
            <svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
            </svg>
          </div>
          <div>
            <h3 class="text-lg font-semibold text-gray-900">Confirm Logout</h3>
            <p class="text-sm text-gray-500">Are you sure you want to log out?</p>
          </div>
        </div>
      </div>
      
      <!-- User Info -->
      <div class="px-6 py-4 bg-gray-50 border-b border-gray-100">
        <div class="flex items-center gap-3">
          <!-- Profile Picture Container -->
          <div class="relative">
            <div class="w-12 h-12 rounded-full overflow-hidden border-2 border-gray-200 shadow-sm">
              <img 
                id="logoutProfilePicture" 
                src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%236B7280'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EU%3C/text%3E%3C/svg%3E" 
                alt="Profile Picture" 
                class="w-full h-full object-cover"
                crossorigin="anonymous"
              />
              <!-- Fallback Profile Picture -->
              <div id="logoutProfileFallback" class="w-full h-full bg-gradient-to-r from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-sm" style="display: none;">
                <span id="logoutProfileInitials">SA</span>
              </div>
            </div>
          </div>
          <div>
            <p class="text-sm font-medium text-gray-800" id="logoutUserName">Loading user...</p>
            <p class="text-xs text-gray-600" id="logoutUserRole">Loading role...</p>
          </div>
        </div>
      </div>
      
      <!-- Content -->
      <div class="p-6">
        <p class="text-gray-600 mb-6">
          You will be logged out of your current session. Any unsaved changes will be lost.
        </p>
        
        <!-- Action Buttons -->
        <div class="flex gap-3">
          <button id="logout-cancel-btn" class="flex-1 px-4 py-2.5 text-gray-700 bg-gray-100 hover:bg-gray-200 rounded-xl font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-gray-300">
            Cancel
          </button>
          <button id="logout-confirm-btn" class="flex-1 px-4 py-2.5 text-white bg-red-600 hover:bg-red-700 rounded-xl font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-red-300 shadow-lg hover:shadow-xl">
            Yes, Logout
          </button>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class LogoutModal {
    constructor() {
      this.modal = document.getElementById('logout-modal');
      this.backdrop = document.getElementById('logout-modal-backdrop');
      this.content = document.getElementById('logout-modal-content');
      this.cancelBtn = document.getElementById('logout-cancel-btn');
      this.confirmBtn = document.getElementById('logout-confirm-btn');
      this.userNameElement = document.getElementById('logoutUserName');
      this.userRoleElement = document.getElementById('logoutUserRole');
      this.onConfirm = null;
      
      this.init();
    }
    
    init() {
      // Cancel button event
      this.cancelBtn?.addEventListener('click', () => this.hide());
      
      // Backdrop click event
      this.backdrop?.addEventListener('click', () => this.hide());
      
      // Confirm button event
      this.confirmBtn?.addEventListener('click', () => {
        if (this.onConfirm) {
          this.onConfirm();
        }
        this.hide();
      });
      
      // Escape key event
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isVisible()) {
          this.hide();
        }
      });
      
      // Listen for profile picture updates to keep logout modal in sync
      window.addEventListener('profilePictureUpdated', (e) => {
        if (this.isVisible() && e.detail.profilePictureUrl) {
          console.log('🔄 Logout modal received profile picture update:', e.detail.profilePictureUrl);
          this.updateProfilePicture(e.detail.profilePictureUrl);
        }
      });
      
      // Listen for MPMEC profile picture updates specifically
      window.addEventListener('mpmecProfilePictureUpdated', (e) => {
        if (this.isVisible() && e.detail.profilePictureUrl) {
          console.log('🔄 Logout modal received MPMEC profile picture update:', e.detail.profilePictureUrl);
          this.updateProfilePicture(e.detail.profilePictureUrl);
        }
      });
      
      // Listen for Secretariat profile picture updates
      window.addEventListener('secretariatProfilePictureUpdated', (e) => {
        if (this.isVisible() && e.detail.profilePictureUrl) {
          console.log('🔄 Logout modal received Secretariat profile picture update:', e.detail.profilePictureUrl);
          this.updateProfilePicture(e.detail.profilePictureUrl);
        }
      });
      
      // Listen for EIU profile picture updates
      window.addEventListener('eiuProfilePictureUpdated', (e) => {
        if (this.isVisible() && e.detail.profilePictureUrl) {
          console.log('🔄 Logout modal received EIU profile picture update:', e.detail.profilePictureUrl);
          this.updateProfilePicture(e.detail.profilePictureUrl);
        }
      });
      
      // Listen for LGU-IU IOO profile picture updates
      window.addEventListener('iuProfilePictureUpdated', (e) => {
        if (this.isVisible() && e.detail.profilePictureUrl) {
          console.log('🔄 Logout modal received IU profile picture update:', e.detail.profilePictureUrl);
          this.updateProfilePicture(e.detail.profilePictureUrl);
        }
      });
      
      // Listen for System Admin profile picture updates
      window.addEventListener('sysadminProfilePictureUpdated', (e) => {
        if (this.isVisible() && e.detail.profilePictureUrl) {
          console.log('🔄 Logout modal received System Admin profile picture update:', e.detail.profilePictureUrl);
          this.updateProfilePicture(e.detail.profilePictureUrl);
        }
      });
      
      // Listen for Executive Viewer profile picture updates
      window.addEventListener('executiveProfilePictureUpdated', (e) => {
        if (this.isVisible() && e.detail.profilePictureUrl) {
          console.log('🔄 Logout modal received Executive Viewer profile picture update:', e.detail.profilePictureUrl);
          this.updateProfilePicture(e.detail.profilePictureUrl);
        }
      });
    }
    
    async show(onConfirm) {
      this.onConfirm = onConfirm;
      
      // Load and display user information
      await this.loadUserInfo();
      
      // Also try to refresh profile picture from current state
      this.refreshProfilePictureFromCurrentState().catch(error => {
        console.error('Error refreshing profile picture:', error);
      });
      
      // Force immediate profile picture update for MPMEC users
      this.forceImmediateProfilePictureUpdate();
      
      this.modal.classList.remove('hidden');
      
      // Trigger animation
      setTimeout(() => {
        this.backdrop.style.opacity = '1';
        this.content.style.transform = 'scale(1)';
        this.content.style.opacity = '1';
      }, 10);
    }
    
    async loadUserInfo() {
      try {
        // Get current user info first to determine user-specific localStorage keys
        const token = localStorage.getItem('token');
        if (!token) return;

        const response = await fetch('http://localhost:3000/api/auth/profile', {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });

        if (!response.ok) return;

        const data = await response.json();
        if (!data.success || !data.user) return;

        const user = data.user;
        
        // Create user-specific localStorage keys based on user role and ID
        let userSpecificKey = '';
        if (user.role === 'sysadmin' || user.role === 'SYS.AD') {
          userSpecificKey = 'sysadmin';
        } else if (user.role === 'secretariat') {
          userSpecificKey = 'secretariat';
        } else if (user.role === 'eiu') {
          userSpecificKey = 'eiu';
        } else if (user.role === 'LGU-PMT' && user.subRole && user.subRole.toLowerCase() === 'mpmec') {
          userSpecificKey = 'mpmec';
        } else if (user.role === 'Executive Viewer' || user.role === 'EXEC') {
          userSpecificKey = 'executive';
        } else if (user.role === 'iu') {
          userSpecificKey = 'iu';
        } else {
          userSpecificKey = user.role || 'user';
        }
        
        const userSpecificFullNameKey = `${userSpecificKey}_userFullName`;
        const userSpecificProfileDataKey = `${userSpecificKey}_userProfileData`;
        
        // Check if we have saved profile data in localStorage for this specific user
        const savedFullName = localStorage.getItem(userSpecificFullNameKey);
        const savedProfileData = localStorage.getItem(userSpecificProfileDataKey);
        
        if (savedFullName) {
          console.log(`🔄 LogoutModal: Using saved full name from localStorage for ${userSpecificKey}:`, savedFullName);
          if (this.userNameElement) {
            this.userNameElement.textContent = savedFullName;
          }
        } else {
          // Use server data if no localStorage data
          let displayName = user.fullName || user.name || user.username || 'Unknown User';
          
          // For MPMEC users, show "MPMEC Viewer Admin" as the name
          if (user.role === 'LGU-PMT' && user.subRole && user.subRole.toLowerCase() === 'mpmec') {
            displayName = 'MPMEC Viewer Admin';
          }
          
          if (this.userNameElement) {
            this.userNameElement.textContent = displayName;
          }
        }
        
        // Update user role
        if (this.userRoleElement) {
          if (user.role === 'iu') {
            this.userRoleElement.textContent = user.subRole || 'Implementing Office-Officer';
          } else if (user.role === 'eiu') {
            this.userRoleElement.textContent = 'EIU Personnel';
          } else if (user.role === 'secretariat') {
            this.userRoleElement.textContent = 'Secretariat';
          } else if (user.role === 'mpmec') {
            this.userRoleElement.textContent = 'MPMEC';
          } else if (user.role === 'sysadmin') {
            this.userRoleElement.textContent = 'System Administrator';
          } else if (user.role === 'LGU-PMT' && user.subRole && user.subRole.toLowerCase() === 'mpmec') {
            this.userRoleElement.textContent = 'MPMEC Viewer Admin';
          } else {
            this.userRoleElement.textContent = user.role || 'User';
          }
        }
        
        // Load profile picture
        await this.loadProfilePicture(user);
        
        // If we have localStorage data, we're done
        if (savedFullName) {
          console.log(`✅ LogoutModal: Using localStorage data for ${userSpecificKey}, skipping server call`);
          return;
        }
      } catch (error) {
        console.error('Error loading user info for logout modal:', error);
        
        // Set fallback values
        if (this.userNameElement) {
          this.userNameElement.textContent = 'Current User';
        }
        if (this.userRoleElement) {
          this.userRoleElement.textContent = 'User';
        }
        
        // Show fallback profile picture
        this.showFallbackProfilePicture();
      }
    }
    
    async loadProfilePicture(user) {
      try {
        const profilePicture = document.getElementById('logoutProfilePicture');
        const profileFallback = document.getElementById('logoutProfileFallback');
        const profileInitials = document.getElementById('logoutProfileInitials');
        
        if (!profilePicture || !profileFallback || !profileInitials) return;
        
        // Set initials for fallback
        let initials = 'U';
        
        // For MPMEC users, show "MV" as initials
        if (user.role === 'LGU-PMT' && user.subRole && user.subRole.toLowerCase() === 'mpmec') {
          initials = 'MV';
        } else {
          const fullName = user.fullName || user.name || user.username || '';
          initials = fullName.split(' ').map(n => n[0]).join('').toUpperCase().slice(0, 2) || 'U';
        }
        
        profileInitials.textContent = initials;
        
        // Try to load profile picture from server first
        let profileUrl = null;
        
        // For MPMEC users, use EIU-style direct loading
        if (user.role === 'LGU-PMT' && user.subRole && user.subRole.toLowerCase() === 'mpmec') {
          console.log('🎯 MPMEC user detected, loading profile picture (EIU-style)...');
          console.log('🔍 MPMEC user data:', user);
          
          // EIU-style direct loading: Try server first, then localStorage
          try {
            // Try LGU-PMT-0001 first (common key in profile-data.json)
            console.log('🔄 MPMEC: Fetching profile picture from server for userId: LGU-PMT-0001');
            const response = await fetch(`http://localhost:3000/api/profile/picture/LGU-PMT-0001`);
            
            if (response.ok) {
              const result = await response.json();
              if (result.success && result.profilePictureUrl) {
                console.log('✅ MPMEC: Profile picture loaded from server:', result.profilePictureUrl);
                
                // EIU-style direct update: Update the img src immediately with preloading
                const profilePicture = document.getElementById('logoutProfilePicture');
                if (profilePicture) {
                  // Preload the image to prevent blinking
                  const img = new Image();
                  img.onload = function() {
                    profilePicture.src = result.profilePictureUrl;
                    console.log('✅ MPMEC logout modal profile picture updated:', result.profilePictureUrl);
                  };
                  img.src = result.profilePictureUrl;
                }
                
                // Store in localStorage for future use
                localStorage.setItem('mpmec_profile_picture', result.profilePictureUrl);
                return; // Exit early - we're done
              }
            }
          } catch (error) {
            console.log('MPMEC: Server fetch failed, trying localStorage:', error);
          }
          
          // Fallback to localStorage if server fails
            const storedUrl = localStorage.getItem('mpmec_profile_picture');
            if (storedUrl) {
            console.log('🔄 MPMEC: Using localStorage profile picture:', storedUrl);
            const profilePicture = document.getElementById('logoutProfilePicture');
            if (profilePicture) {
              // Preload the image to prevent blinking
              const img = new Image();
              img.onload = function() {
                profilePicture.src = storedUrl;
                console.log('✅ MPMEC logout modal profile picture updated from localStorage:', storedUrl);
              };
              img.src = storedUrl;
            }
            return; // Exit early - we're done
          }
          
          console.log('❌ MPMEC: No profile picture found in server or localStorage');
          return; // Exit early - let the generic placeholder remain
        }
        
        // For EIU users, prioritize EIU profile picture manager
        if (user.role === 'EIU') {
          // Check EIU profile picture manager first
          if (window.eiuProfilePictureManager && window.eiuProfilePictureManager.profilePictureUrl) {
            profileUrl = window.eiuProfilePictureManager.profilePictureUrl;
            console.log('🎯 EIU user, using manager profile picture:', profileUrl);
          }
          
          // If no manager URL, check EIU localStorage
          if (!profileUrl) {
            profileUrl = localStorage.getItem('eiu_profile_picture');
            if (profileUrl) {
              console.log('🔄 EIU user, using localStorage profile picture:', profileUrl);
            }
          }
          
          // If still no URL, try to get from server with actual user ID
          if (!profileUrl) {
            try {
              const userId = user.employeeId || user.username || user.id || user.userId || 'EIU-0001';
              const profileResponse = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
              if (profileResponse.ok) {
                const profileData = await profileResponse.json();
                if (profileData.profilePictureUrl) {
                  profileUrl = profileData.profilePictureUrl;
                  console.log('🔄 EIU user, using server profile picture:', profileUrl);
                }
              }
            } catch (error) {
              console.log('Failed to load EIU profile picture from server:', error);
            }
          }
        }
        
        // For Secretariat users, prioritize Secretariat profile picture manager
        if (user.role === 'secretariat') {
          // Check Secretariat profile picture manager first
          if (window.secretariatProfilePictureManager && window.secretariatProfilePictureManager.profilePictureUrl) {
            profileUrl = window.secretariatProfilePictureManager.profilePictureUrl;
            console.log('🎯 Secretariat user, using manager profile picture:', profileUrl);
          }
          
          // If no manager URL, check Secretariat localStorage
          if (!profileUrl) {
            profileUrl = localStorage.getItem('secretariat_profile_picture');
            if (profileUrl) {
              console.log('🔄 Secretariat user, using localStorage profile picture:', profileUrl);
            }
          }
          
          // If still no URL, try to get from server with actual user ID
          if (!profileUrl) {
            try {
              const userId = user.employeeId || user.username || user.id || user.userId || 'SEC-0001';
              const profileResponse = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
              if (profileResponse.ok) {
                const profileData = await profileResponse.json();
                if (profileData.profilePictureUrl) {
                  profileUrl = profileData.profilePictureUrl;
                  console.log('🔄 Secretariat user, using server profile picture:', profileUrl);
                }
              }
            } catch (error) {
              console.log('Failed to load Secretariat profile picture from server:', error);
            }
          }
        }
        
        // For Executive Viewer users, prioritize Executive Viewer profile picture manager
        if (user.role === 'Executive Viewer' || user.role === 'EXEC') {
          console.log('🎯 Executive Viewer user detected, loading profile picture...');
          console.log('🔍 Executive Viewer user data:', user);
          
          // Check Executive Viewer profile picture manager first
          if (window.executiveProfilePictureManager && window.executiveProfilePictureManager.profilePictureUrl) {
            profileUrl = window.executiveProfilePictureManager.profilePictureUrl;
            console.log('🎯 Executive Viewer user, using manager profile picture:', profileUrl);
          }
          
          // If no manager URL, check Executive Viewer localStorage
          if (!profileUrl) {
            profileUrl = localStorage.getItem('executive_profile_picture');
            if (profileUrl) {
              console.log('🔄 Executive Viewer user, using localStorage profile picture:', profileUrl);
            }
          }
          
          // If still no URL, try to get from server with multiple user IDs
          if (!profileUrl) {
            try {
              // For Executive Viewer, try common keys: email, EV-001, username, etc.
              const possibleUserIds = ['exeviewer@gmail.com', 'EV-001', user.employeeId, user.username, user.email, user.id, user.userId].filter(Boolean);
              console.log('🔄 Executive Viewer user, trying user IDs in order:', possibleUserIds);
              
              for (const userId of possibleUserIds) {
                console.log('🔄 Trying Executive Viewer userId:', userId);
              const profileResponse = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
              if (profileResponse.ok) {
                const profileData = await profileResponse.json();
                  if (profileData.success && profileData.profilePictureUrl) {
                  profileUrl = profileData.profilePictureUrl;
                    console.log('✅ Executive Viewer user, found profile picture with userId:', userId, 'URL:', profileUrl);
                    // Store it for future use
                    localStorage.setItem('executive_profile_picture', profileUrl);
                    break; // Exit loop once we find a valid profile picture
                  }
                }
              }
              
              if (!profileUrl) {
                console.log('❌ Executive Viewer user, no profile picture found with any user ID');
              }
            } catch (error) {
              console.log('❌ Failed to load Executive Viewer profile picture from server:', error);
            }
          }
        }
        
        // For LGU-IU IOO users, use EIU-style direct loading
        if (user.role === 'iu' || user.role === 'IU') {
          console.log('🎯 LGU-IU IOO user detected, loading profile picture (EIU-style)...');
          console.log('🔍 LGU-IU IOO user data:', user);
          
          // EIU-style direct loading: Try server first, then localStorage
          try {
            // Try LGU-IU-0001 first (common key in profile-data.json)
            console.log('🔄 LGU-IU IOO: Fetching profile picture from server for userId: LGU-IU-0001');
            const response = await fetch(`http://localhost:3000/api/profile/picture/LGU-IU-0001`);
            
            if (response.ok) {
              const result = await response.json();
              if (result.success && result.profilePictureUrl) {
                console.log('✅ LGU-IU IOO: Profile picture loaded from server:', result.profilePictureUrl);
                
                // EIU-style direct update: Update the img src immediately with preloading
                const profilePicture = document.getElementById('logoutProfilePicture');
                if (profilePicture) {
                  // Preload the image to prevent blinking
                  const img = new Image();
                  img.onload = function() {
                    profilePicture.src = result.profilePictureUrl;
                    console.log('✅ LGU-IU IOO logout modal profile picture updated:', result.profilePictureUrl);
                  };
                  img.src = result.profilePictureUrl;
                }
                
                // Store in localStorage for future use
                localStorage.setItem('iu_profile_picture', result.profilePictureUrl);
                return; // Exit early - we're done
              }
            }
          } catch (error) {
            console.log('LGU-IU IOO: Server fetch failed, trying localStorage:', error);
          }
          
          // Fallback to localStorage if server fails
          const storedUrl = localStorage.getItem('iu_profile_picture');
          if (storedUrl) {
            console.log('🔄 LGU-IU IOO: Using localStorage profile picture:', storedUrl);
            const profilePicture = document.getElementById('logoutProfilePicture');
            if (profilePicture) {
              // Preload the image to prevent blinking
              const img = new Image();
              img.onload = function() {
                profilePicture.src = storedUrl;
                console.log('✅ LGU-IU IOO logout modal profile picture updated from localStorage:', storedUrl);
              };
              img.src = storedUrl;
            }
            return; // Exit early - we're done
          }
          
          console.log('❌ LGU-IU IOO: No profile picture found in server or localStorage');
          return; // Exit early - let the generic placeholder remain
        }
        
        // For System Admin, use EIU-style direct loading
        if (user.role === 'sysadmin' || user.role === 'SYS.AD' || user.role === 'System Administrator') {
          console.log('🎯 System Admin user detected, loading profile picture (EIU-style)...');
          console.log('🔍 System Admin user data:', user);
          
          // EIU-style direct loading: Try server first, then localStorage
          try {
            // Try SA-001 first (primary key in profile-data.json)
            console.log('🔄 System Admin: Fetching profile picture from server for userId: SA-001');
            const response = await fetch(`http://localhost:3000/api/profile/picture/SA-001`);
            
            if (response.ok) {
              const result = await response.json();
              if (result.success && result.profilePictureUrl) {
                console.log('✅ System Admin: Profile picture loaded from server:', result.profilePictureUrl);
                
                // EIU-style direct update: Update the img src immediately with preloading
                const profilePicture = document.getElementById('logoutProfilePicture');
                if (profilePicture) {
                  // Preload the image to prevent blinking
                  const img = new Image();
                  img.onload = function() {
                    profilePicture.src = result.profilePictureUrl;
                    console.log('✅ System Admin logout modal profile picture updated:', result.profilePictureUrl);
                  };
                  img.src = result.profilePictureUrl;
                }
                
                // Store in localStorage for future use
                localStorage.setItem('sysadmin_profile_picture', result.profilePictureUrl);
                return; // Exit early - we're done
              }
            }
          } catch (error) {
            console.log('System Admin: Server fetch failed, trying localStorage:', error);
          }
          
          // Fallback to localStorage if server fails
          const storedUrl = localStorage.getItem('sysadmin_profile_picture');
          if (storedUrl) {
            console.log('🔄 System Admin: Using localStorage profile picture:', storedUrl);
            const profilePicture = document.getElementById('logoutProfilePicture');
            if (profilePicture) {
              // Preload the image to prevent blinking
              const img = new Image();
              img.onload = function() {
                profilePicture.src = storedUrl;
                console.log('✅ System Admin logout modal profile picture updated from localStorage:', storedUrl);
              };
              img.src = storedUrl;
            }
            return; // Exit early - we're done
          }
          
          console.log('❌ System Admin: No profile picture found in server or localStorage');
          return; // Exit early - let the generic placeholder remain
        }
        
        // If still no URL, try general localStorage
        if (!profileUrl) {
          profileUrl = localStorage.getItem('profilePictureUrl');
        }
        
        // If we have a profile picture URL, display it with preloading (EIU-style)
        if (profileUrl) {
          // Preload the image to prevent blinking
          const img = new Image();
          img.onload = function() {
          profilePicture.src = profileUrl;
          profilePicture.style.display = 'block';
          profileFallback.style.display = 'none';
          
          // Add error handler to fallback to initials if image fails
          profilePicture.onerror = () => {
            profilePicture.style.display = 'none';
            profileFallback.style.display = 'flex';
          };
          };
          img.onerror = function() {
            // If preloading fails, show fallback
            profilePicture.style.display = 'none';
            profileFallback.style.display = 'flex';
          };
          img.src = profileUrl;
        } else {
          // Show fallback with initials
          this.showFallbackProfilePicture();
        }
        
      } catch (error) {
        console.error('Error loading profile picture for logout modal:', error);
        this.showFallbackProfilePicture();
      }
    }
    
    showFallbackProfilePicture() {
      const profilePicture = document.getElementById('logoutProfilePicture');
      const profileFallback = document.getElementById('logoutProfileFallback');
      
      if (profilePicture && profileFallback) {
        profilePicture.style.display = 'none';
        profileFallback.style.display = 'flex';
      }
    }
    
    updateProfilePicture(profileUrl) {
      const profilePicture = document.getElementById('logoutProfilePicture');
      
      if (profilePicture && profileUrl) {
        // EIU-style direct update: Preload the image to prevent blinking
        const img = new Image();
        img.onload = function() {
        profilePicture.src = profileUrl;
          console.log('✅ Logout modal profile picture updated (EIU-style):', profileUrl);
        };
        img.onerror = function() {
          console.log('❌ Logout modal profile picture failed to load:', profileUrl);
          // Keep the existing placeholder - don't switch to complex fallback
        };
        img.src = profileUrl;
      }
    }
    
    async refreshProfilePictureFromCurrentState() {
      // For MPMEC users, prioritize the MPMEC profile picture manager
      const userData = localStorage.getItem('user');
      if (userData) {
        try {
          const user = JSON.parse(userData);
          if (user.role === 'LGU-PMT' && user.subRole && user.subRole.toLowerCase() === 'mpmec') {
            console.log('🎯 MPMEC user detected in refresh, loading profile picture (EIU-style)...');
            console.log('🔍 MPMEC user data in refresh:', user);
            
            // EIU-style direct loading: Try localStorage first, then server
            const mpmecProfileUrl = localStorage.getItem('mpmec_profile_picture');
            if (mpmecProfileUrl) {
              console.log('🔄 MPMEC user, using localStorage profile picture:', mpmecProfileUrl);
              this.updateProfilePicture(mpmecProfileUrl);
              return;
            }
            
            // If no localStorage, try to get from server (LGU-PMT-0001 primary key)
            try {
              console.log('🔄 MPMEC refresh: Fetching from server for userId: LGU-PMT-0001');
              const profileResponse = await fetch(`http://localhost:3000/api/profile/picture/LGU-PMT-0001`);
              if (profileResponse.ok) {
                const profileData = await profileResponse.json();
                if (profileData.success && profileData.profilePictureUrl) {
                  console.log('✅ MPMEC user in refresh, found profile picture:', profileData.profilePictureUrl);
                  this.updateProfilePicture(profileData.profilePictureUrl);
                  // Store it for future use
                  localStorage.setItem('mpmec_profile_picture', profileData.profilePictureUrl);
                  return;
                }
              }
              
              console.log('❌ MPMEC user in refresh, no profile picture found');
            } catch (error) {
              console.log('❌ Failed to load MPMEC profile picture from server in refresh:', error);
            }
          }
          
          if (user.role === 'EIU') {
            // EIU user - prioritize EIU profile picture manager
            if (window.eiuProfilePictureManager && window.eiuProfilePictureManager.profilePictureUrl) {
              console.log('🎯 EIU user detected, using EIU manager profile picture:', window.eiuProfilePictureManager.profilePictureUrl);
              this.updateProfilePicture(window.eiuProfilePictureManager.profilePictureUrl);
              return;
            }
            
            // Fallback to EIU localStorage
            const eiuProfileUrl = localStorage.getItem('eiu_profile_picture');
            if (eiuProfileUrl) {
              console.log('🔄 EIU user, using localStorage profile picture:', eiuProfileUrl);
              this.updateProfilePicture(eiuProfileUrl);
              return;
            }
            
            // If still no URL, try to get from server with actual user ID
            try {
              const userId = user.employeeId || user.username || user.id || user.userId || 'EIU-0001';
              const profileResponse = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
              if (profileResponse.ok) {
                const profileData = await profileResponse.json();
                if (profileData.profilePictureUrl) {
                  console.log('🔄 EIU user, using server profile picture:', profileData.profilePictureUrl);
                  this.updateProfilePicture(profileData.profilePictureUrl);
                  return;
                }
              }
            } catch (error) {
              console.log('Failed to load EIU profile picture from server in refresh:', error);
            }
          }
          
          if (user.role === 'secretariat') {
            // Secretariat user - prioritize Secretariat profile picture manager
            if (window.secretariatProfilePictureManager && window.secretariatProfilePictureManager.profilePictureUrl) {
              console.log('🎯 Secretariat user detected, using Secretariat manager profile picture:', window.secretariatProfilePictureManager.profilePictureUrl);
              this.updateProfilePicture(window.secretariatProfilePictureManager.profilePictureUrl);
              return;
            }
            
            // Fallback to Secretariat localStorage
            const secretariatProfileUrl = localStorage.getItem('secretariat_profile_picture');
            if (secretariatProfileUrl) {
              console.log('🔄 Secretariat user, using localStorage profile picture:', secretariatProfileUrl);
              this.updateProfilePicture(secretariatProfileUrl);
              return;
            }
            
            // If still no URL, try to get from server with actual user ID
            try {
              const userId = user.employeeId || user.username || user.id || user.userId || 'SEC-0001';
              const profileResponse = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
              if (profileResponse.ok) {
                const profileData = await profileResponse.json();
                if (profileData.profilePictureUrl) {
                  console.log('🔄 Secretariat user, using server profile picture:', profileData.profilePictureUrl);
                  this.updateProfilePicture(profileData.profilePictureUrl);
                  return;
                }
              }
            } catch (error) {
              console.log('Failed to load Secretariat profile picture from server in refresh:', error);
            }
          }
          
          if (user.role === 'Executive Viewer' || user.role === 'EXEC') {
            console.log('🎯 Executive Viewer user detected in refresh, loading profile picture...');
            console.log('🔍 Executive Viewer user data in refresh:', user);
            
            // Executive Viewer user - prioritize Executive Viewer profile picture manager
            if (window.executiveProfilePictureManager && window.executiveProfilePictureManager.profilePictureUrl) {
              console.log('🎯 Executive Viewer user detected, using Executive Viewer manager profile picture:', window.executiveProfilePictureManager.profilePictureUrl);
              this.updateProfilePicture(window.executiveProfilePictureManager.profilePictureUrl);
              return;
            }
            
            // Fallback to Executive Viewer localStorage
            const executiveProfileUrl = localStorage.getItem('executive_profile_picture');
            if (executiveProfileUrl) {
              console.log('🔄 Executive Viewer user, using localStorage profile picture:', executiveProfileUrl);
              this.updateProfilePicture(executiveProfileUrl);
              return;
            }
            
            // If still no URL, try to get from server with multiple user IDs
            try {
              // For Executive Viewer, try common keys: email, EV-001, username, etc.
              const possibleUserIds = ['exeviewer@gmail.com', 'EV-001', user.employeeId, user.username, user.email, user.id, user.userId].filter(Boolean);
              console.log('🔄 Executive Viewer user in refresh, trying user IDs in order:', possibleUserIds);
              
              for (const userId of possibleUserIds) {
                console.log('🔄 Refresh trying Executive Viewer userId:', userId);
              const profileResponse = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
                if (profileResponse.ok) {
                  const profileData = await profileResponse.json();
                  if (profileData.success && profileData.profilePictureUrl) {
                    console.log('✅ Executive Viewer user in refresh, found profile picture with userId:', userId, 'URL:', profileData.profilePictureUrl);
                    this.updateProfilePicture(profileData.profilePictureUrl);
                    // Store it for future use
                    localStorage.setItem('executive_profile_picture', profileData.profilePictureUrl);
                    return;
                  }
                }
              }
              
              console.log('❌ Executive Viewer user in refresh, no profile picture found with any user ID');
            } catch (error) {
              console.log('❌ Failed to load Executive Viewer profile picture from server in refresh:', error);
            }
          }
          
          if (user.role === 'iu' || user.role === 'IU') {
            console.log('🎯 LGU-IU IOO user detected in refresh, loading profile picture (EIU-style)...');
            console.log('🔍 LGU-IU IOO user data in refresh:', user);
            
            // EIU-style direct loading: Try localStorage first, then server
            const iuProfileUrl = localStorage.getItem('iu_profile_picture');
            if (iuProfileUrl) {
              console.log('🔄 LGU-IU IOO user, using localStorage profile picture:', iuProfileUrl);
              this.updateProfilePicture(iuProfileUrl);
              return;
            }
            
            // If no localStorage, try to get from server (LGU-IU-0001 primary key)
            try {
              console.log('🔄 LGU-IU IOO refresh: Fetching from server for userId: LGU-IU-0001');
              const profileResponse = await fetch(`http://localhost:3000/api/profile/picture/LGU-IU-0001`);
              if (profileResponse.ok) {
                const profileData = await profileResponse.json();
                if (profileData.success && profileData.profilePictureUrl) {
                  console.log('✅ LGU-IU IOO user in refresh, found profile picture:', profileData.profilePictureUrl);
                  this.updateProfilePicture(profileData.profilePictureUrl);
                  // Store it for future use
                  localStorage.setItem('iu_profile_picture', profileData.profilePictureUrl);
                  return;
                }
              }
              
              console.log('❌ LGU-IU IOO user in refresh, no profile picture found');
            } catch (error) {
              console.log('❌ Failed to load LGU-IU IOO profile picture from server in refresh:', error);
            }
          }
          
          if (user.role === 'sysadmin' || user.role === 'SYS.AD' || user.role === 'System Administrator') {
            console.log('🎯 System Admin user detected in refresh, loading profile picture (EIU-style)...');
            console.log('🔍 System Admin user data in refresh:', user);
            
            // EIU-style direct loading: Try localStorage first, then server
            const sysadminProfileUrl = localStorage.getItem('sysadmin_profile_picture');
            if (sysadminProfileUrl) {
              console.log('🔄 System Admin user, using localStorage profile picture:', sysadminProfileUrl);
              this.updateProfilePicture(sysadminProfileUrl);
              return;
            }
            
            // If no localStorage, try to get from server (SA-001 primary key)
            try {
              console.log('🔄 System Admin refresh: Fetching from server for userId: SA-001');
              const profileResponse = await fetch(`http://localhost:3000/api/profile/picture/SA-001`);
              if (profileResponse.ok) {
                const profileData = await profileResponse.json();
                if (profileData.success && profileData.profilePictureUrl) {
                  console.log('✅ System Admin user in refresh, found profile picture:', profileData.profilePictureUrl);
                  this.updateProfilePicture(profileData.profilePictureUrl);
                  // Store it for future use
                  localStorage.setItem('sysadmin_profile_picture', profileData.profilePictureUrl);
                  return;
                }
              }
              
              console.log('❌ System Admin user in refresh, no profile picture found');
            } catch (error) {
              console.log('❌ Failed to load System Admin profile picture from server in refresh:', error);
            }
          }
        } catch (error) {
          console.log('Error parsing user data:', error);
        }
      }
      
      // For other users or fallback, try general profile picture sources
      let currentProfileUrl = localStorage.getItem('profilePictureUrl');
      if (!currentProfileUrl) {
        const secUrl = localStorage.getItem('secretariat_profile_picture');
        if (secUrl) currentProfileUrl = secUrl;
      }
      
      if (currentProfileUrl) {
        console.log('🔄 Refreshing logout modal profile picture from localStorage:', currentProfileUrl);
        this.updateProfilePicture(currentProfileUrl);
        return;
      }
      
      // Try global profile picture managers
      if (window.profilePictureManager && window.profilePictureManager.profilePictureUrl) {
        console.log('🔄 Refreshing logout modal profile picture from global manager:', window.profilePictureManager.profilePictureUrl);
        this.updateProfilePicture(window.profilePictureManager.profilePictureUrl);
        return;
      }
      
      // Try MPMEC profile picture manager as last resort
      if (window.mpmecProfilePictureManager && window.mpmecProfilePictureManager.profilePictureUrl) {
        console.log('🔄 Refreshing logout modal profile picture from MPMEC manager:', window.mpmecProfilePictureManager.profilePictureUrl);
        this.updateProfilePicture(window.mpmecProfilePictureManager.profilePictureUrl);
        return;
      }
      
      // If still no profile picture, show fallback
      this.showFallbackProfilePicture();
    }
    
    forceImmediateProfilePictureUpdate() {
      // Force immediate update for different user types
      const userData = localStorage.getItem('user');
      if (userData) {
        try {
          const user = JSON.parse(userData);
          
          // For MPMEC users, force immediate update (EIU-style)
          if (user.role === 'LGU-PMT' && user.subRole && user.subRole.toLowerCase() === 'mpmec') {
            console.log('🚀 Force updating MPMEC logout modal profile picture (EIU-style)...');
            console.log('🔍 MPMEC user data in force update:', user);
            
            // Check localStorage first
            const mpmecProfileUrl = localStorage.getItem('mpmec_profile_picture');
            if (mpmecProfileUrl) {
              console.log('🎯 Force updating with MPMEC localStorage URL:', mpmecProfileUrl);
              this.updateProfilePicture(mpmecProfileUrl);
              return;
            }
            
            // If no localStorage, try to fetch from server immediately (LGU-PMT-0001 primary key)
            console.log('🎯 Force fetching MPMEC profile from server for userId: LGU-PMT-0001');
            
            fetch(`http://localhost:3000/api/profile/picture/LGU-PMT-0001`)
              .then(response => response.json())
              .then(profileData => {
                if (profileData.success && profileData.profilePictureUrl) {
                  console.log('✅ Force update: Found MPMEC profile picture:', profileData.profilePictureUrl);
                  this.updateProfilePicture(profileData.profilePictureUrl);
                  // Store it for future use
                  localStorage.setItem('mpmec_profile_picture', profileData.profilePictureUrl);
                } else {
                  console.log('❌ Force update: No MPMEC profile picture found');
                }
              })
              .catch(error => {
                console.log('❌ Force update error:', error);
              });
          }
          
          // For LGU-IU IOO users, force immediate update (EIU-style)
          if (user.role === 'iu' || user.role === 'IU') {
            console.log('🚀 Force updating LGU-IU IOO logout modal profile picture (EIU-style)...');
            console.log('🔍 LGU-IU IOO user data in force update:', user);
            
            // Check localStorage first
            const iuProfileUrl = localStorage.getItem('iu_profile_picture');
            if (iuProfileUrl) {
              console.log('🎯 Force updating with LGU-IU IOO localStorage URL:', iuProfileUrl);
              this.updateProfilePicture(iuProfileUrl);
              return;
            }
            
            // If no localStorage, try to fetch from server immediately (LGU-IU-0001 primary key)
            console.log('🎯 Force fetching LGU-IU IOO profile from server for userId: LGU-IU-0001');
            
            fetch(`http://localhost:3000/api/profile/picture/LGU-IU-0001`)
              .then(response => response.json())
              .then(profileData => {
                if (profileData.success && profileData.profilePictureUrl) {
                  console.log('✅ Force update: Found LGU-IU IOO profile picture:', profileData.profilePictureUrl);
                  this.updateProfilePicture(profileData.profilePictureUrl);
                  // Store it for future use
                  localStorage.setItem('iu_profile_picture', profileData.profilePictureUrl);
                } else {
                  console.log('❌ Force update: No LGU-IU IOO profile picture found');
                }
              })
              .catch(error => {
                console.log('❌ Force update error:', error);
              });
          }
          
          // For System Admin users, force immediate update (EIU-style)
          if (user.role === 'sysadmin' || user.role === 'SYS.AD' || user.role === 'System Administrator') {
            console.log('🚀 Force updating System Admin logout modal profile picture (EIU-style)...');
            console.log('🔍 System Admin user data in force update:', user);
            
            // Check localStorage first
            const sysadminProfileUrl = localStorage.getItem('sysadmin_profile_picture');
            if (sysadminProfileUrl) {
              console.log('🎯 Force updating with System Admin localStorage URL:', sysadminProfileUrl);
              this.updateProfilePicture(sysadminProfileUrl);
              return;
            }
            
            // If no localStorage, try to fetch from server immediately (SA-001 primary key)
            console.log('🎯 Force fetching System Admin profile from server for userId: SA-001');
            
            fetch(`http://localhost:3000/api/profile/picture/SA-001`)
              .then(response => response.json())
              .then(profileData => {
                if (profileData.success && profileData.profilePictureUrl) {
                  console.log('✅ Force update: Found System Admin profile picture:', profileData.profilePictureUrl);
                  this.updateProfilePicture(profileData.profilePictureUrl);
                  // Store it for future use
                  localStorage.setItem('sysadmin_profile_picture', profileData.profilePictureUrl);
                } else {
                  console.log('❌ Force update: No System Admin profile picture found');
                }
              })
              .catch(error => {
                console.log('❌ Force update error:', error);
              });
          }
          
          // For Executive Viewer users, force immediate update
          if (user.role === 'Executive Viewer' || user.role === 'EXEC') {
            console.log('🚀 Force updating Executive Viewer logout modal profile picture...');
            console.log('🔍 Executive Viewer user data in force update:', user);
            
            // Check localStorage first
            const executiveProfileUrl = localStorage.getItem('executive_profile_picture');
            if (executiveProfileUrl) {
              console.log('🎯 Force updating with Executive Viewer localStorage URL:', executiveProfileUrl);
              this.updateProfilePicture(executiveProfileUrl);
              return;
            }
            
            // If no localStorage, try to fetch from server immediately with multiple user IDs
            const possibleUserIds = ['exeviewer@gmail.com', 'EV-001', user.employeeId, user.username, user.email, user.id, user.userId].filter(Boolean);
            console.log('🎯 Force fetching Executive Viewer profile from server, trying user IDs in order:', possibleUserIds);
            
            // Try each user ID sequentially
            const tryNextUserId = async (index = 0) => {
              if (index >= possibleUserIds.length) {
                console.log('❌ Force update: No Executive Viewer profile picture found with any user ID');
                return;
              }
              
              const userId = possibleUserIds[index];
              console.log('🎯 Force trying Executive Viewer userId:', userId);
              
              try {
                const response = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
                if (response.ok) {
                  const profileData = await response.json();
                  if (profileData.success && profileData.profilePictureUrl) {
                    console.log('✅ Force update: Found Executive Viewer profile picture with userId:', userId, 'URL:', profileData.profilePictureUrl);
                    this.updateProfilePicture(profileData.profilePictureUrl);
                    // Store it for future use
                    localStorage.setItem('executive_profile_picture', profileData.profilePictureUrl);
                    return;
                  }
                }
                // Try next user ID
                await tryNextUserId(index + 1);
              } catch (error) {
                console.log('❌ Force update error with Executive Viewer userId:', userId, error);
                // Try next user ID
                await tryNextUserId(index + 1);
              }
            };
            
            tryNextUserId();
          }
        } catch (error) {
          console.log('Error in force update:', error);
        }
      }
    }
    
    hide() {
      this.backdrop.style.opacity = '0';
      this.content.style.transform = 'scale(0.95)';
      this.content.style.opacity = '0';
      
      setTimeout(() => {
        this.modal.classList.add('hidden');
        this.onConfirm = null;
      }, 300);
    }
    
    isVisible() {
      return !this.modal.classList.contains('hidden');
    }
  }
  
  // Initialize logout modal
  document.addEventListener('DOMContentLoaded', function() {
    window.logoutModal = new LogoutModal();
  });
</script> 