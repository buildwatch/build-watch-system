---
// SecretariatTopbar.astro
// Initial timestamp for SSR; client script keeps it live
const currentTime = new Date().toLocaleString('en-PH', {
  weekday: 'long',
  year: 'numeric',
  month: 'long',
  day: 'numeric',
  hour: '2-digit',
  minute: '2-digit'
});
---

<!-- Secretariat Profile Picture Manager Script -->
<script src="/src/scripts/secretariat-profile-picture-manager.js"></script>
<header class="relative z-50 flex items-center justify-between px-8 py-4 bg-gradient-to-r from-sky-400 via-sky-500 to-sky-600 text-white shadow-lg border-b border-white/10 backdrop-blur-sm">
  <!-- Subtle overlay for depth -->
  <div class="pointer-events-none absolute inset-0 bg-gradient-to-r from-white/5 via-transparent to-white/5 opacity-10"></div>
  <div class="pointer-events-none absolute -top-6 left-24 w-40 h-40 bg-white/10 rounded-full blur-3xl opacity-20"></div>
  <div class="pointer-events-none absolute -bottom-10 right-24 w-32 h-32 bg-white/10 rounded-full blur-2xl opacity-20"></div>
  
  <!-- Left Section: Sidebar Toggle and Logo -->
  <div class="flex items-center space-x-6">
    <!-- Sidebar Toggle Button -->
    <button id="secretariat-sidebar-toggle" class="group p-2.5 rounded-xl bg-white/10 hover:bg-white/20 active:scale-95 transition-all duration-300 backdrop-blur-sm border border-white/20 shadow-lg hover:shadow-xl">
      <svg id="secretariat-sidebar-toggle-icon" class="w-6 h-6 text-white transition-all duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
      </svg>
    </button>

    <!-- Logo -->
    <div class="flex items-center space-x-3">
      <div class="w-10 h-10 rounded-xl flex items-center justify-center shadow-lg overflow-hidden ring-1 ring-white/10">
        <img src="/build-watch-logo.png" alt="Build Watch Logo" class="w-full h-full object-contain" />
      </div>
      <div>
        <h1 class="text-lg font-bold text-white">Build Watch</h1>
        <p class="text-xs text-white/70">MPMEC Secretariat</p>
      </div>
    </div>
  </div>

  <!-- Center Section: Search Bar, Date/Time and Status -->
  <div class="hidden md:flex items-center gap-6">
    <!-- Search Bar - Moved slightly left for better centering -->
    <div class="relative -ml-8" id="secretariat-search-wrapper">
      <input 
        id="secretariat-global-search"
        type="text" 
        placeholder="Search projects, reports, submissions..." 
        class="w-80 pl-10 pr-4 py-2.5 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-transparent backdrop-blur-sm transition-all duration-300" 
        autocomplete="off"
      />
      <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg class="h-6 w-6 text-white" fill="currentColor" viewBox="0 0 24 24">
          <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
        </svg>
      </div>
    </div>
    
    <div class="text-center">
      <p id="secretariat-clock" class="text-sm text-white">Loading...</p>
      <p class="text-xs text-white/60">Philippine Standard Time</p>
    </div>
    <div class="flex items-center gap-2 px-3 py-1 rounded-full bg-green-500/10 text-green-300 ring-1 ring-green-400/20">
      <span class="w-2 h-2 rounded-full bg-green-400 animate-pulse"></span>
      <span class="text-sm font-medium">System Operational</span>
    </div>
  </div>

  <!-- Right Section: Actions and User -->
  <div class="flex items-center space-x-4">
    <!-- System Management Actions -->
    <div class="flex items-center space-x-2">
      <!-- System Announcement Button -->
      <a href="/dashboard/lgu-pmt-mpmec-secretariat/modules/announcements" title="System Announcements" aria-label="System Announcements" class="group relative p-2.5 text-white hover:text-white/80 hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu">
        <svg class="w-5 h-5 transition-all duration-300 group-hover:scale-110 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"></path>
        </svg>
        <!-- Enhanced hover glow effect -->
        <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
      </a>
      
      <!-- MPMEC Communication Button -->
      <a href="/dashboard/lgu-pmt-mpmec-secretariat/modules/communication" title="MPMEC Communication" aria-label="MPMEC Communication" class="group relative p-2.5 text-white hover:text-white/80 hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu">
        <svg class="w-5 h-5 transition-all duration-300 group-hover:scale-110 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
        </svg>
        <!-- Enhanced hover glow effect -->
        <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
      </a>
      
      <!-- System Health Button -->
      <a href="/dashboard/lgu-pmt-mpmec-secretariat/modules/system-health" title="System Health" aria-label="System Health" class="group relative p-2.5 text-white hover:text-white/80 hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu">
        <svg class="w-5 h-5 transition-all duration-300 group-hover:scale-110 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
        </svg>
        <!-- Enhanced hover glow effect -->
        <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
      </a>
    </div>

    <!-- Notifications -->
    <div class="relative z-[1001]" id="secretariat-notification-container">
      <button class="group relative p-2.5 text-white hover:text-white/80 hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu" id="secretariat-notification-btn" title="Notifications" aria-label="Notifications">
        <svg class="w-5 h-5 transition-all duration-300 group-hover:scale-110 group-hover:rotate-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
        </svg>
        <!-- Enhanced hover glow effect -->
        <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
        <span class="absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-xs flex items-center justify-center font-medium hidden text-white group-hover:scale-110 transition-transform duration-200" id="secretariat-notification-badge">0</span>
      </button>
    </div>

    <!-- User Profile with Enhanced Dropdown -->
    <div class="relative" id="secretariat-profile-container">
      <button id="secretariat-user-dropdown-btn" class="flex items-center space-x-3 p-2 rounded-xl hover:bg-white/10 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white/20" title="Open profile menu" aria-haspopup="true" aria-expanded="false">
        <div class="w-10 h-10 rounded-xl overflow-hidden shadow-lg ring-1 ring-white/10">
          <img 
            id="secretariat-profile-picture"
            src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%230EA5E9'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EMS%3C/text%3E%3C/svg%3E"
            alt="Secretariat Admin"
            class="w-full h-full object-cover"
            onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
          />
          <div id="secretariat-profile-initials" class="w-full h-full bg-gradient-to-br from-sky-500 to-sky-600 flex items-center justify-center" style="display: none;">
            <span class="text-white font-bold text-sm">MS</span>
          </div>
        </div>
        <div id="secretariat-user-name" class="text-left hidden md:block max-w-[200px]">
          <p class="text-sm font-semibold text-white truncate" title="MPMEC Secretariat Admin">MPMEC Secretariat Admin</p>
          <div class="flex items-center gap-1">
            <p class="text-xs text-sky-200/80">Secretariat</p>
            <div class="flex items-center gap-1">
              <div class="w-1.5 h-1.5 bg-green-400 rounded-full animate-pulse"></div>
              <span class="text-xs text-green-300 font-medium">Active</span>
            </div>
          </div>
        </div>
        <svg class="w-4 h-4 text-white/60 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
        </svg>
      </button>

      <!-- Simple Working Secretariat Dropdown Menu -->
      <div id="secretariat-profile-dropdown" class="absolute right-0 mt-3 w-72 bg-gradient-to-br from-sky-600 via-sky-500 to-sky-400 rounded-2xl shadow-2xl border border-sky-400/40 py-2 z-50 hidden">
        <!-- Header Section -->
        <div class="p-4 border-b border-sky-400/40 bg-gradient-to-r from-sky-500/60 to-sky-400/60 rounded-t-2xl">
          <div class="flex items-center space-x-3">
            <div class="w-12 h-12 rounded-xl overflow-hidden ring-2 ring-sky-400/40 shadow-lg">
              <img 
                id="secretariat-dropdown-photo"
                src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%230EA5E9'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EMS%3C/text%3E%3C/svg%3E"
                alt="Secretariat Admin"
                class="w-full h-full object-cover"
                onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
              />
              <div class="w-full h-full bg-gradient-to-br from-sky-500 to-sky-600 flex items-center justify-center" style="display: none;">
                <span id="secretariat-dropdown-initials" class="text-white font-bold text-lg">MS</span>
              </div>
            </div>
            <div class="flex-1 min-w-0">
              <p id="secretariat-dropdown-name" class="text-sm font-semibold text-white truncate">MPMEC Secretariat Admin</p>
              <p class="text-xs text-sky-200/80 truncate">Project Review & Approval</p>
              <div class="flex items-center gap-2 mt-1">
                <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                <span class="text-xs text-green-300 font-medium">Active</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Menu Items -->
        <div class="py-2">
          <!-- Profile Section -->
          <div class="px-3 py-2">
            <a href="/dashboard/lgu-pmt-mpmec-secretariat/modules/profile" class="group flex items-center px-3 py-3 text-sm text-white hover:bg-sky-600/20 hover:text-sky-50 rounded-xl transition-all duration-200 hover:scale-[1.02]">
              <div class="w-8 h-8 rounded-lg bg-sky-600/30 flex items-center justify-center mr-3 group-hover:bg-sky-600/40 transition-colors">
                <svg class="w-4 h-4 text-sky-200 group-hover:text-sky-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                </svg>
              </div>
              <div>
                <span class="font-medium">My Profile</span>
                <p class="text-xs text-sky-100/90 group-hover:text-sky-50/90">View & edit profile</p>
              </div>
            </a>
          </div>

          <!-- Project Review Section -->
          <div class="px-3 py-2">
            <a href="/dashboard/lgu-pmt-mpmec-secretariat/modules/submissions" class="group flex items-center px-3 py-3 text-sm text-white hover:bg-emerald-500/20 hover:text-emerald-50 rounded-xl transition-all duration-200 hover:scale-[1.02]">
              <div class="w-8 h-8 rounded-lg bg-emerald-500/30 flex items-center justify-center mr-3 group-hover:bg-emerald-500/40 transition-colors">
                <svg class="w-4 h-4 text-emerald-200 group-hover:text-emerald-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
              <div>
                <span class="font-medium">Project Review</span>
                <p class="text-xs text-sky-100/90 group-hover:text-emerald-50/90">Review submissions</p>
              </div>
            </a>
          </div>

          <!-- Compilation Section -->
          <div class="px-3 py-2">
            <a href="/dashboard/lgu-pmt-mpmec-secretariat/modules/compilation" class="group flex items-center px-3 py-3 text-sm text-white hover:bg-amber-500/20 hover:text-amber-50 rounded-xl transition-all duration-200 hover:scale-[1.02]">
              <div class="w-8 h-8 rounded-lg bg-amber-500/30 flex items-center justify-center mr-3 group-hover:bg-amber-500/40 transition-colors">
                <svg class="w-4 h-4 text-amber-200 group-hover:text-amber-50" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                </svg>
              </div>
              <div>
                <span class="font-medium">Compilation</span>
                <p class="text-xs text-sky-100/90 group-hover:text-amber-50/90">Compile reports</p>
              </div>
            </a>
          </div>

          <!-- Divider -->
          <div class="mx-3 my-2 border-t border-sky-400/40"></div>

          <!-- Logout Section -->
          <div class="px-3 py-2">
            <button onclick="logout()" class="group flex items-center w-full px-3 py-3 text-sm text-red-400 hover:bg-red-500/20 hover:text-red-300 rounded-xl transition-all duration-200 hover:scale-[1.02] text-left">
              <div class="w-8 h-8 rounded-lg bg-red-500/30 flex items-center justify-center mr-3 group-hover:bg-red-500/40 transition-colors">
                <svg class="w-4 h-4 text-red-400 group-hover:text-red-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                </svg>
              </div>
              <div>
                <span class="font-medium">Sign Out</span>
                <p class="text-xs text-sky-100/90 group-hover:text-red-200/80">Secure logout</p>
              </div>
            </button>
          </div>
        </div>

        <!-- Footer -->
        <div class="px-4 py-3 border-t border-sky-400/40 bg-gradient-to-r from-sky-500/60 to-sky-400/60 rounded-b-2xl">
          <div class="flex items-center justify-between text-xs text-sky-50/95">
            <span>Session: Active</span>
            <span class="text-green-400">●</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

<!-- Overlay for notification sidebar -->
<div class="fixed inset-0 bg-black/50 z-[1050] hidden transition-opacity duration-300" id="secretariat-notification-overlay"></div>

<!-- Enhanced Secretariat Notification Panel -->
<div class="fixed top-0 right-0 h-full w-[420px] bg-gradient-to-br from-sky-600 via-sky-500 to-sky-600 shadow-2xl border-l border-sky-400/30 z-[1200] backdrop-blur-xl transform translate-x-full transition-all duration-500 ease-out hidden flex flex-col" id="secretariat-notification-dropdown">
  <!-- Enhanced Header with Secretariat Theme -->
  <div class="p-5 border-b border-sky-400/25 bg-gradient-to-r from-sky-500/50 via-sky-400/70 to-sky-500/50 backdrop-blur-md shadow-lg">
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center gap-3">
        <div class="w-10 h-10 rounded-xl bg-gradient-to-br from-sky-400 to-sky-500 flex items-center justify-center shadow-xl">
          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
        </div>
        <div>
          <h3 class="text-xl font-bold text-white mb-1">Secretariat Notifications</h3>
          <p class="text-xs text-sky-200/90 font-medium">Monitor submissions & approval alerts</p>
        </div>
      </div>
      <button class="text-sky-200 hover:text-white transition-all duration-200 hover:scale-110 p-2.5 rounded-lg hover:bg-white/10 hover:shadow-lg" id="secretariat-close-notifications" title="Close notifications">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Enhanced Action Buttons with Better Hover Behavior -->
    <div class="flex items-center gap-3 mb-6">
      <button class="group flex items-center gap-3 text-sm font-semibold text-white bg-gradient-to-r from-sky-500 to-sky-600 hover:from-sky-600 hover:to-sky-700 transition-all duration-300 ease-out px-4 py-3 rounded-xl border-2 border-sky-400/50 hover:border-sky-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" id="secretariat-mark-all-read">
        <svg class="w-5 h-5 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Mark all read
      </button>
      <button class="group flex items-center gap-3 text-sm font-semibold text-white bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 transition-all duration-300 ease-out px-4 py-3 rounded-xl border-2 border-red-400/50 hover:border-red-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" id="secretariat-delete-all-read">
        <svg class="w-5 h-5 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
        Delete read
      </button>
      <button class="group flex items-center gap-3 text-sm font-semibold text-white bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 transition-all duration-300 ease-out px-4 py-3 rounded-xl border-2 border-red-500/50 hover:border-red-500/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" id="secretariat-delete-all-notifications">
        <svg class="w-5 h-5 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
        Delete all
      </button>
    </div>
    
    <!-- Enhanced Minimalist Notification Stats Bar -->
    <div class="p-4 bg-gradient-to-r from-sky-500/20 to-sky-600/20 rounded-xl border border-sky-400/30 shadow-md">
      <div class="flex items-center justify-between text-xs">
        <div class="flex items-center gap-2">
          <span class="text-sky-200 font-medium">Total:</span>
          <span id="secretariat-notification-total" class="text-white font-bold text-base">0</span>
        </div>
        <div class="w-px h-5 bg-sky-400/40"></div>
        <div class="flex items-center gap-2">
          <span class="text-sky-200 font-medium">Unread:</span>
          <span id="secretariat-notification-unread" class="text-white font-bold text-base">0</span>
        </div>
        <div class="w-px h-5 bg-sky-400/40"></div>
        <div class="flex items-center gap-2">
          <span class="text-sky-200 font-medium">Read:</span>
          <span id="secretariat-notification-read" class="text-white font-bold text-base">0</span>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Enhanced Notification List with Categories and Proper Scrolling -->
  <div class="flex-1 overflow-y-auto custom-scrollbar min-h-0" id="secretariat-notification-list">
    <!-- Loading State -->
    <div class="p-6 text-center text-sky-200" id="secretariat-notification-loading">
      <div class="animate-pulse flex flex-col items-center justify-center">
        <div class="w-16 h-16 rounded-full bg-gradient-to-br from-sky-400/20 to-sky-500/20 flex items-center justify-center mb-4">
          <svg class="w-8 h-8 text-sky-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
        </div>
        <span class="text-sm font-medium">Loading Secretariat notifications...</span>
        <p class="text-xs text-sky-300 mt-1">Monitoring submissions & approval alerts</p>
      </div>
    </div>
  </div>
  
  <!-- Enhanced Footer with MPMEC Monitor Active - Maximized Space and Enhanced UI -->
  <div class="mt-auto p-4 border-t-2 border-sky-400/50 bg-gradient-to-r from-sky-700/80 via-sky-600/90 to-sky-700/80 backdrop-blur-md shadow-2xl">
    <div class="flex items-center justify-between text-sm text-white font-semibold">
      <div class="flex items-center gap-3">
        <div class="w-3 h-3 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full animate-pulse shadow-lg"></div>
        <span class="tracking-wide">MPMEC Monitor Active</span>
      </div>
      <div class="flex items-center gap-2">
        <span class="text-sky-300 text-lg">●</span>
        <span class="text-xs text-sky-200 opacity-75">Live</span>
      </div>
    </div>
  </div>
</div>

<script>
  // Create fallback notification service
  function createFallbackNotificationService() {
    return {
      getNotificationCount: async () => 0,
      getNotifications: async () => ({ notifications: [] }),
      markAllAsRead: async () => true,
      deleteAllRead: async () => true,
      markAsRead: async () => true,
      onUpdate: (callback) => () => {},
      getNotificationIcon: () => '<svg class="w-5 h-5 text-sky-300" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path></svg>',
      formatTime: (date) => 'just now'
    };
  }

  document.addEventListener('DOMContentLoaded', async function() {
    console.log('🔧 Initializing Secretariat Topbar');
    
    // Add delay to ensure all elements are rendered
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // Log all elements to see what's available
    console.log('🔍 DOM Debug - Available elements:');
    console.log('Sidebar toggle:', document.getElementById('secretariat-sidebar-toggle'));
    console.log('Notification btn:', document.getElementById('secretariat-notification-btn'));
    console.log('User dropdown btn:', document.getElementById('secretariat-user-dropdown-btn'));
    console.log('Profile dropdown:', document.getElementById('secretariat-profile-dropdown'));
    console.log('Profile container:', document.getElementById('secretariat-profile-container'));
    
    // Test dropdown functionality immediately
    console.log('🧪 Testing dropdown elements immediately...');
    const testBtn = document.getElementById('secretariat-user-dropdown-btn');
    const testDropdown = document.getElementById('secretariat-profile-dropdown');
    const testContainer = document.getElementById('secretariat-profile-container');
    
    if (testBtn && testDropdown && testContainer) {
      console.log('✅ All dropdown elements found - adding test click handler');
      testBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log('🎯 TEST CLICK - Profile button clicked!');
        console.log('Current hidden state:', testDropdown.classList.contains('hidden'));
        
        if (testDropdown.classList.contains('hidden')) {
          testDropdown.classList.remove('hidden');
          console.log('✅ TEST - Dropdown shown');
        } else {
          testDropdown.classList.add('hidden');
          console.log('✅ TEST - Dropdown hidden');
        }
      });
      console.log('✅ Test click handler added');
    } else {
      console.error('❌ TEST FAILED - Dropdown elements not found:', {
        button: !!testBtn,
        dropdown: !!testDropdown,
        container: !!testContainer
      });
    }
    
    let authService, notificationService;
    
    try {
      const [auth, notification] = await Promise.all([
        import('/src/services/auth.js'),
        import('/src/services/notifications.js')
      ]);
      
      authService = auth.default;
      notificationService = notification.default;
  
  // Make services available globally
  window.authService = authService;
  window.notificationService = notificationService;
  
      // Get current user data
      const currentUser = authService.getCurrentUser();
      
      if (currentUser) {
        updateSecretariatUserData(currentUser);
      } else {
        // If no user data, try to fetch from API
        try {
          const response = await fetch('/api/auth/profile', {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
          });
          
          if (response.ok) {
            const userData = await response.json();
            updateSecretariatUserData(userData);
          }
        } catch (error) {
          console.error('Failed to fetch user profile for Secretariat:', error);
        }
      }
      
      // Initialize all functionality with error handling
      // Sidebar toggle is now implemented directly outside functions
      
      try {
        initializeNotifications(notificationService);
        console.log('✅ Notifications initialized');
      } catch (error) {
        console.error('❌ Notifications failed:', error);
      }
      
      try {
        initializeUserDropdown();
        console.log('✅ User dropdown initialized');
      } catch (error) {
        console.error('❌ User dropdown failed:', error);
      }
      
      try {
        initializeLiveClock();
        console.log('✅ Live clock initialized');
        
        // Also try to initialize clock after a short delay to ensure DOM is ready
        setTimeout(() => {
          try {
            initializeLiveClock();
            console.log('✅ Live clock re-initialized after delay');
          } catch (error) {
            console.error('❌ Live clock re-initialization failed:', error);
          }
        }, 500);
      } catch (error) {
        console.error('❌ Live clock failed:', error);
      }
      
      try {
        initializeSecretariatSearch();
        console.log('✅ Search functionality initialized');
      } catch (error) {
        console.error('❌ Search functionality failed:', error);
      }
      
      try {
        initializeSecretariatProfileDropdown();
        console.log('✅ Profile dropdown initialized');
      } catch (error) {
        console.error('❌ Profile dropdown failed:', error);
      }
      
    } catch (error) {
      console.error('Error loading services for Secretariat:', error);
      
      // Try to use a simpler fallback that still connects to backend
      try {
        const { default: notificationModule } = await import('/src/services/notifications.js');
        notificationService = notificationModule;
        window.notificationService = notificationService;
        console.log('✅ Secondary attempt to load notification service succeeded');
        
        // Test the service immediately
        console.log('🧪 Testing real notification service...');
        
        // Check if we have an auth token
        const token = localStorage.getItem('token');
        console.log('🔑 Auth token present:', !!token);
        if (token) {
          console.log('🔑 Token preview:', token.substring(0, 20) + '...');
        }
        
        const testResult = await notificationService.getNotifications();
        console.log('✅ Real service test result:', testResult);
        
        // Initialize notifications with real service
        try {
          initializeNotifications(notificationService);
          console.log('✅ Real notifications initialized');
        } catch (initError) {
          console.error('❌ Real notification init failed:', initError);
        }
      } catch (fallbackError) {
        console.error('❌ Complete service loading failure:', fallbackError);
        // Only use fallback as last resort
        window.notificationService = createFallbackNotificationService();
        notificationService = window.notificationService;
      }
    }
    
    // Fallback manual setup if functions fail
    setTimeout(() => {
      console.log('🔄 Setting up fallback event listeners...');
      
      // Burger toggle already implemented directly
      
      // Manual notification setup with proper animation
      const notifBtn = document.getElementById('secretariat-notification-btn');
      const notifDropdown = document.getElementById('secretariat-notification-dropdown');
      const notifOverlay = document.getElementById('secretariat-notification-overlay');
      
      console.log('🔍 Manual notification elements check:', {
        notifBtn: !!notifBtn,
        notifDropdown: !!notifDropdown,
        notifOverlay: !!notifOverlay
      });
      
      if (notifBtn && notifDropdown && notifOverlay) {
        // Remove any existing listeners first
        notifBtn.replaceWith(notifBtn.cloneNode(true));
        const freshNotifBtn = document.getElementById('secretariat-notification-btn');
        
        freshNotifBtn.addEventListener('click', (e) => {
          console.log('🔔 Manual notification clicked - opening panel');
          e.preventDefault();
          e.stopPropagation();
          
          const isHidden = notifDropdown.classList.contains('hidden');
          if (isHidden) {
            console.log('📂 Opening notification sidebar manually');
            // Show overlay first
            notifOverlay.classList.remove('hidden');
            notifOverlay.style.opacity = '0';
            
            // Show sidebar
            notifDropdown.classList.remove('hidden');
            notifDropdown.style.visibility = 'visible';
            notifDropdown.style.opacity = '1';
            notifDropdown.style.pointerEvents = 'auto';
            notifDropdown.style.transform = 'translateX(100%)';
            
            // Animate both together
            requestAnimationFrame(() => {
              notifOverlay.style.opacity = '1';
              notifDropdown.style.transform = 'translateX(0)';
            });
            
            // Load notifications when panel opens
            if (window.notificationService) {
              console.log('📋 Loading notifications for manual setup');
              loadNotifications(window.notificationService);
            } else {
              // If no service, show no notifications message directly
              console.log('📋 No service available, showing empty state');
              const notificationList = document.getElementById('secretariat-notification-list');
              if (notificationList) {
                notificationList.innerHTML = `
                  <div class="p-6 text-center text-white">
                    <svg class="w-12 h-12 mx-auto mb-2 text-sky-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
                    </svg>
                    <p class="text-sm">No notifications</p>
                  </div>
                `;
              }
            }
          } else {
            console.log('📁 Closing notification sidebar manually');
            notifDropdown.style.transform = 'translateX(100%)';
            notifOverlay.style.opacity = '0';
            setTimeout(() => {
              notifDropdown.classList.add('hidden');
              notifOverlay.classList.add('hidden');
              // Ensure proper visibility state
              notifDropdown.style.visibility = 'hidden';
              notifDropdown.style.opacity = '0';
              notifDropdown.style.pointerEvents = 'none';
            }, 300);
          }
        });
        
        notifOverlay.addEventListener('click', () => {
          console.log('📁 Closing via overlay click');
          notifDropdown.style.transform = 'translateX(100%)';
          notifOverlay.style.opacity = '0';
          setTimeout(() => {
            notifDropdown.classList.add('hidden');
            notifOverlay.classList.add('hidden');
            // Ensure proper visibility state
            notifDropdown.style.visibility = 'hidden';
            notifDropdown.style.opacity = '0';
            notifDropdown.style.pointerEvents = 'none';
          }, 300);
        });
        
        // Setup close button
        const closeBtn = document.getElementById('secretariat-close-notifications');
        if (closeBtn) {
          closeBtn.addEventListener('click', () => {
            console.log('📁 Closing via close button');
            notifDropdown.style.transform = 'translateX(100%)';
            notifOverlay.style.opacity = '0';
            setTimeout(() => {
              notifDropdown.classList.add('hidden');
              notifOverlay.classList.add('hidden');
              // Ensure proper visibility state
              notifDropdown.style.visibility = 'hidden';
              notifDropdown.style.opacity = '0';
              notifDropdown.style.pointerEvents = 'none';
            }, 300);
          });
        }
        
        console.log('✅ Manual notification setup complete with animation');
      } else {
        console.error('❌ Manual notification elements not found');
      }
      
      // Manual user dropdown setup
      const userBtn = document.getElementById('secretariat-user-dropdown-btn');
      const userDropdown = document.getElementById('secretariat-user-dropdown');
      
      if (userBtn && userDropdown) {
        userBtn.addEventListener('click', () => {
          console.log('👤 User dropdown clicked manually');
          userDropdown.classList.toggle('hidden');
        });
        
        userBtn.addEventListener('mouseenter', () => {
          userDropdown.classList.remove('hidden');
        });
        
        userBtn.addEventListener('mouseleave', () => {
          setTimeout(() => {
            userDropdown.classList.add('hidden');
          }, 150);
        });
        console.log('✅ Manual user dropdown setup complete');
      }
      
    }, 1000);
  });

  // Convert name to abbreviation (e.g., "MPMEC Secretariat Admin" -> "M.S.ADMIN")
  function convertToAbbreviation(fullName) {
    if (!fullName) return 'SECRETARIAT';
    
    const words = fullName.split(' ');
    if (words.length === 1) return words[0].toUpperCase();
    
    return words.map(word => word.charAt(0).toUpperCase()).join('.') + word.slice(1).toUpperCase();
  }
  
  // Function to update Secretariat user data
  function updateSecretariatUserData(userData) {
    console.log('🔧 Updating Secretariat user data:', userData);
    
    try {
      // Update topbar user name (full name)
      const userNameElement = document.querySelector('#secretariat-user-name p');
      if (userNameElement) {
        const fullName = userData.fullName || userData.name || 'MPMEC Secretariat Admin';
        
        // Create smart abbreviation for long names
        let displayName = fullName;
        if (fullName.length > 25) {
          if (fullName.includes('Secretariat Admin')) {
            displayName = fullName.replace('Secretariat Admin', 'Sec. Admin');
          } else if (fullName.includes('Management Office')) {
            displayName = fullName.replace('Management Office', 'Mgmt. Office');
          } else {
            displayName = fullName.substring(0, 22) + '...';
          }
        }
        
        userNameElement.textContent = displayName;
        userNameElement.title = fullName; // Show full name on hover
        console.log('✅ Updated user name:', displayName);
      } else {
        console.warn('⚠️ User name element not found');
      }
      
      // Update dropdown name
      const dropdownNameElement = document.getElementById('secretariat-dropdown-name');
      if (dropdownNameElement) {
        const fullName = userData.fullName || userData.name || 'MPMEC Secretariat Admin';
        dropdownNameElement.textContent = fullName;
        console.log('✅ Updated dropdown name:', fullName);
      } else {
        console.warn('⚠️ Dropdown name element not found');
      }
      
      // Update topbar user role
      const userRoleElement = document.querySelector('#secretariat-user-name .flex .text-xs');
      if (userRoleElement) {
        userRoleElement.textContent = userData.role || 'Secretariat';
        console.log('✅ Updated user role:', userData.role || 'Secretariat');
      } else {
        console.warn('⚠️ User role element not found');
      }
      
    // Load profile pictures from server or localStorage for topbar
    async function loadSecretariatTopbarProfilePictures() {
      try {
        // Get actual user ID from localStorage
        const userData = localStorage.getItem('user');
        let userId = 'SEC-0001'; // Default fallback
        if (userData) {
          try {
            const user = JSON.parse(userData);
            userId = user.employeeId || user.username || user.id || user.userId || 'SEC-0001';
          } catch (error) {
            console.warn('⚠️ Error parsing user data in Secretariat topbar, using default userId');
          }
        }
        
        // First try to get from server
        console.log('Secretariat Topbar: Fetching profile picture from server for userId:', userId);
        const response = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
        
        if (response.ok) {
          const result = await response.json();
          if (result.success && result.profilePictureUrl) {
            console.log('Secretariat Topbar: Profile picture loaded from server:', result.profilePictureUrl);
            
            // Update main topbar profile picture
            const topbarProfilePic = document.getElementById('secretariat-profile-picture');
            if (topbarProfilePic) {
              topbarProfilePic.src = result.profilePictureUrl;
              // Hide fallback div if it exists
              const fallbackDiv = topbarProfilePic.nextElementSibling;
              if (fallbackDiv) {
                fallbackDiv.style.display = 'none';
                topbarProfilePic.style.display = 'block';
              }
            }
            
            // Update dropdown profile picture
            const dropdownProfilePic = document.getElementById('secretariat-dropdown-photo');
            if (dropdownProfilePic) {
              dropdownProfilePic.src = result.profilePictureUrl;
              // Hide fallback div if it exists
              const fallbackDiv = dropdownProfilePic.nextElementSibling;
              if (fallbackDiv) {
                fallbackDiv.style.display = 'none';
                dropdownProfilePic.style.display = 'block';
              }
            }
            
            // Store in localStorage for future use
            localStorage.setItem('secretariat_profile_picture', result.profilePictureUrl);
            return;
          }
        }
      } catch (error) {
        console.log('Secretariat Topbar: Server fetch failed, trying localStorage:', error);
      }
      
      // Fallback to localStorage if server fails
      const storedUrl = localStorage.getItem('secretariat_profile_picture');
      if (storedUrl) {
        const topbarProfilePic = document.getElementById('secretariat-profile-picture');
        if (topbarProfilePic) {
          topbarProfilePic.src = storedUrl;
          // Hide fallback div if it exists
          const fallbackDiv = topbarProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
            topbarProfilePic.style.display = 'block';
          }
        }
        
        const dropdownProfilePic = document.getElementById('secretariat-dropdown-photo');
        if (dropdownProfilePic) {
          dropdownProfilePic.src = storedUrl;
          // Hide fallback div if it exists
          const fallbackDiv = dropdownProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
            dropdownProfilePic.style.display = 'block';
          }
        }
      }
    }

    // Listen for profile picture updates
    window.addEventListener('secretariatProfilePictureUpdated', function(e) {
      console.log('Secretariat Topbar received secretariatProfilePictureUpdated event:', e.detail);
      console.log('Secretariat Topbar: Updating profile pictures immediately with:', e.detail.profilePictureUrl);
      
      // Update immediately without calling loadSecretariatTopbarProfilePictures
      if (e.detail.profilePictureUrl) {
        // Update main topbar profile picture
        const topbarProfilePic = document.getElementById('secretariat-profile-picture');
        if (topbarProfilePic) {
          console.log('Secretariat Topbar: Setting main profile picture src to:', e.detail.profilePictureUrl);
          
          // Preload the image to prevent blinking
          const img = new Image();
          img.onload = function() {
            topbarProfilePic.src = e.detail.profilePictureUrl;
            topbarProfilePic.style.display = 'block';
            
            // Hide fallback div if it exists
            const fallbackDiv = topbarProfilePic.nextElementSibling;
            if (fallbackDiv) {
              fallbackDiv.style.display = 'none';
            }
          };
          img.src = e.detail.profilePictureUrl;
        }

        // Update dropdown profile picture
        const dropdownProfilePic = document.getElementById('secretariat-dropdown-photo');
        if (dropdownProfilePic) {
          console.log('Secretariat Topbar: Setting dropdown profile picture src to:', e.detail.profilePictureUrl);
          
          // Preload the image to prevent blinking
          const img = new Image();
          img.onload = function() {
            dropdownProfilePic.src = e.detail.profilePictureUrl;
            dropdownProfilePic.style.display = 'block';
            
            // Hide fallback div if it exists
            const fallbackDiv = dropdownProfilePic.nextElementSibling;
            if (fallbackDiv) {
              fallbackDiv.style.display = 'none';
            }
          };
          img.src = e.detail.profilePictureUrl;
        }
        
        // Store in localStorage for future use
        localStorage.setItem('secretariat_profile_picture', e.detail.profilePictureUrl);
      }
    });

  // Load profile pictures on page load
  loadSecretariatTopbarProfilePictures();

  // Register with global manager if available - delay to avoid conflicts
  setTimeout(() => {
    if (window.secretariatProfilePictureManager) {
      console.log('🎯 Secretariat Topbar: Global manager available');
      // Note: The SecretariatProfilePictureManager uses event listeners instead of addListener
      // The event listeners are already set up in the manager
    }
  }, 2000); // Delay to ensure user data loading completes first
    } catch (error) {
      console.error('❌ Error updating Secretariat user data:', error);
    }
  }

  // Secretariat Sidebar Toggle Functionality (copied from LGU-PMT)
  const secretariatSidebarToggleBtn = document.getElementById('secretariat-sidebar-toggle');
  const secretariatSidebar = document.querySelector('aside');
  const secretariatToggleIcon = document.getElementById('secretariat-sidebar-toggle-icon');
  
  if (secretariatSidebarToggleBtn && secretariatSidebar && secretariatToggleIcon) {
    console.log('🔧 Initializing Secretariat sidebar toggle functionality');
    
    // Icon paths
    const hamburgerIcon = "M4 6h16M4 12h16M4 18h16";
    const arrowRightIcon = "M9 5l7 7-7 7";
    
    function updateSecretariatIcon(isCollapsed) {
      // Add smooth rotation animation
      secretariatToggleIcon.style.transform = 'rotate(180deg)';
      secretariatToggleIcon.style.transition = 'all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
      
      setTimeout(() => {
        const iconPath = secretariatToggleIcon.querySelector('path');
        if (iconPath) {
          iconPath.setAttribute('d', isCollapsed ? arrowRightIcon : hamburgerIcon);
        }
        secretariatToggleIcon.style.transform = 'rotate(0deg)';
      }, 200);
    }
    
    // Check if sidebar is collapsed from localStorage
    const isCollapsed = localStorage.getItem('secretariat-sidebar-collapsed') === 'true';
    if (isCollapsed) {
      secretariatSidebar.classList.add('collapsed');
      updateSecretariatIcon(true);
    }
    
    secretariatSidebarToggleBtn.addEventListener('click', () => {
      console.log('🔄 Toggling Secretariat sidebar');
      
      const isCurrentlyCollapsed = secretariatSidebar.classList.contains('collapsed');
      
      if (isCurrentlyCollapsed) {
        // Expand sidebar
        secretariatSidebar.classList.remove('collapsed');
        localStorage.setItem('secretariat-sidebar-collapsed', 'false');
        updateSecretariatIcon(false);
        console.log('📖 Secretariat Sidebar expanded');
      } else {
        // Collapse sidebar
        secretariatSidebar.classList.add('collapsed');
        localStorage.setItem('secretariat-sidebar-collapsed', 'true');
        updateSecretariatIcon(true);
        console.log('📕 Secretariat Sidebar collapsed');
      }
    });
  } else {
    console.warn('❌ Secretariat sidebar toggle elements not found');
  }

  // Notification functionality (copied from LGU-PMT)
  function initializeNotifications(notificationService) {
    const notificationBtn = document.getElementById('secretariat-notification-btn');
    const notificationDropdown = document.getElementById('secretariat-notification-dropdown');
    const notificationBadge = document.getElementById('secretariat-notification-badge');
    const notificationList = document.getElementById('secretariat-notification-list');
    const markAllReadBtn = document.getElementById('secretariat-mark-all-read');
    
    if (!notificationBtn || !notificationDropdown) {
      console.error('❌ Secretariat Notification elements not found in initializeNotifications');
      return;
    }
    
    // Check if already initialized to prevent conflicts
    if (notificationBtn.dataset.initialized === 'true') {
      console.log('⚠️ Notifications already initialized, skipping...');
      return;
    }
    
    console.log('✅ Initializing Secretariat notification functionality');
    
    const notificationOverlay = document.getElementById('secretariat-notification-overlay');
    const closeNotificationBtn = document.getElementById('secretariat-close-notifications');
    
    notificationBtn.addEventListener('click', (e) => {
      console.log('🔔 Secretariat Notification button clicked');
      e.preventDefault();
      e.stopPropagation();
      
      if (!notificationOverlay) {
        console.error('❌ Secretariat notification overlay not found!');
        return;
      }
      
      const isHidden = notificationDropdown.classList.contains('hidden');
      if (isHidden) {
        console.log('📂 Opening Secretariat notification sidebar');
        console.log('🖤 Showing overlay with bg-black/50');
        
        // Show overlay first
        notificationOverlay.classList.remove('hidden');
        notificationOverlay.style.opacity = '0';
        
        // Show sidebar
        notificationDropdown.classList.remove('hidden');
        notificationDropdown.style.transform = 'translateX(100%)';
        
        // Animate both together
        requestAnimationFrame(() => {
          notificationOverlay.style.opacity = '1';
          notificationDropdown.style.transform = 'translateX(0)';
        });
        
        loadNotifications(notificationService);
      } else {
        console.log('📁 Closing Secretariat notification sidebar');
        closeSidebar();
      }
    });
    
    function closeSidebar() {
      notificationDropdown.style.transform = 'translateX(100%)';
      notificationOverlay.style.opacity = '0';
      setTimeout(() => {
        notificationDropdown.classList.add('hidden');
        notificationOverlay.classList.add('hidden');
      }, 300);
    }
    
    if (closeNotificationBtn) {
      closeNotificationBtn.addEventListener('click', closeSidebar);
    }
    
    if (notificationOverlay) {
      notificationOverlay.addEventListener('click', closeSidebar);
    }
    
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !notificationDropdown.classList.contains('hidden')) {
        closeSidebar();
      }
    });
    
    notificationBtn.addEventListener('click', (e) => {
      console.log('🔔 Secretariat Notification button clicked');
      e.preventDefault();
      e.stopPropagation();
      
      if (!notificationOverlay) {
        console.error('❌ Secretariat notification overlay not found!');
        return;
      }
      
      const isHidden = notificationDropdown.classList.contains('hidden');
      if (isHidden) {
        console.log('📂 Opening Secretariat notification sidebar');
        console.log('🖤 Showing overlay with bg-black/50');
        
        // Show overlay first
        notificationOverlay.classList.remove('hidden');
        notificationOverlay.style.opacity = '0';
        
        // Show sidebar
        notificationDropdown.classList.remove('hidden');
        notificationDropdown.style.transform = 'translateX(100%)';
        
        // Animate both together
        requestAnimationFrame(() => {
          notificationOverlay.style.opacity = '1';
          notificationDropdown.style.transform = 'translateX(0)';
        });
        
        loadNotifications(notificationService);
        } else {
        console.log('📁 Closing Secretariat notification sidebar');
        closeSidebar();
      }
    });
    
    function closeSidebar() {
      notificationDropdown.style.transform = 'translateX(100%)';
      notificationOverlay.style.opacity = '0';
      setTimeout(() => {
        notificationDropdown.classList.add('hidden');
        notificationOverlay.classList.add('hidden');
      }, 300);
    }
    
    if (closeNotificationBtn) {
      closeNotificationBtn.addEventListener('click', closeSidebar);
    }
    
    if (notificationOverlay) {
      notificationOverlay.addEventListener('click', closeSidebar);
    }

    // Mark all as read (copied from SysAdmin)
    if (markAllReadBtn) {
      markAllReadBtn.addEventListener('click', async () => {
        await notificationService.markAllAsRead();
        updateNotificationBadge(notificationService);
        loadNotifications(notificationService);
      });
    }

    // Delete all read notifications (copied from SysAdmin)
    const deleteAllReadBtn = document.getElementById('secretariat-delete-all-read');
    if (deleteAllReadBtn) {
      deleteAllReadBtn.addEventListener('click', async () => {
        if (confirm('Are you sure you want to delete all read notifications?')) {
          await notificationService.deleteAllRead();
          updateNotificationBadge(notificationService);
          loadNotifications(notificationService);
        }
      });
    }

    // Delete all notifications (both read and unread)
    const deleteAllNotificationsBtn = document.getElementById('secretariat-delete-all-notifications');
    if (deleteAllNotificationsBtn) {
      deleteAllNotificationsBtn.addEventListener('click', async () => {
        if (confirm('Are you sure you want to delete ALL notifications? This action cannot be undone and will clear both read and unread notifications.')) {
          try {
            const data = await notificationService.getNotifications();
            const allNotifications = data.notifications || [];
            
            let deletedCount = 0;
            for (const notification of allNotifications) {
              const success = await notificationService.deleteNotification(notification.id);
              if (success) deletedCount++;
            }
            
            if (deletedCount > 0) {
              updateNotificationBadge(notificationService);
              loadNotifications(notificationService);
              console.log(`🗑️ Successfully deleted ${deletedCount} notifications`);
            }
          } catch (error) {
            console.error('Error deleting all notifications:', error);
            alert('Failed to delete all notifications. Please try again.');
          }
        }
      });
    }

    // Load initial notification count
    updateNotificationBadge(notificationService);

    // Subscribe to notification updates
    notificationService.onUpdate(({ count }) => {
      updateNotificationBadge(notificationService, count);
    });
    
    // Mark as initialized
    notificationBtn.dataset.initialized = 'true';
    console.log('✅ Notification system fully initialized');
  }
  
  // End notification function

  // Load notifications (copied from SysAdmin)
  async function loadNotifications(notificationService) {
    const notificationList = document.getElementById('secretariat-notification-list');
    if (!notificationService) return;
    
    try {
      const data = await notificationService.getNotifications();
      const notifications = data.notifications || [];

      if (notifications.length === 0) {
        notificationList.innerHTML = `
          <div class="p-6 text-center text-white bg-sky-500">
            <svg class="w-12 h-12 mx-auto mb-3 text-sky-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 002 2v14a2 2 0 002 2z"></path>
            </svg>
            <p class="text-white">No notifications</p>
          </div>
        `;
        return;
      }

      const notificationsHtml = notifications.map(notification => `
        <div class="p-4 bg-white/5 hover:bg-white/10 transition-colors border-b border-white/10 ${notification.isRead ? 'opacity-75' : ''}" 
             data-notification-id="${notification.id}">
          <div class="flex items-start gap-3">
            <!-- Priority Indicator -->
            <div class="flex-shrink-0 pt-1">
              <div class="w-3 h-3 rounded-full ${!notification.isRead ? 'bg-gradient-to-r from-green-400 to-green-500 animate-pulse' : 'bg-gray-500'}"></div>
            </div>
            <div class="flex-shrink-0 text-sky-200">
              ${notificationService.getNotificationIcon(notification.type, notification.category, notification.metadata)}
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center justify-between">
                <p class="text-sm font-medium text-white">${notification.title}</p>
                <span class="text-xs text-sky-100">${notificationService.formatTime(notification.createdAt)}</span>
              </div>
              <p class="text-sm text-sky-50 mt-1">${notification.message}</p>
              ${notification.actionUrl ? `
                <a href="${notification.actionUrl}" class="text-xs text-sky-200 hover:text-sky-100 mt-2 inline-block underline">
                  ${notification.actionText || 'View Details'}
                </a>
              ` : ''}
            </div>
            <div class="flex items-center gap-1">
            ${!notification.isRead ? `
                <button class="group flex items-center gap-2 text-sm font-semibold text-white bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 transition-all duration-300 ease-out px-3 py-2 rounded-xl border-2 border-green-400/50 hover:border-green-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" onclick="markSecretariatNotificationAsRead('${notification.id}')" title="Mark as read">
                <svg class="w-4 h-4 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </button>
            ` : ''}
              <button class="group flex items-center gap-2 text-sm font-semibold text-white bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 transition-all duration-300 ease-out px-3 py-2 rounded-xl border-2 border-red-400/50 hover:border-red-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" onclick="deleteSecretariatNotification('${notification.id}')" title="Delete notification">
                <svg class="w-4 h-4 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      `).join('');

      notificationList.innerHTML = notificationsHtml;
    } catch (error) {
      console.error('Error loading notifications:', error);
      notificationList.innerHTML = `
        <div class="p-6 text-center text-red-300 bg-sky-500">
          <p class="text-red-300">Failed to load notifications</p>
        </div>
      `;
    }
  }

  // Update notification badge (copied from SysAdmin)
  async function updateNotificationBadge(notificationService, count) {
    const badge = document.getElementById('secretariat-notification-badge');
    const totalEl = document.getElementById('secretariat-notification-total');
    const unreadEl = document.getElementById('secretariat-notification-unread');
    const readEl = document.getElementById('secretariat-notification-read');
    
    if (!notificationService) return;
    
    try {
      const currentCount = count !== undefined ? count : await notificationService.getNotificationCount();
      const notifications = await notificationService.getNotifications();
      const allNotifications = notifications.notifications || [];
      const readCount = allNotifications.filter(n => n.isRead).length;
      const unreadCount = allNotifications.length - readCount;
      
      // Update badge
      if (currentCount > 0) {
        badge.textContent = currentCount > 99 ? '99+' : currentCount;
        badge.classList.remove('hidden');
      } else {
        badge.classList.add('hidden');
      }
      
      // Update stats
      if (totalEl) totalEl.textContent = allNotifications.length;
      if (unreadEl) unreadEl.textContent = unreadCount;
      if (readEl) readEl.textContent = readCount;
      
    } catch (error) {
      console.error('Error updating Secretariat notification badge:', error);
      badge.classList.add('hidden');
    }
  }

  // Global function for marking notification as read
  window.markSecretariatNotificationAsRead = async function(notificationId) {
    const notificationService = window.notificationService;
    if (!notificationService) return;
    
    try {
    await notificationService.markAsRead(notificationId);
      updateNotificationBadge(notificationService);
      loadNotifications(notificationService);
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  };



  // Initialize user dropdown (Legacy - keeping for compatibility)
  function initializeUserDropdown() {
    const userDropdownBtn = document.getElementById('secretariat-user-dropdown-btn');
    const userDropdown = document.getElementById('secretariat-profile-dropdown');
    const userDropdownContainer = document.getElementById('secretariat-profile-container');
    
    console.log('🔧 User dropdown elements:', { 
      userDropdownBtn: !!userDropdownBtn, 
      userDropdown: !!userDropdown, 
      userDropdownContainer: !!userDropdownContainer,
      btnId: userDropdownBtn?.id,
      dropdownId: userDropdown?.id,
      containerId: userDropdownContainer?.id
    });
    
    if (userDropdownBtn && userDropdown && userDropdownContainer) {
      console.log('✅ User dropdown elements found, initializing...');
      
      // Show on click - Simple hidden class toggle
      userDropdownBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        console.log('🔍 Profile button clicked!');
        console.log('Dropdown element:', userDropdown);
        console.log('Current hidden state:', userDropdown.classList.contains('hidden'));
        
        // Simple toggle using hidden class
        if (userDropdown.classList.contains('hidden')) {
          // Show dropdown
          console.log('🔄 Showing dropdown...');
          userDropdown.classList.remove('hidden');
          userDropdownBtn.setAttribute('aria-expanded', 'true');
          console.log('✅ Dropdown shown');
        } else {
          // Hide dropdown
          console.log('🔄 Hiding dropdown...');
          userDropdown.classList.add('hidden');
          userDropdownBtn.setAttribute('aria-expanded', 'false');
          console.log('✅ Dropdown hidden');
        }
      });
      
      // Hide when clicking outside
      document.addEventListener('click', (e) => {
        if (!userDropdownContainer.contains(e.target)) {
          console.log('🔄 Clicking outside, hiding dropdown...');
          userDropdown.classList.add('hidden');
          userDropdownBtn.setAttribute('aria-expanded', 'false');
          console.log('✅ Dropdown hidden (click outside)');
        }
      });
      
      // Hide on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          console.log('⌨️ Escape key pressed, hiding dropdown...');
          userDropdown.classList.add('hidden');
          userDropdownBtn.setAttribute('aria-expanded', 'false');
        }
      });
    } else {
      console.error('❌ User dropdown elements not found!');
    }
  }

  // Initialize live clock
  function initializeLiveClock() {
    const clockElement = document.getElementById('secretariat-clock');
    console.log('🔍 Clock element found:', !!clockElement, clockElement);
    
    if (clockElement) {
      function updateClock() {
        const now = new Date();
        const options = { 
          weekday: 'long', 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          timeZone: 'Asia/Manila'
        };
        
        const timeString = now.toLocaleString('en-US', options);
        console.log('🕐 Updating clock to:', timeString);
        clockElement.textContent = timeString;
      }
      
      // Update immediately and then every second
      updateClock();
      setInterval(updateClock, 1000);
      console.log('✅ Clock initialized successfully');
    } else {
      console.error('❌ Clock element not found!');
      
      // Fallback: try again after a short delay
      setTimeout(() => {
        const retryElement = document.getElementById('secretariat-clock');
        if (retryElement) {
          console.log('🔄 Retry successful, initializing clock...');
          initializeLiveClock();
        } else {
          console.error('❌ Clock element still not found after retry');
        }
      }, 1000);
    }
  }

  // Simple search functionality for Secretariat
  function initializeSecretariatSearch() {
    const input = document.getElementById('secretariat-global-search');
    if (!input) return;

    // Simple search input handling
    input.addEventListener('input', (e) => {
      // Basic search functionality can be added here if needed
      console.log('Search query:', e.target.value);
    });
    
    // Keyboard shortcut for focus (Ctrl+K)
    document.addEventListener('keydown', (e) => {
      if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'k') {
        e.preventDefault();
        input.focus();
      }
    });
  }

  // Global functions for notification actions
  window.markSecretariatNotificationAsRead = async function(notificationId) {
    await window.notificationService.markAsRead(notificationId);
    updateNotificationBadge(window.notificationService);
    loadNotifications(window.notificationService);
  };

  window.deleteSecretariatNotification = async function(notificationId) {
    await window.notificationService.deleteNotification(notificationId);
    updateNotificationBadge(window.notificationService);
    loadNotifications(window.notificationService);
  };

  // Global logout function
  window.logout = function() {
    window.authService.logout();
  };

  // Debug function for dropdown








  // Profile Dropdown Functionality - SIMPLIFIED FOR TESTING
  function initializeSecretariatProfileDropdown() {
    const profileBtn = document.getElementById('secretariat-user-dropdown-btn');
    const profileDropdown = document.getElementById('secretariat-profile-dropdown');
    const profileContainer = document.getElementById('secretariat-profile-container');
    
    console.log('🔍 Testing Secretariat dropdown initialization...');
    console.log('🔍 Profile button found:', !!profileBtn);
    console.log('🔍 Profile dropdown found:', !!profileDropdown);
    console.log('🔍 Profile container found:', !!profileContainer);
    
    if (!profileBtn || !profileDropdown) {
      console.error('❌ Secretariat profile dropdown elements not found');
      return;
    }

    console.log('✅ Secretariat dropdown elements found, setting up event listeners...');

    // Simple toggle on click - NO ANIMATIONS FOR NOW
    profileBtn.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      console.log('🎯 Profile button clicked!');
      console.log('🔍 Current hidden state:', profileDropdown.classList.contains('hidden'));
      
      // Simple toggle without animations
      if (profileDropdown.classList.contains('hidden')) {
        console.log('📤 Showing dropdown...');
        profileDropdown.classList.remove('hidden');
        profileBtn.setAttribute('aria-expanded', 'true');
        console.log('✅ Dropdown should now be visible');
      } else {
        console.log('📥 Hiding dropdown...');
        profileDropdown.classList.add('hidden');
        profileBtn.setAttribute('aria-expanded', 'false');
        console.log('✅ Dropdown should now be hidden');
      }
    });

    // Close on outside click
    document.addEventListener('click', (e) => {
      if (!profileContainer.contains(e.target)) {
        console.log('🖱️ Outside click detected, hiding dropdown...');
        profileDropdown.classList.add('hidden');
        profileBtn.setAttribute('aria-expanded', 'false');
      }
    });

    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        console.log('⌨️ Escape key pressed, hiding dropdown...');
        profileDropdown.classList.add('hidden');
        profileBtn.setAttribute('aria-expanded', 'false');
      }
    });

    console.log('✅ Secretariat dropdown event listeners set up successfully');
  }




  
  // Make clock function globally accessible for debugging
  window.initializeSecretariatClock = initializeLiveClock;
  
  // Test clock function immediately when script loads
  console.log('🚀 Secretariat topbar script loaded, testing clock function...');
  setTimeout(() => {
    if (typeof initializeLiveClock === 'function') {
      console.log('✅ Clock function is accessible');
      initializeLiveClock();
    } else {
      console.error('❌ Clock function is not accessible');
    }
  }, 100);
</script>

<style>
  /* Enhanced Custom Scrollbar for Secretariat Notifications */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(14, 165, 233, 0.8) transparent;
  }
  
  .custom-scrollbar::-webkit-scrollbar {
    width: 12px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: linear-gradient(to bottom, rgba(14, 165, 233, 0.2), rgba(14, 165, 233, 0.3));
    border-radius: 6px;
    margin: 4px 0;
    border: 2px solid rgba(14, 165, 233, 0.3);
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: linear-gradient(to bottom, #0ea5e9 0%, #0284c7 50%, #0369a1 100%);
    border-radius: 6px;
    border: 2px solid rgba(14, 165, 233, 0.5);
    box-shadow: inset 0 1px 3px rgba(255, 255, 255, 0.4);
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(to bottom, #0284c7 0%, #0ea5e9 50%, #0284c7 100%);
    border-color: rgba(14, 165, 233, 0.7);
    box-shadow: inset 0 1px 3px rgba(255, 255, 255, 0.5), 0 0 12px rgba(14, 165, 233, 0.4);
  }
  
  /* Enhanced Notification Panel Layout and Scrolling */
  #secretariat-notification-dropdown {
    display: flex;
    flex-direction: column;
    height: 100vh;
    visibility: hidden;
    opacity: 0;
  }

  #secretariat-notification-dropdown:not(.hidden) {
    visibility: visible;
    opacity: 1;
    animation: slideInRight 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  #secretariat-notification-list {
    flex: 1;
    overflow-y: auto;
    min-height: 0;
    padding-bottom: 1rem;
  }

  /* Enhanced Footer Styling */
  #secretariat-notification-dropdown > div:last-child {
    flex-shrink: 0;
    background: linear-gradient(135deg, rgba(14, 165, 233, 0.8) 0%, rgba(6, 182, 212, 0.7) 100%);
    border-top: 2px solid rgba(14, 165, 233, 0.5);
    box-shadow: 0 -4px 20px rgba(14, 165, 233, 0.2);
  }
  
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
  
  /* Enhanced Notification Item Hover Effects */
  #secretariat-notification-list [data-notification-id] {
    border-bottom: 2px solid rgba(14, 165, 233, 0.15);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  #secretariat-notification-list [data-notification-id]:hover {
    transform: translateX(6px);
    box-shadow: 0 6px 25px rgba(14, 165, 233, 0.15);
    background: rgba(14, 165, 233, 0.03);
    border-left: 4px solid #0ea5e9;
  }

  #secretariat-notification-list [data-notification-id]:last-child {
    border-bottom: none;
  }

  /* Enhanced notification card styling */
  #secretariat-notification-list [data-notification-id] {
    margin: 0 8px;
    border-radius: 8px;
    padding: 16px;
  }

  #secretariat-notification-list [data-notification-id]:hover {
    margin-left: 4px;
    margin-right: 4px;
  }
  
  /* Priority Indicator Animations */
  .animate-pulse {
    animation: priorityPulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
  
  @keyframes priorityPulse {
    0%, 100% {
      opacity: 0.8;
      transform: scale(1);
    }
    50% {
      opacity: 1;
      transform: scale(1.1);
    }
  }

  /* Enhanced Action Button Hover Effects */
  #secretariat-mark-all-read,
  #secretariat-delete-all-read {
    position: relative;
    overflow: hidden;
  }

  #secretariat-mark-all-read::before,
  #secretariat-delete-all-read::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }

  #secretariat-mark-all-read:hover::before,
  #secretariat-delete-all-read:hover::before {
    left: 100%;
  }

  /* Enhanced Topbar Button Hover Effects */
  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }
  
  .group:hover .group-hover\:rotate-12 {
    transform: rotate(12deg);
  }
  
  .group:hover .group-hover\:rotate-6 {
    transform: rotate(6deg);
  }
  
  .group:hover .group-hover\:rotate-3 {
    transform: rotate(3deg);
  }
  
  /* Enhanced Secretariat Profile Dropdown Styles */
  #secretariat-profile-dropdown {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    box-shadow: 0 25px 50px -12px rgba(14, 165, 233, 0.25), 0 0 0 1px rgba(14, 165, 233, 0.1);
    transform-origin: top right;
    will-change: opacity, transform, visibility;
  }
  
  /* Ensure dropdown is visible when not hidden */
  #secretariat-profile-dropdown:not(.hidden) {
    display: block !important;
    visibility: visible !important;
    opacity: 1 !important;
  }

  #secretariat-profile-dropdown .group:hover {
    transform: translateX(4px);
  }

  /* Smooth transitions for dropdown items */
  #secretariat-profile-dropdown a,
  #secretariat-profile-dropdown button {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Enhanced hover effects */
  #secretariat-profile-dropdown .group:hover .w-8.h-8 {
    transform: scale(1.1);
    transition: transform 0.2s ease;
  }

  /* Subtle inner glow effect */
  #secretariat-profile-dropdown::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(14, 165, 233, 0.1) 0%, rgba(6, 182, 212, 0.05) 100%);
    border-radius: 1rem;
    pointer-events: none;
    z-index: -1;
  }

  /* Enhanced header and footer gradients */
  #secretariat-profile-dropdown .p-4.border-b {
    background: linear-gradient(135deg, rgba(14, 165, 233, 0.15) 0%, rgba(6, 182, 212, 0.1) 100%);
  }

  #secretariat-profile-dropdown .px-4.py-3.border-t {
    background: linear-gradient(135deg, rgba(14, 165, 233, 0.15) 0%, rgba(6, 182, 212, 0.1) 100%);
  }

  /* Smooth entrance animation */
  #secretariat-profile-dropdown.showing {
    animation: dropdownFadeIn 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  /* Smooth exit animation */
  #secretariat-profile-dropdown.hiding {
    animation: dropdownFadeOut 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes dropdownFadeIn {
    from {
      opacity: 0;
      transform: scale(0.95) translateY(-10px);
      visibility: hidden;
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
      visibility: visible;
    }
  }

  @keyframes dropdownFadeOut {
    from {
      opacity: 1;
      transform: scale(1) translateY(0);
      visibility: visible;
    }
    to {
      opacity: 0;
      transform: scale(0.95) translateY(-10px);
      visibility: hidden;
    }
  }
</style>