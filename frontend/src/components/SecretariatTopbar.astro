---
// SecretariatTopbar.astro
---

<header class="bg-white shadow-lg border-b border-gray-200">
  <div class="flex items-center justify-between px-6 py-4">
    <div class="flex items-center gap-4">
      <h2 class="text-xl font-semibold text-gray-800">MPMEC Secretariat</h2>
      <div class="w-px h-6 bg-gray-300"></div>
      <span class="text-sm text-gray-600">Central Monitoring Hub</span>
    </div>
    
    <div class="flex items-center gap-4">
      <!-- Notifications -->
      <div class="relative" id="secretariat-notification-container">
        <button class="relative p-2 text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors" id="secretariat-notification-btn">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
          </svg>
          <span class="absolute top-1 right-1 w-2 h-2 bg-[#FE5353] rounded-full hidden" id="secretariat-notification-badge"></span>
        </button>
        
        <!-- Notification Dropdown -->
        <div class="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50 hidden" id="secretariat-notification-dropdown">
          <div class="p-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-gray-800">Notifications</h3>
              <div class="flex items-center gap-2">
              <button class="text-sm text-[#FE5353] hover:text-[#e63939]" id="secretariat-mark-all-read">Mark all read</button>
                <button class="text-sm text-red-600 hover:text-red-700" id="secretariat-delete-all">Delete all</button>
              </div>
            </div>
          </div>
          <div class="max-h-96 overflow-y-auto" id="secretariat-notification-list">
            <div class="p-4 text-center text-gray-500">Loading notifications...</div>
          </div>
        </div>
      </div>

      <!-- User Menu -->
      <div class="flex items-center gap-3">
        <div class="text-right">
          <p class="text-sm font-medium text-gray-800" id="secretariat-user-name">Loading...</p>
          <p class="text-xs text-gray-600" id="secretariat-user-role">MPMEC Secretariat</p>
          <p class="text-xs text-gray-500" id="secretariat-user-status">Status: <span id="secretariat-status-text">Loading...</span></p>
        </div>
        <div class="w-8 h-8 bg-[#FE5353] rounded-full flex items-center justify-center">
          <span class="text-white text-sm font-medium" id="secretariat-user-initials">S</span>
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  import authService from '../services/auth.js';
  import notificationService from '../services/notifications.js';
  
  // Make services available globally
  window.authService = authService;
  window.notificationService = notificationService;
  
  document.addEventListener('DOMContentLoaded', async function() {
    try {
      // Get current user data
      const currentUser = authService.getCurrentUser();
      
      if (currentUser) {
        updateSecretariatUserData(currentUser);
      } else {
        // If no user data, try to fetch from API
        try {
          const response = await fetch('http://localhost:3000/api/auth/profile', {
            headers: {
              'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
          });
          
          if (response.ok) {
            const userData = await response.json();
            updateSecretariatUserData(userData);
          }
        } catch (error) {
          console.error('Failed to fetch user profile for Secretariat:', error);
        }
      }
    } catch (error) {
      console.error('Error loading user data for Secretariat:', error);
    }

    // Initialize notifications
    initializeNotifications();
  });
  
  // Function to update Secretariat user data
  function updateSecretariatUserData(userData) {
    // Update user name
    const userNameElement = document.getElementById('secretariat-user-name');
    if (userNameElement) {
      userNameElement.textContent = userData.fullName || userData.name || 'Secretariat User';
    }
    
    // Update user role
    const userRoleElement = document.getElementById('secretariat-user-role');
    if (userRoleElement) {
      const roleDisplay = userData.role === 'LGU-PMT' ? 'MPMEC Secretariat' : 
                         userData.subRole ? `${userData.role} - ${userData.subRole}` : 
                         userData.role || 'MPMEC Secretariat';
      userRoleElement.textContent = roleDisplay;
    }
    
    // Update user initials
    const userInitialsElement = document.getElementById('secretariat-user-initials');
    if (userInitialsElement) {
      const fullName = userData.fullName || userData.name || '';
      const initials = fullName.split(' ')
        .map(name => name.charAt(0))
        .join('')
        .toUpperCase()
        .slice(0, 2);
      userInitialsElement.textContent = initials || 'S';
    }
    
    // Update user status
    const statusTextElement = document.getElementById('secretariat-status-text');
    if (statusTextElement) {
      const status = userData.status || 'active';
      const statusText = status === 'active' ? 'Active' : 
                       status === 'blocked' ? 'Blocked' : 
                       status === 'deactivated' ? 'Deactivated' : 'Active';
      const statusColor = status === 'active' ? 'text-green-600' : 'text-red-600';
      statusTextElement.textContent = statusText;
      statusTextElement.className = `font-medium ${statusColor}`;
    }
  }

  // Notification functionality
  function initializeNotifications() {
    const notificationBtn = document.getElementById('secretariat-notification-btn');
    const notificationDropdown = document.getElementById('secretariat-notification-dropdown');
    const notificationBadge = document.getElementById('secretariat-notification-badge');
    const notificationList = document.getElementById('secretariat-notification-list');
    const markAllReadBtn = document.getElementById('secretariat-mark-all-read');
    const deleteAllBtn = document.getElementById('secretariat-delete-all');

    // Toggle dropdown
    notificationBtn.addEventListener('click', () => {
      notificationDropdown.classList.toggle('hidden');
      if (!notificationDropdown.classList.contains('hidden')) {
        loadNotifications();
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('#secretariat-notification-container')) {
        notificationDropdown.classList.add('hidden');
      }
    });

    // Mark all as read
    markAllReadBtn.addEventListener('click', async () => {
      await notificationService.markAllAsRead();
      updateNotificationBadge();
      loadNotifications();
    });

    // Delete all notifications
    deleteAllBtn.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete all notifications? This action cannot be undone.')) {
        const data = await notificationService.getNotifications();
        const notifications = data.notifications;
        
        let deletedCount = 0;
        for (const notification of notifications) {
          const success = await notificationService.deleteNotification(notification.id);
          if (success) deletedCount++;
        }
        
        if (deletedCount > 0) {
          updateNotificationBadge();
          loadNotifications();
        } else {
          alert('Failed to delete notifications. Please try again.');
        }
      }
    });

    // Load initial notification count
    updateNotificationBadge();

    // Subscribe to notification updates
    notificationService.onUpdate(({ count }) => {
      updateNotificationBadge(count);
    });
  }

  async function updateNotificationBadge(count) {
    const badge = document.getElementById('secretariat-notification-badge');
    const currentCount = count !== undefined ? count : await notificationService.getNotificationCount();
    
    if (currentCount > 0) {
      badge.classList.remove('hidden');
    } else {
      badge.classList.add('hidden');
    }
  }

  async function loadNotifications() {
    const notificationList = document.getElementById('secretariat-notification-list');
    
    try {
      const data = await notificationService.getNotifications();
      const notifications = data.notifications;

      if (notifications.length === 0) {
        notificationList.innerHTML = `
          <div class="p-4 text-center text-gray-500">
            <svg class="w-12 h-12 mx-auto mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
            </svg>
            <p>No notifications</p>
          </div>
        `;
        return;
      }

      const notificationsHtml = notifications.map(notification => `
        <div class="p-4 border-b border-gray-100 hover:bg-gray-50 transition-colors ${notification.isRead ? 'opacity-75' : ''}" 
             data-notification-id="${notification.id}">
          <div class="flex items-start gap-3">
            <div class="flex-shrink-0">
              ${notificationService.getNotificationIcon(notification.type)}
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center justify-between">
                <p class="text-sm font-medium text-gray-900">${notification.title}</p>
                <span class="text-xs text-gray-500">${notificationService.formatTime(notification.createdAt)}</span>
              </div>
              <p class="text-sm text-gray-600 mt-1">${notification.message}</p>
              ${notification.actionUrl ? `
                <a href="${notification.actionUrl}" class="text-xs text-[#FE5353] hover:text-[#e63939] mt-2 inline-block">
                  ${notification.actionText || 'View Details'}
                </a>
              ` : ''}
            </div>
            <div class="flex items-center gap-1">
            ${!notification.isRead ? `
                <button class="text-gray-400 hover:text-gray-600 p-1 rounded" onclick="markSecretariatNotificationAsRead('${notification.id}')" title="Mark as read">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </button>
            ` : ''}
              <button class="text-gray-400 hover:text-red-600 p-1 rounded transition-colors" onclick="deleteSecretariatNotification('${notification.id}')" title="Delete notification">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      `).join('');

      notificationList.innerHTML = notificationsHtml;
    } catch (error) {
      console.error('Error loading notifications:', error);
      notificationList.innerHTML = `
        <div class="p-4 text-center text-red-500">
          <p>Failed to load notifications</p>
        </div>
      `;
    }
  }

  // Global function for marking notification as read
  window.markSecretariatNotificationAsRead = async function(notificationId) {
    await notificationService.markAsRead(notificationId);
    updateNotificationBadge();
    loadNotifications();
  };

  // Global function for deleting notification
  window.deleteSecretariatNotification = async function(notificationId) {
    if (confirm('Are you sure you want to delete this notification?')) {
      const success = await notificationService.deleteNotification(notificationId);
      if (success) {
        updateNotificationBadge();
        loadNotifications();
      } else {
        alert('Failed to delete notification. Please try again.');
      }
    }
  };
</script> 