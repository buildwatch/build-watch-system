---
// SecretariatSidebar.astro
---

<!-- Secretariat Profile Picture Manager Script -->
<script src="/src/scripts/secretariat-profile-picture-manager.js"></script>

<aside class="w-64 bg-gradient-to-br from-sky-400 via-sky-500 to-sky-600 text-white shadow-2xl h-screen flex flex-col relative overflow-hidden">
  <!-- Background Pattern -->
  <div class="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent opacity-30"></div>
  <div class="absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full -translate-y-16 translate-x-16"></div>
  <div class="absolute bottom-0 left-0 w-24 h-24 bg-white/5 rounded-full translate-y-12 -translate-x-12"></div>
  
  <!-- Header Section -->
  <div class="relative p-6 border-b border-white/10 backdrop-blur-sm flex items-center">
    <div class="flex items-center gap-4 w-full">
      <div class="w-14 h-14 rounded-2xl overflow-hidden shadow-lg ring-2 ring-white/10 flex-shrink-0">
        <img 
          id="secretariat-sidebar-profile-picture"
          src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%230EA5E9'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EMS%3C/text%3E%3C/svg%3E"
          alt="Secretariat Admin"
          class="w-full h-full object-cover"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
        />
        <div class="w-full h-full bg-gradient-to-br from-blue-500 to-blue-600 rounded-2xl flex items-center justify-center shadow-lg" style="display: none;">
          <span class="text-white font-bold text-lg">MS</span>
        </div>
      </div>
      <div class="nav-text overflow-hidden transition-opacity duration-300">
        <div class="flex flex-col gap-1">
          <p id="secretariat-sidebar-abbreviated-name" class="text-xl font-bold tracking-tight text-white drop-shadow-sm whitespace-nowrap">Loading...</p>
          <p id="secretariat-sidebar-role" class="text-sm text-white/80 font-medium whitespace-nowrap">Loading...</p>
          <div class="flex items-center gap-2">
            <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse flex-shrink-0"></div>
            <span class="text-xs text-white/60 whitespace-nowrap">Active</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Navigation Section -->
  <div class="relative flex-1 overflow-y-auto py-4 custom-scrollbar">
    <nav class="space-y-2 px-3">
      <!-- Dashboard Overview -->
      <a href="/dashboard/lgu-pmt-mpmec-secretariat/SECRETARIATDashboard" 
         class="nav-item nav-link group flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm"
         data-tooltip="Dashboard Overview">
        <div class="nav-icon flex-shrink-0">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v6H8V5z"></path>
          </svg>
        </div>
        <span class="nav-text font-medium text-white/90 group-hover:text-white">Dashboard Overview</span>
      </a>

      <!-- Submissions & Tracker -->
      <a href="/dashboard/lgu-pmt-mpmec-secretariat/modules/submissions" 
         class="nav-item nav-link group flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm"
         data-tooltip="Submissions & Tracker">
        <div class="nav-icon flex-shrink-0">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </div>
        <span class="nav-text font-medium text-white/90 group-hover:text-white">Submissions & Tracker</span>
      </a>

      <!-- Compilation Summary -->
      <a href="/dashboard/lgu-pmt-mpmec-secretariat/modules/compilation" 
         class="nav-item nav-link group flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm"
         data-tooltip="Compilation Summary">
        <div class="nav-icon flex-shrink-0">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
        </div>
        <span class="nav-text font-medium text-white/90 group-hover:text-white">Compilation Summary</span>
      </a>

      <!-- Project/Program Documents -->
      <a href="/dashboard/lgu-pmt-mpmec-secretariat/modules/templates" 
         class="nav-item nav-link group flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm"
         data-tooltip="Project/Program Documents">
        <div class="nav-icon flex-shrink-0">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
          </svg>
        </div>
        <span class="nav-text font-medium text-white/90 group-hover:text-white">Project/Program Documents</span>
      </a>

      
    </nav>
  </div>

  <!-- Logout Section -->
  <div class="relative p-6 border-t border-white/20 backdrop-blur-sm">
    <button id="secretariat-logout-btn" 
       class="flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm text-white group w-full text-left">
      <div class="nav-icon">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
        </svg>
      </div>
      <span class="font-medium text-white/90 group-hover:text-white">Logout</span>
    </button>
  </div>
</aside>

<script>
  document.addEventListener('DOMContentLoaded', async function() {
    console.log('🔧 Initializing Secretariat Sidebar');
    
    // Add a small delay to ensure DOM is fully ready
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // Load profile picture from server or localStorage for sidebar
    async function loadSecretariatSidebarProfilePicture() {
      try {
        // Get actual user ID from localStorage
        const userData = localStorage.getItem('user');
        let userId = 'SEC-0001'; // Default fallback
        if (userData) {
          try {
            const user = JSON.parse(userData);
            userId = user.employeeId || user.username || user.id || user.userId || 'SEC-0001';
          } catch (error) {
            console.warn('⚠️ Error parsing user data in Secretariat sidebar, using default userId');
          }
        }
        
        // First try to get from server
        console.log('Secretariat Sidebar: Fetching profile picture from server for userId:', userId);
        const response = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
        
        if (response.ok) {
          const result = await response.json();
          if (result.success && result.profilePictureUrl) {
            console.log('Secretariat Sidebar: Profile picture loaded from server:', result.profilePictureUrl);
            
            // Update the sidebar profile picture
            const sidebarProfilePic = document.getElementById('secretariat-sidebar-profile-picture');
            if (sidebarProfilePic) {
              sidebarProfilePic.src = result.profilePictureUrl;
              // Hide fallback div if it exists
              const fallbackDiv = sidebarProfilePic.nextElementSibling;
              if (fallbackDiv) {
                fallbackDiv.style.display = 'none';
                sidebarProfilePic.style.display = 'block';
              }
            }
            
            // Store in localStorage for future use
            localStorage.setItem('secretariat_profile_picture', result.profilePictureUrl);
            return;
          }
        }
      } catch (error) {
        console.log('Secretariat Sidebar: Server fetch failed, trying localStorage:', error);
      }
      
      // Fallback to localStorage if server fails
      const storedUrl = localStorage.getItem('secretariat_profile_picture');
      if (storedUrl) {
        const sidebarProfilePic = document.getElementById('secretariat-sidebar-profile-picture');
        if (sidebarProfilePic) {
          sidebarProfilePic.src = storedUrl;
          // Hide fallback div if it exists
          const fallbackDiv = sidebarProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
            sidebarProfilePic.style.display = 'block';
          }
        }
      }
    }
    
    // Load profile picture on page load
    loadSecretariatSidebarProfilePicture();

    // Register with global manager if available - delay to avoid conflicts
    setTimeout(() => {
      if (window.secretariatProfilePictureManager) {
        console.log('🎯 Secretariat Sidebar: Registering with global manager');
        // Note: The SecretariatProfilePictureManager doesn't have addListener method like EIU
        // It uses event listeners instead, so we don't need to register here
      }
    }, 2000); // Delay to ensure user data loading completes first
    
    // Listen for storage changes to update profile picture in real-time
    window.addEventListener('storage', function(e) {
      if (e.key === 'secretariat_profile_picture' && e.newValue) {
        const sidebarProfilePic = document.getElementById('secretariat-sidebar-profile-picture');
        if (sidebarProfilePic) {
          sidebarProfilePic.src = e.newValue;
          // Hide fallback div if it exists
          const fallbackDiv = sidebarProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
            sidebarProfilePic.style.display = 'block';
          }
        }
      }
    });

    // Listen for profile picture updates
    window.addEventListener('secretariatProfilePictureUpdated', function(e) {
      if (e.detail.profilePictureUrl) {
        const sidebarProfilePic = document.getElementById('secretariat-sidebar-profile-picture');
        if (sidebarProfilePic) {
          // Preload the image to prevent blinking
          const img = new Image();
          img.onload = function() {
            sidebarProfilePic.src = e.detail.profilePictureUrl;
            sidebarProfilePic.style.display = 'block';
            
            // Hide fallback div if it exists
            const fallbackDiv = sidebarProfilePic.nextElementSibling;
            if (fallbackDiv) {
              fallbackDiv.style.display = 'none';
            }
          };
          img.src = e.detail.profilePictureUrl;
        }
        
        // Store in localStorage for future use
        localStorage.setItem('secretariat_profile_picture', e.detail.profilePictureUrl);
      }
    });
    
    // Function to convert name to abbreviation
    function convertToAbbreviation(fullName) {
      if (!fullName) return 'USER';
      
      const nameParts = fullName.trim().split(/\s+/);
      if (nameParts.length === 1) {
        return nameParts[0].toUpperCase();
      }
      
      if (nameParts.length === 2) {
        return `${nameParts[0][0]}.${nameParts[1]}`.toUpperCase();
      }
      
      // For 3+ parts: First initial + Middle initial(s) + Last name
      const firstInitial = nameParts[0][0];
      const lastName = nameParts[nameParts.length - 1];
      const middleInitials = nameParts.slice(1, -1).map(name => name[0]).join('.');
      
      return `${firstInitial}.${middleInitials}.${lastName}`.toUpperCase();
    }
    
    // Function to update user data in sidebar
    function updateSecretariatUserData(userData) {
      const nameElement = document.getElementById('secretariat-sidebar-abbreviated-name');
      const roleElement = document.getElementById('secretariat-sidebar-role');
      
      console.log('🔍 User data received:', userData);
      
      if (nameElement && userData) {
        let fullName = userData.fullName || userData.name;
        if (!fullName && userData.firstName) {
          fullName = `${userData.firstName}${userData.middleName ? ' ' + userData.middleName : ''}${userData.lastName ? ' ' + userData.lastName : ''}`;
        }
        if (!fullName) {
          fullName = 'MPMEC Secretariat Admin'; // Fallback based on what's shown in screenshot
        }
        
        const abbreviatedName = convertToAbbreviation(fullName);
        nameElement.textContent = abbreviatedName;
        console.log('✅ Updated Secretariat sidebar name:', abbreviatedName, 'from fullName:', fullName);
      } else {
        console.warn('⚠️ Name element or user data missing:', { nameElement: !!nameElement, userData: !!userData });
      }
      
      if (roleElement && userData?.role) {
        // Display the actual role from database (exact enum value)
        roleElement.textContent = userData.role;
        console.log('✅ Updated Secretariat sidebar role:', userData.role);
      }
    }
    
    // Load user data from auth service - ensure this runs independently
    async function loadSecretariatUserData() {
      try {
        console.log('🔧 Secretariat Sidebar: Loading user data...');
        const authModule = await import('/src/services/auth.js');
        const authService = authModule.default || authModule.authService;
        
        if (!authService || typeof authService.getCurrentUser !== 'function') {
          console.error('❌ Error loading Secretariat user data: authService or getCurrentUser not available');
          return;
        }
        
        const userData = authService.getCurrentUser();
        
        console.log('🔍 Secretariat Sidebar: User data received:', userData);
        
        if (userData) {
          updateSecretariatUserData(userData);
          console.log('✅ Secretariat Sidebar: User data updated successfully');
        } else {
          console.warn('⚠️ No user data found for Secretariat sidebar, using fallback');
          // Fallback values
          const nameElement = document.getElementById('secretariat-sidebar-abbreviated-name');
          const roleElement = document.getElementById('secretariat-sidebar-role');
          
          if (nameElement) nameElement.textContent = 'M.S.ADMIN';
          if (roleElement) roleElement.textContent = 'LGU-PMT';
        }
      } catch (error) {
        console.error('❌ Error loading Secretariat user data:', error);
        // Fallback
        const nameElement = document.getElementById('secretariat-sidebar-abbreviated-name');
        const roleElement = document.getElementById('secretariat-sidebar-role');
        
        if (nameElement) nameElement.textContent = 'M.S.ADMIN';
        if (roleElement) roleElement.textContent = 'LGU-PMT';
      }
    }
    
    // Also try to load from localStorage as a backup
    function loadFromLocalStorage() {
      try {
        const userData = localStorage.getItem('user');
        if (userData) {
          const user = JSON.parse(userData);
          console.log('🔄 Secretariat Sidebar: Loading from localStorage:', user);
          updateSecretariatUserData(user);
        }
      } catch (error) {
        console.log('⚠️ Failed to load from localStorage:', error);
      }
    }
    
    // Try localStorage as backup
    loadFromLocalStorage();
    
    // Load user data immediately with retry mechanism
    loadSecretariatUserData();
    
    // Retry loading user data after a short delay if still showing "Loading..."
    setTimeout(() => {
      const nameElement = document.getElementById('secretariat-sidebar-abbreviated-name');
      if (nameElement && nameElement.textContent === 'Loading...') {
        console.log('🔄 Secretariat Sidebar: Retrying user data load...');
        loadSecretariatUserData();
      }
    }, 1000);
  });
</script>

<style>
  .nav-link {
    position: relative;
    overflow: hidden;
  }

  .nav-link::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 0;
    background: linear-gradient(90deg, rgba(255,255,255,0.2), transparent);
    transition: width 0.4s ease;
  }

  .nav-link:hover::before {
    width: 100%;
  }

  .nav-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    transition: all 0.3s ease;
  }

  .nav-link:hover .nav-icon {
    transform: scale(1.1) rotate(5deg);
  }

  /* Enhanced Sidebar Icon Hover Effects - Matching Topbar Style */
  .nav-link::after {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(156, 163, 175, 0.2) 100%);
    border-radius: 1rem;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .nav-link:hover::after {
    opacity: 1;
  }

  /* Enhanced icon hover effects with neutral theme */
  .nav-link:hover .nav-icon {
    transform: scale(1.1) rotate(5deg);
    filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.3));
  }

  /* Specific rotation effects for different icons */
  .nav-link:nth-child(1):hover .nav-icon { transform: scale(1.1) rotate(12deg); }
  .nav-link:nth-child(2):hover .nav-icon { transform: scale(1.1) rotate(-6deg); }
  .nav-link:nth-child(3):hover .nav-icon { transform: scale(1.1) rotate(8deg); }
  .nav-link:nth-child(4):hover .nav-icon { transform: scale(1.1) rotate(-4deg); }
  .nav-link:nth-child(5):hover .nav-icon { transform: scale(1.1) rotate(10deg); }
  .nav-link:nth-child(6):hover .nav-icon { transform: scale(1.1) rotate(-8deg); }
  .nav-link:nth-child(7):hover .nav-icon { transform: scale(1.1) rotate(6deg); }
  .nav-link:nth-child(8):hover .nav-icon { transform: scale(1.1) rotate(-12deg); }

  /* Active state styling */
  .nav-link.active {
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    backdrop-filter: blur(10px);
  }

  .nav-link.active::before {
    width: 100%;
  }

  .nav-link.active .nav-icon {
    transform: scale(1.1);
  }

  /* Custom scrollbar */
  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    transition: background 0.3s ease;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }

  /* Firefox scrollbar */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);
  }
</style>

<script>
  import authService from '../services/auth.js';
  
  // Make authService available globally
  window.authService = authService;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Get current path
    const currentPath = window.location.pathname;
    
    // Find all nav links
    const navLinks = document.querySelectorAll('.nav-link');
    
    // Remove active class from all links
    navLinks.forEach(link => {
      link.classList.remove('active');
    });
    
    // Add active class to current page
    navLinks.forEach(link => {
      if (link.getAttribute('href') === currentPath) {
        link.classList.add('active');
      }
    });
    
    // Handle logout button
    const logoutBtn = document.getElementById('secretariat-logout-btn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', function() {
        authService.logout();
      });
    }
    
  });

</script>

<style>
  /* Custom scrollbar */
  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 3px;
  }
  
  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }

  /* COLLAPSIBLE SIDEBAR STYLES */
  
  /* Collapsed sidebar width and transitions */
  :global(aside.collapsed) {
    width: 80px; /* w-20 collapsed width */
    min-width: 80px;
    overflow-y: hidden; /* Prevent scrollbar */
  }

  /* Override the scrollable area in collapsed state */
  :global(aside.collapsed .relative.flex-1.overflow-y-auto) {
    overflow-y: visible; /* Remove scroll in collapsed state */
  }

  /* Hide text in collapsed sidebar - SMOOTH FADE */
  :global(aside.collapsed .nav-text) {
    opacity: 0;
    pointer-events: none;
    width: 0;
    overflow: hidden;
    transition: opacity 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), width 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* USE PROFILE PICTURE IN COLLAPSED STATE - CENTERED */
  :global(aside.collapsed .w-14.h-14) {
    display: block !important; /* Show profile photo */
    margin: 0 auto !important; /* Center it perfectly */
  }

  :global(aside.collapsed .nav-text) {
    display: none !important;
  }

  :global(aside.collapsed .flex.items-center.gap-4) {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    padding: 0.75rem 0 !important; /* Standard padding */
    margin: 0 !important; /* No margin */
    position: relative !important;
    height: auto !important; /* Auto height for profile picture */
  }

  /* Navigation section - remove container padding */
  :global(aside.collapsed .relative.flex-1.overflow-y-auto.py-4) {
    padding: 0.5rem 0 !important; /* Only vertical padding */
  }

  /* Remove nav container padding in collapsed state */
  :global(aside.collapsed nav.space-y-2.px-3) {
    padding: 0 !important; /* Remove all nav padding */
    margin: 0 !important;
  }

  /* Navigation items in collapsed state */
  :global(aside.collapsed .nav-item) {
    padding: 0.75rem 0 0.75rem 1.75rem !important; /* Precise alignment */
    margin: 0.25rem 0 !important;
    justify-content: flex-start !important;
    width: 100% !important;
    position: relative !important;
  }

  /* Icons in collapsed state */
  :global(aside.collapsed .nav-icon) {
    flex-shrink: 0 !important;
    margin: 0 !important;
    width: 20px !important; /* w-5 equivalent */
    height: 20px !important; /* h-5 equivalent */
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
  }

  /* Logout section - make it visible and properly positioned */
  :global(aside.collapsed .relative.p-6:last-child) {
    padding: 0.5rem 0 1rem 0 !important; /* Vertical padding only */
    border-top: 1px solid rgba(255, 255, 255, 0.1) !important;
    margin-top: auto !important;
    display: block !important;
    text-align: center !important; /* Center the logout section */
  }

  /* FINAL LOGOUT BUTTON STYLING IN COLLAPSED STATE */
  :global(aside.collapsed .relative.p-6:last-child button) {
    padding: 0.75rem 0 !important; /* Center the button vertically */
    justify-content: center !important; /* Center the icon */
    width: 100% !important;
    text-align: center !important;
    display: flex !important; /* Ensure it's visible */
    align-items: center !important;
    margin: 0 auto !important; /* Center horizontally */
  }

  /* Center the logout icon in collapsed state */
  :global(aside.collapsed .relative.p-6:last-child .nav-icon) {
    margin: 0 auto !important; /* Center the icon */
    justify-content: center !important;
    align-items: center !important;
  }

  /* Hide logout text in collapsed state */
  :global(aside.collapsed .relative.p-6:last-child span) {
    display: none !important;
  }

  /* Header border alignment in collapsed state */
  :global(aside.collapsed .border-b.border-white\/10) {
    margin: 0 0.5rem !important; /* Center the border line */
  }

  /* Smooth transitions for all elements */
  :global(aside) {
    transition: width 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  :global(.nav-item) {
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  :global(.nav-text) {
    transition: opacity 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* TOOLTIP STYLES for collapsed sidebar */
  :global([data-tooltip]) {
    position: relative;
  }

  :global([data-tooltip]:hover::after) {
    content: attr(data-tooltip);
    position: absolute;
    left: 100%;
    top: 50%;
    transform: translateY(-50%);
    margin-left: 10px;
    padding: 6px 12px;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    border-radius: 6px;
    font-size: 12px;
    white-space: nowrap;
    z-index: 1000;
    opacity: 0;
    animation: tooltipFadeIn 0.3s ease forwards;
  }

  @keyframes tooltipFadeIn {
    from { opacity: 0; transform: translateY(-50%) translateX(-10px); }
    to { opacity: 1; transform: translateY(-50%) translateX(0); }
  }

  /* Only show tooltips in collapsed state */
  :global(aside:not(.collapsed) [data-tooltip]:hover::after) {
    display: none;
  }
</style> 