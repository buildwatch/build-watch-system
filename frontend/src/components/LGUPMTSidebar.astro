---
// LGU-PMT MPMEC Sidebar Component
// Theme Color: #3B82F6
---

<aside class="w-64 bg-gradient-to-br from-[#3B82F6] via-[#2563EB] to-[#1D4ED8] text-white shadow-2xl h-screen flex flex-col relative overflow-hidden">
  <!-- Background Pattern -->
  <div class="absolute inset-0 bg-gradient-to-br from-white/5 to-transparent opacity-30"></div>
  <div class="absolute top-0 right-0 w-32 h-32 bg-white/5 rounded-full -translate-y-16 translate-x-16"></div>
  <div class="absolute bottom-0 left-0 w-24 h-24 bg-white/5 rounded-full translate-y-12 -translate-x-12"></div>
  
  <!-- Header Section -->
  <div class="relative p-6 border-b border-white/10 backdrop-blur-sm flex items-center">
    <div class="flex items-center gap-4 w-full">
      <div class="w-14 h-14 rounded-2xl overflow-hidden shadow-lg ring-2 ring-white/10 flex-shrink-0">
        <img 
          id="lgu-pmt-sidebar-profile-picture"
          src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%233B82F6'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EMP%3C/text%3E%3C/svg%3E"
          alt="MPMEC Member"
          class="w-full h-full object-cover"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
        />
        <div class="w-full h-full bg-gradient-to-br from-blue-600 to-blue-700 rounded-2xl flex items-center justify-center shadow-lg" style="display: none;">
          <span class="text-white font-bold text-lg">MP</span>
        </div>
      </div>
      <div class="nav-text overflow-hidden transition-opacity duration-300">
        <h1 id="lgu-pmt-sidebar-name" class="text-xl font-bold tracking-tight text-white drop-shadow-sm whitespace-nowrap">Loading...</h1>
        <div class="flex flex-col gap-1">
          <p id="lgu-pmt-sidebar-role" class="text-sm text-white/80 font-medium whitespace-nowrap">LGU-PMT</p>
          <div class="flex items-center gap-1">
            <div class="w-1.5 h-1.5 bg-green-400 rounded-full animate-pulse flex-shrink-0"></div>
            <span class="text-xs text-green-300 font-medium">Active</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Navigation Section -->
  <div class="relative flex-1 overflow-y-auto py-4 custom-scrollbar">
    <nav class="space-y-2 px-3">
      <!-- Dashboard Overview -->
      <a href="/dashboard/lgu-pmt-mpmec/MPMECDashboard" 
         class="nav-item nav-link group flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm"
         data-tooltip="Dashboard Overview">
        <div class="nav-icon flex-shrink-0">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 5a2 2 0 012-2h4a2 2 0 012 2v6H8V5z"></path>
          </svg>
        </div>
        <span class="nav-text font-medium text-white/90 group-hover:text-white">Dashboard Overview</span>
      </a>

      <!-- Approved Projects -->
      <a href="/dashboard/lgu-pmt-mpmec/modules/approved-projects" 
         class="nav-item nav-link group flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm"
         data-tooltip="Approved Projects">
        <div class="nav-icon flex-shrink-0">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
          </svg>
        </div>
        <span class="nav-text font-medium text-white/90 group-hover:text-white">Approved Projects (FY 2025)</span>
      </a>

      <!-- Progress & Timeline -->
      <a href="/dashboard/lgu-pmt-mpmec/modules/progress-timeline" 
         class="nav-item nav-link group flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm"
         data-tooltip="Progress & Timeline">
        <div class="nav-icon flex-shrink-0">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
        </div>
        <span class="nav-text font-medium text-white/90 group-hover:text-white">Progress & Timeline</span>
      </a>





      <!-- Policy Dashboard & Documents -->
      <a href="/dashboard/lgu-pmt-mpmec/modules/policy-dashboard" 
         class="nav-item nav-link group flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm"
         data-tooltip="Policy & Documents">
        <div class="nav-icon flex-shrink-0">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
          </svg>
        </div>
        <span class="nav-text font-medium text-white/90 group-hover:text-white">Policy & Documents</span>
      </a>
    </nav>
  </div>

  <!-- Logout Section -->
  <div class="relative p-6 border-t border-white/20 backdrop-blur-sm">
    <button id="lgu-pmt-logout-btn" 
       class="flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 hover:bg-white/15 hover:shadow-xl hover:scale-[1.02] backdrop-blur-sm text-white group w-full text-left">
      <div class="nav-icon">
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
        </svg>
      </div>
      <span class="font-medium text-white/90 group-hover:text-white">Logout</span>
    </button>
  </div>
</aside>

<style>
  .nav-link {
    position: relative;
    overflow: hidden;
  }

  .nav-link::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    height: 100%;
    width: 0;
    background: linear-gradient(90deg, rgba(255,255,255,0.2), transparent);
    transition: width 0.4s ease;
  }

  .nav-link:hover::before {
    width: 100%;
  }

  .nav-icon {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 24px;
    height: 24px;
    transition: all 0.3s ease;
  }

  .nav-link:hover .nav-icon {
    transform: scale(1.1) rotate(5deg);
  }

  /* Enhanced Sidebar Icon Hover Effects - Matching Topbar Style */
  .nav-link::after {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(255, 255, 255, 0.2) 0%, rgba(156, 163, 175, 0.2) 100%);
    border-radius: 1rem;
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
  }

  .nav-link:hover::after {
    opacity: 1;
  }

  /* Enhanced icon hover effects with neutral theme */
  .nav-link:hover .nav-icon {
    transform: scale(1.1) rotate(5deg);
    filter: drop-shadow(0 0 8px rgba(255, 255, 255, 0.3));
  }

  /* Specific rotation effects for different icons */
  .nav-link:nth-child(1):hover .nav-icon { transform: scale(1.1) rotate(12deg); }
  .nav-link:nth-child(2):hover .nav-icon { transform: scale(1.1) rotate(-6deg); }
  .nav-link:nth-child(3):hover .nav-icon { transform: scale(1.1) rotate(8deg); }
  .nav-link:nth-child(4):hover .nav-icon { transform: scale(1.1) rotate(-4deg); }
  .nav-link:nth-child(5):hover .nav-icon { transform: scale(1.1) rotate(10deg); }
  .nav-link:nth-child(6):hover .nav-icon { transform: scale(1.1) rotate(-8deg); }
  .nav-link:nth-child(7):hover .nav-icon { transform: scale(1.1) rotate(6deg); }
  .nav-link:nth-child(8):hover .nav-icon { transform: scale(1.1) rotate(-12deg); }

  /* Active state styling */
  .nav-link.active {
    background: rgba(255, 255, 255, 0.2);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    backdrop-filter: blur(10px);
  }

  .nav-link.active::before {
    width: 100%;
  }

  .nav-link.active .nav-icon {
    transform: scale(1.1);
  }

  /* Custom scrollbar */
  .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }

  .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 10px;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.3);
    border-radius: 10px;
    transition: background 0.3s ease;
  }

  .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: rgba(255, 255, 255, 0.5);
  }

  /* Firefox scrollbar */
  .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: rgba(255, 255, 255, 0.3) rgba(255, 255, 255, 0.1);
  }
</style>

<script>
  import authService from '../services/auth.js';
  
  // Make authService available globally
  window.authService = authService;
  
  document.addEventListener('DOMContentLoaded', function() {
    // Get current path
    const currentPath = window.location.pathname;
    
    // Find all nav links
    const navLinks = document.querySelectorAll('.nav-link');
    
    // Remove active class from all links
    navLinks.forEach(link => {
      link.classList.remove('active');
    });
    
    // Add active class to current page
    navLinks.forEach(link => {
      if (link.getAttribute('href') === currentPath) {
        link.classList.add('active');
      }
    });
    
    // Handle logout button
    const logoutBtn = document.getElementById('lgu-pmt-logout-btn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', function() {
        authService.logout();
      });
    }
    
    // Load user data for sidebar
    loadLGUPMTUserData();
  });
  
  // ✅ FIXED: Function to load and display user data - prevent race conditions
  // Global lock to prevent multiple simultaneous loads across all LGU-PMT components
  if (!window.lgupmtUserDataLock) window.lgupmtUserDataLock = false;
  let isLoadingUserData = false;
  
  async function loadLGUPMTUserData() {
    // Prevent multiple simultaneous loads (component-level and global)
    if (isLoadingUserData || window.lgupmtUserDataLock) {
      console.log('⏳ LGU-PMT Sidebar: User data loading already in progress, skipping...');
      return;
    }
    
    isLoadingUserData = true;
    window.lgupmtUserDataLock = true;
    
    try {
      console.log('🔄 LGU-PMT Sidebar: Starting user data load...');
      
      // ✅ FIXED: Always fetch fresh data from API first
      console.log('🌐 LGU-PMT Sidebar: Fetching fresh user data from API...');
      try {
        const response = await fetch('http://localhost:3000/api/auth/profile', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`,
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
          }
        });
        
        if (response.ok) {
          const responseData = await response.json();
          if (responseData.success && responseData.user) {
            console.log('✅ LGU-PMT Sidebar: Fresh API user data loaded:', responseData.user.fullName || responseData.user.name);
            updateLGUPMTSidebarUserData(responseData.user);
            
            // Update localStorage with fresh data
            localStorage.setItem('user', JSON.stringify(responseData.user));
            
            // Also update the auth service's current user
            if (window.authService && typeof window.authService.currentUser !== 'undefined') {
              window.authService.currentUser = responseData.user;
            }
          } else {
            console.error('❌ LGU-PMT Sidebar: API returned invalid response');
            // Fallback to cached data if API fails
            const currentUser = authService.getCurrentUser();
            if (currentUser) {
              console.log('⚠️ LGU-PMT Sidebar: Using cached user data as fallback:', currentUser.fullName || currentUser.name);
              updateLGUPMTSidebarUserData(currentUser);
            }
          }
        } else {
          console.error('❌ LGU-PMT Sidebar: API request failed:', response.status);
          // Fallback to cached data if API fails
          const currentUser = authService.getCurrentUser();
          if (currentUser) {
            console.log('⚠️ LGU-PMT Sidebar: Using cached user data as fallback:', currentUser.fullName || currentUser.name);
            updateLGUPMTSidebarUserData(currentUser);
          }
        }
      } catch (error) {
        console.error('❌ LGU-PMT Sidebar: Failed to fetch user profile:', error);
        // Fallback to cached data if API fails
        const currentUser = authService.getCurrentUser();
        if (currentUser) {
          console.log('⚠️ LGU-PMT Sidebar: Using cached user data as fallback:', currentUser.fullName || currentUser.name);
          updateLGUPMTSidebarUserData(currentUser);
        }
      }
    } catch (error) {
      console.error('❌ LGU-PMT Sidebar: Error loading user data:', error);
    } finally {
      isLoadingUserData = false;
      window.lgupmtUserDataLock = false;
    }
  }
  
  // ✅ FIXED: Function to update sidebar user data - simplified and reliable
  function updateLGUPMTSidebarUserData(userData) {
    console.log('🎯 LGU-PMT Sidebar: Updating user data:', {
      fullName: userData.fullName || userData.name,
      role: userData.role,
      userId: userData.userId
    });
    
    // Function to convert full name to abbreviated format (simplified)
    function convertToAbbreviation(fullName) {
      if (!fullName || fullName === 'Loading...') return fullName;
      
      const trimmedName = fullName.trim();
      const words = trimmedName.split(' ').filter(word => word.length > 0);
      
      if (words.length <= 1) return trimmedName.toUpperCase();
      
      // Take first letter of each word except the last, then add the last word
      const abbreviation = words.slice(0, -1).map(word => word.charAt(0).toUpperCase()).join('.') + '.' + words[words.length - 1].toUpperCase();
      return abbreviation;
    }
    
    // Update user name with abbreviation
    const sidebarNameElement = document.getElementById('lgu-pmt-sidebar-name');
    if (sidebarNameElement && userData && (userData.fullName || userData.name)) {
      const fullName = userData.fullName || userData.name;
      const abbreviatedName = convertToAbbreviation(fullName);
      console.log('📝 LGU-PMT Sidebar: Setting name from', fullName, 'to', abbreviatedName);
      sidebarNameElement.textContent = abbreviatedName;
    }
    
    // Update user role - show actual role from database
    const sidebarRoleElement = document.getElementById('lgu-pmt-sidebar-role');
    if (sidebarRoleElement && userData && userData.role) {
      const roleDisplay = userData.role;
      console.log('🎭 LGU-PMT Sidebar: Setting role to', roleDisplay);
      sidebarRoleElement.textContent = roleDisplay;
    }
    
    // Load profile picture for the user (EIU-style)
    loadLGUPMTSidebarProfilePicture();
    
    // Update user initials for fallback avatar (moved after profile picture loading)
    const fallbackContainer = document.querySelector('#lgu-pmt-sidebar-profile-picture').nextElementSibling;
    if (fallbackContainer && userData) {
      const fullName = userData.fullName || userData.name || '';
      const initials = fullName.split(' ')
        .map(name => name.charAt(0))
        .join('')
        .toUpperCase()
        .slice(0, 2);
      const fallbackSpan = fallbackContainer.querySelector('span');
      if (fallbackSpan) {
        fallbackSpan.textContent = initials || 'MV';
      }
    }
    
    // Don't update status if element doesn't exist (it's not in current DOM)
    const sidebarStatusElement = document.getElementById('lgu-pmt-sidebar-status');
    if (sidebarStatusElement && userData) {
      const status = userData.status || 'active';
      const statusText = status === 'active' ? 'Active' : 
                       status === 'blocked' ? 'Blocked' : 
                       status === 'deactivated' ? 'Deactivated' : 'Active';
      const statusColor = status === 'active' ? 'text-green-300' : 'text-red-300';
      sidebarStatusElement.innerHTML = `Status: <span class="font-medium ${statusColor}">${statusText}</span>`;
    }
    
    console.log('✅ LGU-PMT Sidebar: User data update completed');
  }
  
  // Load profile picture from server or localStorage for sidebar (EIU-style)
  async function loadLGUPMTSidebarProfilePicture() {
    try {
      // Get actual user ID from localStorage
      const userData = localStorage.getItem('user');
      let userId = 'MP-0001'; // Default fallback
      if (userData) {
        try {
          const user = JSON.parse(userData);
          userId = user.employeeId || user.username || user.id || user.userId || 'MP-0001';
        } catch (error) {
          console.warn('⚠️ Error parsing user data in LGU-PMT sidebar, using default userId');
        }
      }
      
      // First try to get from server
      console.log('LGU-PMT Sidebar: Fetching profile picture from server for userId:', userId);
      const response = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
      
      if (response.ok) {
        const result = await response.json();
        if (result.success && result.profilePictureUrl) {
          console.log('LGU-PMT Sidebar: Profile picture loaded from server:', result.profilePictureUrl);
          
          // Update the sidebar profile picture
          const sidebarProfilePic = document.getElementById('lgu-pmt-sidebar-profile-picture');
          if (sidebarProfilePic) {
            sidebarProfilePic.src = result.profilePictureUrl;
            // Hide fallback div if it exists
            const fallbackDiv = sidebarProfilePic.nextElementSibling;
            if (fallbackDiv) {
              fallbackDiv.style.display = 'none';
              sidebarProfilePic.style.display = 'block';
            }
          }
          
      // Store in localStorage for future use
      localStorage.setItem('mpmec_profile_picture', result.profilePictureUrl);
          return;
        }
      }
    } catch (error) {
      console.log('LGU-PMT Sidebar: Server fetch failed, trying localStorage:', error);
    }
    
    // Fallback to localStorage if server fails
    const storedUrl = localStorage.getItem('mpmec_profile_picture');
    if (storedUrl) {
      const sidebarProfilePic = document.getElementById('lgu-pmt-sidebar-profile-picture');
      if (sidebarProfilePic) {
        sidebarProfilePic.src = storedUrl;
        // Hide fallback div if it exists
        const fallbackDiv = sidebarProfilePic.nextElementSibling;
        if (fallbackDiv) {
          fallbackDiv.style.display = 'none';
          sidebarProfilePic.style.display = 'block';
        }
      }
    }
  }

  // Listen for storage changes to update profile picture in real-time
  window.addEventListener('storage', function(e) {
    if (e.key === 'mpmec_profile_picture' && e.newValue) {
      const sidebarProfilePic = document.getElementById('lgu-pmt-sidebar-profile-picture');
      if (sidebarProfilePic) {
        sidebarProfilePic.src = e.newValue;
        // Hide fallback div if it exists
        const fallbackDiv = sidebarProfilePic.nextElementSibling;
        if (fallbackDiv) {
          fallbackDiv.style.display = 'none';
          sidebarProfilePic.style.display = 'block';
        }
      }
    }
  });

  // Listen for profile picture updates
  window.addEventListener('mpmecProfilePictureUpdated', function(e) {
    if (e.detail.profilePictureUrl) {
      const sidebarProfilePic = document.getElementById('lgu-pmt-sidebar-profile-picture');
      if (sidebarProfilePic) {
        // Preload the image to prevent blinking
        const img = new Image();
        img.onload = function() {
          sidebarProfilePic.src = e.detail.profilePictureUrl;
          sidebarProfilePic.style.display = 'block';
          
          // Hide fallback div if it exists
          const fallbackDiv = sidebarProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
          }
        };
        img.src = e.detail.profilePictureUrl;
      }
      
      // Store in localStorage for future use
      localStorage.setItem('mpmec_profile_picture', e.detail.profilePictureUrl);
    }
  });
</script> 