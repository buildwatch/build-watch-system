---
// LGU-IU: Implementing Office-Officer Topbar Component
// Theme Color: Professional Warm Orange (#F28C00)
---

<header class="relative z-50 flex items-center justify-between px-8 py-4 bg-gradient-to-r from-[#F28C00] via-[#E67E00] to-[#D2691E] text-white shadow-lg border-b border-white/10 backdrop-blur-sm">
  <div class="pointer-events-none absolute inset-0 bg-gradient-to-r from-white/5 via-transparent to-white/5 opacity-10"></div>
  <div class="flex items-center justify-between relative w-full">
    <!-- Left Section: Sidebar Toggle and Logo -->
    <div class="flex items-center space-x-6">
      <!-- Sidebar Toggle Button -->
      <button id="iu-implementing-sidebar-toggle" class="group p-2.5 rounded-xl bg-white/10 hover:bg-white/20 active:scale-95 transition-all duration-300 backdrop-blur-sm border border-white/20 shadow-lg hover:shadow-xl">
        <svg id="iu-implementing-sidebar-toggle-icon" class="w-6 h-6 text-white transition-all duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"/>
        </svg>
      </button>

      <!-- Logo -->
      <div class="flex items-center space-x-3">
        <div class="w-10 h-10 rounded-xl flex items-center justify-center shadow-lg overflow-hidden ring-1 ring-white/10">
          <img src="/build-watch-logo.png" alt="Build Watch Logo" class="w-full h-full object-contain" />
        </div>
        <div>
          <h1 class="text-lg font-bold text-white">Build Watch</h1>
          <p class="text-xs text-white/70">LGU-Internal Unit</p>
        </div>
      </div>
    </div>

    <!-- Center Section: Search Bar, Date/Time and Status -->
    <div class="flex items-center gap-6">
      <!-- Search Bar - Moved slightly left for better centering -->
      <div class="relative -ml-8" id="iu-search-wrapper">
        <input 
          id="iu-global-search"
          type="text" 
          placeholder="Search projects, reports, submissions..." 
          class="w-80 pl-10 pr-4 py-2.5 bg-white/10 border border-white/20 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-white/30 focus:border-transparent backdrop-blur-sm transition-all duration-300" 
          autocomplete="off"
        />
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg class="h-6 w-6 text-white" fill="currentColor" viewBox="0 0 24 24">
            <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
          </svg>
        </div>
      </div>
      
      <!-- Date and Time -->
      <div class="text-center">
        <div class="text-sm font-medium text-white" id="iu-current-time">Loading...</div>
        <div class="text-xs text-white/70">Philippine Standard Time</div>
      </div>
      
      <!-- System Status -->
      <div class="flex items-center gap-2 px-3 py-2 bg-white/10 rounded-lg backdrop-blur-sm border border-white/20">
        <span class="w-2 h-2 rounded-full bg-green-400 animate-pulse"></span>
        <span class="text-sm font-medium">System Operational</span>
      </div>
    </div>

    <!-- Right Section: Actions and User -->
    <div class="flex items-center gap-4">
      <!-- System Management Actions -->
      <div class="flex items-center gap-3">
        <!-- System Announcement Button -->
        <a href="/dashboard/iu-implementing-office/modules/announcements" title="System Announcements" aria-label="System Announcements" class="group relative p-2.5 text-white/80 hover:text-white hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu">
          <svg class="w-5 h-5 text-white transition-all duration-300 group-hover:scale-110 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5.882V19.24a1.76 1.76 0 01-3.417.592l-2.147-6.15M18 13a3 3 0 100-6M5.436 13.683A4.001 4.001 0 017 6h1.832c4.1 0 7.625-1.234 9.168-3v14c-1.543-1.766-5.067-3-9.168-3H7a3.988 3.988 0 01-1.564-.317z"></path>
          </svg>
          <!-- Enhanced hover glow effect -->
          <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
        </a>
        
        <!-- Messages (MPMEC Secretariat) Button -->
        <a href="/dashboard/iu-implementing-office/modules/message-center" title="Messages (MPMEC Secretariat)" aria-label="Messages (MPMEC Secretariat)" class="group relative p-2.5 text-white/80 hover:text-white hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu">
          <svg class="w-5 h-5 text-white transition-all duration-300 group-hover:scale-110 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
          </svg>
          <!-- Enhanced hover glow effect -->
          <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/20 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
        </a>

        <!-- System Health Button -->
        <a href="/dashboard/iu-implementing-office/modules/system-health" title="System Health" aria-label="System Health" class="group relative p-2.5 text-white/80 hover:text-white hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu">
          <svg class="w-5 h-5 text-white transition-all duration-300 group-hover:scale-110 group-hover:rotate-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
          </svg>
          <!-- Enhanced hover glow effect -->
          <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
        </a>
      </div>

      <!-- Notifications -->
      <div class="relative" id="iu-notification-container">
        <button class="group relative p-2.5 text-white/80 hover:text-white hover:bg-gradient-to-r hover:from-white/20 hover:to-gray-300/20 rounded-xl transition-all duration-300 ease-out focus:outline-none focus:ring-2 focus:ring-white/30 hover:scale-110 hover:shadow-lg hover:shadow-white/25 transform-gpu" id="iu-notification-btn">
          <svg class="w-6 h-6 transition-all duration-300 group-hover:scale-110 group-hover:rotate-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9"></path>
          </svg>
          <!-- Enhanced hover glow effect -->
          <div class="absolute inset-0 bg-gradient-to-r from-white/0 via-white/20 to-gray-300/0 rounded-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 blur-sm"></div>
          <span class="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center hidden group-hover:scale-110 transition-transform duration-200" id="iu-notification-badge">0</span>
        </button>
      </div>

      <!-- User Profile -->
      <div class="relative group" id="iu-user-dropdown-container">
        <button id="iu-profile-dropdown-btn" class="flex items-center space-x-3 p-2 rounded-xl hover:bg-white/10 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-white/20" title="Open profile menu" aria-haspopup="true" aria-expanded="false">
          <div class="w-10 h-10 rounded-xl overflow-hidden shadow-lg ring-1 ring-white/10">
            <img 
              id="iu-profile-picture"
              src="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Crect width='100' height='100' fill='%23D4AF37'/%3E%3Ctext x='50' y='50' font-family='Arial' font-size='40' font-weight='bold' text-anchor='middle' dy='.3em' fill='white'%3EIU%3C/text%3E%3C/svg%3E"
              alt="Implementing Office Officer"
              class="w-full h-full object-cover"
              onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
            />
            <div class="w-full h-full bg-gradient-to-br from-yellow-500 to-yellow-600 flex items-center justify-center" style="display: none;">
              <span id="iu-profile-initials" class="text-white font-bold text-sm">ME</span>
            </div>
          </div>
          <div class="text-left max-w-[200px]">
            <p class="text-sm font-medium text-white truncate" id="iu-user-name" title="Loading...">Loading...</p>
            <div class="flex items-center gap-1">
              <p class="text-xs text-white/80" id="iu-user-role">LGU-IU</p>
              <div class="flex items-center gap-1">
                <span class="w-1.5 h-1.5 bg-green-400 rounded-full animate-pulse"></span>
                <span class="text-xs text-green-300 font-medium">Active</span>
              </div>
            </div>
          </div>
          <svg class="w-4 h-4 text-white/60 group-hover:text-white transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>

        <!-- Enhanced LGU-IU Profile Dropdown Menu -->
        <div id="iu-profile-dropdown" class="absolute right-0 mt-3 w-72 bg-gradient-to-br from-[#F28C00] via-[#E67E00] to-[#D2691E] rounded-2xl shadow-2xl border border-white/10 opacity-0 invisible scale-95 transform transition-all duration-500 ease-out z-[9999] backdrop-blur-xl hidden">
          <!-- Header Section -->
          <div class="p-4 border-b border-white/10" style="background: linear-gradient(135deg, rgba(242, 140, 0, 0.15) 0%, rgba(230, 126, 0, 0.1) 100%);">
            <div class="flex items-center space-x-3">
              <div class="w-12 h-12 rounded-xl overflow-hidden ring-2 ring-white/10 shadow-lg">
                <img 
                  id="iu-dropdown-photo"
                  src="https://images.unsplash.com/photo-1560250097-0b93528c311a?w=400&h=400&fit=crop&crop=face&auto=format&q=80"
                  alt="Implementing Office Officer"
                  class="w-full h-full object-cover"
                  onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                />
                <div class="w-full h-full bg-gradient-to-br from-[#F28C00] to-[#E67E00] flex items-center justify-center" style="display: none;">
                  <span id="iu-dropdown-initials" class="text-white font-bold text-lg">ME</span>
                </div>
              </div>
              <div class="flex-1 min-w-0">
                <p id="iu-dropdown-name" class="text-sm font-semibold text-white truncate">Municipal Engineer Office</p>
                <p class="text-xs text-white/80 truncate">LGU-Internal Unit</p>
                <div class="flex items-center gap-2 mt-1">
                  <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
                  <span class="text-xs text-green-300 font-medium">Active</span>
                </div>
              </div>
            </div>
          </div>

          <!-- Menu Items -->
          <div class="py-2">
            <!-- Profile Section -->
            <div class="px-3 py-2">
              <a href="/dashboard/iu-implementing-office/modules/office-profile" class="group flex items-center px-3 py-3 text-sm text-white hover:bg-blue-500/10 hover:text-blue-300 rounded-xl transition-all duration-200 hover:scale-[1.02]">
                <div class="w-8 h-8 rounded-lg bg-blue-500/20 flex items-center justify-center mr-3 group-hover:bg-blue-500/30 transition-colors">
                  <svg class="w-4 h-4 text-blue-400 group-hover:text-blue-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                  </svg>
                </div>
                <div>
                  <span class="font-medium">My Profile</span>
                  <p class="text-xs text-white/70 group-hover:text-blue-300">View & edit profile</p>
                </div>
              </a>
            </div>

            <!-- Project Management Section -->
            <div class="px-3 py-2">
              <a href="/dashboard/iu-implementing-office/modules/project-management" class="group flex items-center px-3 py-3 text-sm text-white hover:bg-emerald-500/10 hover:text-emerald-300 rounded-xl transition-all duration-200 hover:scale-[1.02]">
                <div class="w-8 h-8 rounded-lg bg-emerald-500/20 flex items-center justify-center mr-3 group-hover:bg-emerald-500/30 transition-colors">
                  <svg class="w-4 h-4 text-emerald-400 group-hover:text-emerald-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                  </svg>
                </div>
                <div>
                  <span class="font-medium">My Projects</span>
                  <p class="text-xs text-white/70 group-hover:text-emerald-300">Manage projects</p>
                </div>
              </a>
            </div>

            <!-- Progress Timeline Section -->
            <div class="px-3 py-2">
              <a href="/dashboard/iu-implementing-office/modules/progress-timeline" class="group flex items-center px-3 py-3 text-sm text-white hover:bg-amber-500/10 hover:text-amber-300 rounded-xl transition-all duration-200 hover:scale-[1.02]">
                <div class="w-8 h-8 rounded-lg bg-amber-500/20 flex items-center justify-center mr-3 group-hover:bg-amber-500/30 transition-colors">
                  <svg class="w-4 h-4 text-amber-400 group-hover:text-amber-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                </div>
                <div>
                  <span class="font-medium">Progress Timeline</span>
                  <p class="text-xs text-white/70 group-hover:text-amber-300">Track progress</p>
                </div>
              </a>
            </div>

            <!-- Summary Module Section -->
            <div class="px-3 py-2">
              <a href="/dashboard/iu-implementing-office/modules/summary" class="group flex items-center px-3 py-3 text-sm text-white hover:bg-indigo-500/10 hover:text-indigo-300 rounded-xl transition-all duration-200 hover:scale-[1.02]">
                <div class="w-8 h-8 rounded-lg bg-indigo-500/20 flex items-center justify-center mr-3 group-hover:bg-indigo-500/30 transition-colors">
                  <svg class="w-4 h-4 text-indigo-400 group-hover:text-indigo-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                  </svg>
                </div>
                <div>
                  <span class="font-medium">Summary Module</span>
                  <p class="text-xs text-white/70 group-hover:text-indigo-300">View reports</p>
                </div>
              </a>
            </div>

            <!-- Divider -->
            <div class="mx-3 my-2 border-t border-white/10"></div>

            <!-- Logout Section -->
            <div class="px-3 py-2">
              <button id="iu-dropdown-logout-btn" class="group flex items-center w-full px-3 py-3 text-sm text-red-400 hover:bg-red-500/20 hover:text-red-300 rounded-xl transition-all duration-200 hover:scale-[1.02] text-left">
                <div class="w-8 h-8 rounded-lg bg-red-500/20 flex items-center justify-center mr-3 group-hover:bg-red-500/30 transition-colors">
                  <svg class="w-4 h-4 text-red-400 group-hover:text-red-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                  </svg>
                </div>
                <div>
                  <span class="font-medium">Sign Out</span>
                  <p class="text-xs text-white/70 group-hover:text-red-300">Secure logout</p>
                </div>
              </button>
            </div>
          </div>

          <!-- Footer -->
          <div class="px-4 py-3 border-t border-white/10" style="background: linear-gradient(135deg, rgba(212, 175, 55, 0.15) 0%, rgba(218, 165, 32, 0.1) 100%);">
            <div class="flex items-center justify-between text-xs text-white/70">
              <span>Session: Active</span>
              <span class="text-green-400">●</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</header>

        <!-- Enhanced LGU-IU Notification Panel -->
        <div class="fixed top-0 right-0 h-full w-[420px] bg-gradient-to-br from-[#F28C00]/50 via-[#E67E00]/70 to-[#D2691E]/50 shadow-2xl border-l border-[#F28C00]/30 z-[1200] backdrop-blur-xl transform translate-x-full transition-all duration-500 ease-out hidden" id="iu-notification-dropdown">
  <!-- Enhanced Header with LGU-IU Theme -->
  <div class="p-5 border-b border-[#F28C00]/15 bg-gradient-to-r from-[#F28C00]/50 via-[#E67E00]/70 to-[#D2691E]/50 backdrop-blur-md shadow-lg">
    <div class="flex items-center justify-between mb-4">
      <div class="flex items-center gap-3">
        <div class="w-10 h-10 rounded-xl bg-gradient-to-br from-[#F28C00] to-[#E67E00] flex items-center justify-center shadow-xl">
          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
        </div>
        <div>
          <h3 class="text-xl font-bold text-white mb-1">LGU-IU Notifications</h3>
          <p class="text-xs text-white/80 font-medium">Monitor project updates & implementation alerts</p>
        </div>
      </div>
      <button class="text-white/80 hover:text-white transition-all duration-200 hover:scale-110 p-2.5 rounded-lg hover:bg-white/10 hover:shadow-lg" id="iu-close-notifications" title="Close notifications">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    
    <!-- Enhanced Action Buttons with Better Hover Behavior -->
    <div class="flex items-center gap-3 mb-6">
      <button class="group flex items-center gap-3 text-sm font-semibold text-white bg-gradient-to-r from-[#F28C00] to-[#E67E00] hover:from-[#E67E00] hover:to-[#D2691E] transition-all duration-300 ease-out px-4 py-3 rounded-xl border-2 border-[#F28C00]/50 hover:border-[#F28C00]/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" id="iu-mark-all-read">
        <svg class="w-5 h-5 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
        </svg>
        Mark all read
      </button>
      <button class="group flex items-center gap-3 text-sm font-semibold text-white bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 transition-all duration-300 ease-out px-4 py-3 rounded-xl border-2 border-red-400/50 hover:border-red-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" id="iu-delete-all-read">
        <svg class="w-5 h-5 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
        Delete read
      </button>
      <button class="group flex items-center gap-3 text-sm font-semibold text-white bg-gradient-to-r from-red-600 to-red-700 hover:from-red-700 hover:to-red-800 transition-all duration-300 ease-out px-4 py-3 rounded-xl border-2 border-red-500/50 hover:border-red-500/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" id="iu-delete-all-notifications">
        <svg class="w-5 h-5 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
        </svg>
        Delete all
      </button>
    </div>
    
    <!-- Enhanced Minimalist Notification Stats Bar -->
    <div class="p-4 bg-gradient-to-r from-orange-500/8 via-orange-400/10 to-yellow-500/8 rounded-xl border border-orange-400/15 shadow-md">
            <div class="flex items-center justify-between text-xs">
              <div class="flex items-center gap-2">
                <span class="text-white font-medium">Total:</span>
                <span id="iu-notification-total" class="text-white font-bold text-base">0</span>
              </div>
              <div class="w-px h-5 bg-gradient-to-b from-orange-400/15 to-yellow-400/15"></div>
              <div class="flex items-center gap-2">
                <span class="text-white font-medium">Unread:</span>
                <span id="iu-notification-unread" class="text-white font-bold text-base">0</span>
              </div>
              <div class="w-px h-5 bg-gradient-to-b from-orange-400/15 to-yellow-400/15"></div>
              <div class="flex items-center gap-2">
                <span class="text-white font-medium">Read:</span>
                <span id="iu-notification-read" class="text-white font-bold text-base">0</span>
              </div>
            </div>
    </div>
  </div>
  
          <!-- Enhanced Notification List with Categories -->
          <div class="flex-1 overflow-y-auto custom-scrollbar bg-gradient-to-br from-orange-500/20 via-orange-400/30 to-yellow-500/20" id="iu-notification-list">
    <!-- Loading State -->
    <div class="p-6 text-center text-orange-200" id="iu-notification-loading">
      <div class="animate-pulse flex flex-col items-center justify-center">
        <div class="w-16 h-16 rounded-full bg-gradient-to-br from-orange-500/20 to-orange-600/20 flex items-center justify-center mb-4">
          <svg class="w-8 h-8 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
        </div>
        <span class="text-sm font-medium">Loading LGU-IU notifications...</span>
        <p class="text-xs text-orange-300 mt-1">Monitoring project updates & implementation alerts</p>
      </div>
    </div>
  </div>
  
          <!-- Enhanced Footer with LGU-IU Monitor Active - Maximized Space and Enhanced UI -->
          <div class="mt-auto p-4 border-t-2 border-orange-400/20 bg-gradient-to-r from-orange-500/50 via-orange-400/70 to-yellow-500/50 backdrop-blur-md shadow-2xl">
    <div class="flex items-center justify-between text-sm text-white font-semibold">
      <div class="flex items-center gap-3">
        <div class="w-3 h-3 bg-gradient-to-r from-green-400 to-emerald-500 rounded-full animate-pulse shadow-lg"></div>
        <span class="tracking-wide">LGU-IU Monitor Active</span>
      </div>
      <div class="flex items-center gap-2">
        <span class="text-orange-300 text-lg">●</span>
        <span class="text-xs text-orange-200 opacity-75">Live</span>
      </div>
    </div>
  </div>
</div>

<!-- Notification Overlay -->
<div id="iu-notification-overlay" class="fixed inset-0 bg-black/50 z-[1198] hidden"></div>

<script>
  import notificationService from '../services/notifications.js';
  
  // Make notification service available globally
  window.notificationService = notificationService;
  
  // Initial timestamp for SSR; client script keeps it live
  const currentTime = new Date().toLocaleString('en-PH', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit'
  });
  
  // Load user data and update topbar
  async function loadUserData() {
    try {
      const token = localStorage.getItem('token');
      const userData = localStorage.getItem('user');
      
      if (token && userData) {
        try {
          const user = JSON.parse(userData);
          updateUserDisplay(user);
        } catch (error) {
          console.error('Error parsing user data:', error);
          await fetchUserProfile();
        }
      } else {
        await fetchUserProfile();
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  }

  async function fetchUserProfile() {
    try {
      const response = await fetch('http://localhost:3000/api/auth/profile', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.user) {
          updateUserDisplay(data.user);
        }
      } else {
        console.error('Failed to fetch user profile');
        setFallbackValues();
      }
    } catch (error) {
      console.error('Error fetching user profile:', error);
      setFallbackValues();
    }
  }

  function setFallbackValues() {
    // Set fallback values if API fails
    const userNameElement = document.getElementById('iu-user-name');
    if (userNameElement) {
      userNameElement.textContent = 'M.E.O.';
    }
    
    const userRoleElement = document.getElementById('iu-user-role');
    if (userRoleElement) {
      userRoleElement.textContent = 'LGU-IU';
    }

    const profileInitialsElement = document.getElementById('iu-profile-initials');
    if (profileInitialsElement) {
      profileInitialsElement.textContent = 'ME';
    }
  }

  function updateUserDisplay(user) {
    // Update user name with smart abbreviation for long names
    const userNameElement = document.getElementById('iu-user-name');
    if (userNameElement) {
      const fullName = user.fullName || user.name || user.username || 'M.E.O.';
      
      // Create smart abbreviation for long names
      let displayName = fullName;
      if (fullName.length > 25) {
        // For very long names, create a smart abbreviation
        if (fullName.includes('Municipal Disaster And Risk Reduction Management Office')) {
          displayName = 'Municipal DRRM Office';
        } else if (fullName.includes('Municipal Engineer Office')) {
          displayName = 'Municipal Engineer Office';
        } else if (fullName.includes('Office')) {
          // General office abbreviation
          const words = fullName.split(' ');
          if (words.length > 3) {
            displayName = words.slice(0, 2).join(' ') + ' Office';
          }
        } else {
          // General truncation for other long names
          displayName = fullName.substring(0, 22) + '...';
        }
      }
      
      userNameElement.textContent = displayName;
      userNameElement.title = fullName; // Show full name on hover
    }
    
    // Update dropdown name
    const dropdownNameElement = document.getElementById('iu-dropdown-name');
    if (dropdownNameElement) {
      const fullName = user.fullName || user.name || user.username || 'Municipal Engineer Office';
      dropdownNameElement.textContent = fullName;
    }
    
    // Update user role - always show "LGU-IU"
    const userRoleElement = document.getElementById('iu-user-role');
    if (userRoleElement) {
      userRoleElement.textContent = 'LGU-IU';
    }

    // Update user status indicator
    const statusIndicator = document.querySelector('#iu-user-dropdown-container .w-1\\.5');
    if (statusIndicator) {
      const statusColor = user.status === 'active' ? 'bg-green-400' : 'bg-red-400';
      statusIndicator.className = `w-1.5 h-1.5 ${statusColor} rounded-full animate-pulse`;
    }

    // Update user initials
    const profileInitialsElement = document.getElementById('iu-profile-initials');
    if (profileInitialsElement) {
      const fullName = user.fullName || user.name || 'Municipal Engineer Office';
      const initials = fullName.split(' ')
        .map(name => name.charAt(0))
        .join('')
        .toUpperCase()
        .slice(0, 2);
      profileInitialsElement.textContent = initials || 'ME';
    }
    
    // Update dropdown initials
    const dropdownInitialsElement = document.getElementById('iu-dropdown-initials');
    if (dropdownInitialsElement) {
      const fullName = user.fullName || user.name || 'Municipal Engineer Office';
      const initials = fullName.split(' ')
        .map(name => name.charAt(0))
        .join('')
        .toUpperCase()
        .slice(0, 2);
      dropdownInitialsElement.textContent = initials || 'ME';
    }
  }

  // Handle logout
  function handleLogout() {
    // Wait for logoutModal to be available
    if (window.logoutModal) {
      window.logoutModal.show(() => {
        // Clear local storage
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        
        // Redirect to login
        window.location.href = '/login/lgu-pmt';
      });
    } else {
      // Wait a bit for the modal to initialize
      setTimeout(() => {
        if (window.logoutModal) {
          window.logoutModal.show(() => {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/login/lgu-pmt';
          });
        } else {
          // Fallback if modal is still not available
          if (confirm('Are you sure you want to logout?')) {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/login/lgu-pmt';
          }
        }
      }, 100);
    }
  }

  // Load profile pictures from server or localStorage for topbar
  async function loadIUTopbarProfilePictures() {
    try {
      // Get actual user ID from localStorage
      const userData = localStorage.getItem('user');
      let userId = 'IU-0001'; // Default fallback
      if (userData) {
        try {
          const user = JSON.parse(userData);
          userId = user.employeeId || user.username || user.id || user.userId || 'IU-0001';
        } catch (error) {
          console.warn('⚠️ Error parsing user data in IU topbar, using default userId');
        }
      }
      
      // First try to get from server
      console.log('IU Topbar: Fetching profile picture from server for userId:', userId);
      const response = await fetch(`http://localhost:3000/api/profile/picture/${userId}`);
      
      if (response.ok) {
        const result = await response.json();
        if (result.success && result.profilePictureUrl) {
          console.log('IU Topbar: Profile picture loaded from server:', result.profilePictureUrl);
          
          // Update main topbar profile picture
          const topbarProfilePic = document.getElementById('iu-profile-picture');
          if (topbarProfilePic) {
            topbarProfilePic.src = result.profilePictureUrl;
            // Hide fallback div if it exists
            const fallbackDiv = topbarProfilePic.nextElementSibling;
            if (fallbackDiv) {
              fallbackDiv.style.display = 'none';
              topbarProfilePic.style.display = 'block';
            }
          }
          
          // Store in localStorage for future use
          localStorage.setItem('iu_profile_picture', result.profilePictureUrl);
          return;
        }
      }
    } catch (error) {
      console.log('IU Topbar: Server fetch failed, trying localStorage:', error);
    }
    
    // Fallback to localStorage if server fails
    const storedUrl = localStorage.getItem('iu_profile_picture');
    if (storedUrl) {
      const topbarProfilePic = document.getElementById('iu-profile-picture');
      if (topbarProfilePic) {
        topbarProfilePic.src = storedUrl;
        // Hide fallback div if it exists
        const fallbackDiv = topbarProfilePic.nextElementSibling;
        if (fallbackDiv) {
          fallbackDiv.style.display = 'none';
          topbarProfilePic.style.display = 'block';
        }
      }
    }
  }

  // Listen for profile picture updates
  window.addEventListener('iuProfilePictureUpdated', function(e) {
    console.log('IU Topbar received iuProfilePictureUpdated event:', e.detail);
    console.log('IU Topbar: Updating profile pictures immediately with:', e.detail.profilePictureUrl);
    
    // Update immediately without calling loadIUTopbarProfilePictures
    if (e.detail.profilePictureUrl) {
      // Update main topbar profile picture
      const topbarProfilePic = document.getElementById('iu-profile-picture');
      if (topbarProfilePic) {
        console.log('IU Topbar: Setting main profile picture src to:', e.detail.profilePictureUrl);
        
        // Preload the image to prevent blinking
        const img = new Image();
        img.onload = function() {
          topbarProfilePic.src = e.detail.profilePictureUrl;
          topbarProfilePic.style.display = 'block';
          
          // Hide fallback div if it exists
          const fallbackDiv = topbarProfilePic.nextElementSibling;
          if (fallbackDiv) {
            fallbackDiv.style.display = 'none';
          }
        };
        img.src = e.detail.profilePictureUrl;
      }
      
      // Store in localStorage for future use
      localStorage.setItem('iu_profile_picture', e.detail.profilePictureUrl);
    }
  });

  // Make handleLogout available globally
  window.handleLogout = handleLogout;

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Load user data
    loadUserData();
    
    // Load profile pictures
    loadIUTopbarProfilePictures();
    
    // Initialize live clock
    initializeLiveClock();
    
    // Initialize user dropdown
    initializeUserDropdown();
    
    // Initialize notifications
    initializeNotifications();
    
    // Initialize sidebar toggle
    initializeSidebarToggle();
    
    // Initialize search functionality
    initializeIUSearch();
    
    // Initialize logout button
    initializeLogoutButton();
  });

  // Initialize live clock
  function initializeLiveClock() {
    const timeElement = document.getElementById('iu-current-time');
    if (timeElement) {
      // Set initial time
      timeElement.textContent = 'Loading...';
      
      function updateClock() {
        const now = new Date();
        const options = {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
          timeZone: 'Asia/Manila'
        };
        const timeString = now.toLocaleString('en-US', options);
        timeElement.textContent = timeString;
      }
      
      // Update immediately and then every minute
      updateClock();
      setInterval(updateClock, 60000);
    }
  }

  // Initialize logout button functionality
  function initializeLogoutButton() {
    const logoutBtn = document.getElementById('iu-dropdown-logout-btn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', function() {
        handleLogout();
      });
    }
  }

  // Enhanced LGU-IU Profile Dropdown functionality
  function initializeUserDropdown() {
    const profileBtn = document.getElementById('iu-profile-dropdown-btn');
    const profileDropdown = document.getElementById('iu-profile-dropdown');
    
    if (!profileBtn || !profileDropdown) return;
    
    // Click to toggle dropdown
    profileBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      const isVisible = !profileDropdown.classList.contains('hidden');
      
      if (isVisible) {
        hideIUProfileDropdown();
      } else {
        showIUProfileDropdown();
      }
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('#iu-user-dropdown-container')) {
        hideIUProfileDropdown();
      }
    });
    
    // Close dropdown on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        hideIUProfileDropdown();
      }
    });
  }

  // Show IU profile dropdown with smooth fade-in
  function showIUProfileDropdown() {
    const profileDropdown = document.getElementById('iu-profile-dropdown');
    const profileBtn = document.getElementById('iu-profile-dropdown-btn');
    
    if (!profileDropdown || !profileBtn) return;
    
    // First remove hidden class to make element visible
    profileDropdown.classList.remove('hidden');
    
    // Force a reflow to ensure the element is rendered
    profileDropdown.offsetHeight;
    
    // Add showing class for smooth entrance animation
    profileDropdown.classList.add('showing');
    
    profileBtn.setAttribute('aria-expanded', 'true');
    
    console.log('👤 LGU-IU profile dropdown shown with smooth animation');
  }

  // Hide IU profile dropdown with smooth fade-out
  function hideIUProfileDropdown() {
    const profileDropdown = document.getElementById('iu-profile-dropdown');
    const profileBtn = document.getElementById('iu-profile-dropdown-btn');
    
    if (!profileBtn || !profileDropdown) return;
    
    // Remove showing class and add hiding class for smooth exit animation
    profileDropdown.classList.remove('showing');
    profileDropdown.classList.add('hiding');
    
    profileBtn.setAttribute('aria-expanded', 'false');
    
    // Use setTimeout to ensure smooth animation before hiding
    setTimeout(() => {
      profileDropdown.classList.add('hidden');
      profileDropdown.classList.remove('hiding');
    }, 300);
    
    console.log('🙈 LGU-IU profile dropdown hidden with smooth animation');
  }

  // Notification functionality
  function initializeNotifications() {
    const notificationBtn = document.getElementById('iu-notification-btn');
    const notificationDropdown = document.getElementById('iu-notification-dropdown');
    const notificationOverlay = document.getElementById('iu-notification-overlay');
    const notificationBadge = document.getElementById('iu-notification-badge');
    const notificationList = document.getElementById('iu-notification-list');
    const markAllReadBtn = document.getElementById('iu-mark-all-read');
    const deleteAllReadBtn = document.getElementById('iu-delete-all-read');
    const deleteAllNotificationsBtn = document.getElementById('iu-delete-all-notifications');
    const closeNotificationsBtn = document.getElementById('iu-close-notifications');

    // Toggle notification panel
    notificationBtn.addEventListener('click', () => {
      console.log('🔔 Toggling IU notification panel');
      const isHidden = notificationDropdown.classList.contains('hidden');
      
      if (!isHidden) {
        // Close notification panel
        console.log('🙈 Closing IU notification panel');
        notificationDropdown.classList.add('hidden');
        notificationOverlay.classList.add('hidden');
      } else {
        // Open notification panel
        console.log('👁️ Opening IU notification panel');
        notificationDropdown.classList.remove('hidden');
        notificationOverlay.classList.remove('hidden');
        loadNotifications();
      }
    });

    // Close notification panel
    closeNotificationsBtn.addEventListener('click', () => {
      notificationDropdown.classList.add('hidden');
      notificationOverlay.classList.add('hidden');
    });

    // Close on overlay click
    notificationOverlay.addEventListener('click', () => {
      notificationDropdown.classList.add('hidden');
      notificationOverlay.classList.add('hidden');
    });

    // Mark all as read
    markAllReadBtn.addEventListener('click', async () => {
      try {
        await notificationService.markAllAsRead();
        updateNotificationBadge();
        loadNotifications();
      } catch (error) {
        console.error('Error marking all as read:', error);
      }
    });

    // Delete all read notifications
    deleteAllReadBtn.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete all read notifications? This action cannot be undone.')) {
        try {
          const data = await notificationService.getNotifications();
          const notifications = data.notifications.filter(n => n.isRead);
          
          let deletedCount = 0;
          for (const notification of notifications) {
            const success = await notificationService.deleteNotification(notification.id);
            if (success) deletedCount++;
          }
          
          if (deletedCount > 0) {
            updateNotificationBadge();
            loadNotifications();
          }
        } catch (error) {
          console.error('Error deleting read notifications:', error);
        }
      }
    });

    // Delete all notifications (both read and unread)
    deleteAllNotificationsBtn.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete ALL notifications? This action cannot be undone and will clear both read and unread notifications.')) {
        try {
          const data = await notificationService.getNotifications();
          const allNotifications = data.notifications || [];
          
          let deletedCount = 0;
          for (const notification of allNotifications) {
            const success = await notificationService.deleteNotification(notification.id);
            if (success) deletedCount++;
          }
          
          if (deletedCount > 0) {
            updateNotificationBadge();
            loadNotifications();
            console.log(`🗑️ Successfully deleted ${deletedCount} notifications`);
          }
        } catch (error) {
          console.error('Error deleting all notifications:', error);
          alert('Failed to delete all notifications. Please try again.');
        }
      }
    });

    // Load initial notification count
    updateNotificationBadge();

    // Subscribe to notification updates
    notificationService.onUpdate(({ count }) => {
      updateNotificationBadge(count);
    });
  }

  async function updateNotificationBadge(count) {
    const badge = document.getElementById('iu-notification-badge');
    const totalEl = document.getElementById('iu-notification-total');
    const unreadEl = document.getElementById('iu-notification-unread');
    const readEl = document.getElementById('iu-notification-read');
    
    if (!badge) return;
    
    try {
      const currentCount = count !== undefined ? count : await notificationService.getNotificationCount();
      const notifications = await notificationService.getNotifications();
      const allNotifications = notifications.notifications || [];
      const readCount = allNotifications.filter(n => n.isRead).length;
      const unreadCount = allNotifications.length - readCount;
      
      // Update badge
      if (currentCount > 0) {
        badge.textContent = currentCount > 99 ? '99+' : currentCount;
        badge.classList.remove('hidden');
      } else {
        badge.classList.add('hidden');
      }
      
      // Update stats
      if (totalEl) totalEl.textContent = allNotifications.length;
      if (unreadEl) unreadEl.textContent = unreadCount;
      if (readEl) readEl.textContent = readCount;
      
    } catch (error) {
      console.error('Error updating LGU-IU notification badge:', error);
      badge.classList.add('hidden');
    }
  }

  async function loadNotifications() {
    const notificationList = document.getElementById('iu-notification-list');
    const loadingEl = document.getElementById('iu-notification-loading');
    if (!notificationList) return;
    
    try {
      // Hide loading state
      if (loadingEl) loadingEl.style.display = 'none';
      
      const data = await notificationService.getNotifications();
      const notifications = data.notifications || [];

      if (notifications.length === 0) {
        notificationList.innerHTML = `
          <div class="p-8 text-center text-orange-200">
            <div class="w-20 h-20 rounded-full bg-gradient-to-br from-orange-500/10 to-orange-600/10 flex items-center justify-center mx-auto mb-4">
              <svg class="w-10 h-10 text-orange-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <h4 class="text-lg font-semibold text-white mb-2">All Caught Up!</h4>
            <p class="text-sm text-orange-200">No LGU-IU notifications at the moment</p>
            <p class="text-xs text-orange-300 mt-1">All projects are running smoothly</p>
          </div>
        `;
        return;
      }

      const notificationsHtml = notifications.map(notification => {
        const priorityColors = {
          high: 'from-red-500/20 to-red-600/20 border-red-500/30',
          medium: 'from-orange-500/20 to-yellow-500/20 border-orange-500/30',
          low: 'from-orange-400/20 to-yellow-400/20 border-orange-400/30',
          info: 'from-orange-400/20 to-yellow-400/20 border-orange-400/30'
        };
        
        const priorityColor = priorityColors[notification.priority] || priorityColors.info;
        const isUnread = !notification.isRead;
        
        return `
          <div class="p-4 hover:bg-white/5 transition-all duration-200 ${isUnread ? 'bg-gradient-to-r from-orange-500/15 via-orange-400/20 to-yellow-500/15' : ''} ${notification.actionUrl ? 'cursor-pointer' : ''}" 
               data-notification-id="${notification.id}"
               ${notification.actionUrl ? `onclick="handleNotificationClick('${notification.id}', '${notification.actionUrl}')"` : ''}>
            <div class="flex items-start gap-4">
              <!-- Priority Indicator -->
              <div class="flex-shrink-0">
                <div class="w-3 h-3 rounded-full ${isUnread ? 'bg-gradient-to-r from-green-400 to-green-500 animate-pulse' : 'bg-gray-500'}"></div>
              </div>
              
              <!-- Notification Icon -->
              <div class="flex-shrink-0">
                <div class="w-10 h-10 rounded-lg bg-gradient-to-br ${priorityColor} flex items-center justify-center">
                  ${notificationService.getNotificationIcon(notification.type, notification.category, notification.metadata)}
                </div>
              </div>
              
              <!-- Notification Content -->
              <div class="flex-1 min-w-0">
                <div class="flex items-start justify-between gap-2">
                  <div class="flex-1">
                    <h4 class="text-sm font-semibold text-white mb-1">${notification.title || 'LGU-IU Notification'}</h4>
                    <p class="text-sm text-orange-200 leading-relaxed">${notification.message || 'No message content'}</p>
                    
                    <!-- Action Buttons -->
                    ${notification.actionUrl ? `
                      <div class="flex items-center gap-2 mt-3">
                        <a href="${notification.actionUrl}" class="inline-flex items-center gap-2 text-xs text-orange-200 hover:text-white transition-colors px-3 py-1.5 rounded-lg border border-orange-400/30 hover:bg-gradient-to-r hover:from-orange-500/20 hover:to-yellow-500/20 hover:border-orange-400/50" onclick="markIUNotificationAsRead('${notification.id}')">
                          <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"></path>
                          </svg>
                          ${notification.actionText || 'View Details'}
                        </a>
                      </div>
                    ` : ''}
                  </div>
                  
                  <!-- Time and Actions -->
                  <div class="flex flex-col items-end gap-2">
                    <span class="text-xs text-orange-300 whitespace-nowrap">${notificationService.formatTime(notification.createdAt)}</span>
                    <div class="flex items-center gap-1">
                      ${!notification.isRead ? `
                        <button class="group flex items-center gap-2 text-sm font-semibold text-white bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 transition-all duration-300 ease-out px-3 py-2 rounded-xl border-2 border-green-400/50 hover:border-green-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" 
                                onclick="markIUNotificationAsRead('${notification.id}')" 
                                title="Mark as read">
                          <svg class="w-4 h-4 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                          </svg>
                        </button>
                      ` : ''}
                      <button class="group flex items-center gap-2 text-sm font-semibold text-white bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 transition-all duration-300 ease-out px-3 py-2 rounded-xl border-2 border-red-400/50 hover:border-red-400/70 hover:shadow-2xl shadow-lg hover:-translate-y-1 transform" 
                              onclick="deleteIUNotification('${notification.id}')" 
                              title="Delete notification">
                        <svg class="w-4 h-4 transition-transform duration-300 group-hover:scale-110" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                        </svg>
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
      }).join('');

      notificationList.innerHTML = notificationsHtml;
      
      // Add dividers between notifications
      const notificationItems = notificationList.querySelectorAll('[data-notification-id]');
      notificationItems.forEach((item, index) => {
        if (index < notificationItems.length - 1) {
          const divider = document.createElement('div');
          divider.className = 'mx-4 border-t border-orange-400/10';
          item.after(divider);
        }
      });
      
    } catch (error) {
      console.error('Error loading LGU-IU notifications:', error);
      notificationList.innerHTML = `
        <div class="p-6 text-center text-red-400">
          <div class="w-16 h-16 rounded-full bg-red-500/10 flex items-center justify-center mx-auto mb-4">
            <svg class="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.34 16.500c-.77.833.192 2.5 1.732 2.5z"></path>
            </svg>
          </div>
          <h4 class="text-sm font-semibold text-red-300 mb-2">Connection Error</h4>
          <p class="text-sm text-red-200">Failed to load LGU-IU notifications</p>
          <p class="text-xs text-red-300 mt-1">Check your connection and try again</p>
        </div>
      `;
    }
  }

  // Global function for marking notification as read
  window.markIUNotificationAsRead = async function(notificationId) {
    await notificationService.markAsRead(notificationId);
    updateNotificationBadge();
    loadNotifications();
  };

  // Global function for handling notification click (marks as read and redirects)
  window.handleNotificationClick = async function(notificationId, actionUrl) {
    try {
      // Mark as read first
      await notificationService.markAsRead(notificationId);
      updateNotificationBadge();
      
      // Close notification panel
      const notificationDropdown = document.getElementById('iu-notification-dropdown');
      const notificationOverlay = document.getElementById('iu-notification-overlay');
      if (notificationDropdown) notificationDropdown.classList.add('hidden');
      if (notificationOverlay) notificationOverlay.classList.add('hidden');
      
      // Redirect to the action URL
      window.location.href = actionUrl;
    } catch (error) {
      console.error('Error handling notification click:', error);
      // Still redirect even if marking as read fails
      window.location.href = actionUrl;
    }
  };

  // Global function for deleting notification
  window.deleteIUNotification = async function(notificationId) {
    if (confirm('Are you sure you want to delete this notification?')) {
      const success = await notificationService.deleteNotification(notificationId);
      if (success) {
        updateNotificationBadge();
        loadNotifications();
      } else {
        alert('Failed to delete notification. Please try again.');
      }
    }
  };

  // Initialize sidebar toggle functionality
  function initializeSidebarToggle() {
    const sidebarToggleBtn = document.getElementById('iu-implementing-sidebar-toggle');
    const sidebar = document.querySelector('aside');
    const toggleIcon = document.getElementById('iu-implementing-sidebar-toggle-icon');
    
    if (sidebarToggleBtn && sidebar && toggleIcon) {
      console.log('🔧 Initializing IU Implementing Office sidebar toggle functionality');
      
      // Icon paths
      const hamburgerIcon = "M4 6h16M4 12h16M4 18h16";
      const arrowRightIcon = "M9 5l7 7-7 7";
      
      function updateIcon(isCollapsed) {
        // Add smooth rotation animation
        toggleIcon.style.transform = 'rotate(180deg)';
        toggleIcon.style.transition = 'all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94)';
        
        setTimeout(() => {
          const iconPath = toggleIcon.querySelector('path');
          if (iconPath) {
            iconPath.setAttribute('d', isCollapsed ? arrowRightIcon : hamburgerIcon);
          }
          toggleIcon.style.transform = 'rotate(0deg)';
        }, 200);
      }
      
      // Check if sidebar is collapsed from localStorage
      const isCollapsed = localStorage.getItem('iu-implementing-sidebar-collapsed') === 'true';
      if (isCollapsed) {
        sidebar.classList.add('collapsed');
        updateIcon(true);
      }
      
      sidebarToggleBtn.addEventListener('click', () => {
        console.log('🔄 Toggling IU Implementing Office sidebar');
        
        const isCurrentlyCollapsed = sidebar.classList.contains('collapsed');
        
        if (isCurrentlyCollapsed) {
          // Expand sidebar
          sidebar.classList.remove('collapsed');
          localStorage.setItem('iu-implementing-sidebar-collapsed', 'false');
          updateIcon(false);
          console.log('📖 IU Implementing Office Sidebar expanded');
        } else {
          // Collapse sidebar
          sidebar.classList.add('collapsed');
          localStorage.setItem('iu-implementing-sidebar-collapsed', 'true');
          updateIcon(true);
          console.log('📕 IU Implementing Office Sidebar collapsed');
        }
      });
    } else {
      console.warn('❌ IU Implementing Office sidebar toggle elements not found');
    }
  }

  // Search functionality
  function initializeIUSearch() {
    const searchInput = document.getElementById('iu-global-search');
    if (!searchInput) return;

    searchInput.addEventListener('input', (e) => {
      const query = e.target.value.trim();
      if (query.length > 0) {
        console.log('🔍 LGU-IU Search query:', query);
        // Implement search functionality here
        // For now, just log the query
      }
    });

    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        const query = e.target.value.trim();
        if (query.length > 0) {
          console.log('🔍 LGU-IU Search submitted:', query);
          // Implement search submission here
        }
      }
    });
  }
</script>

<style>
  /* IU Implementing Office Sidebar Collapse Styles - ULTRA SMOOTH */
  :global(aside) {
    transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
    width: 256px; /* w-64 default width */
    min-width: 256px;
    flex-shrink: 0;
  }

  :global(aside.collapsed) {
    width: 80px; /* w-20 collapsed width */
    min-width: 80px;
    overflow-y: hidden; /* Prevent scrollbar */
  }

  /* Override the scrollable area in collapsed state */
  :global(aside.collapsed .relative.flex-1.overflow-y-auto) {
    overflow-y: visible; /* Remove scroll in collapsed state */
  }

  /* Hide text in collapsed sidebar - SMOOTH FADE */
  :global(aside.collapsed .nav-text) {
    opacity: 0;
    pointer-events: none;
    width: 0;
    overflow: hidden;
    transition: opacity 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), width 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* USE PROFILE PICTURE IN COLLAPSED STATE - CENTERED */
  :global(aside.collapsed .w-14.h-14) {
    display: block !important; /* Show profile photo */
    margin: 0 auto !important; /* Center it perfectly */
  }

  :global(aside.collapsed .flex.items-center.gap-4) {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    padding: 0.75rem 0 !important; /* Standard padding */
    margin: 0 !important; /* No margin */
    position: relative !important;
    height: auto !important; /* Auto height for profile picture */
  }

  /* Navigation section - remove container padding */
  :global(aside.collapsed .relative.flex-1.overflow-y-auto.py-4) {
    padding: 0.5rem 0 !important; /* Only vertical padding */
  }

  /* Remove nav container padding in collapsed state */
  :global(aside.collapsed nav.space-y-2.px-3) {
    padding: 0 !important; /* Remove all nav padding */
    margin: 0 !important;
  }

  /* Navigation items - position to match expanded sidebar exactly */
  :global(aside.collapsed .nav-item) {
    padding: 0.75rem 0 0.75rem 1.75rem !important; /* Match expanded position */
    margin: 0.75rem 0 !important; /* Increased vertical spacing */
    justify-content: flex-start !important; /* Align to left to match expanded state */
    position: relative;
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Logout section - make it visible and properly positioned */
  :global(aside.collapsed .relative.p-6:last-child) {
    padding: 0.5rem 0 1rem 0 !important; /* Vertical padding only */
    border-top: 1px solid rgba(255, 255, 255, 0.1) !important;
    margin-top: auto !important;
    display: block !important;
  }

  :global(aside.collapsed .relative.p-6:last-child button) {
    padding: 0.75rem 0 0.75rem 1.75rem !important; /* Match nav items positioning */
    margin: 0.75rem 0 !important;
    justify-content: flex-start !important; /* Align to left to match nav items */
    width: 100%;
    display: flex !important;
  }

  /* Hide logout text in collapsed state */
  :global(aside.collapsed .relative.p-6:last-child button span) {
    display: none !important;
  }

  :global(aside.collapsed .space-y-2) {
    gap: 0.75rem !important; /* Increased gap for better icon spacing */
  }

  /* Override space-y-2 utility in collapsed state with increased spacing */
  :global(aside.collapsed nav .space-y-2 > * + *) {
    margin-top: 0.75rem !important; /* Increased spacing for better visual separation */
  }

  /* Icons - position them to match expanded state */
  :global(aside.collapsed .nav-icon) {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 20px;
    height: 20px;
    margin: 0; /* No margin - let padding handle positioning */
  }

  /* Ensure all nav text is hidden in collapsed state */
  :global(aside.collapsed .nav-text) {
    display: none !important;
    opacity: 0 !important;
    width: 0 !important;
    overflow: hidden !important;
  }

  /* Add smooth transitions to all navigation items */
  :global(.nav-item) {
    transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  :global(.nav-text) {
    transition: opacity 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94), width 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  :global(.nav-icon) {
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Tooltip animations and styling */
  :global(aside.collapsed .nav-item:hover::after) {
    content: attr(data-tooltip);
    position: absolute;
    left: calc(100% + 12px);
    top: 50%;
    transform: translateY(-50%);
    background: rgba(0, 0, 0, 0.9);
    color: white;
    padding: 8px 12px;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    white-space: nowrap;
    z-index: 1000;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    opacity: 0;
    animation: tooltipFadeIn 0.2s ease forwards;
  }

  @keyframes tooltipFadeIn {
    from {
      opacity: 0;
      transform: translateY(-50%) translateX(-8px);
    }
    to {
      opacity: 1;
      transform: translateY(-50%) translateX(0);
    }
  }

  /* Tooltip arrow */
  :global(aside.collapsed .nav-item:hover::before) {
    content: '';
    position: absolute;
    left: calc(100% + 6px);
    top: 50%;
    transform: translateY(-50%);
    width: 0;
    height: 0;
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
    border-right: 6px solid rgba(0, 0, 0, 0.9);
    z-index: 999;
    opacity: 0;
    animation: tooltipFadeIn 0.2s ease forwards;
  }

  /* Notification panel styles */
  #iu-notification-dropdown {
    transform: translateX(100%);
    transition: all 0.5s ease-out;
    background: linear-gradient(135deg, #F28C00 0%, #E67E00 50%, #D2691E 100%);
  }

  #iu-notification-dropdown:not(.hidden) {
    transform: translateX(0);
  }

  /* Ensure notification panel is above other elements */
  #iu-notification-dropdown {
    z-index: 9999 !important;
  }

  /* Overlay styles */
  #iu-notification-overlay {
    z-index: 9998 !important;
  }

    /* Enhanced Notification Panel Animations */
  #iu-notification-dropdown:not(.hidden) {
    animation: slideInRight 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Custom scrollbar for notification panel */
  #iu-notification-dropdown .custom-scrollbar::-webkit-scrollbar {
    width: 6px;
  }

  #iu-notification-dropdown .custom-scrollbar::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
  }

  #iu-notification-dropdown .custom-scrollbar::-webkit-scrollbar-thumb {
    background: linear-gradient(180deg, #F28C00 0%, #E67E00 50%, #D2691E 100%);
    border-radius: 3px;
  }

  #iu-notification-dropdown .custom-scrollbar::-webkit-scrollbar-thumb:hover {
    background: linear-gradient(180deg, #E67E00 0%, #F28C00 50%, #E67E00 100%);
  }

  /* Firefox scrollbar for notification panel */
  #iu-notification-dropdown .custom-scrollbar {
    scrollbar-width: thin;
    scrollbar-color: #E67E00 rgba(255, 255, 255, 0.1);
  }

  /* Enhanced Notification Panel Layout and Scrolling */
  #iu-notification-dropdown {
    display: flex;
    flex-direction: column;
    height: 100vh;
  }

  #iu-notification-list {
    flex: 1;
    overflow-y: auto;
    min-height: 0;
    padding-bottom: 1rem;
  }

  /* Enhanced Footer Styling */
  #iu-notification-dropdown > div:last-child {
    flex-shrink: 0;
    background: linear-gradient(135deg, rgba(212, 175, 55, 0.8) 0%, rgba(218, 165, 32, 0.7) 100%);
    border-top: 2px solid rgba(212, 175, 55, 0.2);
    box-shadow: 0 -4px 20px rgba(212, 175, 55, 0.2);
  }

  /* Enhanced Action Button Hover Effects */
  #iu-mark-all-read,
  #iu-delete-all-read,
  #iu-delete-all-notifications {
    position: relative;
    overflow: hidden;
  }

  #iu-mark-all-read::before,
  #iu-delete-all-read::before,
  #iu-delete-all-notifications::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }

  #iu-mark-all-read:hover::before,
  #iu-delete-all-read:hover::before,
  #iu-delete-all-notifications:hover::before {
    left: 100%;
  }

  /* Enhanced Notification Item Hover Effects */
  #iu-notification-dropdown [data-notification-id] {
    border-bottom: 2px solid rgba(212, 175, 55, 0.1);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  #iu-notification-dropdown [data-notification-id]:hover {
    transform: translateX(6px);
    box-shadow: 0 6px 25px rgba(212, 175, 55, 0.1);
    background: rgba(212, 175, 55, 0.02);
    border-left: 4px solid #d4af37;
  }

  #iu-notification-dropdown [data-notification-id]:last-child {
    border-bottom: none;
  }

  /* Enhanced notification card styling */
  #iu-notification-dropdown [data-notification-id] {
    margin: 0 8px;
    border-radius: 8px;
    padding: 16px;
  }

  #iu-notification-dropdown [data-notification-id]:hover {
    margin-left: 4px;
    margin-right: 4px;
  }

  /* Priority Pulse Animation */
  @keyframes priorityPulse {
    0%, 100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.7;
      transform: scale(1.1);
    }
  }

  .animate-pulse {
    animation: priorityPulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  /* Slide In Right Animation */
  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Enhanced LGU-IU Profile Dropdown Styles */
  #iu-profile-dropdown {
    backdrop-filter: blur(20px);
    -webkit-backdrop-filter: blur(20px);
    box-shadow: 0 25px 50px -12px rgba(212, 175, 55, 0.25), 0 0 0 1px rgba(212, 175, 55, 0.1);
  }

  /* Subtle inner glow effect */
  #iu-profile-dropdown::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, rgba(212, 175, 55, 0.1) 0%, rgba(184, 134, 11, 0.05) 100%);
    border-radius: 1rem;
    pointer-events: none;
    z-index: -1;
  }

  /* Enhanced header and footer gradients */
  #iu-profile-dropdown .p-4.border-b {
    background: linear-gradient(135deg, rgba(212, 175, 55, 0.15) 0%, rgba(218, 165, 32, 0.1) 100%);
  }

  #iu-profile-dropdown .px-4.py-3.border-t {
    background: linear-gradient(135deg, rgba(212, 175, 55, 0.15) 0%, rgba(218, 165, 32, 0.1) 100%);
  }

  /* Menu item hover effects */
  #iu-profile-dropdown .group:hover {
    transform: translateX(4px);
    transition: transform 0.2s ease;
  }

  /* Smooth transitions for all elements */
  #iu-profile-dropdown * {
    transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  }

  /* Enhanced Topbar Button Hover Effects */
  .group:hover .group-hover\:scale-110 {
    transform: scale(1.1);
  }
  
  .group:hover .group-hover\:rotate-12 {
    transform: rotate(12deg);
  }
  
  .group:hover .group-hover\:rotate-6 {
    transform: rotate(6deg);
  }
  
  .group:hover .group-hover\:rotate-3 {
    transform: rotate(3deg);
  }
  
  /* Enhanced Profile Dropdown Animations */
  #iu-profile-dropdown {
    transform-origin: top right;
    will-change: opacity, transform, visibility;
  }

  /* Smooth entrance animation */
  #iu-profile-dropdown.showing {
    animation: dropdownFadeIn 0.5s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  /* Smooth exit animation */
  #iu-profile-dropdown.hiding {
    animation: dropdownFadeOut 0.3s cubic-bezier(0.4, 0, 0.2, 1) forwards;
  }

  @keyframes dropdownFadeIn {
    from {
      opacity: 0;
      transform: scale(0.95) translateY(-10px);
      visibility: hidden;
    }
    to {
      opacity: 1;
      transform: scale(1) translateY(0);
      visibility: visible;
    }
  }

  @keyframes dropdownFadeOut {
    from {
      opacity: 1;
      transform: scale(1) translateY(0);
      visibility: visible;
    }
    to {
      opacity: 0;
      transform: scale(0.95) translateY(-10px);
      visibility: hidden;
    }
  }
</style> 

