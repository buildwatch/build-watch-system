---
// LGU-IU: Implementing Office-Officer Topbar Component
// Theme Color: #F8C734 and #92751F
---

<header class="bg-white shadow-lg border-b border-gray-200 px-6 py-4">
  <div class="flex items-center justify-between">
    <!-- Left Section -->
    <div class="flex items-center gap-4">
      <!-- Page Title -->
      <div>
        <h1 class="text-2xl font-bold text-gray-800">LGU-IU Dashboard</h1>
        <p class="text-sm text-gray-600">Implementing Office - Project Management</p>
      </div>
    </div>

    <!-- Right Section -->
    <div class="flex items-center gap-4">
      <!-- Notifications -->
      <div class="relative" id="iu-notification-container">
        <button class="relative p-2 text-gray-600 hover:text-[#92751F] transition-colors" id="iu-notification-btn">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
          </svg>
          <span class="absolute -top-1 -right-1 w-4 h-4 bg-[#F8C734] text-white text-xs rounded-full flex items-center justify-center hidden" id="iu-notification-badge">0</span>
        </button>
        
        <!-- Notification Dropdown -->
        <div class="absolute right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50 hidden" id="iu-notification-dropdown">
          <div class="p-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
              <h3 class="text-lg font-semibold text-gray-800">Notifications</h3>
              <div class="flex items-center gap-2">
              <button class="text-sm text-[#92751F] hover:text-[#F8C734]" id="iu-mark-all-read">Mark all read</button>
                <button class="text-sm text-red-600 hover:text-red-700" id="iu-delete-all">Delete all</button>
              </div>
            </div>
          </div>
          <div class="max-h-96 overflow-y-auto" id="iu-notification-list">
            <div class="p-4 text-center text-gray-500">Loading notifications...</div>
          </div>
        </div>
      </div>

      <!-- Search -->
      <div class="relative">
        <input type="text" placeholder="Search projects..." class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-[#92751F] focus:border-transparent">
        <svg class="absolute left-3 top-2.5 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>

      <!-- User Profile -->
      <div class="flex items-center gap-3">
        <div class="text-right">
          <p class="text-sm font-medium text-gray-800" id="userName">Loading...</p>
          <p class="text-xs text-gray-600" id="userRole">Loading...</p>
          <p class="text-xs text-gray-500" id="userStatus">Status: <span class="text-green-600">Active</span></p>
        </div>
        <div class="w-10 h-10 bg-gradient-to-r from-[#F8C734] to-[#92751F] rounded-full flex items-center justify-center">
          <span class="text-white font-semibold text-sm" id="userInitials">U</span>
        </div>
        
        <!-- Logout Button -->
        <button id="logoutBtn" class="p-2 text-gray-600 hover:text-red-600 transition-colors" title="Logout">
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
          </svg>
        </button>
      </div>
    </div>
  </div>
</header>

<script>
  import notificationService from '../services/notifications.js';
  
  // Make notification service available globally
  window.notificationService = notificationService;
  
  // Load user data and update topbar
  async function loadUserData() {
    try {
      const token = localStorage.getItem('token');
      const userData = localStorage.getItem('user');
      
      if (token && userData) {
        try {
          const user = JSON.parse(userData);
          updateUserDisplay(user);
        } catch (error) {
          console.error('Error parsing user data:', error);
          await fetchUserProfile();
        }
      } else {
        await fetchUserProfile();
      }
    } catch (error) {
      console.error('Error loading user data:', error);
    }
  }

  async function fetchUserProfile() {
    try {
      const response = await fetch('http://localhost:3000/api/auth/profile', {
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('token')}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        if (data.success && data.user) {
          updateUserDisplay(data.user);
        }
      } else {
        console.error('Failed to fetch user profile');
      }
    } catch (error) {
      console.error('Error fetching user profile:', error);
    }
  }

  function updateUserDisplay(user) {
    // Update user name
    const userNameElement = document.getElementById('userName');
    if (userNameElement) {
      userNameElement.textContent = user.fullName || user.name || user.username || 'Unknown User';
    }
    
    // Update user role
    const userRoleElement = document.getElementById('userRole');
    if (userRoleElement) {
      userRoleElement.textContent = user.subRole || 'Implementing Office-Officer';
    }

    // Update user status
    const userStatusElement = document.getElementById('userStatus');
    if (userStatusElement) {
      const statusText = user.status === 'active' ? 'Active' : user.status || 'Active';
      const statusColor = user.status === 'active' ? 'text-green-600' : 'text-red-600';
      userStatusElement.innerHTML = `Status: <span class="${statusColor}">${statusText}</span>`;
    }

    // Update user initials
    const userInitialsElement = document.getElementById('userInitials');
    if (userInitialsElement) {
      const fullName = user.fullName || user.name || '';
      const initials = fullName.split(' ')
        .map(name => name.charAt(0))
        .join('')
        .toUpperCase()
        .slice(0, 2);
      userInitialsElement.textContent = initials || 'U';
    }
  }

  // Handle logout
  function handleLogout() {
    // Wait for logoutModal to be available
    if (window.logoutModal) {
      window.logoutModal.show(() => {
        // Clear local storage
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        
        // Redirect to login
        window.location.href = '/login/lgu-pmt';
      });
    } else {
      // Wait a bit for the modal to initialize
      setTimeout(() => {
        if (window.logoutModal) {
          window.logoutModal.show(() => {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/login/lgu-pmt';
          });
        } else {
          // Fallback if modal is still not available
          if (confirm('Are you sure you want to logout?')) {
            localStorage.removeItem('token');
            localStorage.removeItem('user');
            window.location.href = '/login/lgu-pmt';
          }
        }
      }, 100);
    }
  }

  // Make handleLogout available globally
  window.handleLogout = handleLogout;

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', function() {
    // Load user data
    loadUserData();
    
    // Add logout button event listener
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
      logoutBtn.addEventListener('click', handleLogout);
    }

    // Initialize notifications
    initializeNotifications();
  });

  // Notification functionality
  function initializeNotifications() {
    const notificationBtn = document.getElementById('iu-notification-btn');
    const notificationDropdown = document.getElementById('iu-notification-dropdown');
    const notificationBadge = document.getElementById('iu-notification-badge');
    const notificationList = document.getElementById('iu-notification-list');
    const markAllReadBtn = document.getElementById('iu-mark-all-read');
    const deleteAllBtn = document.getElementById('iu-delete-all');

    // Toggle dropdown
    notificationBtn.addEventListener('click', () => {
      notificationDropdown.classList.toggle('hidden');
      if (!notificationDropdown.classList.contains('hidden')) {
        loadNotifications();
      }
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
      if (!e.target.closest('#iu-notification-container')) {
        notificationDropdown.classList.add('hidden');
      }
    });

    // Mark all as read
    markAllReadBtn.addEventListener('click', async () => {
      await notificationService.markAllAsRead();
      updateNotificationBadge();
      loadNotifications();
    });

    // Delete all notifications
    deleteAllBtn.addEventListener('click', async () => {
      if (confirm('Are you sure you want to delete all notifications? This action cannot be undone.')) {
        const data = await notificationService.getNotifications();
        const notifications = data.notifications;
        
        let deletedCount = 0;
        for (const notification of notifications) {
          const success = await notificationService.deleteNotification(notification.id);
          if (success) deletedCount++;
        }
        
        if (deletedCount > 0) {
          updateNotificationBadge();
          loadNotifications();
        } else {
          alert('Failed to delete notifications. Please try again.');
        }
      }
    });

    // Load initial notification count
    updateNotificationBadge();

    // Subscribe to notification updates
    notificationService.onUpdate(({ count }) => {
      updateNotificationBadge(count);
    });
  }

  async function updateNotificationBadge(count) {
    const badge = document.getElementById('iu-notification-badge');
    const currentCount = count !== undefined ? count : await notificationService.getNotificationCount();
    
    if (currentCount > 0) {
      badge.textContent = currentCount > 99 ? '99+' : currentCount;
      badge.classList.remove('hidden');
    } else {
      badge.classList.add('hidden');
    }
  }

  async function loadNotifications() {
    const notificationList = document.getElementById('iu-notification-list');
    
    try {
      const data = await notificationService.getNotifications();
      const notifications = data.notifications;

      if (notifications.length === 0) {
        notificationList.innerHTML = `
          <div class="p-4 text-center text-gray-500">
            <svg class="w-12 h-12 mx-auto mb-2 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>
            <p>No notifications</p>
          </div>
        `;
        return;
      }

      const notificationsHtml = notifications.map(notification => `
        <div class="p-4 border-b border-gray-100 hover:bg-gray-50 transition-colors ${notification.isRead ? 'opacity-75' : ''}" 
             data-notification-id="${notification.id}">
          <div class="flex items-start gap-3">
            <div class="flex-shrink-0">
              ${notificationService.getNotificationIcon(notification.type)}
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-center justify-between">
                <p class="text-sm font-medium text-gray-900">${notification.title}</p>
                <span class="text-xs text-gray-500">${notificationService.formatTime(notification.createdAt)}</span>
              </div>
              <p class="text-sm text-gray-600 mt-1">${notification.message}</p>
              ${notification.actionUrl ? `
                <a href="${notification.actionUrl}" class="text-xs text-[#92751F] hover:text-[#F8C734] mt-2 inline-block">
                  ${notification.actionText || 'View Details'}
                </a>
              ` : ''}
            </div>
            <div class="flex items-center gap-1">
            ${!notification.isRead ? `
                <button class="text-gray-400 hover:text-gray-600 p-1 rounded" onclick="markIUNotificationAsRead('${notification.id}')" title="Mark as read">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
              </button>
            ` : ''}
              <button class="text-gray-400 hover:text-red-600 p-1 rounded transition-colors" onclick="deleteIUNotification('${notification.id}')" title="Delete notification">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                </svg>
              </button>
            </div>
          </div>
        </div>
      `).join('');

      notificationList.innerHTML = notificationsHtml;
    } catch (error) {
      console.error('Error loading notifications:', error);
      notificationList.innerHTML = `
        <div class="p-4 text-center text-red-500">
          <p>Failed to load notifications</p>
        </div>
      `;
    }
  }

  // Global function for marking notification as read
  window.markIUNotificationAsRead = async function(notificationId) {
    await notificationService.markAsRead(notificationId);
    updateNotificationBadge();
    loadNotifications();
  };

  // Global function for deleting notification
  window.deleteIUNotification = async function(notificationId) {
    if (confirm('Are you sure you want to delete this notification?')) {
      const success = await notificationService.deleteNotification(notificationId);
      if (success) {
        updateNotificationBadge();
        loadNotifications();
      } else {
        alert('Failed to delete notification. Please try again.');
      }
    }
  };
</script> 